import { useMemo } from 'react';
import { getGroupStyles, insertIntro, processMessages } from '../../utils';
import { useChatContext } from '../../../../context/ChatContext';
import { useComponentContext } from '../../../../context/ComponentContext';
export const useEnrichedMessages = (args) => {
    const { channel, disableDateSeparator, groupStyles, headerPosition, hideDeletedMessages, hideNewMessageSeparator, maxTimeBetweenGroupedMessages, messages, noGroupByUser, reviewProcessedMessage, } = args;
    const { client } = useChatContext('useEnrichedMessages');
    const { HeaderComponent } = useComponentContext('useEnrichedMessages');
    const lastRead = useMemo(() => channel.lastRead?.(), [channel]);
    const enableDateSeparator = !disableDateSeparator;
    let messagesWithDates = !enableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator
        ? messages
        : processMessages({
            enableDateSeparator,
            hideDeletedMessages,
            hideNewMessageSeparator,
            lastRead,
            messages,
            reviewProcessedMessage,
            userId: client.userID || '',
        });
    if (HeaderComponent) {
        messagesWithDates = insertIntro(messagesWithDates, headerPosition);
    }
    const groupStylesFn = groupStyles || getGroupStyles;
    const messageGroupStyles = useMemo(() => messagesWithDates.reduce((acc, message, i) => {
        const style = groupStylesFn(message, messagesWithDates[i - 1], messagesWithDates[i + 1], noGroupByUser, maxTimeBetweenGroupedMessages);
        if (style)
            acc[message.id] = style;
        return acc;
    }, {}), 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [maxTimeBetweenGroupedMessages, messagesWithDates, noGroupByUser]);
    return { messageGroupStyles, messages: messagesWithDates };
};
