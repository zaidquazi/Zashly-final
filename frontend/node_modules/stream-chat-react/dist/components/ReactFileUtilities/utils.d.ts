import type { FileLike, RecordedMediaType } from './types';
import type { ChangeEvent } from 'react';
export declare const useHandleFileChangeWrapper: (resetOnChange?: boolean, handler?: (files: Array<File>) => void) => ({ currentTarget }: ChangeEvent<HTMLInputElement>) => void;
export declare function dataTransferItemsHaveFiles(items?: DataTransferItem[]): boolean;
export declare function dataTransferItemsToFiles(items?: DataTransferItem[]): Promise<FileLike[]>;
export declare const isBlobButNotFile: (obj: unknown) => obj is Blob;
export declare const createFileFromBlobs: ({ blobsArray, fileName, mimeType, }: {
    blobsArray: Blob[];
    fileName: string;
    mimeType: string;
}) => File;
export declare const getExtensionFromMimeType: (mimeType: string) => string | null;
export declare const getRecordedMediaTypeFromMimeType: (mimeType: string) => RecordedMediaType | null;
export declare const readFileAsArrayBuffer: (file: File) => Promise<ArrayBuffer>;
export declare const generateFileName: (mimeType: string) => string;
