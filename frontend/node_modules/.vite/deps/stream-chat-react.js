import {
  ChannelSearchSource,
  FixedSizeQueueCache,
  LinkPreviewsManager,
  LiveLocationManager,
  MessageComposer,
  MessageSearchSource,
  SearchController,
  StateStore,
  StreamChat,
  UserSearchSource,
  VotingVisibility,
  formatMessage,
  isAudioAttachment,
  isFileAttachment,
  isImageAttachment,
  isLocalAttachment,
  isLocalAudioAttachment,
  isLocalFileAttachment,
  isLocalImageAttachment,
  isLocalUploadAttachment,
  isLocalVideoAttachment,
  isLocalVoiceRecordingAttachment,
  isScrapedContent,
  isSharedLocationResponse,
  isVideoAttachment,
  isVoiceRecordingAttachment,
  isVoteAnswer,
  localMessageToNewMessagePayload
} from "./chunk-RDQY6KDE.js";
import {
  __awaiter,
  clsx_default
} from "./chunk-DHBUYUGV.js";
import {
  require_react_dom
} from "./chunk-ODBTC7VH.js";
import {
  require_jsx_runtime
} from "./chunk-RTCDEPY5.js";
import {
  require_react
} from "./chunk-7EEON6PG.js";
import {
  __commonJS,
  __esm,
  __export,
  __publicField,
  __toCommonJS,
  __toESM
} from "./chunk-4B2QHNJT.js";

// node_modules/load-script/index.js
var require_load_script = __commonJS({
  "node_modules/load-script/index.js"(exports, module) {
    module.exports = function load(src, opts, cb) {
      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      cb = cb || function() {
      };
      script.type = opts.type || "text/javascript";
      script.charset = opts.charset || "utf8";
      script.async = "async" in opts ? !!opts.async : true;
      script.src = src;
      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }
      if (opts.text) {
        script.text = "" + opts.text;
      }
      var onend = "onload" in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);
      if (!script.onload) {
        stdOnEnd(script, cb);
      }
      head.appendChild(script);
    };
    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }
    function stdOnEnd(script, cb) {
      script.onload = function() {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function() {
        this.onerror = this.onload = null;
        cb(new Error("Failed to load " + this.src), script);
      };
    }
    function ieOnEnd(script, cb) {
      script.onreadystatechange = function() {
        if (this.readyState != "complete" && this.readyState != "loaded") return;
        this.onreadystatechange = null;
        cb(null, script);
      };
    }
  }
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options2) {
      return options2.clone !== false && options2.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options2) : value;
    }
    function defaultArrayMerge(target, source, options2) {
      return target.concat(source).map(function(element4) {
        return cloneUnlessOtherwiseSpecified(element4, options2);
      });
    }
    function getMergeFunction(key, options2) {
      if (!options2.customMerge) {
        return deepmerge;
      }
      var customMerge = options2.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_2) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options2) {
      var destination = {};
      if (options2.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options2);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options2.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options2)(target[key], source[key], options2);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options2);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options2) {
      options2 = options2 || {};
      options2.arrayMerge = options2.arrayMerge || defaultArrayMerge;
      options2.isMergeableObject = options2.isMergeableObject || isMergeableObject;
      options2.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options2);
      } else if (sourceIsArray) {
        return options2.arrayMerge(target, source, options2);
      } else {
        return mergeObject(target, source, options2);
      }
    }
    deepmerge.all = function deepmergeAll(array, options2) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options2);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module.exports = deepmerge_1;
  }
});

// node_modules/react-player/lib/utils.js
var require_utils = __commonJS({
  "node_modules/react-player/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseStartTime = parseStartTime;
    exports.parseEndTime = parseEndTime;
    exports.randomString = randomString;
    exports.queryString = queryString;
    exports.getSDK = getSDK;
    exports.getConfig = getConfig;
    exports.omit = omit2;
    exports.callPlayer = callPlayer;
    exports.isMediaStream = isMediaStream;
    exports.isBlobUrl = isBlobUrl;
    exports.supportsWebKitPresentationMode = supportsWebKitPresentationMode;
    var _loadScript = _interopRequireDefault(require_load_script());
    var _deepmerge = _interopRequireDefault(require_cjs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _slicedToArray3(arr, i2) {
      return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i2) || _unsupportedIterableToArray4(arr, i2) || _nonIterableRest3();
    }
    function _nonIterableRest3() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray4(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray4(o2, minLen);
    }
    function _arrayLikeToArray4(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    function _iterableToArrayLimit3(arr, i2) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e2 = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2) break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles3(arr) {
      if (Array.isArray(arr)) return arr;
    }
    var MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;
    var MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;
    var MATCH_START_STAMP = /(\d+)(h|m|s)/g;
    var MATCH_NUMERIC = /^\d+$/;
    function parseTimeParam(url, pattern) {
      if (url instanceof Array) {
        return void 0;
      }
      var match = url.match(pattern);
      if (match) {
        var stamp = match[1];
        if (stamp.match(MATCH_START_STAMP)) {
          return parseTimeString(stamp);
        }
        if (MATCH_NUMERIC.test(stamp)) {
          return parseInt(stamp);
        }
      }
      return void 0;
    }
    function parseTimeString(stamp) {
      var seconds = 0;
      var array = MATCH_START_STAMP.exec(stamp);
      while (array !== null) {
        var _array = array, _array2 = _slicedToArray3(_array, 3), count = _array2[1], period = _array2[2];
        if (period === "h") seconds += parseInt(count, 10) * 60 * 60;
        if (period === "m") seconds += parseInt(count, 10) * 60;
        if (period === "s") seconds += parseInt(count, 10);
        array = MATCH_START_STAMP.exec(stamp);
      }
      return seconds;
    }
    function parseStartTime(url) {
      return parseTimeParam(url, MATCH_START_QUERY);
    }
    function parseEndTime(url) {
      return parseTimeParam(url, MATCH_END_QUERY);
    }
    function randomString() {
      return Math.random().toString(36).substr(2, 5);
    }
    function queryString(object) {
      return Object.keys(object).map(function(key) {
        return "".concat(key, "=").concat(object[key]);
      }).join("&");
    }
    function getGlobal(key) {
      if (window[key]) {
        return window[key];
      }
      if (window.exports && window.exports[key]) {
        return window.exports[key];
      }
      if (window.module && window.module.exports && window.module.exports[key]) {
        return window.module.exports[key];
      }
      return null;
    }
    var requests = {};
    function getSDK(url, sdkGlobal) {
      var sdkReady = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var isLoaded = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : function() {
        return true;
      };
      var fetchScript = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : _loadScript["default"];
      var existingGlobal = getGlobal(sdkGlobal);
      if (existingGlobal && isLoaded(existingGlobal)) {
        return Promise.resolve(existingGlobal);
      }
      return new Promise(function(resolve, reject) {
        if (requests[url]) {
          requests[url].push({
            resolve,
            reject
          });
          return;
        }
        requests[url] = [{
          resolve,
          reject
        }];
        var onLoaded = function onLoaded2(sdk) {
          requests[url].forEach(function(request) {
            return request.resolve(sdk);
          });
        };
        if (sdkReady) {
          var previousOnReady = window[sdkReady];
          window[sdkReady] = function() {
            if (previousOnReady) previousOnReady();
            onLoaded(getGlobal(sdkGlobal));
          };
        }
        fetchScript(url, function(err) {
          if (err) {
            requests[url].forEach(function(request) {
              return request.reject(err);
            });
            requests[url] = null;
          } else if (!sdkReady) {
            onLoaded(getGlobal(sdkGlobal));
          }
        });
      });
    }
    function getConfig(props, defaultProps2) {
      return (0, _deepmerge["default"])(defaultProps2.config, props.config);
    }
    function omit2(object) {
      var _ref;
      for (var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        arrays[_key - 1] = arguments[_key];
      }
      var omitKeys = (_ref = []).concat.apply(_ref, arrays);
      var output = {};
      var keys3 = Object.keys(object);
      for (var _i2 = 0, _keys = keys3; _i2 < _keys.length; _i2++) {
        var key = _keys[_i2];
        if (omitKeys.indexOf(key) === -1) {
          output[key] = object[key];
        }
      }
      return output;
    }
    function callPlayer(method) {
      var _this$player;
      if (!this.player || !this.player[method]) {
        var message = "ReactPlayer: ".concat(this.constructor.displayName, " player could not call %c").concat(method, "%c – ");
        if (!this.player) {
          message += "The player was not available";
        } else if (!this.player[method]) {
          message += "The method was not available";
        }
        console.warn(message, "font-weight: bold", "");
        return null;
      }
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return (_this$player = this.player)[method].apply(_this$player, args);
    }
    function isMediaStream(url) {
      return typeof window !== "undefined" && typeof window.MediaStream !== "undefined" && url instanceof window.MediaStream;
    }
    function isBlobUrl(url) {
      return /^blob:/.test(url);
    }
    function supportsWebKitPresentationMode() {
      var video = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document.createElement("video");
      var notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;
      return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === "function" && notMobile;
    }
  }
});

// node_modules/react-player/lib/patterns.js
var require_patterns = __commonJS({
  "node_modules/react-player/lib/patterns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.canPlay = exports.FLV_EXTENSIONS = exports.DASH_EXTENSIONS = exports.HLS_EXTENSIONS = exports.VIDEO_EXTENSIONS = exports.AUDIO_EXTENSIONS = exports.MATCH_URL_KALTURA = exports.MATCH_URL_VIDYARD = exports.MATCH_URL_MIXCLOUD = exports.MATCH_URL_DAILYMOTION = exports.MATCH_URL_TWITCH_CHANNEL = exports.MATCH_URL_TWITCH_VIDEO = exports.MATCH_URL_WISTIA = exports.MATCH_URL_STREAMABLE = exports.MATCH_URL_FACEBOOK_WATCH = exports.MATCH_URL_FACEBOOK = exports.MATCH_URL_VIMEO = exports.MATCH_URL_SOUNDCLOUD = exports.MATCH_URL_YOUTUBE = void 0;
    var _utils = require_utils();
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it2;
      if (typeof Symbol === "undefined" || o2[Symbol.iterator] == null) {
        if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray4(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it2) o2 = it2;
          var i2 = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i2 >= o2.length) return { done: true };
            return { done: false, value: o2[i2++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s2() {
        it2 = o2[Symbol.iterator]();
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it2["return"] != null) it2["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray4(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray4(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray4(o2, minLen);
    }
    function _arrayLikeToArray4(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var MATCH_URL_YOUTUBE = /(?:youtu\.be\/|youtube(?:-nocookie)?\.com\/(?:embed\/|v\/|watch\/|watch\?v=|watch\?.+&v=|shorts\/))((\w|-){11})|youtube\.com\/playlist\?list=|youtube\.com\/user\//;
    exports.MATCH_URL_YOUTUBE = MATCH_URL_YOUTUBE;
    var MATCH_URL_SOUNDCLOUD = /(?:soundcloud\.com|snd\.sc)\/[^.]+$/;
    exports.MATCH_URL_SOUNDCLOUD = MATCH_URL_SOUNDCLOUD;
    var MATCH_URL_VIMEO = /vimeo\.com\/(?!progressive_redirect).+/;
    exports.MATCH_URL_VIMEO = MATCH_URL_VIMEO;
    var MATCH_URL_FACEBOOK = /^https?:\/\/(www\.)?facebook\.com.*\/(video(s)?|watch|story)(\.php?|\/).+$/;
    exports.MATCH_URL_FACEBOOK = MATCH_URL_FACEBOOK;
    var MATCH_URL_FACEBOOK_WATCH = /^https?:\/\/fb\.watch\/.+$/;
    exports.MATCH_URL_FACEBOOK_WATCH = MATCH_URL_FACEBOOK_WATCH;
    var MATCH_URL_STREAMABLE = /streamable\.com\/([a-z0-9]+)$/;
    exports.MATCH_URL_STREAMABLE = MATCH_URL_STREAMABLE;
    var MATCH_URL_WISTIA = /(?:wistia\.(?:com|net)|wi\.st)\/(?:medias|embed)\/(?:iframe\/)?(.*)$/;
    exports.MATCH_URL_WISTIA = MATCH_URL_WISTIA;
    var MATCH_URL_TWITCH_VIDEO = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/;
    exports.MATCH_URL_TWITCH_VIDEO = MATCH_URL_TWITCH_VIDEO;
    var MATCH_URL_TWITCH_CHANNEL = /(?:www\.|go\.)?twitch\.tv\/([a-zA-Z0-9_]+)($|\?)/;
    exports.MATCH_URL_TWITCH_CHANNEL = MATCH_URL_TWITCH_CHANNEL;
    var MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/;
    exports.MATCH_URL_DAILYMOTION = MATCH_URL_DAILYMOTION;
    var MATCH_URL_MIXCLOUD = /mixcloud\.com\/([^/]+\/[^/]+)/;
    exports.MATCH_URL_MIXCLOUD = MATCH_URL_MIXCLOUD;
    var MATCH_URL_VIDYARD = /vidyard.com\/(?:watch\/)?([a-zA-Z0-9-_]+)/;
    exports.MATCH_URL_VIDYARD = MATCH_URL_VIDYARD;
    var MATCH_URL_KALTURA = /^https?:\/\/[a-zA-Z]+\.kaltura.(com|org)\/p\/([0-9]+)\/sp\/([0-9]+)00\/embedIframeJs\/uiconf_id\/([0-9]+)\/partner_id\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;
    exports.MATCH_URL_KALTURA = MATCH_URL_KALTURA;
    var AUDIO_EXTENSIONS = /\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
    exports.AUDIO_EXTENSIONS = AUDIO_EXTENSIONS;
    var VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\d+]+)?($|\?)/i;
    exports.VIDEO_EXTENSIONS = VIDEO_EXTENSIONS;
    var HLS_EXTENSIONS = /\.(m3u8)($|\?)/i;
    exports.HLS_EXTENSIONS = HLS_EXTENSIONS;
    var DASH_EXTENSIONS = /\.(mpd)($|\?)/i;
    exports.DASH_EXTENSIONS = DASH_EXTENSIONS;
    var FLV_EXTENSIONS = /\.(flv)($|\?)/i;
    exports.FLV_EXTENSIONS = FLV_EXTENSIONS;
    var canPlayFile = function canPlayFile2(url) {
      if (url instanceof Array) {
        var _iterator = _createForOfIteratorHelper(url), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var item = _step.value;
            if (typeof item === "string" && canPlayFile2(item)) {
              return true;
            }
            if (canPlayFile2(item.src)) {
              return true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return false;
      }
      if ((0, _utils.isMediaStream)(url) || (0, _utils.isBlobUrl)(url)) {
        return true;
      }
      return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);
    };
    var canPlay = {
      youtube: function youtube(url) {
        if (url instanceof Array) {
          return url.every(function(item) {
            return MATCH_URL_YOUTUBE.test(item);
          });
        }
        return MATCH_URL_YOUTUBE.test(url);
      },
      soundcloud: function soundcloud(url) {
        return MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url);
      },
      vimeo: function vimeo(url) {
        return MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url);
      },
      facebook: function facebook(url) {
        return MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url);
      },
      streamable: function streamable(url) {
        return MATCH_URL_STREAMABLE.test(url);
      },
      wistia: function wistia(url) {
        return MATCH_URL_WISTIA.test(url);
      },
      twitch: function twitch(url) {
        return MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url);
      },
      dailymotion: function dailymotion(url) {
        return MATCH_URL_DAILYMOTION.test(url);
      },
      mixcloud: function mixcloud(url) {
        return MATCH_URL_MIXCLOUD.test(url);
      },
      vidyard: function vidyard(url) {
        return MATCH_URL_VIDYARD.test(url);
      },
      kaltura: function kaltura(url) {
        return MATCH_URL_KALTURA.test(url);
      },
      file: canPlayFile
    };
    exports.canPlay = canPlay;
  }
});

// node_modules/react-player/lib/players/YouTube.js
var require_YouTube = __commonJS({
  "node_modules/react-player/lib/players/YouTube.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _slicedToArray3(arr, i2) {
      return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i2) || _unsupportedIterableToArray4(arr, i2) || _nonIterableRest3();
    }
    function _nonIterableRest3() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray4(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray4(o2, minLen);
    }
    function _arrayLikeToArray4(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    function _iterableToArrayLimit3(arr, i2) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e2 = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2) break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles3(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://www.youtube.com/iframe_api";
    var SDK_GLOBAL = "YT";
    var SDK_GLOBAL_READY = "onYouTubeIframeAPIReady";
    var MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;
    var MATCH_USER_UPLOADS = /user\/([a-zA-Z0-9_-]+)\/?/;
    var MATCH_NOCOOKIE = /youtube-nocookie\.com/;
    var NOCOOKIE_HOST = "https://www.youtube-nocookie.com";
    var YouTube = function(_Component) {
      _inherits(YouTube2, _Component);
      var _super = _createSuper(YouTube2);
      function YouTube2() {
        var _this;
        _classCallCheck(this, YouTube2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "parsePlaylist", function(url) {
          if (url instanceof Array) {
            return {
              listType: "playlist",
              playlist: url.map(_this.getID).join(",")
            };
          }
          if (MATCH_PLAYLIST.test(url)) {
            var _url$match = url.match(MATCH_PLAYLIST), _url$match2 = _slicedToArray3(_url$match, 2), playlistId = _url$match2[1];
            return {
              listType: "playlist",
              list: playlistId.replace(/^UC/, "UU")
            };
          }
          if (MATCH_USER_UPLOADS.test(url)) {
            var _url$match3 = url.match(MATCH_USER_UPLOADS), _url$match4 = _slicedToArray3(_url$match3, 2), username = _url$match4[1];
            return {
              listType: "user_uploads",
              list: username
            };
          }
          return {};
        });
        _defineProperty3(_assertThisInitialized(_this), "onStateChange", function(event) {
          var data = event.data;
          var _this$props = _this.props, onPlay = _this$props.onPlay, onPause = _this$props.onPause, onBuffer = _this$props.onBuffer, onBufferEnd = _this$props.onBufferEnd, onEnded = _this$props.onEnded, onReady = _this$props.onReady, loop = _this$props.loop, _this$props$config = _this$props.config, playerVars = _this$props$config.playerVars, onUnstarted = _this$props$config.onUnstarted;
          var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState, UNSTARTED = _window$SDK_GLOBAL$Pl.UNSTARTED, PLAYING = _window$SDK_GLOBAL$Pl.PLAYING, PAUSED = _window$SDK_GLOBAL$Pl.PAUSED, BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING, ENDED = _window$SDK_GLOBAL$Pl.ENDED, CUED = _window$SDK_GLOBAL$Pl.CUED;
          if (data === UNSTARTED) onUnstarted();
          if (data === PLAYING) {
            onPlay();
            onBufferEnd();
          }
          if (data === PAUSED) onPause();
          if (data === BUFFERING) onBuffer();
          if (data === ENDED) {
            var isPlaylist = !!_this.callPlayer("getPlaylist");
            if (loop && !isPlaylist) {
              if (playerVars.start) {
                _this.seekTo(playerVars.start);
              } else {
                _this.play();
              }
            }
            onEnded();
          }
          if (data === CUED) onReady();
        });
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          _this.callPlayer("unMute");
        });
        _defineProperty3(_assertThisInitialized(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass(YouTube2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "getID",
        value: function getID(url) {
          if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {
            return null;
          }
          return url.match(_patterns.MATCH_URL_YOUTUBE)[1];
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          var _this$props2 = this.props, playing = _this$props2.playing, muted = _this$props2.muted, playsinline = _this$props2.playsinline, controls = _this$props2.controls, loop = _this$props2.loop, config = _this$props2.config, _onError = _this$props2.onError;
          var playerVars = config.playerVars, embedOptions = config.embedOptions;
          var id3 = this.getID(url);
          if (isReady) {
            if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {
              this.player.loadPlaylist(this.parsePlaylist(url));
              return;
            }
            this.player.cueVideoById({
              videoId: id3,
              startSeconds: (0, _utils.parseStartTime)(url) || playerVars.start,
              endSeconds: (0, _utils.parseEndTime)(url) || playerVars.end
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(YT) {
            return YT.loaded;
          }).then(function(YT) {
            if (!_this2.container) return;
            _this2.player = new YT.Player(_this2.container, _objectSpread3({
              width: "100%",
              height: "100%",
              videoId: id3,
              playerVars: _objectSpread3(_objectSpread3({
                autoplay: playing ? 1 : 0,
                mute: muted ? 1 : 0,
                controls: controls ? 1 : 0,
                start: (0, _utils.parseStartTime)(url),
                end: (0, _utils.parseEndTime)(url),
                origin: window.location.origin,
                playsinline: playsinline ? 1 : 0
              }, _this2.parsePlaylist(url)), playerVars),
              events: {
                onReady: function onReady() {
                  if (loop) {
                    _this2.player.setLoop(true);
                  }
                  _this2.props.onReady();
                },
                onPlaybackRateChange: function onPlaybackRateChange(event) {
                  return _this2.props.onPlaybackRateChange(event.data);
                },
                onStateChange: _this2.onStateChange,
                onError: function onError2(event) {
                  return _onError(event.data);
                }
              },
              host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : void 0
            }, embedOptions));
          }, _onError);
          if (embedOptions.events) {
            console.warn("Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause");
          }
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("playVideo");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pauseVideo");
        }
      }, {
        key: "stop",
        value: function stop() {
          if (!document.body.contains(this.callPlayer("getIframe"))) return;
          this.callPlayer("stopVideo");
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          this.callPlayer("seekTo", amount);
          if (!this.props.playing) {
            this.pause();
          }
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackRate", rate);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.callPlayer("getVideoLoadedFraction") * this.getDuration();
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("div", {
            style
          }, _react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);
      return YouTube2;
    }(_react.Component);
    exports["default"] = YouTube;
    _defineProperty3(YouTube, "displayName", "YouTube");
    _defineProperty3(YouTube, "canPlay", _patterns.canPlay.youtube);
  }
});

// node_modules/react-player/lib/players/SoundCloud.js
var require_SoundCloud = __commonJS({
  "node_modules/react-player/lib/players/SoundCloud.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://w.soundcloud.com/player/api.js";
    var SDK_GLOBAL = "SC";
    var SoundCloud = function(_Component) {
      _inherits(SoundCloud2, _Component);
      var _super = _createSuper(SoundCloud2);
      function SoundCloud2() {
        var _this;
        _classCallCheck(this, SoundCloud2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "duration", null);
        _defineProperty3(_assertThisInitialized(_this), "currentTime", null);
        _defineProperty3(_assertThisInitialized(_this), "fractionLoaded", null);
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.setVolume(0);
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });
        _defineProperty3(_assertThisInitialized(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass(SoundCloud2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(SC) {
            if (!_this2.iframe) return;
            var _SC$Widget$Events = SC.Widget.Events, PLAY = _SC$Widget$Events.PLAY, PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS, PAUSE = _SC$Widget$Events.PAUSE, FINISH = _SC$Widget$Events.FINISH, ERROR2 = _SC$Widget$Events.ERROR;
            if (!isReady) {
              _this2.player = SC.Widget(_this2.iframe);
              _this2.player.bind(PLAY, _this2.props.onPlay);
              _this2.player.bind(PAUSE, function() {
                var remaining = _this2.duration - _this2.currentTime;
                if (remaining < 0.05) {
                  return;
                }
                _this2.props.onPause();
              });
              _this2.player.bind(PLAY_PROGRESS, function(e) {
                _this2.currentTime = e.currentPosition / 1e3;
                _this2.fractionLoaded = e.loadedProgress;
              });
              _this2.player.bind(FINISH, function() {
                return _this2.props.onEnded();
              });
              _this2.player.bind(ERROR2, function(e) {
                return _this2.props.onError(e);
              });
            }
            _this2.player.load(url, _objectSpread3(_objectSpread3({}, _this2.props.config.options), {}, {
              callback: function callback() {
                _this2.player.getDuration(function(duration2) {
                  _this2.duration = duration2 / 1e3;
                  _this2.props.onReady();
                });
              }
            }));
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seekTo", seconds * 1e3);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.fractionLoaded * this.duration;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://w.soundcloud.com/player/?url=".concat(encodeURIComponent(this.props.url)),
            style,
            frameBorder: 0,
            allow: "autoplay"
          });
        }
      }]);
      return SoundCloud2;
    }(_react.Component);
    exports["default"] = SoundCloud;
    _defineProperty3(SoundCloud, "displayName", "SoundCloud");
    _defineProperty3(SoundCloud, "canPlay", _patterns.canPlay.soundcloud);
    _defineProperty3(SoundCloud, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Vimeo.js
var require_Vimeo = __commonJS({
  "node_modules/react-player/lib/players/Vimeo.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://player.vimeo.com/api/player.js";
    var SDK_GLOBAL = "Vimeo";
    var Vimeo = function(_Component) {
      _inherits(Vimeo2, _Component);
      var _super = _createSuper(Vimeo2);
      function Vimeo2() {
        var _this;
        _classCallCheck(this, Vimeo2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "duration", null);
        _defineProperty3(_assertThisInitialized(_this), "currentTime", null);
        _defineProperty3(_assertThisInitialized(_this), "secondsLoaded", null);
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.setVolume(0);
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });
        _defineProperty3(_assertThisInitialized(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass(Vimeo2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          this.duration = null;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Vimeo3) {
            if (!_this2.container) return;
            var _this2$props$config = _this2.props.config, playerOptions = _this2$props$config.playerOptions, title = _this2$props$config.title;
            _this2.player = new Vimeo3.Player(_this2.container, _objectSpread3({
              url,
              autoplay: _this2.props.playing,
              muted: _this2.props.muted,
              loop: _this2.props.loop,
              playsinline: _this2.props.playsinline,
              controls: _this2.props.controls
            }, playerOptions));
            _this2.player.ready().then(function() {
              var iframe = _this2.container.querySelector("iframe");
              iframe.style.width = "100%";
              iframe.style.height = "100%";
              if (title) {
                iframe.title = title;
              }
            })["catch"](_this2.props.onError);
            _this2.player.on("loaded", function() {
              _this2.props.onReady();
              _this2.refreshDuration();
            });
            _this2.player.on("play", function() {
              _this2.props.onPlay();
              _this2.refreshDuration();
            });
            _this2.player.on("pause", _this2.props.onPause);
            _this2.player.on("seeked", function(e) {
              return _this2.props.onSeek(e.seconds);
            });
            _this2.player.on("ended", _this2.props.onEnded);
            _this2.player.on("error", _this2.props.onError);
            _this2.player.on("timeupdate", function(_ref) {
              var seconds = _ref.seconds;
              _this2.currentTime = seconds;
            });
            _this2.player.on("progress", function(_ref2) {
              var seconds = _ref2.seconds;
              _this2.secondsLoaded = seconds;
            });
            _this2.player.on("bufferstart", _this2.props.onBuffer);
            _this2.player.on("bufferend", _this2.props.onBufferEnd);
          }, this.props.onError);
        }
      }, {
        key: "refreshDuration",
        value: function refreshDuration() {
          var _this3 = this;
          this.player.getDuration().then(function(duration2) {
            _this3.duration = duration2;
          });
        }
      }, {
        key: "play",
        value: function play() {
          var promise = this.callPlayer("play");
          if (promise) {
            promise["catch"](this.props.onError);
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer("unload");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackRate", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            overflow: "hidden",
            display
          };
          return _react["default"].createElement("div", {
            key: this.props.url,
            ref: this.ref,
            style
          });
        }
      }]);
      return Vimeo2;
    }(_react.Component);
    exports["default"] = Vimeo;
    _defineProperty3(Vimeo, "displayName", "Vimeo");
    _defineProperty3(Vimeo, "canPlay", _patterns.canPlay.vimeo);
    _defineProperty3(Vimeo, "forceLoad", true);
  }
});

// node_modules/react-player/lib/players/Facebook.js
var require_Facebook = __commonJS({
  "node_modules/react-player/lib/players/Facebook.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://connect.facebook.net/en_US/sdk.js";
    var SDK_GLOBAL = "FB";
    var SDK_GLOBAL_READY = "fbAsyncInit";
    var PLAYER_ID_PREFIX = "facebook-player-";
    var Facebook = function(_Component) {
      _inherits(Facebook2, _Component);
      var _super = _createSuper(Facebook2);
      function Facebook2() {
        var _this;
        _classCallCheck(this, Facebook2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        return _this;
      }
      _createClass(Facebook2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          if (isReady) {
            (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {
              return FB.XFBML.parse();
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {
            FB.init({
              appId: _this2.props.config.appId,
              xfbml: true,
              version: _this2.props.config.version
            });
            FB.Event.subscribe("xfbml.render", function(msg) {
              _this2.props.onLoaded();
            });
            FB.Event.subscribe("xfbml.ready", function(msg) {
              if (msg.type === "video" && msg.id === _this2.playerID) {
                _this2.player = msg.instance;
                _this2.player.subscribe("startedPlaying", _this2.props.onPlay);
                _this2.player.subscribe("paused", _this2.props.onPause);
                _this2.player.subscribe("finishedPlaying", _this2.props.onEnded);
                _this2.player.subscribe("startedBuffering", _this2.props.onBuffer);
                _this2.player.subscribe("finishedBuffering", _this2.props.onBufferEnd);
                _this2.player.subscribe("error", _this2.props.onError);
                if (_this2.props.muted) {
                  _this2.callPlayer("mute");
                } else {
                  _this2.callPlayer("unmute");
                }
                _this2.props.onReady();
                document.getElementById(_this2.playerID).querySelector("iframe").style.visibility = "visible";
              }
            });
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentPosition");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var attributes = this.props.config.attributes;
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("div", _extends2({
            style,
            id: this.playerID,
            className: "fb-video",
            "data-href": this.props.url,
            "data-autoplay": this.props.playing ? "true" : "false",
            "data-allowfullscreen": "true",
            "data-controls": this.props.controls ? "true" : "false"
          }, attributes));
        }
      }]);
      return Facebook2;
    }(_react.Component);
    exports["default"] = Facebook;
    _defineProperty3(Facebook, "displayName", "Facebook");
    _defineProperty3(Facebook, "canPlay", _patterns.canPlay.facebook);
    _defineProperty3(Facebook, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Streamable.js
var require_Streamable = __commonJS({
  "node_modules/react-player/lib/players/Streamable.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://cdn.embed.ly/player-0.1.0.min.js";
    var SDK_GLOBAL = "playerjs";
    var Streamable = function(_Component) {
      _inherits(Streamable2, _Component);
      var _super = _createSuper(Streamable2);
      function Streamable2() {
        var _this;
        _classCallCheck(this, Streamable2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "duration", null);
        _defineProperty3(_assertThisInitialized(_this), "currentTime", null);
        _defineProperty3(_assertThisInitialized(_this), "secondsLoaded", null);
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        _defineProperty3(_assertThisInitialized(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass(Streamable2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {
            if (!_this2.iframe) return;
            _this2.player = new playerjs.Player(_this2.iframe);
            _this2.player.setLoop(_this2.props.loop);
            _this2.player.on("ready", _this2.props.onReady);
            _this2.player.on("play", _this2.props.onPlay);
            _this2.player.on("pause", _this2.props.onPause);
            _this2.player.on("seeked", _this2.props.onSeek);
            _this2.player.on("ended", _this2.props.onEnded);
            _this2.player.on("error", _this2.props.onError);
            _this2.player.on("timeupdate", function(_ref) {
              var duration2 = _ref.duration, seconds = _ref.seconds;
              _this2.duration = duration2;
              _this2.currentTime = seconds;
            });
            _this2.player.on("buffered", function(_ref2) {
              var percent = _ref2.percent;
              if (_this2.duration) {
                _this2.secondsLoaded = _this2.duration * percent;
              }
            });
            if (_this2.props.muted) {
              _this2.player.mute();
            }
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var id3 = this.props.url.match(_patterns.MATCH_URL_STREAMABLE)[1];
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://streamable.com/o/".concat(id3),
            frameBorder: "0",
            scrolling: "no",
            style,
            allow: "encrypted-media; autoplay; fullscreen;"
          });
        }
      }]);
      return Streamable2;
    }(_react.Component);
    exports["default"] = Streamable;
    _defineProperty3(Streamable, "displayName", "Streamable");
    _defineProperty3(Streamable, "canPlay", _patterns.canPlay.streamable);
  }
});

// node_modules/react-player/lib/players/Wistia.js
var require_Wistia = __commonJS({
  "node_modules/react-player/lib/players/Wistia.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://fast.wistia.com/assets/external/E-v1.js";
    var SDK_GLOBAL = "Wistia";
    var PLAYER_ID_PREFIX = "wistia-player-";
    var Wistia = function(_Component) {
      _inherits(Wistia2, _Component);
      var _super = _createSuper(Wistia2);
      function Wistia2() {
        var _this;
        _classCallCheck(this, Wistia2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));
        _defineProperty3(_assertThisInitialized(_this), "onPlay", function() {
          var _this$props;
          return (_this$props = _this.props).onPlay.apply(_this$props, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onPause", function() {
          var _this$props2;
          return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onSeek", function() {
          var _this$props3;
          return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onEnded", function() {
          var _this$props4;
          return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onPlaybackRateChange", function() {
          var _this$props5;
          return (_this$props5 = _this.props).onPlaybackRateChange.apply(_this$props5, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        return _this;
      }
      _createClass(Wistia2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props6 = this.props, playing = _this$props6.playing, muted = _this$props6.muted, controls = _this$props6.controls, _onReady = _this$props6.onReady, config = _this$props6.config, onError2 = _this$props6.onError;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Wistia3) {
            if (config.customControls) {
              config.customControls.forEach(function(control) {
                return Wistia3.defineControl(control);
              });
            }
            window._wq = window._wq || [];
            window._wq.push({
              id: _this2.playerID,
              options: _objectSpread3({
                autoPlay: playing,
                silentAutoPlay: "allow",
                muted,
                controlsVisibleOnLoad: controls,
                fullscreenButton: controls,
                playbar: controls,
                playbackRateControl: controls,
                qualityControl: controls,
                volumeControl: controls,
                settingsControl: controls,
                smallPlayButton: controls
              }, config.options),
              onReady: function onReady(player) {
                _this2.player = player;
                _this2.unbind();
                _this2.player.bind("play", _this2.onPlay);
                _this2.player.bind("pause", _this2.onPause);
                _this2.player.bind("seek", _this2.onSeek);
                _this2.player.bind("end", _this2.onEnded);
                _this2.player.bind("playbackratechange", _this2.onPlaybackRateChange);
                _onReady();
              }
            });
          }, onError2);
        }
      }, {
        key: "unbind",
        value: function unbind() {
          this.player.unbind("play", this.onPlay);
          this.player.unbind("pause", this.onPause);
          this.player.unbind("seek", this.onSeek);
          this.player.unbind("end", this.onEnded);
          this.player.unbind("playbackratechange", this.onPlaybackRateChange);
        }
        // Proxy methods to prevent listener leaks
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.unbind();
          this.callPlayer("remove");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("time", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("volume", fraction);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("playbackRate", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("duration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("time");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var url = this.props.url;
          var videoID = url && url.match(_patterns.MATCH_URL_WISTIA)[1];
          var className = "wistia_embed wistia_async_".concat(videoID);
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("div", {
            id: this.playerID,
            key: videoID,
            className,
            style
          });
        }
      }]);
      return Wistia2;
    }(_react.Component);
    exports["default"] = Wistia;
    _defineProperty3(Wistia, "displayName", "Wistia");
    _defineProperty3(Wistia, "canPlay", _patterns.canPlay.wistia);
    _defineProperty3(Wistia, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Twitch.js
var require_Twitch = __commonJS({
  "node_modules/react-player/lib/players/Twitch.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://player.twitch.tv/js/embed/v1.js";
    var SDK_GLOBAL = "Twitch";
    var PLAYER_ID_PREFIX = "twitch-player-";
    var Twitch = function(_Component) {
      _inherits(Twitch2, _Component);
      var _super = _createSuper(Twitch2);
      function Twitch2() {
        var _this;
        _classCallCheck(this, Twitch2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.callPlayer("setMuted", true);
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          _this.callPlayer("setMuted", false);
        });
        return _this;
      }
      _createClass(Twitch2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          var _this$props = this.props, playsinline = _this$props.playsinline, onError2 = _this$props.onError, config = _this$props.config, controls = _this$props.controls;
          var isChannel2 = _patterns.MATCH_URL_TWITCH_CHANNEL.test(url);
          var id3 = isChannel2 ? url.match(_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(_patterns.MATCH_URL_TWITCH_VIDEO)[1];
          if (isReady) {
            if (isChannel2) {
              this.player.setChannel(id3);
            } else {
              this.player.setVideo("v" + id3);
            }
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Twitch3) {
            _this2.player = new Twitch3.Player(_this2.playerID, _objectSpread3({
              video: isChannel2 ? "" : id3,
              channel: isChannel2 ? id3 : "",
              height: "100%",
              width: "100%",
              playsinline,
              autoplay: _this2.props.playing,
              muted: _this2.props.muted,
              // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859
              controls: isChannel2 ? true : controls,
              time: (0, _utils.parseStartTime)(url)
            }, config.options));
            var _Twitch$Player = Twitch3.Player, READY = _Twitch$Player.READY, PLAYING = _Twitch$Player.PLAYING, PAUSE = _Twitch$Player.PAUSE, ENDED = _Twitch$Player.ENDED, ONLINE = _Twitch$Player.ONLINE, OFFLINE = _Twitch$Player.OFFLINE, SEEK = _Twitch$Player.SEEK;
            _this2.player.addEventListener(READY, _this2.props.onReady);
            _this2.player.addEventListener(PLAYING, _this2.props.onPlay);
            _this2.player.addEventListener(PAUSE, _this2.props.onPause);
            _this2.player.addEventListener(ENDED, _this2.props.onEnded);
            _this2.player.addEventListener(SEEK, _this2.props.onSeek);
            _this2.player.addEventListener(ONLINE, _this2.props.onLoaded);
            _this2.player.addEventListener(OFFLINE, _this2.props.onLoaded);
          }, onError2);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer("pause");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("div", {
            style,
            id: this.playerID
          });
        }
      }]);
      return Twitch2;
    }(_react.Component);
    exports["default"] = Twitch;
    _defineProperty3(Twitch, "displayName", "Twitch");
    _defineProperty3(Twitch, "canPlay", _patterns.canPlay.twitch);
    _defineProperty3(Twitch, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/DailyMotion.js
var require_DailyMotion = __commonJS({
  "node_modules/react-player/lib/players/DailyMotion.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _slicedToArray3(arr, i2) {
      return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i2) || _unsupportedIterableToArray4(arr, i2) || _nonIterableRest3();
    }
    function _nonIterableRest3() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray4(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray4(o2, minLen);
    }
    function _arrayLikeToArray4(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    function _iterableToArrayLimit3(arr, i2) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e2 = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2) break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles3(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://api.dmcdn.net/all.js";
    var SDK_GLOBAL = "DM";
    var SDK_GLOBAL_READY = "dmAsyncInit";
    var DailyMotion = function(_Component) {
      _inherits(DailyMotion2, _Component);
      var _super = _createSuper(DailyMotion2);
      function DailyMotion2() {
        var _this;
        _classCallCheck(this, DailyMotion2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "onDurationChange", function() {
          var duration2 = _this.getDuration();
          _this.props.onDuration(duration2);
        });
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.callPlayer("setMuted", true);
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          _this.callPlayer("setMuted", false);
        });
        _defineProperty3(_assertThisInitialized(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass(DailyMotion2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props = this.props, controls = _this$props.controls, config = _this$props.config, onError2 = _this$props.onError, playing = _this$props.playing;
          var _url$match = url.match(_patterns.MATCH_URL_DAILYMOTION), _url$match2 = _slicedToArray3(_url$match, 2), id3 = _url$match2[1];
          if (this.player) {
            this.player.load(id3, {
              start: (0, _utils.parseStartTime)(url),
              autoplay: playing
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(DM) {
            return DM.player;
          }).then(function(DM) {
            if (!_this2.container) return;
            var Player = DM.player;
            _this2.player = new Player(_this2.container, {
              width: "100%",
              height: "100%",
              video: id3,
              params: _objectSpread3({
                controls,
                autoplay: _this2.props.playing,
                mute: _this2.props.muted,
                start: (0, _utils.parseStartTime)(url),
                origin: window.location.origin
              }, config.params),
              events: {
                apiready: _this2.props.onReady,
                seeked: function seeked() {
                  return _this2.props.onSeek(_this2.player.currentTime);
                },
                video_end: _this2.props.onEnded,
                durationchange: _this2.onDurationChange,
                pause: _this2.props.onPause,
                playing: _this2.props.onPlay,
                waiting: _this2.props.onBuffer,
                error: function error(event) {
                  return onError2(event);
                }
              }
            });
          }, onError2);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.player.duration || null;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.player.bufferedTime;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("div", {
            style
          }, _react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);
      return DailyMotion2;
    }(_react.Component);
    exports["default"] = DailyMotion;
    _defineProperty3(DailyMotion, "displayName", "DailyMotion");
    _defineProperty3(DailyMotion, "canPlay", _patterns.canPlay.dailymotion);
    _defineProperty3(DailyMotion, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Mixcloud.js
var require_Mixcloud = __commonJS({
  "node_modules/react-player/lib/players/Mixcloud.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://widget.mixcloud.com/media/js/widgetApi.js";
    var SDK_GLOBAL = "Mixcloud";
    var Mixcloud = function(_Component) {
      _inherits(Mixcloud2, _Component);
      var _super = _createSuper(Mixcloud2);
      function Mixcloud2() {
        var _this;
        _classCallCheck(this, Mixcloud2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "duration", null);
        _defineProperty3(_assertThisInitialized(_this), "currentTime", null);
        _defineProperty3(_assertThisInitialized(_this), "secondsLoaded", null);
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
        });
        _defineProperty3(_assertThisInitialized(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass(Mixcloud2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Mixcloud3) {
            _this2.player = Mixcloud3.PlayerWidget(_this2.iframe);
            _this2.player.ready.then(function() {
              _this2.player.events.play.on(_this2.props.onPlay);
              _this2.player.events.pause.on(_this2.props.onPause);
              _this2.player.events.ended.on(_this2.props.onEnded);
              _this2.player.events.error.on(_this2.props.error);
              _this2.player.events.progress.on(function(seconds, duration2) {
                _this2.currentTime = seconds;
                _this2.duration = duration2;
              });
              _this2.props.onReady();
            });
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, url = _this$props.url, config = _this$props.config;
          var id3 = url.match(_patterns.MATCH_URL_MIXCLOUD)[1];
          var style = {
            width: "100%",
            height: "100%"
          };
          var query = (0, _utils.queryString)(_objectSpread3(_objectSpread3({}, config.options), {}, {
            feed: "/".concat(id3, "/")
          }));
          return _react["default"].createElement("iframe", {
            key: id3,
            ref: this.ref,
            style,
            src: "https://www.mixcloud.com/widget/iframe/?".concat(query),
            frameBorder: "0"
          });
        }
      }]);
      return Mixcloud2;
    }(_react.Component);
    exports["default"] = Mixcloud;
    _defineProperty3(Mixcloud, "displayName", "Mixcloud");
    _defineProperty3(Mixcloud, "canPlay", _patterns.canPlay.mixcloud);
    _defineProperty3(Mixcloud, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Vidyard.js
var require_Vidyard = __commonJS({
  "node_modules/react-player/lib/players/Vidyard.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://play.vidyard.com/embed/v4.js";
    var SDK_GLOBAL = "VidyardV4";
    var SDK_GLOBAL_READY = "onVidyardAPI";
    var Vidyard = function(_Component) {
      _inherits(Vidyard2, _Component);
      var _super = _createSuper(Vidyard2);
      function Vidyard2() {
        var _this;
        _classCallCheck(this, Vidyard2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.setVolume(0);
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });
        _defineProperty3(_assertThisInitialized(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass(Vidyard2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props = this.props, playing = _this$props.playing, config = _this$props.config, onError2 = _this$props.onError, onDuration = _this$props.onDuration;
          var id3 = url && url.match(_patterns.MATCH_URL_VIDYARD)[1];
          if (this.player) {
            this.stop();
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(Vidyard3) {
            if (!_this2.container) return;
            Vidyard3.api.addReadyListener(function(data, player) {
              if (_this2.player) {
                return;
              }
              _this2.player = player;
              _this2.player.on("ready", _this2.props.onReady);
              _this2.player.on("play", _this2.props.onPlay);
              _this2.player.on("pause", _this2.props.onPause);
              _this2.player.on("seek", _this2.props.onSeek);
              _this2.player.on("playerComplete", _this2.props.onEnded);
            }, id3);
            Vidyard3.api.renderPlayer(_objectSpread3({
              uuid: id3,
              container: _this2.container,
              autoplay: playing ? 1 : 0
            }, config.options));
            Vidyard3.api.getPlayerMetadata(id3).then(function(meta) {
              _this2.duration = meta.length_in_seconds;
              onDuration(meta.length_in_seconds);
            });
          }, onError2);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          window.VidyardV4.api.destroyPlayer(this.player);
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          this.callPlayer("seek", amount);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackSpeed", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("currentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("div", {
            style
          }, _react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);
      return Vidyard2;
    }(_react.Component);
    exports["default"] = Vidyard;
    _defineProperty3(Vidyard, "displayName", "Vidyard");
    _defineProperty3(Vidyard, "canPlay", _patterns.canPlay.vidyard);
  }
});

// node_modules/react-player/lib/players/Kaltura.js
var require_Kaltura = __commonJS({
  "node_modules/react-player/lib/players/Kaltura.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://cdn.embed.ly/player-0.1.0.min.js";
    var SDK_GLOBAL = "playerjs";
    var Kaltura = function(_Component) {
      _inherits(Kaltura2, _Component);
      var _super = _createSuper(Kaltura2);
      function Kaltura2() {
        var _this;
        _classCallCheck(this, Kaltura2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);
        _defineProperty3(_assertThisInitialized(_this), "duration", null);
        _defineProperty3(_assertThisInitialized(_this), "currentTime", null);
        _defineProperty3(_assertThisInitialized(_this), "secondsLoaded", null);
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        _defineProperty3(_assertThisInitialized(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass(Kaltura2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {
            if (!_this2.iframe) return;
            _this2.player = new playerjs.Player(_this2.iframe);
            _this2.player.on("ready", function() {
              setTimeout(function() {
                _this2.player.isReady = true;
                _this2.player.setLoop(_this2.props.loop);
                if (_this2.props.muted) {
                  _this2.player.mute();
                }
                _this2.addListeners(_this2.player, _this2.props);
                _this2.props.onReady();
              }, 500);
            });
          }, this.props.onError);
        }
      }, {
        key: "addListeners",
        value: function addListeners(player, props) {
          var _this3 = this;
          player.on("play", props.onPlay);
          player.on("pause", props.onPause);
          player.on("ended", props.onEnded);
          player.on("error", props.onError);
          player.on("timeupdate", function(_ref) {
            var duration2 = _ref.duration, seconds = _ref.seconds;
            _this3.duration = duration2;
            _this3.currentTime = seconds;
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("iframe", {
            ref: this.ref,
            src: this.props.url,
            frameBorder: "0",
            scrolling: "no",
            style,
            allow: "encrypted-media; autoplay; fullscreen;",
            referrerPolicy: "no-referrer-when-downgrade"
          });
        }
      }]);
      return Kaltura2;
    }(_react.Component);
    exports["default"] = Kaltura;
    _defineProperty3(Kaltura, "displayName", "Kaltura");
    _defineProperty3(Kaltura, "canPlay", _patterns.canPlay.kaltura);
  }
});

// node_modules/react-player/lib/players/FilePlayer.js
var require_FilePlayer = __commonJS({
  "node_modules/react-player/lib/players/FilePlayer.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var HAS_NAVIGATOR = typeof navigator !== "undefined";
    var IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1;
    var IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;
    var HLS_SDK_URL = "https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js";
    var HLS_GLOBAL = "Hls";
    var DASH_SDK_URL = "https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js";
    var DASH_GLOBAL = "dashjs";
    var FLV_SDK_URL = "https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js";
    var FLV_GLOBAL = "flvjs";
    var MATCH_DROPBOX_URL = /www\.dropbox\.com\/.+/;
    var MATCH_CLOUDFLARE_STREAM = /https:\/\/watch\.cloudflarestream\.com\/([a-z0-9]+)/;
    var REPLACE_CLOUDFLARE_STREAM = "https://videodelivery.net/{id}/manifest/video.m3u8";
    var FilePlayer = function(_Component) {
      _inherits(FilePlayer2, _Component);
      var _super = _createSuper(FilePlayer2);
      function FilePlayer2() {
        var _this;
        _classCallCheck(this, FilePlayer2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty3(_assertThisInitialized(_this), "onReady", function() {
          var _this$props;
          return (_this$props = _this.props).onReady.apply(_this$props, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onPlay", function() {
          var _this$props2;
          return (_this$props2 = _this.props).onPlay.apply(_this$props2, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onBuffer", function() {
          var _this$props3;
          return (_this$props3 = _this.props).onBuffer.apply(_this$props3, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onBufferEnd", function() {
          var _this$props4;
          return (_this$props4 = _this.props).onBufferEnd.apply(_this$props4, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onPause", function() {
          var _this$props5;
          return (_this$props5 = _this.props).onPause.apply(_this$props5, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onEnded", function() {
          var _this$props6;
          return (_this$props6 = _this.props).onEnded.apply(_this$props6, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onError", function() {
          var _this$props7;
          return (_this$props7 = _this.props).onError.apply(_this$props7, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onPlayBackRateChange", function(event) {
          return _this.props.onPlaybackRateChange(event.target.playbackRate);
        });
        _defineProperty3(_assertThisInitialized(_this), "onEnablePIP", function() {
          var _this$props8;
          return (_this$props8 = _this.props).onEnablePIP.apply(_this$props8, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "onDisablePIP", function(e) {
          var _this$props9 = _this.props, onDisablePIP = _this$props9.onDisablePIP, playing = _this$props9.playing;
          onDisablePIP(e);
          if (playing) {
            _this.play();
          }
        });
        _defineProperty3(_assertThisInitialized(_this), "onPresentationModeChange", function(e) {
          if (_this.player && (0, _utils.supportsWebKitPresentationMode)(_this.player)) {
            var webkitPresentationMode = _this.player.webkitPresentationMode;
            if (webkitPresentationMode === "picture-in-picture") {
              _this.onEnablePIP(e);
            } else if (webkitPresentationMode === "inline") {
              _this.onDisablePIP(e);
            }
          }
        });
        _defineProperty3(_assertThisInitialized(_this), "onSeek", function(e) {
          _this.props.onSeek(e.target.currentTime);
        });
        _defineProperty3(_assertThisInitialized(_this), "mute", function() {
          _this.player.muted = true;
        });
        _defineProperty3(_assertThisInitialized(_this), "unmute", function() {
          _this.player.muted = false;
        });
        _defineProperty3(_assertThisInitialized(_this), "renderSourceElement", function(source, index4) {
          if (typeof source === "string") {
            return _react["default"].createElement("source", {
              key: index4,
              src: source
            });
          }
          return _react["default"].createElement("source", _extends2({
            key: index4
          }, source));
        });
        _defineProperty3(_assertThisInitialized(_this), "renderTrack", function(track2, index4) {
          return _react["default"].createElement("track", _extends2({
            key: index4
          }, track2));
        });
        _defineProperty3(_assertThisInitialized(_this), "ref", function(player) {
          if (_this.player) {
            _this.prevPlayer = _this.player;
          }
          _this.player = player;
        });
        return _this;
      }
      _createClass(FilePlayer2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
          this.addListeners(this.player);
          if (IS_IOS) {
            this.player.load();
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {
            this.removeListeners(this.prevPlayer, prevProps.url);
            this.addListeners(this.player);
          }
          if (this.props.url !== prevProps.url && !(0, _utils.isMediaStream)(this.props.url)) {
            this.player.srcObject = null;
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.removeListeners(this.player);
          if (this.hls) {
            this.hls.destroy();
          }
        }
      }, {
        key: "addListeners",
        value: function addListeners(player) {
          var _this$props10 = this.props, url = _this$props10.url, playsinline = _this$props10.playsinline;
          player.addEventListener("play", this.onPlay);
          player.addEventListener("waiting", this.onBuffer);
          player.addEventListener("playing", this.onBufferEnd);
          player.addEventListener("pause", this.onPause);
          player.addEventListener("seeked", this.onSeek);
          player.addEventListener("ended", this.onEnded);
          player.addEventListener("error", this.onError);
          player.addEventListener("ratechange", this.onPlayBackRateChange);
          player.addEventListener("enterpictureinpicture", this.onEnablePIP);
          player.addEventListener("leavepictureinpicture", this.onDisablePIP);
          player.addEventListener("webkitpresentationmodechanged", this.onPresentationModeChange);
          if (!this.shouldUseHLS(url)) {
            player.addEventListener("canplay", this.onReady);
          }
          if (playsinline) {
            player.setAttribute("playsinline", "");
            player.setAttribute("webkit-playsinline", "");
            player.setAttribute("x5-playsinline", "");
          }
        }
      }, {
        key: "removeListeners",
        value: function removeListeners(player, url) {
          player.removeEventListener("canplay", this.onReady);
          player.removeEventListener("play", this.onPlay);
          player.removeEventListener("waiting", this.onBuffer);
          player.removeEventListener("playing", this.onBufferEnd);
          player.removeEventListener("pause", this.onPause);
          player.removeEventListener("seeked", this.onSeek);
          player.removeEventListener("ended", this.onEnded);
          player.removeEventListener("error", this.onError);
          player.removeEventListener("ratechange", this.onPlayBackRateChange);
          player.removeEventListener("enterpictureinpicture", this.onEnablePIP);
          player.removeEventListener("leavepictureinpicture", this.onDisablePIP);
          player.removeEventListener("webkitpresentationmodechanged", this.onPresentationModeChange);
          if (!this.shouldUseHLS(url)) {
            player.removeEventListener("canplay", this.onReady);
          }
        }
        // Proxy methods to prevent listener leaks
      }, {
        key: "shouldUseAudio",
        value: function shouldUseAudio(props) {
          if (props.config.forceVideo) {
            return false;
          }
          if (props.config.attributes.poster) {
            return false;
          }
          return _patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;
        }
      }, {
        key: "shouldUseHLS",
        value: function shouldUseHLS(url) {
          if (this.props.config.forceHLS) {
            return true;
          }
          if (IS_IOS) {
            return false;
          }
          return _patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);
        }
      }, {
        key: "shouldUseDASH",
        value: function shouldUseDASH(url) {
          return _patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;
        }
      }, {
        key: "shouldUseFLV",
        value: function shouldUseFLV(url) {
          return _patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props$config = this.props.config, hlsVersion = _this$props$config.hlsVersion, hlsOptions = _this$props$config.hlsOptions, dashVersion = _this$props$config.dashVersion, flvVersion = _this$props$config.flvVersion;
          if (this.hls) {
            this.hls.destroy();
          }
          if (this.dash) {
            this.dash.reset();
          }
          if (this.shouldUseHLS(url)) {
            (0, _utils.getSDK)(HLS_SDK_URL.replace("VERSION", hlsVersion), HLS_GLOBAL).then(function(Hls) {
              _this2.hls = new Hls(hlsOptions);
              _this2.hls.on(Hls.Events.MANIFEST_PARSED, function() {
                _this2.props.onReady();
              });
              _this2.hls.on(Hls.Events.ERROR, function(e, data) {
                _this2.props.onError(e, data, _this2.hls, Hls);
              });
              if (MATCH_CLOUDFLARE_STREAM.test(url)) {
                var id3 = url.match(MATCH_CLOUDFLARE_STREAM)[1];
                _this2.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace("{id}", id3));
              } else {
                _this2.hls.loadSource(url);
              }
              _this2.hls.attachMedia(_this2.player);
              _this2.props.onLoaded();
            });
          }
          if (this.shouldUseDASH(url)) {
            (0, _utils.getSDK)(DASH_SDK_URL.replace("VERSION", dashVersion), DASH_GLOBAL).then(function(dashjs) {
              _this2.dash = dashjs.MediaPlayer().create();
              _this2.dash.initialize(_this2.player, url, _this2.props.playing);
              _this2.dash.on("error", _this2.props.onError);
              if (parseInt(dashVersion) < 3) {
                _this2.dash.getDebug().setLogToBrowserConsole(false);
              } else {
                _this2.dash.updateSettings({
                  debug: {
                    logLevel: dashjs.Debug.LOG_LEVEL_NONE
                  }
                });
              }
              _this2.props.onLoaded();
            });
          }
          if (this.shouldUseFLV(url)) {
            (0, _utils.getSDK)(FLV_SDK_URL.replace("VERSION", flvVersion), FLV_GLOBAL).then(function(flvjs) {
              _this2.flv = flvjs.createPlayer({
                type: "flv",
                url
              });
              _this2.flv.attachMediaElement(_this2.player);
              _this2.flv.on(flvjs.Events.ERROR, function(e, data) {
                _this2.props.onError(e, data, _this2.flv, flvjs);
              });
              _this2.flv.load();
              _this2.props.onLoaded();
            });
          }
          if (url instanceof Array) {
            this.player.load();
          } else if ((0, _utils.isMediaStream)(url)) {
            try {
              this.player.srcObject = url;
            } catch (e) {
              this.player.src = window.URL.createObjectURL(url);
            }
          }
        }
      }, {
        key: "play",
        value: function play() {
          var promise = this.player.play();
          if (promise) {
            promise["catch"](this.props.onError);
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          this.player.pause();
        }
      }, {
        key: "stop",
        value: function stop() {
          this.player.removeAttribute("src");
          if (this.dash) {
            this.dash.reset();
          }
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.player.currentTime = seconds;
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.player.volume = fraction;
        }
      }, {
        key: "enablePIP",
        value: function enablePIP() {
          if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {
            this.player.requestPictureInPicture();
          } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== "picture-in-picture") {
            this.player.webkitSetPresentationMode("picture-in-picture");
          }
        }
      }, {
        key: "disablePIP",
        value: function disablePIP() {
          if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {
            document.exitPictureInPicture();
          } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== "inline") {
            this.player.webkitSetPresentationMode("inline");
          }
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          try {
            this.player.playbackRate = rate;
          } catch (error) {
            this.props.onError(error);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.player) return null;
          var _this$player = this.player, duration2 = _this$player.duration, seekable = _this$player.seekable;
          if (duration2 === Infinity && seekable.length > 0) {
            return seekable.end(seekable.length - 1);
          }
          return duration2;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.player) return null;
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.player) return null;
          var buffered = this.player.buffered;
          if (buffered.length === 0) {
            return 0;
          }
          var end2 = buffered.end(buffered.length - 1);
          var duration2 = this.getDuration();
          if (end2 > duration2) {
            return duration2;
          }
          return end2;
        }
      }, {
        key: "getSource",
        value: function getSource(url) {
          var useHLS = this.shouldUseHLS(url);
          var useDASH = this.shouldUseDASH(url);
          var useFLV = this.shouldUseFLV(url);
          if (url instanceof Array || (0, _utils.isMediaStream)(url) || useHLS || useDASH || useFLV) {
            return void 0;
          }
          if (MATCH_DROPBOX_URL.test(url)) {
            return url.replace("www.dropbox.com", "dl.dropboxusercontent.com");
          }
          return url;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props11 = this.props, url = _this$props11.url, playing = _this$props11.playing, loop = _this$props11.loop, controls = _this$props11.controls, muted = _this$props11.muted, config = _this$props11.config, width = _this$props11.width, height = _this$props11.height;
          var useAudio = this.shouldUseAudio(this.props);
          var Element2 = useAudio ? "audio" : "video";
          var style = {
            width: width === "auto" ? width : "100%",
            height: height === "auto" ? height : "100%"
          };
          return _react["default"].createElement(Element2, _extends2({
            ref: this.ref,
            src: this.getSource(url),
            style,
            preload: "auto",
            autoPlay: playing || void 0,
            controls,
            muted,
            loop
          }, config.attributes), url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));
        }
      }]);
      return FilePlayer2;
    }(_react.Component);
    exports["default"] = FilePlayer;
    _defineProperty3(FilePlayer, "displayName", "FilePlayer");
    _defineProperty3(FilePlayer, "canPlay", _patterns.canPlay.file);
  }
});

// node_modules/react-player/lib/players/index.js
var require_players = __commonJS({
  "node_modules/react-player/lib/players/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = require_react();
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = [{
      key: "youtube",
      name: "YouTube",
      canPlay: _patterns.canPlay.youtube,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_YouTube());
        });
      })
    }, {
      key: "soundcloud",
      name: "SoundCloud",
      canPlay: _patterns.canPlay.soundcloud,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_SoundCloud());
        });
      })
    }, {
      key: "vimeo",
      name: "Vimeo",
      canPlay: _patterns.canPlay.vimeo,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Vimeo());
        });
      })
    }, {
      key: "facebook",
      name: "Facebook",
      canPlay: _patterns.canPlay.facebook,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Facebook());
        });
      })
    }, {
      key: "streamable",
      name: "Streamable",
      canPlay: _patterns.canPlay.streamable,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Streamable());
        });
      })
    }, {
      key: "wistia",
      name: "Wistia",
      canPlay: _patterns.canPlay.wistia,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Wistia());
        });
      })
    }, {
      key: "twitch",
      name: "Twitch",
      canPlay: _patterns.canPlay.twitch,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Twitch());
        });
      })
    }, {
      key: "dailymotion",
      name: "DailyMotion",
      canPlay: _patterns.canPlay.dailymotion,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_DailyMotion());
        });
      })
    }, {
      key: "mixcloud",
      name: "Mixcloud",
      canPlay: _patterns.canPlay.mixcloud,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Mixcloud());
        });
      })
    }, {
      key: "vidyard",
      name: "Vidyard",
      canPlay: _patterns.canPlay.vidyard,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Vidyard());
        });
      })
    }, {
      key: "kaltura",
      name: "Kaltura",
      canPlay: _patterns.canPlay.kaltura,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Kaltura());
        });
      })
    }, {
      key: "file",
      name: "FilePlayer",
      canPlay: _patterns.canPlay.file,
      canEnablePIP: function canEnablePIP(url) {
        return _patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, _utils.supportsWebKitPresentationMode)()) && !_patterns.AUDIO_EXTENSIONS.test(url);
      },
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_FilePlayer());
        });
      })
    }];
    exports["default"] = _default;
  }
});

// node_modules/memoize-one/dist/memoize-one.esm.js
var memoize_one_esm_exports = {};
__export(memoize_one_esm_exports, {
  default: () => memoize_one_esm_default
});
function isEqual(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i2 = 0; i2 < newInputs.length; i2++) {
    if (!isEqual(newInputs[i2], lastInputs[i2])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual3) {
  if (isEqual3 === void 0) {
    isEqual3 = areInputsEqual;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual3(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}
var safeIsNaN, memoize_one_esm_default;
var init_memoize_one_esm = __esm({
  "node_modules/memoize-one/dist/memoize-one.esm.js"() {
    safeIsNaN = Number.isNaN || function ponyfill(value) {
      return typeof value === "number" && value !== value;
    };
    memoize_one_esm_default = memoizeOne;
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a2, b2) {
      if (a2 === b2) return true;
      if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
        if (a2.constructor !== b2.constructor) return false;
        var length, i2, keys3;
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length != b2.length) return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal(a2[i2], b2[i2])) return false;
          return true;
        }
        var it2;
        if (hasMap && a2 instanceof Map && b2 instanceof Map) {
          if (a2.size !== b2.size) return false;
          it2 = a2.entries();
          while (!(i2 = it2.next()).done)
            if (!b2.has(i2.value[0])) return false;
          it2 = a2.entries();
          while (!(i2 = it2.next()).done)
            if (!equal(i2.value[1], b2.get(i2.value[0]))) return false;
          return true;
        }
        if (hasSet && a2 instanceof Set && b2 instanceof Set) {
          if (a2.size !== b2.size) return false;
          it2 = a2.entries();
          while (!(i2 = it2.next()).done)
            if (!b2.has(i2.value[0])) return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a2) && ArrayBuffer.isView(b2)) {
          length = a2.length;
          if (length != b2.length) return false;
          for (i2 = length; i2-- !== 0; )
            if (a2[i2] !== b2[i2]) return false;
          return true;
        }
        if (a2.constructor === RegExp) return a2.source === b2.source && a2.flags === b2.flags;
        if (a2.valueOf !== Object.prototype.valueOf && typeof a2.valueOf === "function" && typeof b2.valueOf === "function") return a2.valueOf() === b2.valueOf();
        if (a2.toString !== Object.prototype.toString && typeof a2.toString === "function" && typeof b2.toString === "function") return a2.toString() === b2.toString();
        keys3 = Object.keys(a2);
        length = keys3.length;
        if (length !== Object.keys(b2).length) return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b2, keys3[i2])) return false;
        if (hasElementType && a2 instanceof Element) return false;
        for (i2 = length; i2-- !== 0; ) {
          if ((keys3[i2] === "_owner" || keys3[i2] === "__v" || keys3[i2] === "__o") && a2.$$typeof) {
            continue;
          }
          if (!equal(a2[keys3[i2]], b2[keys3[i2]])) return false;
        }
        return true;
      }
      return a2 !== a2 && b2 !== b2;
    }
    module.exports = function isEqual3(a2, b2) {
      try {
        return equal(a2, b2);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf2(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment4 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf2(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf2(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf2(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf2(object) === REACT_PROVIDER_TYPE;
        }
        function isElement3(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf2(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf2(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf2(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf2(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf2(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf2(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf2(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf2(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment4;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement3;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf2;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty3 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order22 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order22.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key in from) {
          if (hasOwnProperty3.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text8) {
        var message = "Warning: " + text8;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values2, location2, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text8) {
        var message = "Warning: " + text8;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location2, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location2, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location2, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is2(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location2, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-player/lib/props.js
var require_props = __commonJS({
  "node_modules/react-player/lib/props.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultProps = exports.propTypes = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var string3 = _propTypes["default"].string;
    var bool = _propTypes["default"].bool;
    var number2 = _propTypes["default"].number;
    var array = _propTypes["default"].array;
    var oneOfType = _propTypes["default"].oneOfType;
    var shape = _propTypes["default"].shape;
    var object = _propTypes["default"].object;
    var func = _propTypes["default"].func;
    var node2 = _propTypes["default"].node;
    var propTypes = {
      url: oneOfType([string3, array, object]),
      playing: bool,
      loop: bool,
      controls: bool,
      volume: number2,
      muted: bool,
      playbackRate: number2,
      width: oneOfType([string3, number2]),
      height: oneOfType([string3, number2]),
      style: object,
      progressInterval: number2,
      playsinline: bool,
      pip: bool,
      stopOnUnmount: bool,
      light: oneOfType([bool, string3]),
      playIcon: node2,
      previewTabIndex: number2,
      fallback: node2,
      oEmbedUrl: string3,
      wrapper: oneOfType([string3, func, shape({
        render: func.isRequired
      })]),
      config: shape({
        soundcloud: shape({
          options: object
        }),
        youtube: shape({
          playerVars: object,
          embedOptions: object,
          onUnstarted: func
        }),
        facebook: shape({
          appId: string3,
          version: string3,
          playerId: string3,
          attributes: object
        }),
        dailymotion: shape({
          params: object
        }),
        vimeo: shape({
          playerOptions: object,
          title: string3
        }),
        file: shape({
          attributes: object,
          tracks: array,
          forceVideo: bool,
          forceAudio: bool,
          forceHLS: bool,
          forceDASH: bool,
          forceFLV: bool,
          hlsOptions: object,
          hlsVersion: string3,
          dashVersion: string3,
          flvVersion: string3
        }),
        wistia: shape({
          options: object,
          playerId: string3,
          customControls: array
        }),
        mixcloud: shape({
          options: object
        }),
        twitch: shape({
          options: object,
          playerId: string3
        }),
        vidyard: shape({
          options: object
        })
      }),
      onReady: func,
      onStart: func,
      onPlay: func,
      onPause: func,
      onBuffer: func,
      onBufferEnd: func,
      onEnded: func,
      onError: func,
      onDuration: func,
      onSeek: func,
      onPlaybackRateChange: func,
      onProgress: func,
      onClickPreview: func,
      onEnablePIP: func,
      onDisablePIP: func
    };
    exports.propTypes = propTypes;
    var noop9 = function noop10() {
    };
    var defaultProps2 = {
      playing: false,
      loop: false,
      controls: false,
      volume: null,
      muted: false,
      playbackRate: 1,
      width: "640px",
      height: "360px",
      style: {},
      progressInterval: 1e3,
      playsinline: false,
      pip: false,
      stopOnUnmount: true,
      light: false,
      fallback: null,
      wrapper: "div",
      previewTabIndex: 0,
      oEmbedUrl: "https://noembed.com/embed?url={url}",
      config: {
        soundcloud: {
          options: {
            visual: true,
            // Undocumented, but makes player fill container and look better
            buying: false,
            liking: false,
            download: false,
            sharing: false,
            show_comments: false,
            show_playcount: false
          }
        },
        youtube: {
          playerVars: {
            playsinline: 1,
            showinfo: 0,
            rel: 0,
            iv_load_policy: 3,
            modestbranding: 1
          },
          embedOptions: {},
          onUnstarted: noop9
        },
        facebook: {
          appId: "1309697205772819",
          version: "v3.3",
          playerId: null,
          attributes: {}
        },
        dailymotion: {
          params: {
            api: 1,
            "endscreen-enable": false
          }
        },
        vimeo: {
          playerOptions: {
            autopause: false,
            byline: false,
            portrait: false,
            title: false
          },
          title: null
        },
        file: {
          attributes: {},
          tracks: [],
          forceVideo: false,
          forceAudio: false,
          forceHLS: false,
          forceDASH: false,
          forceFLV: false,
          hlsOptions: {},
          hlsVersion: "1.1.4",
          dashVersion: "3.1.3",
          flvVersion: "1.5.0"
        },
        wistia: {
          options: {},
          playerId: null,
          customControls: null
        },
        mixcloud: {
          options: {
            hide_cover: 1
          }
        },
        twitch: {
          options: {},
          playerId: null
        },
        vidyard: {
          options: {}
        }
      },
      onReady: noop9,
      onStart: noop9,
      onPlay: noop9,
      onPause: noop9,
      onBuffer: noop9,
      onBufferEnd: noop9,
      onEnded: noop9,
      onError: noop9,
      onDuration: noop9,
      onSeek: noop9,
      onPlaybackRateChange: noop9,
      onProgress: noop9,
      onClickPreview: noop9,
      onEnablePIP: noop9,
      onDisablePIP: noop9
    };
    exports.defaultProps = defaultProps2;
  }
});

// node_modules/react-player/lib/Player.js
var require_Player = __commonJS({
  "node_modules/react-player/lib/Player.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _props = require_props();
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SEEK_ON_PLAY_EXPIRY = 5e3;
    var Player = function(_Component) {
      _inherits(Player2, _Component);
      var _super = _createSuper(Player2);
      function Player2() {
        var _this;
        _classCallCheck(this, Player2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty3(_assertThisInitialized(_this), "mounted", false);
        _defineProperty3(_assertThisInitialized(_this), "isReady", false);
        _defineProperty3(_assertThisInitialized(_this), "isPlaying", false);
        _defineProperty3(_assertThisInitialized(_this), "isLoading", true);
        _defineProperty3(_assertThisInitialized(_this), "loadOnReady", null);
        _defineProperty3(_assertThisInitialized(_this), "startOnPlay", true);
        _defineProperty3(_assertThisInitialized(_this), "seekOnPlay", null);
        _defineProperty3(_assertThisInitialized(_this), "onDurationCalled", false);
        _defineProperty3(_assertThisInitialized(_this), "handlePlayerMount", function(player) {
          if (_this.player) return;
          _this.player = player;
          _this.player.load(_this.props.url);
          _this.progress();
        });
        _defineProperty3(_assertThisInitialized(_this), "getInternalPlayer", function(key) {
          if (!_this.player) return null;
          return _this.player[key];
        });
        _defineProperty3(_assertThisInitialized(_this), "progress", function() {
          if (_this.props.url && _this.player && _this.isReady) {
            var playedSeconds = _this.getCurrentTime() || 0;
            var loadedSeconds = _this.getSecondsLoaded();
            var duration2 = _this.getDuration();
            if (duration2) {
              var progress = {
                playedSeconds,
                played: playedSeconds / duration2
              };
              if (loadedSeconds !== null) {
                progress.loadedSeconds = loadedSeconds;
                progress.loaded = loadedSeconds / duration2;
              }
              if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {
                _this.props.onProgress(progress);
              }
              _this.prevPlayed = progress.playedSeconds;
              _this.prevLoaded = progress.loadedSeconds;
            }
          }
          _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);
        });
        _defineProperty3(_assertThisInitialized(_this), "handleReady", function() {
          if (!_this.mounted) return;
          _this.isReady = true;
          _this.isLoading = false;
          var _this$props = _this.props, onReady = _this$props.onReady, playing = _this$props.playing, volume = _this$props.volume, muted = _this$props.muted;
          onReady();
          if (!muted && volume !== null) {
            _this.player.setVolume(volume);
          }
          if (_this.loadOnReady) {
            _this.player.load(_this.loadOnReady, true);
            _this.loadOnReady = null;
          } else if (playing) {
            _this.player.play();
          }
          _this.handleDurationCheck();
        });
        _defineProperty3(_assertThisInitialized(_this), "handlePlay", function() {
          _this.isPlaying = true;
          _this.isLoading = false;
          var _this$props2 = _this.props, onStart = _this$props2.onStart, onPlay = _this$props2.onPlay, playbackRate = _this$props2.playbackRate;
          if (_this.startOnPlay) {
            if (_this.player.setPlaybackRate && playbackRate !== 1) {
              _this.player.setPlaybackRate(playbackRate);
            }
            onStart();
            _this.startOnPlay = false;
          }
          onPlay();
          if (_this.seekOnPlay) {
            _this.seekTo(_this.seekOnPlay);
            _this.seekOnPlay = null;
          }
          _this.handleDurationCheck();
        });
        _defineProperty3(_assertThisInitialized(_this), "handlePause", function(e) {
          _this.isPlaying = false;
          if (!_this.isLoading) {
            _this.props.onPause(e);
          }
        });
        _defineProperty3(_assertThisInitialized(_this), "handleEnded", function() {
          var _this$props3 = _this.props, activePlayer = _this$props3.activePlayer, loop = _this$props3.loop, onEnded = _this$props3.onEnded;
          if (activePlayer.loopOnEnded && loop) {
            _this.seekTo(0);
          }
          if (!loop) {
            _this.isPlaying = false;
            onEnded();
          }
        });
        _defineProperty3(_assertThisInitialized(_this), "handleError", function() {
          var _this$props4;
          _this.isLoading = false;
          (_this$props4 = _this.props).onError.apply(_this$props4, arguments);
        });
        _defineProperty3(_assertThisInitialized(_this), "handleDurationCheck", function() {
          clearTimeout(_this.durationCheckTimeout);
          var duration2 = _this.getDuration();
          if (duration2) {
            if (!_this.onDurationCalled) {
              _this.props.onDuration(duration2);
              _this.onDurationCalled = true;
            }
          } else {
            _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);
          }
        });
        _defineProperty3(_assertThisInitialized(_this), "handleLoaded", function() {
          _this.isLoading = false;
        });
        return _this;
      }
      _createClass(Player2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          clearTimeout(this.progressTimeout);
          clearTimeout(this.durationCheckTimeout);
          if (this.isReady && this.props.stopOnUnmount) {
            this.player.stop();
            if (this.player.disablePIP) {
              this.player.disablePIP();
            }
          }
          this.mounted = false;
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this2 = this;
          if (!this.player) {
            return;
          }
          var _this$props5 = this.props, url = _this$props5.url, playing = _this$props5.playing, volume = _this$props5.volume, muted = _this$props5.muted, playbackRate = _this$props5.playbackRate, pip = _this$props5.pip, loop = _this$props5.loop, activePlayer = _this$props5.activePlayer, disableDeferredLoading = _this$props5.disableDeferredLoading;
          if (!(0, _reactFastCompare["default"])(prevProps.url, url)) {
            if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, _utils.isMediaStream)(url)) {
              console.warn("ReactPlayer: the attempt to load ".concat(url, " is being deferred until the player has loaded"));
              this.loadOnReady = url;
              return;
            }
            this.isLoading = true;
            this.startOnPlay = true;
            this.onDurationCalled = false;
            this.player.load(url, this.isReady);
          }
          if (!prevProps.playing && playing && !this.isPlaying) {
            this.player.play();
          }
          if (prevProps.playing && !playing && this.isPlaying) {
            this.player.pause();
          }
          if (!prevProps.pip && pip && this.player.enablePIP) {
            this.player.enablePIP();
          }
          if (prevProps.pip && !pip && this.player.disablePIP) {
            this.player.disablePIP();
          }
          if (prevProps.volume !== volume && volume !== null) {
            this.player.setVolume(volume);
          }
          if (prevProps.muted !== muted) {
            if (muted) {
              this.player.mute();
            } else {
              this.player.unmute();
              if (volume !== null) {
                setTimeout(function() {
                  return _this2.player.setVolume(volume);
                });
              }
            }
          }
          if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {
            this.player.setPlaybackRate(playbackRate);
          }
          if (prevProps.loop !== loop && this.player.setLoop) {
            this.player.setLoop(loop);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.isReady) return null;
          return this.player.getDuration();
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.isReady) return null;
          return this.player.getCurrentTime();
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.isReady) return null;
          return this.player.getSecondsLoaded();
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount, type) {
          var _this3 = this;
          if (!this.isReady) {
            if (amount !== 0) {
              this.seekOnPlay = amount;
              setTimeout(function() {
                _this3.seekOnPlay = null;
              }, SEEK_ON_PLAY_EXPIRY);
            }
            return;
          }
          var isFraction = !type ? amount > 0 && amount < 1 : type === "fraction";
          if (isFraction) {
            var duration2 = this.player.getDuration();
            if (!duration2) {
              console.warn("ReactPlayer: could not seek using fraction – duration not yet available");
              return;
            }
            this.player.seekTo(duration2 * amount);
            return;
          }
          this.player.seekTo(amount);
        }
      }, {
        key: "render",
        value: function render() {
          var Player3 = this.props.activePlayer;
          if (!Player3) {
            return null;
          }
          return _react["default"].createElement(Player3, _extends2({}, this.props, {
            onMount: this.handlePlayerMount,
            onReady: this.handleReady,
            onPlay: this.handlePlay,
            onPause: this.handlePause,
            onEnded: this.handleEnded,
            onLoaded: this.handleLoaded,
            onError: this.handleError
          }));
        }
      }]);
      return Player2;
    }(_react.Component);
    exports["default"] = Player;
    _defineProperty3(Player, "displayName", "Player");
    _defineProperty3(Player, "propTypes", _props.propTypes);
    _defineProperty3(Player, "defaultProps", _props.defaultProps);
  }
});

// node_modules/react-player/lib/Preview.js
var require_Preview = __commonJS({
  "node_modules/react-player/lib/Preview.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache2 = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache2;
      };
      return cache2;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache2 = _getRequireWildcardCache();
      if (cache2 && cache2.has(obj)) {
        return cache2.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache2) {
        cache2.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var ICON_SIZE = "64px";
    var cache = {};
    var Preview = function(_Component) {
      _inherits(Preview2, _Component);
      var _super = _createSuper(Preview2);
      function Preview2() {
        var _this;
        _classCallCheck(this, Preview2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized(_this), "mounted", false);
        _defineProperty3(_assertThisInitialized(_this), "state", {
          image: null
        });
        _defineProperty3(_assertThisInitialized(_this), "handleKeyPress", function(e) {
          if (e.key === "Enter" || e.key === " ") {
            _this.props.onClick();
          }
        });
        return _this;
      }
      _createClass(Preview2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
          this.fetchImage(this.props);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this$props = this.props, url = _this$props.url, light = _this$props.light;
          if (prevProps.url !== url || prevProps.light !== light) {
            this.fetchImage(this.props);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.mounted = false;
        }
      }, {
        key: "fetchImage",
        value: function fetchImage(_ref) {
          var _this2 = this;
          var url = _ref.url, light = _ref.light, oEmbedUrl = _ref.oEmbedUrl;
          if (typeof light === "string") {
            this.setState({
              image: light
            });
            return;
          }
          if (cache[url]) {
            this.setState({
              image: cache[url]
            });
            return;
          }
          this.setState({
            image: null
          });
          return window.fetch(oEmbedUrl.replace("{url}", url)).then(function(response) {
            return response.json();
          }).then(function(data) {
            if (data.thumbnail_url && _this2.mounted) {
              var image3 = data.thumbnail_url.replace("height=100", "height=480");
              _this2.setState({
                image: image3
              });
              cache[url] = image3;
            }
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props2 = this.props, onClick = _this$props2.onClick, playIcon = _this$props2.playIcon, previewTabIndex = _this$props2.previewTabIndex;
          var image3 = this.state.image;
          var flexCenter = {
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          };
          var styles = {
            preview: _objectSpread3({
              width: "100%",
              height: "100%",
              backgroundImage: image3 ? "url(".concat(image3, ")") : void 0,
              backgroundSize: "cover",
              backgroundPosition: "center",
              cursor: "pointer"
            }, flexCenter),
            shadow: _objectSpread3({
              background: "radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",
              borderRadius: ICON_SIZE,
              width: ICON_SIZE,
              height: ICON_SIZE
            }, flexCenter),
            playIcon: {
              borderStyle: "solid",
              borderWidth: "16px 0 16px 26px",
              borderColor: "transparent transparent transparent white",
              marginLeft: "7px"
            }
          };
          var defaultPlayIcon = _react["default"].createElement("div", {
            style: styles.shadow,
            className: "react-player__shadow"
          }, _react["default"].createElement("div", {
            style: styles.playIcon,
            className: "react-player__play-icon"
          }));
          return _react["default"].createElement("div", {
            style: styles.preview,
            className: "react-player__preview",
            onClick,
            tabIndex: previewTabIndex,
            onKeyPress: this.handleKeyPress
          }, playIcon || defaultPlayIcon);
        }
      }]);
      return Preview2;
    }(_react.Component);
    exports["default"] = Preview;
  }
});

// node_modules/react-player/lib/ReactPlayer.js
var require_ReactPlayer = __commonJS({
  "node_modules/react-player/lib/ReactPlayer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createReactPlayer = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _memoizeOne = _interopRequireDefault((init_memoize_one_esm(), __toCommonJS(memoize_one_esm_exports)));
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _props = require_props();
    var _utils = require_utils();
    var _Player3 = _interopRequireDefault(require_Player());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function ownKeys3(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread3(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys3(Object(source), true).forEach(function(key) {
            _defineProperty3(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _toConsumableArray3(arr) {
      return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread3();
    }
    function _nonIterableSpread3() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray4(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray4(o2, minLen);
    }
    function _iterableToArray3(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }
    function _arrayWithoutHoles3(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray4(arr);
    }
    function _arrayLikeToArray4(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var Preview = (0, _react.lazy)(function() {
      return Promise.resolve().then(function() {
        return _interopRequireWildcard(require_Preview());
      });
    });
    var IS_BROWSER = typeof window !== "undefined" && window.document;
    var IS_GLOBAL = typeof global !== "undefined" && global.window && global.window.document;
    var SUPPORTED_PROPS = Object.keys(_props.propTypes);
    var UniversalSuspense = IS_BROWSER || IS_GLOBAL ? _react.Suspense : function() {
      return null;
    };
    var customPlayers = [];
    var createReactPlayer = function createReactPlayer2(players, fallback) {
      var _class, _temp;
      return _temp = _class = function(_Component) {
        _inherits(ReactPlayer3, _Component);
        var _super = _createSuper(ReactPlayer3);
        function ReactPlayer3() {
          var _this;
          _classCallCheck(this, ReactPlayer3);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty3(_assertThisInitialized(_this), "state", {
            showPreview: !!_this.props.light
          });
          _defineProperty3(_assertThisInitialized(_this), "references", {
            wrapper: function wrapper(_wrapper) {
              _this.wrapper = _wrapper;
            },
            player: function player(_player) {
              _this.player = _player;
            }
          });
          _defineProperty3(_assertThisInitialized(_this), "handleClickPreview", function(e) {
            _this.setState({
              showPreview: false
            });
            _this.props.onClickPreview(e);
          });
          _defineProperty3(_assertThisInitialized(_this), "showPreview", function() {
            _this.setState({
              showPreview: true
            });
          });
          _defineProperty3(_assertThisInitialized(_this), "getDuration", function() {
            if (!_this.player) return null;
            return _this.player.getDuration();
          });
          _defineProperty3(_assertThisInitialized(_this), "getCurrentTime", function() {
            if (!_this.player) return null;
            return _this.player.getCurrentTime();
          });
          _defineProperty3(_assertThisInitialized(_this), "getSecondsLoaded", function() {
            if (!_this.player) return null;
            return _this.player.getSecondsLoaded();
          });
          _defineProperty3(_assertThisInitialized(_this), "getInternalPlayer", function() {
            var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "player";
            if (!_this.player) return null;
            return _this.player.getInternalPlayer(key);
          });
          _defineProperty3(_assertThisInitialized(_this), "seekTo", function(fraction, type) {
            if (!_this.player) return null;
            _this.player.seekTo(fraction, type);
          });
          _defineProperty3(_assertThisInitialized(_this), "handleReady", function() {
            _this.props.onReady(_assertThisInitialized(_this));
          });
          _defineProperty3(_assertThisInitialized(_this), "getActivePlayer", (0, _memoizeOne["default"])(function(url) {
            for (var _i = 0, _arr = [].concat(customPlayers, _toConsumableArray3(players)); _i < _arr.length; _i++) {
              var player = _arr[_i];
              if (player.canPlay(url)) {
                return player;
              }
            }
            if (fallback) {
              return fallback;
            }
            return null;
          }));
          _defineProperty3(_assertThisInitialized(_this), "getConfig", (0, _memoizeOne["default"])(function(url, key) {
            var config = _this.props.config;
            return _deepmerge["default"].all([_props.defaultProps.config, _props.defaultProps.config[key] || {}, config, config[key] || {}]);
          }));
          _defineProperty3(_assertThisInitialized(_this), "getAttributes", (0, _memoizeOne["default"])(function(url) {
            return (0, _utils.omit)(_this.props, SUPPORTED_PROPS);
          }));
          _defineProperty3(_assertThisInitialized(_this), "renderActivePlayer", function(url) {
            if (!url) return null;
            var player = _this.getActivePlayer(url);
            if (!player) return null;
            var config = _this.getConfig(url, player.key);
            return _react["default"].createElement(_Player3["default"], _extends2({}, _this.props, {
              key: player.key,
              ref: _this.references.player,
              config,
              activePlayer: player.lazyPlayer || player,
              onReady: _this.handleReady
            }));
          });
          return _this;
        }
        _createClass(ReactPlayer3, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            return !(0, _reactFastCompare["default"])(this.props, nextProps) || !(0, _reactFastCompare["default"])(this.state, nextState);
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var light = this.props.light;
            if (!prevProps.light && light) {
              this.setState({
                showPreview: true
              });
            }
            if (prevProps.light && !light) {
              this.setState({
                showPreview: false
              });
            }
          }
        }, {
          key: "renderPreview",
          value: function renderPreview(url) {
            if (!url) return null;
            var _this$props = this.props, light = _this$props.light, playIcon = _this$props.playIcon, previewTabIndex = _this$props.previewTabIndex, oEmbedUrl = _this$props.oEmbedUrl;
            return _react["default"].createElement(Preview, {
              url,
              light,
              playIcon,
              previewTabIndex,
              oEmbedUrl,
              onClick: this.handleClickPreview
            });
          }
        }, {
          key: "render",
          value: function render() {
            var _this$props2 = this.props, url = _this$props2.url, style = _this$props2.style, width = _this$props2.width, height = _this$props2.height, fallback2 = _this$props2.fallback, Wrapper = _this$props2.wrapper;
            var showPreview = this.state.showPreview;
            var attributes = this.getAttributes(url);
            return _react["default"].createElement(Wrapper, _extends2({
              ref: this.references.wrapper,
              style: _objectSpread3(_objectSpread3({}, style), {}, {
                width,
                height
              })
            }, attributes), _react["default"].createElement(UniversalSuspense, {
              fallback: fallback2
            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));
          }
        }]);
        return ReactPlayer3;
      }(_react.Component), _defineProperty3(_class, "displayName", "ReactPlayer"), _defineProperty3(_class, "propTypes", _props.propTypes), _defineProperty3(_class, "defaultProps", _props.defaultProps), _defineProperty3(_class, "addCustomPlayer", function(player) {
        customPlayers.push(player);
      }), _defineProperty3(_class, "removeCustomPlayers", function() {
        customPlayers.length = 0;
      }), _defineProperty3(_class, "canPlay", function(url) {
        for (var _i2 = 0, _arr2 = [].concat(customPlayers, _toConsumableArray3(players)); _i2 < _arr2.length; _i2++) {
          var _Player = _arr2[_i2];
          if (_Player.canPlay(url)) {
            return true;
          }
        }
        return false;
      }), _defineProperty3(_class, "canEnablePIP", function(url) {
        for (var _i3 = 0, _arr3 = [].concat(customPlayers, _toConsumableArray3(players)); _i3 < _arr3.length; _i3++) {
          var _Player2 = _arr3[_i3];
          if (_Player2.canEnablePIP && _Player2.canEnablePIP(url)) {
            return true;
          }
        }
        return false;
      }), _temp;
    };
    exports.createReactPlayer = createReactPlayer;
  }
});

// node_modules/react-player/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-player/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _players = _interopRequireDefault(require_players());
    var _ReactPlayer = require_ReactPlayer();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var fallback = _players["default"][_players["default"].length - 1];
    var _default = (0, _ReactPlayer.createReactPlayer)(_players["default"], fallback);
    exports["default"] = _default;
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    (function() {
      function is2(x2, y2) {
        return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
      }
      function useSyncExternalStore$2(subscribe2, getSnapshot) {
        didWarnOld18Alpha || void 0 === React220.startTransition || (didWarnOld18Alpha = true, console.error(
          "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
        ));
        var value = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedValue = getSnapshot();
          objectIs(value, cachedValue) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        }
        cachedValue = useState76({
          inst: { value, getSnapshot }
        });
        var inst = cachedValue[0].inst, forceUpdate = cachedValue[1];
        useLayoutEffect13(
          function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          },
          [subscribe2, value, getSnapshot]
        );
        useEffect91(
          function() {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            return subscribe2(function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            });
          },
          [subscribe2]
        );
        useDebugValue(value);
        return value;
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error) {
          return true;
        }
      }
      function useSyncExternalStore$1(subscribe2, getSnapshot) {
        return getSnapshot();
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React220 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is2, useState76 = React220.useState, useEffect91 = React220.useEffect, useLayoutEffect13 = React220.useLayoutEffect, useDebugValue = React220.useDebugValue, didWarnOld18Alpha = false, didWarnUncachedGetSnapshot = false, shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
      exports.useSyncExternalStore = void 0 !== React220.useSyncExternalStore ? React220.useSyncExternalStore : shim;
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module) {
    !function(t2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs = e();
    }(exports, function() {
      "use strict";
      var t2 = 1e3, e = 6e4, n2 = 36e5, r2 = "millisecond", i2 = "second", s2 = "minute", u3 = "hour", a2 = "day", o2 = "week", c2 = "month", f2 = "quarter", h2 = "year", d2 = "date", l2 = "Invalid Date", $2 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y2 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M2 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
        var e2 = ["th", "st", "nd", "rd"], n3 = t3 % 100;
        return "[" + t3 + (e2[(n3 - 20) % 10] || e2[n3] || e2[0]) + "]";
      } }, m2 = function(t3, e2, n3) {
        var r3 = String(t3);
        return !r3 || r3.length >= e2 ? t3 : "" + Array(e2 + 1 - r3.length).join(n3) + t3;
      }, v2 = { s: m2, z: function(t3) {
        var e2 = -t3.utcOffset(), n3 = Math.abs(e2), r3 = Math.floor(n3 / 60), i3 = n3 % 60;
        return (e2 <= 0 ? "+" : "-") + m2(r3, 2, "0") + ":" + m2(i3, 2, "0");
      }, m: function t3(e2, n3) {
        if (e2.date() < n3.date()) return -t3(n3, e2);
        var r3 = 12 * (n3.year() - e2.year()) + (n3.month() - e2.month()), i3 = e2.clone().add(r3, c2), s3 = n3 - i3 < 0, u4 = e2.clone().add(r3 + (s3 ? -1 : 1), c2);
        return +(-(r3 + (n3 - i3) / (s3 ? i3 - u4 : u4 - i3)) || 0);
      }, a: function(t3) {
        return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
      }, p: function(t3) {
        return { M: c2, y: h2, w: o2, d: a2, D: d2, h: u3, m: s2, s: i2, ms: r2, Q: f2 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t3) {
        return void 0 === t3;
      } }, g2 = "en", D2 = {};
      D2[g2] = M2;
      var p2 = "$isDayjsObject", S2 = function(t3) {
        return t3 instanceof _2 || !(!t3 || !t3[p2]);
      }, w2 = function t3(e2, n3, r3) {
        var i3;
        if (!e2) return g2;
        if ("string" == typeof e2) {
          var s3 = e2.toLowerCase();
          D2[s3] && (i3 = s3), n3 && (D2[s3] = n3, i3 = s3);
          var u4 = e2.split("-");
          if (!i3 && u4.length > 1) return t3(u4[0]);
        } else {
          var a3 = e2.name;
          D2[a3] = e2, i3 = a3;
        }
        return !r3 && i3 && (g2 = i3), i3 || !r3 && g2;
      }, O2 = function(t3, e2) {
        if (S2(t3)) return t3.clone();
        var n3 = "object" == typeof e2 ? e2 : {};
        return n3.date = t3, n3.args = arguments, new _2(n3);
      }, b2 = v2;
      b2.l = w2, b2.i = S2, b2.w = function(t3, e2) {
        return O2(t3, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _2 = function() {
        function M3(t3) {
          this.$L = w2(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p2] = true;
        }
        var m3 = M3.prototype;
        return m3.parse = function(t3) {
          this.$d = function(t4) {
            var e2 = t4.date, n3 = t4.utc;
            if (null === e2) return /* @__PURE__ */ new Date(NaN);
            if (b2.u(e2)) return /* @__PURE__ */ new Date();
            if (e2 instanceof Date) return new Date(e2);
            if ("string" == typeof e2 && !/Z$/i.test(e2)) {
              var r3 = e2.match($2);
              if (r3) {
                var i3 = r3[2] - 1 || 0, s3 = (r3[7] || "0").substring(0, 3);
                return n3 ? new Date(Date.UTC(r3[1], i3, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3)) : new Date(r3[1], i3, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3);
              }
            }
            return new Date(e2);
          }(t3), this.init();
        }, m3.init = function() {
          var t3 = this.$d;
          this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
        }, m3.$utils = function() {
          return b2;
        }, m3.isValid = function() {
          return !(this.$d.toString() === l2);
        }, m3.isSame = function(t3, e2) {
          var n3 = O2(t3);
          return this.startOf(e2) <= n3 && n3 <= this.endOf(e2);
        }, m3.isAfter = function(t3, e2) {
          return O2(t3) < this.startOf(e2);
        }, m3.isBefore = function(t3, e2) {
          return this.endOf(e2) < O2(t3);
        }, m3.$g = function(t3, e2, n3) {
          return b2.u(t3) ? this[e2] : this.set(n3, t3);
        }, m3.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m3.valueOf = function() {
          return this.$d.getTime();
        }, m3.startOf = function(t3, e2) {
          var n3 = this, r3 = !!b2.u(e2) || e2, f3 = b2.p(t3), l3 = function(t4, e3) {
            var i3 = b2.w(n3.$u ? Date.UTC(n3.$y, e3, t4) : new Date(n3.$y, e3, t4), n3);
            return r3 ? i3 : i3.endOf(a2);
          }, $3 = function(t4, e3) {
            return b2.w(n3.toDate()[t4].apply(n3.toDate("s"), (r3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n3);
          }, y3 = this.$W, M4 = this.$M, m4 = this.$D, v3 = "set" + (this.$u ? "UTC" : "");
          switch (f3) {
            case h2:
              return r3 ? l3(1, 0) : l3(31, 11);
            case c2:
              return r3 ? l3(1, M4) : l3(0, M4 + 1);
            case o2:
              var g3 = this.$locale().weekStart || 0, D3 = (y3 < g3 ? y3 + 7 : y3) - g3;
              return l3(r3 ? m4 - D3 : m4 + (6 - D3), M4);
            case a2:
            case d2:
              return $3(v3 + "Hours", 0);
            case u3:
              return $3(v3 + "Minutes", 1);
            case s2:
              return $3(v3 + "Seconds", 2);
            case i2:
              return $3(v3 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m3.endOf = function(t3) {
          return this.startOf(t3, false);
        }, m3.$set = function(t3, e2) {
          var n3, o3 = b2.p(t3), f3 = "set" + (this.$u ? "UTC" : ""), l3 = (n3 = {}, n3[a2] = f3 + "Date", n3[d2] = f3 + "Date", n3[c2] = f3 + "Month", n3[h2] = f3 + "FullYear", n3[u3] = f3 + "Hours", n3[s2] = f3 + "Minutes", n3[i2] = f3 + "Seconds", n3[r2] = f3 + "Milliseconds", n3)[o3], $3 = o3 === a2 ? this.$D + (e2 - this.$W) : e2;
          if (o3 === c2 || o3 === h2) {
            var y3 = this.clone().set(d2, 1);
            y3.$d[l3]($3), y3.init(), this.$d = y3.set(d2, Math.min(this.$D, y3.daysInMonth())).$d;
          } else l3 && this.$d[l3]($3);
          return this.init(), this;
        }, m3.set = function(t3, e2) {
          return this.clone().$set(t3, e2);
        }, m3.get = function(t3) {
          return this[b2.p(t3)]();
        }, m3.add = function(r3, f3) {
          var d3, l3 = this;
          r3 = Number(r3);
          var $3 = b2.p(f3), y3 = function(t3) {
            var e2 = O2(l3);
            return b2.w(e2.date(e2.date() + Math.round(t3 * r3)), l3);
          };
          if ($3 === c2) return this.set(c2, this.$M + r3);
          if ($3 === h2) return this.set(h2, this.$y + r3);
          if ($3 === a2) return y3(1);
          if ($3 === o2) return y3(7);
          var M4 = (d3 = {}, d3[s2] = e, d3[u3] = n2, d3[i2] = t2, d3)[$3] || 1, m4 = this.$d.getTime() + r3 * M4;
          return b2.w(m4, this);
        }, m3.subtract = function(t3, e2) {
          return this.add(-1 * t3, e2);
        }, m3.format = function(t3) {
          var e2 = this, n3 = this.$locale();
          if (!this.isValid()) return n3.invalidDate || l2;
          var r3 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i3 = b2.z(this), s3 = this.$H, u4 = this.$m, a3 = this.$M, o3 = n3.weekdays, c3 = n3.months, f3 = n3.meridiem, h3 = function(t4, n4, i4, s4) {
            return t4 && (t4[n4] || t4(e2, r3)) || i4[n4].slice(0, s4);
          }, d3 = function(t4) {
            return b2.s(s3 % 12 || 12, t4, "0");
          }, $3 = f3 || function(t4, e3, n4) {
            var r4 = t4 < 12 ? "AM" : "PM";
            return n4 ? r4.toLowerCase() : r4;
          };
          return r3.replace(y2, function(t4, r4) {
            return r4 || function(t5) {
              switch (t5) {
                case "YY":
                  return String(e2.$y).slice(-2);
                case "YYYY":
                  return b2.s(e2.$y, 4, "0");
                case "M":
                  return a3 + 1;
                case "MM":
                  return b2.s(a3 + 1, 2, "0");
                case "MMM":
                  return h3(n3.monthsShort, a3, c3, 3);
                case "MMMM":
                  return h3(c3, a3);
                case "D":
                  return e2.$D;
                case "DD":
                  return b2.s(e2.$D, 2, "0");
                case "d":
                  return String(e2.$W);
                case "dd":
                  return h3(n3.weekdaysMin, e2.$W, o3, 2);
                case "ddd":
                  return h3(n3.weekdaysShort, e2.$W, o3, 3);
                case "dddd":
                  return o3[e2.$W];
                case "H":
                  return String(s3);
                case "HH":
                  return b2.s(s3, 2, "0");
                case "h":
                  return d3(1);
                case "hh":
                  return d3(2);
                case "a":
                  return $3(s3, u4, true);
                case "A":
                  return $3(s3, u4, false);
                case "m":
                  return String(u4);
                case "mm":
                  return b2.s(u4, 2, "0");
                case "s":
                  return String(e2.$s);
                case "ss":
                  return b2.s(e2.$s, 2, "0");
                case "SSS":
                  return b2.s(e2.$ms, 3, "0");
                case "Z":
                  return i3;
              }
              return null;
            }(t4) || i3.replace(":", "");
          });
        }, m3.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m3.diff = function(r3, d3, l3) {
          var $3, y3 = this, M4 = b2.p(d3), m4 = O2(r3), v3 = (m4.utcOffset() - this.utcOffset()) * e, g3 = this - m4, D3 = function() {
            return b2.m(y3, m4);
          };
          switch (M4) {
            case h2:
              $3 = D3() / 12;
              break;
            case c2:
              $3 = D3();
              break;
            case f2:
              $3 = D3() / 3;
              break;
            case o2:
              $3 = (g3 - v3) / 6048e5;
              break;
            case a2:
              $3 = (g3 - v3) / 864e5;
              break;
            case u3:
              $3 = g3 / n2;
              break;
            case s2:
              $3 = g3 / e;
              break;
            case i2:
              $3 = g3 / t2;
              break;
            default:
              $3 = g3;
          }
          return l3 ? $3 : b2.a($3);
        }, m3.daysInMonth = function() {
          return this.endOf(c2).$D;
        }, m3.$locale = function() {
          return D2[this.$L];
        }, m3.locale = function(t3, e2) {
          if (!t3) return this.$L;
          var n3 = this.clone(), r3 = w2(t3, e2, true);
          return r3 && (n3.$L = r3), n3;
        }, m3.clone = function() {
          return b2.w(this.$d, this);
        }, m3.toDate = function() {
          return new Date(this.valueOf());
        }, m3.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m3.toISOString = function() {
          return this.$d.toISOString();
        }, m3.toString = function() {
          return this.$d.toUTCString();
        }, M3;
      }(), k2 = _2.prototype;
      return O2.prototype = k2, [["$ms", r2], ["$s", i2], ["$m", s2], ["$H", u3], ["$W", a2], ["$M", c2], ["$y", h2], ["$D", d2]].forEach(function(t3) {
        k2[t3[1]] = function(e2) {
          return this.$g(e2, t3[0], t3[1]);
        };
      }), O2.extend = function(t3, e2) {
        return t3.$i || (t3(e2, _2, O2), t3.$i = true), O2;
      }, O2.locale = w2, O2.isDayjs = S2, O2.unix = function(t3) {
        return O2(1e3 * t3);
      }, O2.en = D2[g2], O2.Ls = D2, O2.p = {}, O2;
    });
  }
});

// node_modules/dayjs/plugin/calendar.js
var require_calendar = __commonJS({
  "node_modules/dayjs/plugin/calendar.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_calendar = t2();
    }(exports, function() {
      "use strict";
      return function(e, t2, a2) {
        var n2 = "h:mm A", d2 = { lastDay: "[Yesterday at] " + n2, sameDay: "[Today at] " + n2, nextDay: "[Tomorrow at] " + n2, nextWeek: "dddd [at] " + n2, lastWeek: "[Last] dddd [at] " + n2, sameElse: "MM/DD/YYYY" };
        t2.prototype.calendar = function(e2, t3) {
          var n3 = t3 || this.$locale().calendar || d2, o2 = a2(e2 || void 0).startOf("d"), s2 = this.diff(o2, "d", true), i2 = "sameElse", f2 = s2 < -6 ? i2 : s2 < -1 ? "lastWeek" : s2 < 0 ? "lastDay" : s2 < 1 ? "sameDay" : s2 < 2 ? "nextDay" : s2 < 7 ? "nextWeek" : i2, l2 = n3[f2] || d2[f2];
          return "function" == typeof l2 ? l2.call(this, a2()) : this.format(l2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/localizedFormat.js
var require_localizedFormat = __commonJS({
  "node_modules/dayjs/plugin/localizedFormat.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_localizedFormat = t2();
    }(exports, function() {
      "use strict";
      var e = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" };
      return function(t2, o2, n2) {
        var r2 = o2.prototype, i2 = r2.format;
        n2.en.formats = e, r2.format = function(t3) {
          void 0 === t3 && (t3 = "YYYY-MM-DDTHH:mm:ssZ");
          var o3 = this.$locale().formats, n3 = function(t4, o4) {
            return t4.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t5, n4, r3) {
              var i3 = r3 && r3.toUpperCase();
              return n4 || o4[r3] || e[r3] || o4[i3].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t6, o5) {
                return t6 || o5.slice(1);
              });
            });
          }(t3, void 0 === o3 ? {} : o3);
          return i2.call(this, n3);
        };
      };
    });
  }
});

// node_modules/@braintree/sanitize-url/dist/index.js
var require_dist = __commonJS({
  "node_modules/@braintree/sanitize-url/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sanitizeUrl = exports.BLANK_URL = void 0;
    var invalidProtocolRegex = /^([^\w]*)(javascript|data|vbscript)/im;
    var htmlEntitiesRegex = /&#(\w+)(^\w|;)?/g;
    var htmlCtrlEntityRegex = /&(newline|tab);/gi;
    var ctrlCharactersRegex = /[\u0000-\u001F\u007F-\u009F\u2000-\u200D\uFEFF]/gim;
    var urlSchemeRegex = /^.+(:|&colon;)/gim;
    var relativeFirstCharacters = [".", "/"];
    exports.BLANK_URL = "about:blank";
    function isRelativeUrlWithoutProtocol(url) {
      return relativeFirstCharacters.indexOf(url[0]) > -1;
    }
    function decodeHtmlCharacters(str) {
      var removedNullByte = str.replace(ctrlCharactersRegex, "");
      return removedNullByte.replace(htmlEntitiesRegex, function(match, dec) {
        return String.fromCharCode(dec);
      });
    }
    function sanitizeUrl4(url) {
      if (!url) {
        return exports.BLANK_URL;
      }
      var sanitizedUrl = decodeHtmlCharacters(url).replace(htmlCtrlEntityRegex, "").replace(ctrlCharactersRegex, "").trim();
      if (!sanitizedUrl) {
        return exports.BLANK_URL;
      }
      if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {
        return sanitizedUrl;
      }
      var urlSchemeParseResults = sanitizedUrl.match(urlSchemeRegex);
      if (!urlSchemeParseResults) {
        return sanitizedUrl;
      }
      var urlScheme = urlSchemeParseResults[0];
      if (invalidProtocolRegex.test(urlScheme)) {
        return exports.BLANK_URL;
      }
      return sanitizedUrl;
    }
    exports.sanitizeUrl = sanitizeUrl4;
  }
});

// node_modules/lodash.throttle/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.throttle/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root4 = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root4.Date.now();
    };
    function debounce6(func, wait, options2) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options2)) {
        leading = !!options2.leading;
        maxing = "maxWait" in options2;
        maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function throttle7(func, wait, options2) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject2(options2)) {
        leading = "leading" in options2 ? !!options2.leading : leading;
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      return debounce6(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = throttle7;
  }
});

// node_modules/lodash.uniqby/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.uniqby/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root4 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayIncludes(array, value) {
      var length = array ? array.length : 0;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index4 = -1, length = array ? array.length : 0;
      while (++index4 < length) {
        if (comparator(value, array[index4])) {
          return true;
        }
      }
      return false;
    }
    function arraySome(array, predicate) {
      var index4 = -1, length = array ? array.length : 0;
      while (++index4 < length) {
        if (predicate(array[index4], index4, array)) {
          return true;
        }
      }
      return false;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index4 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index4-- : ++index4 < length) {
        if (predicate(array[index4], index4, array)) {
          return index4;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index4 = fromIndex - 1, length = array.length;
      while (++index4 < length) {
        if (array[index4] === value) {
          return index4;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseTimes(n2, iteratee) {
      var index4 = -1, result = Array(n2);
      while (++index4 < n2) {
        result[index4] = iteratee(index4);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue2(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function mapToArray(map4) {
      var index4 = -1, result = Array(map4.size);
      map4.forEach(function(value, key) {
        result[++index4] = [key, value];
      });
      return result;
    }
    function overArg(func, transform3) {
      return function(arg) {
        return func(transform3(arg));
      };
    }
    function setToArray(set) {
      var index4 = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index4] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root4["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty3 = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root4.Symbol;
    var Uint8Array2 = root4.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice2 = arrayProto.splice;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root4, "DataView");
    var Map2 = getNative(root4, "Map");
    var Promise2 = getNative(root4, "Promise");
    var Set2 = getNative(root4, "Set");
    var WeakMap2 = getNative(root4, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index4 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty3.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty3.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index4 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index4 == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index4, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      return index4 < 0 ? void 0 : data[index4][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        data.push([key, value]);
      } else {
        data[index4][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index4 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values2) {
      var index4 = -1, length = values2 ? values2.length : 0;
      this.__data__ = new MapCache();
      while (++index4 < length) {
        this.add(values2[index4]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty3.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path2) {
      path2 = isKey(path2, object) ? [path2] : castPath(path2);
      var index4 = 0, length = path2.length;
      while (object != null && index4 < length) {
        object = object[toKey(path2[index4++])];
      }
      return index4 && index4 == length ? object : void 0;
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject2(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty3.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty3.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index4 = matchData.length, length = index4, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index4--) {
        var data = matchData[index4];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index4 < length) {
        data = matchData[index4];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty3.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path2, srcValue) {
      if (isKey(path2) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path2), srcValue);
      }
      return function(object) {
        var objValue = get2(object, path2);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function basePropertyDeep(path2) {
      return function(object) {
        return baseGet(object, path2);
      };
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function baseUniq(array, iteratee, comparator) {
      var index4 = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index4 < length) {
          var value = array[index4], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop9 : function(values2) {
      return new Set2(values2);
    };
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index4 = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index4 < arrLength) {
        var arrValue = array[index4], othValue = other[index4];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index4, other, array, stack) : customizer(arrValue, othValue, index4, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert2 = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert2 || (convert2 = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert2(object), convert2(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys3(object), objLength = objProps.length, othProps = keys3(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index4 = objLength;
      while (index4--) {
        var key = objProps[index4];
        if (!(isPartial ? key in other : hasOwnProperty3.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index4 < objLength) {
        key = objProps[index4];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getMapData(map4, key) {
      var data = map4.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys3(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue2(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path2, hasFunc) {
      path2 = isKey(path2, object) ? [path2] : castPath(path2);
      var result, index4 = -1, length = path2.length;
      while (++index4 < length) {
        var key = toKey(path2[index4]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject2(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var stringToPath = memoize(function(string3) {
      string3 = toString3(string3);
      var result = [];
      if (reLeadingDot.test(string3)) {
        result.push("");
      }
      string3.replace(rePropName, function(match, number2, quote, string4) {
        result.push(quote ? string4.replace(reEscapeChar, "$1") : number2 || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function uniqBy9(array, iteratee) {
      return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
    }
    function memoize(func, resolver2) {
      if (typeof func != "function" || resolver2 && typeof resolver2 != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty3.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString3(value) {
      return value == null ? "" : baseToString(value);
    }
    function get2(object, path2, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path2);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path2) {
      return object != null && hasPath(object, path2, baseHasIn);
    }
    function keys3(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function identity(value) {
      return value;
    }
    function noop9() {
    }
    function property(path2) {
      return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
    }
    module.exports = uniqBy9;
  }
});

// node_modules/lodash.debounce/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.debounce/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root4 = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root4.Date.now();
    };
    function debounce6(func, wait, options2) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options2)) {
        leading = !!options2.leading;
        maxing = "maxWait" in options2;
        maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = debounce6;
  }
});

// node_modules/inline-style-parser/index.js
var require_inline_style_parser = __commonJS({
  "node_modules/inline-style-parser/index.js"(exports, module) {
    var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
    var NEWLINE_REGEX = /\n/g;
    var WHITESPACE_REGEX = /^\s*/;
    var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
    var COLON_REGEX = /^:\s*/;
    var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
    var SEMICOLON_REGEX = /^[;\s]*/;
    var TRIM_REGEX = /^\s+|\s+$/g;
    var NEWLINE = "\n";
    var FORWARD_SLASH = "/";
    var ASTERISK2 = "*";
    var EMPTY_STRING = "";
    var TYPE_COMMENT = "comment";
    var TYPE_DECLARATION = "declaration";
    module.exports = function(style, options2) {
      if (typeof style !== "string") {
        throw new TypeError("First argument must be a string");
      }
      if (!style) return [];
      options2 = options2 || {};
      var lineno = 1;
      var column = 1;
      function updatePosition(str) {
        var lines = str.match(NEWLINE_REGEX);
        if (lines) lineno += lines.length;
        var i2 = str.lastIndexOf(NEWLINE);
        column = ~i2 ? str.length - i2 : column + str.length;
      }
      function position3() {
        var start3 = { line: lineno, column };
        return function(node2) {
          node2.position = new Position(start3);
          whitespace3();
          return node2;
        };
      }
      function Position(start3) {
        this.start = start3;
        this.end = { line: lineno, column };
        this.source = options2.source;
      }
      Position.prototype.content = style;
      var errorsList = [];
      function error(msg) {
        var err = new Error(
          options2.source + ":" + lineno + ":" + column + ": " + msg
        );
        err.reason = msg;
        err.filename = options2.source;
        err.line = lineno;
        err.column = column;
        err.source = style;
        if (options2.silent) {
          errorsList.push(err);
        } else {
          throw err;
        }
      }
      function match(re3) {
        var m2 = re3.exec(style);
        if (!m2) return;
        var str = m2[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m2;
      }
      function whitespace3() {
        match(WHITESPACE_REGEX);
      }
      function comments(rules) {
        var c2;
        rules = rules || [];
        while (c2 = comment()) {
          if (c2 !== false) {
            rules.push(c2);
          }
        }
        return rules;
      }
      function comment() {
        var pos = position3();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK2 != style.charAt(1)) return;
        var i2 = 2;
        while (EMPTY_STRING != style.charAt(i2) && (ASTERISK2 != style.charAt(i2) || FORWARD_SLASH != style.charAt(i2 + 1))) {
          ++i2;
        }
        i2 += 2;
        if (EMPTY_STRING === style.charAt(i2 - 1)) {
          return error("End of comment missing");
        }
        var str = style.slice(2, i2 - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i2);
        column += 2;
        return pos({
          type: TYPE_COMMENT,
          comment: str
        });
      }
      function declaration() {
        var pos = position3();
        var prop = match(PROPERTY_REGEX);
        if (!prop) return;
        comment();
        if (!match(COLON_REGEX)) return error("property missing ':'");
        var val = match(VALUE_REGEX);
        var ret = pos({
          type: TYPE_DECLARATION,
          property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
          value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
        });
        match(SEMICOLON_REGEX);
        return ret;
      }
      function declarations() {
        var decls = [];
        comments(decls);
        var decl;
        while (decl = declaration()) {
          if (decl !== false) {
            decls.push(decl);
            comments(decls);
          }
        }
        return decls;
      }
      whitespace3();
      return declarations();
    };
    function trim(str) {
      return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
    }
  }
});

// node_modules/style-to-object/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/style-to-object/cjs/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = StyleToObject;
    var inline_style_parser_1 = __importDefault(require_inline_style_parser());
    function StyleToObject(style, iterator) {
      var styleObject = null;
      if (!style || typeof style !== "string") {
        return styleObject;
      }
      var declarations = (0, inline_style_parser_1.default)(style);
      var hasIterator = typeof iterator === "function";
      declarations.forEach(function(declaration) {
        if (declaration.type !== "declaration") {
          return;
        }
        var property = declaration.property, value = declaration.value;
        if (hasIterator) {
          iterator(property, value, declaration);
        } else if (value) {
          styleObject = styleObject || {};
          styleObject[property] = value;
        }
      });
      return styleObject;
    }
  }
});

// node_modules/style-to-js/cjs/utilities.js
var require_utilities = __commonJS({
  "node_modules/style-to-js/cjs/utilities.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.camelCase = void 0;
    var CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;
    var HYPHEN_REGEX = /-([a-z])/g;
    var NO_HYPHEN_REGEX = /^[^-]+$/;
    var VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;
    var MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;
    var skipCamelCase = function(property) {
      return !property || NO_HYPHEN_REGEX.test(property) || CUSTOM_PROPERTY_REGEX.test(property);
    };
    var capitalize = function(match, character) {
      return character.toUpperCase();
    };
    var trimHyphen = function(match, prefix) {
      return "".concat(prefix, "-");
    };
    var camelCase = function(property, options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      if (skipCamelCase(property)) {
        return property;
      }
      property = property.toLowerCase();
      if (options2.reactCompat) {
        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);
      } else {
        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);
      }
      return property.replace(HYPHEN_REGEX, capitalize);
    };
    exports.camelCase = camelCase;
  }
});

// node_modules/style-to-js/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/style-to-js/cjs/index.js"(exports, module) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var style_to_object_1 = __importDefault(require_cjs2());
    var utilities_1 = require_utilities();
    function StyleToJS(style, options2) {
      var output = {};
      if (!style || typeof style !== "string") {
        return output;
      }
      (0, style_to_object_1.default)(style, function(property, value) {
        if (property && value) {
          output[(0, utilities_1.camelCase)(property, options2)] = value;
        }
      });
      return output;
    }
    StyleToJS.default = StyleToJS;
    module.exports = StyleToJS;
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s2 = 1e3;
    var m2 = s2 * 60;
    var h2 = m2 * 60;
    var d2 = h2 * 24;
    var w2 = d2 * 7;
    var y2 = d2 * 365.25;
    module.exports = function(val, options2) {
      options2 = options2 || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isFinite(val)) {
        return options2.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n2 = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n2 * y2;
        case "weeks":
        case "week":
        case "w":
          return n2 * w2;
        case "days":
        case "day":
        case "d":
          return n2 * d2;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n2 * h2;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n2 * m2;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n2 * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n2;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d2) {
        return Math.round(ms / d2) + "d";
      }
      if (msAbs >= h2) {
        return Math.round(ms / h2) + "h";
      }
      if (msAbs >= m2) {
        return Math.round(ms / m2) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms / s2) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d2) {
        return plural(ms, msAbs, d2, "day");
      }
      if (msAbs >= h2) {
        return plural(ms, msAbs, h2, "hour");
      }
      if (msAbs >= m2) {
        return plural(ms, msAbs, m2, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms, msAbs, s2, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n2, name2) {
      var isPlural = msAbs >= n2 * 1.5;
      return Math.round(ms / n2) + " " + name2 + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env2) {
      createDebug2.debug = createDebug2;
      createDebug2.default = createDebug2;
      createDebug2.coerce = coerce;
      createDebug2.disable = disable2;
      createDebug2.enable = enable;
      createDebug2.enabled = enabled;
      createDebug2.humanize = require_ms();
      createDebug2.destroy = destroy;
      Object.keys(env2).forEach((key) => {
        createDebug2[key] = env2[key];
      });
      createDebug2.names = [];
      createDebug2.skips = [];
      createDebug2.formatters = {};
      function selectColor2(namespace) {
        let hash3 = 0;
        for (let i2 = 0; i2 < namespace.length; i2++) {
          hash3 = (hash3 << 5) - hash3 + namespace.charCodeAt(i2);
          hash3 |= 0;
        }
        return createDebug2.colors[Math.abs(hash3) % createDebug2.colors.length];
      }
      createDebug2.selectColor = selectColor2;
      function createDebug2(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug2(...args) {
          if (!debug2.enabled) {
            return;
          }
          const self2 = debug2;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug2.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index4 = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index4++;
            const formatter = createDebug2.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index4];
              match = formatter.call(self2, val);
              args.splice(index4, 1);
              index4--;
            }
            return match;
          });
          createDebug2.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug2.log;
          logFn.apply(self2, args);
        }
        debug2.namespace = namespace;
        debug2.useColors = createDebug2.useColors();
        debug2.color = createDebug2.selectColor(namespace);
        debug2.extend = extend2;
        debug2.destroy = createDebug2.destroy;
        Object.defineProperty(debug2, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug2.namespaces) {
              namespacesCache = createDebug2.namespaces;
              enabledCache = createDebug2.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v2) => {
            enableOverride = v2;
          }
        });
        if (typeof createDebug2.init === "function") {
          createDebug2.init(debug2);
        }
        return debug2;
      }
      function extend2(namespace, delimiter) {
        const newDebug = createDebug2(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug2.save(namespaces);
        createDebug2.namespaces = namespaces;
        createDebug2.names = [];
        createDebug2.skips = [];
        const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
        for (const ns of split) {
          if (ns[0] === "-") {
            createDebug2.skips.push(ns.slice(1));
          } else {
            createDebug2.names.push(ns);
          }
        }
      }
      function matchesTemplate(search2, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while (searchIndex < search2.length) {
          if (templateIndex < template.length && (template[templateIndex] === search2[searchIndex] || template[templateIndex] === "*")) {
            if (template[templateIndex] === "*") {
              starIndex = templateIndex;
              matchIndex = searchIndex;
              templateIndex++;
            } else {
              searchIndex++;
              templateIndex++;
            }
          } else if (starIndex !== -1) {
            templateIndex = starIndex + 1;
            matchIndex++;
            searchIndex = matchIndex;
          } else {
            return false;
          }
        }
        while (templateIndex < template.length && template[templateIndex] === "*") {
          templateIndex++;
        }
        return templateIndex === template.length;
      }
      function disable2() {
        const namespaces = [
          ...createDebug2.names,
          ...createDebug2.skips.map((namespace) => "-" + namespace)
        ].join(",");
        createDebug2.enable("");
        return namespaces;
      }
      function enabled(name2) {
        for (const skip2 of createDebug2.skips) {
          if (matchesTemplate(name2, skip2)) {
            return false;
          }
        }
        for (const ns of createDebug2.names) {
          if (matchesTemplate(name2, ns)) {
            return true;
          }
        }
        return false;
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug2.enable(createDebug2.load());
      return createDebug2;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m2;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m2 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m2[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c2 = "color: " + this.color;
      args.splice(1, 0, c2, "color: inherit");
      let index4 = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index4++;
        if (match === "%c") {
          lastC = index4;
        }
      });
      args.splice(lastC, 0, c2);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r2;
      try {
        r2 = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r2 && typeof process !== "undefined" && "env" in process) {
        r2 = process.env.DEBUG;
      }
      return r2;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v2) {
      try {
        return JSON.stringify(v2);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports, module) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray2(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject2 = function isPlainObject3(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn.call(obj, key);
    };
    var setProperty = function setProperty2(target, options2) {
      if (defineProperty && options2.name === "__proto__") {
        defineProperty(target, options2.name, {
          enumerable: true,
          configurable: true,
          value: options2.newValue,
          writable: true
        });
      } else {
        target[options2.name] = options2.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name2) {
      if (name2 === "__proto__") {
        if (!hasOwn.call(obj, name2)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name2).value;
        }
      }
      return obj[name2];
    };
    module.exports = function extend2() {
      var options2, name2, src, copy2, copyIsArray, clone;
      var target = arguments[0];
      var i2 = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i2 = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i2 < length; ++i2) {
        options2 = arguments[i2];
        if (options2 != null) {
          for (name2 in options2) {
            src = getProperty(target, name2);
            copy2 = getProperty(options2, name2);
            if (target !== copy2) {
              if (deep && copy2 && (isPlainObject2(copy2) || (copyIsArray = isArray(copy2)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray(src) ? src : [];
                } else {
                  clone = src && isPlainObject2(src) ? src : {};
                }
                setProperty(target, { name: name2, newValue: extend2(deep, clone, copy2) });
              } else if (typeof copy2 !== "undefined") {
                setProperty(target, { name: name2, newValue: copy2 });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "node_modules/emoji-regex/index.js"(exports, module) {
    "use strict";
    module.exports = function() {
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning2 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
      warning2 = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning2;
  }
});

// node_modules/stream-chat-react/node_modules/react-image-gallery/build/image-gallery.js
var require_image_gallery = __commonJS({
  "node_modules/stream-chat-react/node_modules/react-image-gallery/build/image-gallery.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t2(require_react()) : "function" == typeof define && define.amd ? define(["react"], t2) : "object" == typeof exports ? exports.ImageGallery = t2(require_react()) : e.ImageGallery = t2(e.React);
    }(exports, function(e) {
      return (() => {
        var t2 = { 703: (e2, t3, n3) => {
          "use strict";
          var i3 = n3(414);
          function r3() {
          }
          function a2() {
          }
          a2.resetWarningCache = r3, e2.exports = function() {
            function e3(e4, t5, n5, r4, a3, s2) {
              if (s2 !== i3) {
                var o2 = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
                throw o2.name = "Invariant Violation", o2;
              }
            }
            function t4() {
              return e3;
            }
            e3.isRequired = e3;
            var n4 = { array: e3, bool: e3, func: e3, number: e3, object: e3, string: e3, symbol: e3, any: e3, arrayOf: t4, element: e3, elementType: e3, instanceOf: t4, node: e3, objectOf: t4, oneOf: t4, oneOfType: t4, shape: t4, exact: t4, checkPropTypes: a2, resetWarningCache: r3 };
            return n4.PropTypes = n4, n4;
          };
        }, 697: (e2, t3, n3) => {
          e2.exports = n3(703)();
        }, 414: (e2) => {
          "use strict";
          e2.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
        }, 590: (e2) => {
          var t3 = "undefined" != typeof Element, n3 = "function" == typeof Map, i3 = "function" == typeof Set, r3 = "function" == typeof ArrayBuffer && !!ArrayBuffer.isView;
          function a2(e3, s2) {
            if (e3 === s2) return true;
            if (e3 && s2 && "object" == typeof e3 && "object" == typeof s2) {
              if (e3.constructor !== s2.constructor) return false;
              var o2, l2, u3, c2;
              if (Array.isArray(e3)) {
                if ((o2 = e3.length) != s2.length) return false;
                for (l2 = o2; 0 != l2--; ) if (!a2(e3[l2], s2[l2])) return false;
                return true;
              }
              if (n3 && e3 instanceof Map && s2 instanceof Map) {
                if (e3.size !== s2.size) return false;
                for (c2 = e3.entries(); !(l2 = c2.next()).done; ) if (!s2.has(l2.value[0])) return false;
                for (c2 = e3.entries(); !(l2 = c2.next()).done; ) if (!a2(l2.value[1], s2.get(l2.value[0]))) return false;
                return true;
              }
              if (i3 && e3 instanceof Set && s2 instanceof Set) {
                if (e3.size !== s2.size) return false;
                for (c2 = e3.entries(); !(l2 = c2.next()).done; ) if (!s2.has(l2.value[0])) return false;
                return true;
              }
              if (r3 && ArrayBuffer.isView(e3) && ArrayBuffer.isView(s2)) {
                if ((o2 = e3.length) != s2.length) return false;
                for (l2 = o2; 0 != l2--; ) if (e3[l2] !== s2[l2]) return false;
                return true;
              }
              if (e3.constructor === RegExp) return e3.source === s2.source && e3.flags === s2.flags;
              if (e3.valueOf !== Object.prototype.valueOf) return e3.valueOf() === s2.valueOf();
              if (e3.toString !== Object.prototype.toString) return e3.toString() === s2.toString();
              if ((o2 = (u3 = Object.keys(e3)).length) !== Object.keys(s2).length) return false;
              for (l2 = o2; 0 != l2--; ) if (!Object.prototype.hasOwnProperty.call(s2, u3[l2])) return false;
              if (t3 && e3 instanceof Element) return false;
              for (l2 = o2; 0 != l2--; ) if (("_owner" !== u3[l2] && "__v" !== u3[l2] && "__o" !== u3[l2] || !e3.$$typeof) && !a2(e3[u3[l2]], s2[u3[l2]])) return false;
              return true;
            }
            return e3 != e3 && s2 != s2;
          }
          e2.exports = function(e3, t4) {
            try {
              return a2(e3, t4);
            } catch (e4) {
              if ((e4.message || "").match(/stack|recursion/i)) return console.warn("react-fast-compare cannot handle circular refs"), false;
              throw e4;
            }
          };
        }, 37: function(e2, t3, n3) {
          !function(e3, t4) {
            function n4() {
              return n4 = Object.assign || function(e4) {
                for (var t5 = 1; t5 < arguments.length; t5++) {
                  var n5 = arguments[t5];
                  for (var i4 in n5) Object.prototype.hasOwnProperty.call(n5, i4) && (e4[i4] = n5[i4]);
                }
                return e4;
              }, n4.apply(this, arguments);
            }
            var i3 = "Left", r3 = "Right", a2 = "Down", s2 = { delta: 10, preventDefaultTouchmoveEvent: false, rotationAngle: 0, trackMouse: false, trackTouch: true }, o2 = { first: true, initial: [0, 0], start: 0, swiping: false, xy: [0, 0] }, l2 = "mousemove", u3 = "mouseup";
            function c2(e4, t5) {
              if (0 === t5) return e4;
              var n5 = Math.PI / 180 * t5;
              return [e4[0] * Math.cos(n5) + e4[1] * Math.sin(n5), e4[1] * Math.cos(n5) - e4[0] * Math.sin(n5)];
            }
            function h2(e4, t5) {
              var s3 = function(t6) {
                t6 && "touches" in t6 && t6.touches.length > 1 || e4(function(e5, i4) {
                  i4.trackMouse && (document.addEventListener(l2, h3), document.addEventListener(u3, f2));
                  var r4 = "touches" in t6 ? t6.touches[0] : t6, a3 = c2([r4.clientX, r4.clientY], i4.rotationAngle);
                  return n4({}, e5, o2, { initial: [].concat(a3), xy: a3, start: t6.timeStamp || 0 });
                });
              }, h3 = function(t6) {
                e4(function(e5, s4) {
                  if ("touches" in t6 && t6.touches.length > 1) return e5;
                  var o3 = "touches" in t6 ? t6.touches[0] : t6, l3 = c2([o3.clientX, o3.clientY], s4.rotationAngle), u4 = l3[0], h4 = l3[1], d3 = u4 - e5.xy[0], f3 = h4 - e5.xy[1], p3 = Math.abs(d3), m3 = Math.abs(f3), g2 = (t6.timeStamp || 0) - e5.start, v2 = Math.sqrt(p3 * p3 + m3 * m3) / (g2 || 1), b2 = [d3 / (g2 || 1), f3 / (g2 || 1)];
                  if (p3 < s4.delta && m3 < s4.delta && !e5.swiping) return e5;
                  var y2 = function(e6, t7, n5, s5) {
                    return e6 > t7 ? n5 > 0 ? r3 : i3 : s5 > 0 ? a2 : "Up";
                  }(p3, m3, d3, f3), w2 = { absX: p3, absY: m3, deltaX: d3, deltaY: f3, dir: y2, event: t6, first: e5.first, initial: e5.initial, velocity: v2, vxvy: b2 };
                  s4.onSwiping && s4.onSwiping(w2);
                  var T2 = false;
                  return (s4.onSwiping || s4.onSwiped || "onSwiped" + y2 in s4) && (T2 = true), T2 && s4.preventDefaultTouchmoveEvent && s4.trackTouch && t6.cancelable && t6.preventDefault(), n4({}, e5, { first: false, eventData: w2, swiping: true });
                });
              }, d2 = function(t6) {
                e4(function(e5, i4) {
                  var r4;
                  if (e5.swiping && e5.eventData) {
                    r4 = n4({}, e5.eventData, { event: t6 }), i4.onSwiped && i4.onSwiped(r4);
                    var a3 = "onSwiped" + r4.dir;
                    a3 in i4 && i4[a3](r4);
                  } else i4.onTap && i4.onTap({ event: t6 });
                  return n4({}, e5, o2, { eventData: r4 });
                });
              }, f2 = function(e5) {
                document.removeEventListener(l2, h3), document.removeEventListener(u3, f2), d2(e5);
              }, p2 = function(e5, t6) {
                var n5 = function() {
                };
                if (e5 && e5.addEventListener) {
                  var i4 = [["touchstart", s3], ["touchmove", h3], ["touchend", d2]];
                  i4.forEach(function(n6) {
                    var i5 = n6[0], r4 = n6[1];
                    return e5.addEventListener(i5, r4, { passive: t6 });
                  }), n5 = function() {
                    return i4.forEach(function(t7) {
                      var n6 = t7[0], i5 = t7[1];
                      return e5.removeEventListener(n6, i5);
                    });
                  };
                }
                return n5;
              }, m2 = { ref: function(t6) {
                null !== t6 && e4(function(e5, i4) {
                  if (e5.el === t6) return e5;
                  var r4 = {};
                  return e5.el && e5.el !== t6 && e5.cleanUpTouch && (e5.cleanUpTouch(), r4.cleanUpTouch = void 0), i4.trackTouch && t6 && (r4.cleanUpTouch = p2(t6, !i4.preventDefaultTouchmoveEvent)), n4({}, e5, { el: t6 }, r4);
                });
              } };
              return t5.trackMouse && (m2.onMouseDown = s3), [m2, p2];
            }
            e3.DOWN = a2, e3.LEFT = i3, e3.RIGHT = r3, e3.UP = "Up", e3.useSwipeable = function(e4) {
              var i4 = e4.trackMouse, r4 = t4.useRef(n4({}, o2)), a3 = t4.useRef(n4({}, s2));
              a3.current = n4({}, s2, e4);
              var l3 = t4.useMemo(function() {
                return h2(function(e5) {
                  return r4.current = e5(r4.current, a3.current);
                }, { trackMouse: i4 });
              }, [i4]), u4 = l3[0], c3 = l3[1];
              return r4.current = function(e5, t5, i5) {
                var r5 = {};
                return !t5.trackTouch && e5.cleanUpTouch ? (e5.cleanUpTouch(), r5.cleanUpTouch = void 0) : t5.trackTouch && !e5.cleanUpTouch && e5.el && (r5.cleanUpTouch = i5(e5.el, !t5.preventDefaultTouchmoveEvent)), n4({}, e5, r5);
              }(r4.current, a3.current, c3), u4;
            };
          }(t3, n3(888));
        }, 888: (t3) => {
          "use strict";
          t3.exports = e;
        } }, n2 = {};
        function i2(e2) {
          var r3 = n2[e2];
          if (void 0 !== r3) return r3.exports;
          var a2 = n2[e2] = { exports: {} };
          return t2[e2].call(a2.exports, a2, a2.exports, i2), a2.exports;
        }
        i2.n = (e2) => {
          var t3 = e2 && e2.__esModule ? () => e2.default : () => e2;
          return i2.d(t3, { a: t3 }), t3;
        }, i2.d = (e2, t3) => {
          for (var n3 in t3) i2.o(t3, n3) && !i2.o(e2, n3) && Object.defineProperty(e2, n3, { enumerable: true, get: t3[n3] });
        }, i2.g = function() {
          if ("object" == typeof globalThis) return globalThis;
          try {
            return this || new Function("return this")();
          } catch (e2) {
            if ("object" == typeof window) return window;
          }
        }(), i2.o = (e2, t3) => Object.prototype.hasOwnProperty.call(e2, t3), i2.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        };
        var r2 = {};
        return (() => {
          "use strict";
          function e2(t4) {
            var n4, i3, r3 = "";
            if ("string" == typeof t4 || "number" == typeof t4) r3 += t4;
            else if ("object" == typeof t4) if (Array.isArray(t4)) for (n4 = 0; n4 < t4.length; n4++) t4[n4] && (i3 = e2(t4[n4])) && (r3 && (r3 += " "), r3 += i3);
            else for (n4 in t4) t4[n4] && (r3 && (r3 += " "), r3 += n4);
            return r3;
          }
          function t3() {
            for (var t4, n4, i3 = 0, r3 = ""; i3 < arguments.length; ) (t4 = arguments[i3++]) && (n4 = e2(t4)) && (r3 && (r3 += " "), r3 += n4);
            return r3;
          }
          i2.r(r2), i2.d(r2, { default: () => Pe2 });
          var n3 = i2(888), a2 = i2.n(n3);
          const s2 = function(e3) {
            var t4 = typeof e3;
            return null != e3 && ("object" == t4 || "function" == t4);
          }, o2 = "object" == typeof global && global && global.Object === Object && global;
          var l2 = "object" == typeof self && self && self.Object === Object && self;
          const u3 = o2 || l2 || Function("return this")(), c2 = function() {
            return u3.Date.now();
          };
          var h2 = /\s/;
          var d2 = /^\s+/;
          const f2 = function(e3) {
            return e3 ? e3.slice(0, function(e4) {
              for (var t4 = e4.length; t4-- && h2.test(e4.charAt(t4)); ) ;
              return t4;
            }(e3) + 1).replace(d2, "") : e3;
          }, p2 = u3.Symbol;
          var m2 = Object.prototype, g2 = m2.hasOwnProperty, v2 = m2.toString, b2 = p2 ? p2.toStringTag : void 0;
          var y2 = Object.prototype.toString;
          var w2 = p2 ? p2.toStringTag : void 0;
          const T2 = function(e3) {
            return null == e3 ? void 0 === e3 ? "[object Undefined]" : "[object Null]" : w2 && w2 in Object(e3) ? function(e4) {
              var t4 = g2.call(e4, b2), n4 = e4[b2];
              try {
                e4[b2] = void 0;
                var i3 = true;
              } catch (e5) {
              }
              var r3 = v2.call(e4);
              return i3 && (t4 ? e4[b2] = n4 : delete e4[b2]), r3;
            }(e3) : function(e4) {
              return y2.call(e4);
            }(e3);
          };
          var S2 = /^[-+]0x[0-9a-f]+$/i, O2 = /^0b[01]+$/i, E2 = /^0o[0-7]+$/i, k2 = parseInt;
          const I2 = function(e3) {
            if ("number" == typeof e3) return e3;
            if (function(e4) {
              return "symbol" == typeof e4 || function(e5) {
                return null != e5 && "object" == typeof e5;
              }(e4) && "[object Symbol]" == T2(e4);
            }(e3)) return NaN;
            if (s2(e3)) {
              var t4 = "function" == typeof e3.valueOf ? e3.valueOf() : e3;
              e3 = s2(t4) ? t4 + "" : t4;
            }
            if ("string" != typeof e3) return 0 === e3 ? e3 : +e3;
            e3 = f2(e3);
            var n4 = O2.test(e3);
            return n4 || E2.test(e3) ? k2(e3.slice(2), n4 ? 2 : 8) : S2.test(e3) ? NaN : +e3;
          };
          var x2 = Math.max, _2 = Math.min;
          const R2 = function(e3, t4, n4) {
            var i3, r3, a3, o3, l3, u4, h3 = 0, d3 = false, f3 = false, p3 = true;
            if ("function" != typeof e3) throw new TypeError("Expected a function");
            function m3(t5) {
              var n5 = i3, a4 = r3;
              return i3 = r3 = void 0, h3 = t5, o3 = e3.apply(a4, n5);
            }
            function g3(e4) {
              return h3 = e4, l3 = setTimeout(b3, t4), d3 ? m3(e4) : o3;
            }
            function v3(e4) {
              var n5 = e4 - u4;
              return void 0 === u4 || n5 >= t4 || n5 < 0 || f3 && e4 - h3 >= a3;
            }
            function b3() {
              var e4 = c2();
              if (v3(e4)) return y3(e4);
              l3 = setTimeout(b3, function(e5) {
                var n5 = t4 - (e5 - u4);
                return f3 ? _2(n5, a3 - (e5 - h3)) : n5;
              }(e4));
            }
            function y3(e4) {
              return l3 = void 0, p3 && i3 ? m3(e4) : (i3 = r3 = void 0, o3);
            }
            function w3() {
              var e4 = c2(), n5 = v3(e4);
              if (i3 = arguments, r3 = this, u4 = e4, n5) {
                if (void 0 === l3) return g3(u4);
                if (f3) return clearTimeout(l3), l3 = setTimeout(b3, t4), m3(u4);
              }
              return void 0 === l3 && (l3 = setTimeout(b3, t4)), o3;
            }
            return t4 = I2(t4) || 0, s2(n4) && (d3 = !!n4.leading, a3 = (f3 = "maxWait" in n4) ? x2(I2(n4.maxWait) || 0, t4) : a3, p3 = "trailing" in n4 ? !!n4.trailing : p3), w3.cancel = function() {
              void 0 !== l3 && clearTimeout(l3), h3 = 0, i3 = u4 = r3 = l3 = void 0;
            }, w3.flush = function() {
              return void 0 === l3 ? o3 : y3(c2());
            }, w3;
          }, L2 = function(e3, t4, n4) {
            var i3 = true, r3 = true;
            if ("function" != typeof e3) throw new TypeError("Expected a function");
            return s2(n4) && (i3 = "leading" in n4 ? !!n4.leading : i3, r3 = "trailing" in n4 ? !!n4.trailing : r3), R2(e3, t4, { leading: i3, maxWait: t4, trailing: r3 });
          };
          var P2 = i2(590), M2 = i2.n(P2), W2 = function() {
            if ("undefined" != typeof Map) return Map;
            function e3(e4, t4) {
              var n4 = -1;
              return e4.some(function(e5, i3) {
                return e5[0] === t4 && (n4 = i3, true);
              }), n4;
            }
            return function() {
              function t4() {
                this.__entries__ = [];
              }
              return Object.defineProperty(t4.prototype, "size", { get: function() {
                return this.__entries__.length;
              }, enumerable: true, configurable: true }), t4.prototype.get = function(t5) {
                var n4 = e3(this.__entries__, t5), i3 = this.__entries__[n4];
                return i3 && i3[1];
              }, t4.prototype.set = function(t5, n4) {
                var i3 = e3(this.__entries__, t5);
                ~i3 ? this.__entries__[i3][1] = n4 : this.__entries__.push([t5, n4]);
              }, t4.prototype.delete = function(t5) {
                var n4 = this.__entries__, i3 = e3(n4, t5);
                ~i3 && n4.splice(i3, 1);
              }, t4.prototype.has = function(t5) {
                return !!~e3(this.__entries__, t5);
              }, t4.prototype.clear = function() {
                this.__entries__.splice(0);
              }, t4.prototype.forEach = function(e4, t5) {
                void 0 === t5 && (t5 = null);
                for (var n4 = 0, i3 = this.__entries__; n4 < i3.length; n4++) {
                  var r3 = i3[n4];
                  e4.call(t5, r3[1], r3[0]);
                }
              }, t4;
            }();
          }(), D2 = "undefined" != typeof window && "undefined" != typeof document && window.document === document, F2 = void 0 !== i2.g && i2.g.Math === Math ? i2.g : "undefined" != typeof self && self.Math === Math ? self : "undefined" != typeof window && window.Math === Math ? window : Function("return this")(), C2 = "function" == typeof requestAnimationFrame ? requestAnimationFrame.bind(F2) : function(e3) {
            return setTimeout(function() {
              return e3(Date.now());
            }, 1e3 / 60);
          }, N2 = ["top", "right", "bottom", "left", "width", "height", "size", "weight"], z2 = "undefined" != typeof MutationObserver, j2 = function() {
            function e3() {
              this.connected_ = false, this.mutationEventsAdded_ = false, this.mutationsObserver_ = null, this.observers_ = [], this.onTransitionEnd_ = this.onTransitionEnd_.bind(this), this.refresh = /* @__PURE__ */ function(e4, t4) {
                var n4 = false, i3 = false, r3 = 0;
                function a3() {
                  n4 && (n4 = false, e4()), i3 && o3();
                }
                function s3() {
                  C2(a3);
                }
                function o3() {
                  var e5 = Date.now();
                  if (n4) {
                    if (e5 - r3 < 2) return;
                    i3 = true;
                  } else n4 = true, i3 = false, setTimeout(s3, 20);
                  r3 = e5;
                }
                return o3;
              }(this.refresh.bind(this));
            }
            return e3.prototype.addObserver = function(e4) {
              ~this.observers_.indexOf(e4) || this.observers_.push(e4), this.connected_ || this.connect_();
            }, e3.prototype.removeObserver = function(e4) {
              var t4 = this.observers_, n4 = t4.indexOf(e4);
              ~n4 && t4.splice(n4, 1), !t4.length && this.connected_ && this.disconnect_();
            }, e3.prototype.refresh = function() {
              this.updateObservers_() && this.refresh();
            }, e3.prototype.updateObservers_ = function() {
              var e4 = this.observers_.filter(function(e5) {
                return e5.gatherActive(), e5.hasActive();
              });
              return e4.forEach(function(e5) {
                return e5.broadcastActive();
              }), e4.length > 0;
            }, e3.prototype.connect_ = function() {
              D2 && !this.connected_ && (document.addEventListener("transitionend", this.onTransitionEnd_), window.addEventListener("resize", this.refresh), z2 ? (this.mutationsObserver_ = new MutationObserver(this.refresh), this.mutationsObserver_.observe(document, { attributes: true, childList: true, characterData: true, subtree: true })) : (document.addEventListener("DOMSubtreeModified", this.refresh), this.mutationEventsAdded_ = true), this.connected_ = true);
            }, e3.prototype.disconnect_ = function() {
              D2 && this.connected_ && (document.removeEventListener("transitionend", this.onTransitionEnd_), window.removeEventListener("resize", this.refresh), this.mutationsObserver_ && this.mutationsObserver_.disconnect(), this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh), this.mutationsObserver_ = null, this.mutationEventsAdded_ = false, this.connected_ = false);
            }, e3.prototype.onTransitionEnd_ = function(e4) {
              var t4 = e4.propertyName, n4 = void 0 === t4 ? "" : t4;
              N2.some(function(e5) {
                return !!~n4.indexOf(e5);
              }) && this.refresh();
            }, e3.getInstance = function() {
              return this.instance_ || (this.instance_ = new e3()), this.instance_;
            }, e3.instance_ = null, e3;
          }(), B2 = function(e3, t4) {
            for (var n4 = 0, i3 = Object.keys(t4); n4 < i3.length; n4++) {
              var r3 = i3[n4];
              Object.defineProperty(e3, r3, { value: t4[r3], enumerable: false, writable: false, configurable: true });
            }
            return e3;
          }, A2 = function(e3) {
            return e3 && e3.ownerDocument && e3.ownerDocument.defaultView || F2;
          }, G2 = V2(0, 0, 0, 0);
          function U2(e3) {
            return parseFloat(e3) || 0;
          }
          function H2(e3) {
            for (var t4 = [], n4 = 1; n4 < arguments.length; n4++) t4[n4 - 1] = arguments[n4];
            return t4.reduce(function(t5, n5) {
              return t5 + U2(e3["border-" + n5 + "-width"]);
            }, 0);
          }
          var q2 = "undefined" != typeof SVGGraphicsElement ? function(e3) {
            return e3 instanceof A2(e3).SVGGraphicsElement;
          } : function(e3) {
            return e3 instanceof A2(e3).SVGElement && "function" == typeof e3.getBBox;
          };
          function K2(e3) {
            return D2 ? q2(e3) ? function(e4) {
              var t4 = e4.getBBox();
              return V2(0, 0, t4.width, t4.height);
            }(e3) : function(e4) {
              var t4 = e4.clientWidth, n4 = e4.clientHeight;
              if (!t4 && !n4) return G2;
              var i3 = A2(e4).getComputedStyle(e4), r3 = function(e5) {
                for (var t5 = {}, n5 = 0, i4 = ["top", "right", "bottom", "left"]; n5 < i4.length; n5++) {
                  var r4 = i4[n5], a4 = e5["padding-" + r4];
                  t5[r4] = U2(a4);
                }
                return t5;
              }(i3), a3 = r3.left + r3.right, s3 = r3.top + r3.bottom, o3 = U2(i3.width), l3 = U2(i3.height);
              if ("border-box" === i3.boxSizing && (Math.round(o3 + a3) !== t4 && (o3 -= H2(i3, "left", "right") + a3), Math.round(l3 + s3) !== n4 && (l3 -= H2(i3, "top", "bottom") + s3)), !function(e5) {
                return e5 === A2(e5).document.documentElement;
              }(e4)) {
                var u4 = Math.round(o3 + a3) - t4, c3 = Math.round(l3 + s3) - n4;
                1 !== Math.abs(u4) && (o3 -= u4), 1 !== Math.abs(c3) && (l3 -= c3);
              }
              return V2(r3.left, r3.top, o3, l3);
            }(e3) : G2;
          }
          function V2(e3, t4, n4, i3) {
            return { x: e3, y: t4, width: n4, height: i3 };
          }
          var X2 = function() {
            function e3(e4) {
              this.broadcastWidth = 0, this.broadcastHeight = 0, this.contentRect_ = V2(0, 0, 0, 0), this.target = e4;
            }
            return e3.prototype.isActive = function() {
              var e4 = K2(this.target);
              return this.contentRect_ = e4, e4.width !== this.broadcastWidth || e4.height !== this.broadcastHeight;
            }, e3.prototype.broadcastRect = function() {
              var e4 = this.contentRect_;
              return this.broadcastWidth = e4.width, this.broadcastHeight = e4.height, e4;
            }, e3;
          }(), Y2 = function(e3, t4) {
            var n4, i3, r3, a3, s3, o3, l3, u4 = (i3 = (n4 = t4).x, r3 = n4.y, a3 = n4.width, s3 = n4.height, o3 = "undefined" != typeof DOMRectReadOnly ? DOMRectReadOnly : Object, l3 = Object.create(o3.prototype), B2(l3, { x: i3, y: r3, width: a3, height: s3, top: r3, right: i3 + a3, bottom: s3 + r3, left: i3 }), l3);
            B2(this, { target: e3, contentRect: u4 });
          }, $2 = function() {
            function e3(e4, t4, n4) {
              if (this.activeObservations_ = [], this.observations_ = new W2(), "function" != typeof e4) throw new TypeError("The callback provided as parameter 1 is not a function.");
              this.callback_ = e4, this.controller_ = t4, this.callbackCtx_ = n4;
            }
            return e3.prototype.observe = function(e4) {
              if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
              if ("undefined" != typeof Element && Element instanceof Object) {
                if (!(e4 instanceof A2(e4).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                var t4 = this.observations_;
                t4.has(e4) || (t4.set(e4, new X2(e4)), this.controller_.addObserver(this), this.controller_.refresh());
              }
            }, e3.prototype.unobserve = function(e4) {
              if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
              if ("undefined" != typeof Element && Element instanceof Object) {
                if (!(e4 instanceof A2(e4).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                var t4 = this.observations_;
                t4.has(e4) && (t4.delete(e4), t4.size || this.controller_.removeObserver(this));
              }
            }, e3.prototype.disconnect = function() {
              this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this);
            }, e3.prototype.gatherActive = function() {
              var e4 = this;
              this.clearActive(), this.observations_.forEach(function(t4) {
                t4.isActive() && e4.activeObservations_.push(t4);
              });
            }, e3.prototype.broadcastActive = function() {
              if (this.hasActive()) {
                var e4 = this.callbackCtx_, t4 = this.activeObservations_.map(function(e5) {
                  return new Y2(e5.target, e5.broadcastRect());
                });
                this.callback_.call(e4, t4, e4), this.clearActive();
              }
            }, e3.prototype.clearActive = function() {
              this.activeObservations_.splice(0);
            }, e3.prototype.hasActive = function() {
              return this.activeObservations_.length > 0;
            }, e3;
          }(), J2 = "undefined" != typeof WeakMap ? /* @__PURE__ */ new WeakMap() : new W2(), Q2 = function e3(t4) {
            if (!(this instanceof e3)) throw new TypeError("Cannot call a class as a function.");
            if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
            var n4 = j2.getInstance(), i3 = new $2(t4, n4, this);
            J2.set(this, i3);
          };
          ["observe", "unobserve", "disconnect"].forEach(function(e3) {
            Q2.prototype[e3] = function() {
              var t4;
              return (t4 = J2.get(this))[e3].apply(t4, arguments);
            };
          });
          const Z2 = void 0 !== F2.ResizeObserver ? F2.ResizeObserver : Q2;
          var ee2 = i2(37), te2 = i2(697), ne2 = a2().memo(function(e3) {
            var t4 = e3.description, n4 = e3.fullscreen, i3 = e3.handleImageLoaded, r3 = e3.isFullscreen, s3 = e3.onImageError, o3 = e3.original, l3 = e3.originalAlt, u4 = e3.originalHeight, c3 = e3.originalWidth, h3 = e3.originalTitle, d3 = e3.sizes, f3 = e3.srcSet, p3 = e3.loading, m3 = r3 && n4 || o3;
            return a2().createElement(a2().Fragment, null, a2().createElement("img", { className: "image-gallery-image", src: m3, alt: l3, srcSet: f3, height: u4, width: c3, sizes: d3, title: h3, onLoad: function(e4) {
              return i3(e4, o3);
            }, onError: s3, loading: p3 }), t4 && a2().createElement("span", { className: "image-gallery-description" }, t4));
          });
          ne2.displayName = "Item", ne2.propTypes = { description: te2.string, fullscreen: te2.string, handleImageLoaded: te2.func.isRequired, isFullscreen: te2.bool, onImageError: te2.func.isRequired, original: te2.string.isRequired, originalAlt: te2.string, originalHeight: te2.string, originalWidth: te2.string, originalTitle: te2.string, sizes: te2.string, srcSet: te2.string, loading: te2.string }, ne2.defaultProps = { description: "", fullscreen: "", isFullscreen: false, originalAlt: "", originalHeight: "", originalWidth: "", originalTitle: "", sizes: "", srcSet: "", loading: "eager" };
          const ie2 = ne2;
          var re3 = { left: a2().createElement("polyline", { points: "15 18 9 12 15 6" }), right: a2().createElement("polyline", { points: "9 18 15 12 9 6" }), maximize: a2().createElement("path", { d: "M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3" }), minimize: a2().createElement("path", { d: "M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3" }), play: a2().createElement("polygon", { points: "5 3 19 12 5 21 5 3" }), pause: a2().createElement(a2().Fragment, null, a2().createElement("rect", { x: "6", y: "4", width: "4", height: "16" }), a2().createElement("rect", { x: "14", y: "4", width: "4", height: "16" })) }, ae2 = function(e3) {
            var t4 = e3.strokeWidth, n4 = e3.viewBox, i3 = e3.icon;
            return a2().createElement("svg", { className: "image-gallery-svg", xmlns: "http://www.w3.org/2000/svg", viewBox: n4, fill: "none", stroke: "currentColor", strokeWidth: t4, strokeLinecap: "round", strokeLinejoin: "round" }, re3[i3]);
          };
          ae2.propTypes = { strokeWidth: te2.number, viewBox: te2.string, icon: (0, te2.oneOf)(["left", "right", "maximize", "minimize", "play", "pause"]).isRequired }, ae2.defaultProps = { strokeWidth: 1, viewBox: "0 0 24 24" };
          const se2 = ae2;
          var oe2 = a2().memo(function(e3) {
            var t4 = e3.isFullscreen, n4 = e3.onClick;
            return a2().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-fullscreen-button", onClick: n4, "aria-label": "Open Fullscreen" }, a2().createElement(se2, { strokeWidth: 2, icon: t4 ? "minimize" : "maximize" }));
          });
          oe2.displayName = "Fullscreen", oe2.propTypes = { isFullscreen: te2.bool.isRequired, onClick: te2.func.isRequired };
          const le2 = oe2;
          var ue2 = a2().memo(function(e3) {
            var t4 = e3.disabled, n4 = e3.onClick;
            return a2().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-left-nav", disabled: t4, onClick: n4, "aria-label": "Previous Slide" }, a2().createElement(se2, { icon: "left", viewBox: "6 0 12 24" }));
          });
          ue2.displayName = "LeftNav", ue2.propTypes = { disabled: te2.bool.isRequired, onClick: te2.func.isRequired };
          const ce2 = ue2;
          var he2 = a2().memo(function(e3) {
            var t4 = e3.disabled, n4 = e3.onClick;
            return a2().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-right-nav", disabled: t4, onClick: n4, "aria-label": "Next Slide" }, a2().createElement(se2, { icon: "right", viewBox: "6 0 12 24" }));
          });
          he2.displayName = "RightNav", he2.propTypes = { disabled: te2.bool.isRequired, onClick: te2.func.isRequired };
          const de2 = he2;
          var fe2 = a2().memo(function(e3) {
            var t4 = e3.isPlaying, n4 = e3.onClick;
            return a2().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-play-button", onClick: n4, "aria-label": "Play or Pause Slideshow" }, a2().createElement(se2, { strokeWidth: 2, icon: t4 ? "pause" : "play" }));
          });
          fe2.displayName = "PlayPause", fe2.propTypes = { isPlaying: te2.bool.isRequired, onClick: te2.func.isRequired };
          const pe2 = fe2;
          function me2() {
            return me2 = Object.assign || function(e3) {
              for (var t4 = 1; t4 < arguments.length; t4++) {
                var n4 = arguments[t4];
                for (var i3 in n4) Object.prototype.hasOwnProperty.call(n4, i3) && (e3[i3] = n4[i3]);
              }
              return e3;
            }, me2.apply(this, arguments);
          }
          var ge2 = function(e3) {
            var t4 = e3.children, n4 = e3.className, i3 = e3.delta, r3 = e3.onSwiping, s3 = e3.onSwiped, o3 = (0, ee2.useSwipeable)({ delta: i3, onSwiping: r3, onSwiped: s3 });
            return a2().createElement("div", me2({}, o3, { className: n4 }), t4);
          };
          ge2.propTypes = { children: te2.node.isRequired, className: te2.string, delta: te2.number, onSwiped: te2.func, onSwiping: te2.func }, ge2.defaultProps = { className: "", delta: 0, onSwiping: function() {
          }, onSwiped: function() {
          } };
          const ve2 = ge2;
          function be2(e3) {
            return be2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            }, be2(e3);
          }
          function ye2(e3, t4) {
            var n4 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var i3 = Object.getOwnPropertySymbols(e3);
              t4 && (i3 = i3.filter(function(t5) {
                return Object.getOwnPropertyDescriptor(e3, t5).enumerable;
              })), n4.push.apply(n4, i3);
            }
            return n4;
          }
          function we2(e3) {
            for (var t4 = 1; t4 < arguments.length; t4++) {
              var n4 = null != arguments[t4] ? arguments[t4] : {};
              t4 % 2 ? ye2(Object(n4), true).forEach(function(t5) {
                Te2(e3, t5, n4[t5]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n4)) : ye2(Object(n4)).forEach(function(t5) {
                Object.defineProperty(e3, t5, Object.getOwnPropertyDescriptor(n4, t5));
              });
            }
            return e3;
          }
          function Te2(e3, t4, n4) {
            return t4 in e3 ? Object.defineProperty(e3, t4, { value: n4, enumerable: true, configurable: true, writable: true }) : e3[t4] = n4, e3;
          }
          function Se2(e3, t4) {
            for (var n4 = 0; n4 < t4.length; n4++) {
              var i3 = t4[n4];
              i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(e3, i3.key, i3);
            }
          }
          function Oe2(e3, t4) {
            return Oe2 = Object.setPrototypeOf || function(e4, t5) {
              return e4.__proto__ = t5, e4;
            }, Oe2(e3, t4);
          }
          function Ee2(e3, t4) {
            return !t4 || "object" !== be2(t4) && "function" != typeof t4 ? ke2(e3) : t4;
          }
          function ke2(e3) {
            if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e3;
          }
          function Ie2(e3) {
            return Ie2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            }, Ie2(e3);
          }
          var xe2 = ["fullscreenchange", "MSFullscreenChange", "mozfullscreenchange", "webkitfullscreenchange"], _e2 = (0, te2.arrayOf)((0, te2.shape)({ srcSet: te2.string, media: te2.string }));
          function Re2(e3) {
            var t4 = parseInt(e3.keyCode || e3.which || 0, 10);
            return 66 === t4 || 62 === t4;
          }
          var Le2 = function(e3) {
            !function(e4, t4) {
              if ("function" != typeof t4 && null !== t4) throw new TypeError("Super expression must either be null or a function");
              e4.prototype = Object.create(t4 && t4.prototype, { constructor: { value: e4, writable: true, configurable: true } }), t4 && Oe2(e4, t4);
            }(l3, e3);
            var n4, i3, r3, s3, o3 = (r3 = l3, s3 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if ("function" == typeof Proxy) return true;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), true;
              } catch (e4) {
                return false;
              }
            }(), function() {
              var e4, t4 = Ie2(r3);
              if (s3) {
                var n5 = Ie2(this).constructor;
                e4 = Reflect.construct(t4, arguments, n5);
              } else e4 = t4.apply(this, arguments);
              return Ee2(this, e4);
            });
            function l3(e4) {
              var t4;
              return function(e5, t5) {
                if (!(e5 instanceof t5)) throw new TypeError("Cannot call a class as a function");
              }(this, l3), (t4 = o3.call(this, e4)).state = { currentIndex: e4.startIndex, thumbsTranslate: 0, thumbsSwipedTranslate: 0, currentSlideOffset: 0, galleryWidth: 0, thumbnailsWrapperWidth: 0, thumbnailsWrapperHeight: 0, thumbsStyle: { transition: "all ".concat(e4.slideDuration, "ms ease-out") }, isFullscreen: false, isSwipingThumbnail: false, isPlaying: false }, t4.loadedImages = {}, t4.imageGallery = a2().createRef(), t4.thumbnailsWrapper = a2().createRef(), t4.thumbnails = a2().createRef(), t4.imageGallerySlideWrapper = a2().createRef(), t4.handleImageLoaded = t4.handleImageLoaded.bind(ke2(t4)), t4.handleKeyDown = t4.handleKeyDown.bind(ke2(t4)), t4.handleMouseDown = t4.handleMouseDown.bind(ke2(t4)), t4.handleResize = t4.handleResize.bind(ke2(t4)), t4.handleTouchMove = t4.handleTouchMove.bind(ke2(t4)), t4.handleOnSwiped = t4.handleOnSwiped.bind(ke2(t4)), t4.handleScreenChange = t4.handleScreenChange.bind(ke2(t4)), t4.handleSwiping = t4.handleSwiping.bind(ke2(t4)), t4.handleThumbnailSwiping = t4.handleThumbnailSwiping.bind(ke2(t4)), t4.handleOnThumbnailSwiped = t4.handleOnThumbnailSwiped.bind(ke2(t4)), t4.onThumbnailMouseLeave = t4.onThumbnailMouseLeave.bind(ke2(t4)), t4.handleImageError = t4.handleImageError.bind(ke2(t4)), t4.pauseOrPlay = t4.pauseOrPlay.bind(ke2(t4)), t4.renderThumbInner = t4.renderThumbInner.bind(ke2(t4)), t4.renderItem = t4.renderItem.bind(ke2(t4)), t4.slideLeft = t4.slideLeft.bind(ke2(t4)), t4.slideRight = t4.slideRight.bind(ke2(t4)), t4.toggleFullScreen = t4.toggleFullScreen.bind(ke2(t4)), t4.togglePlay = t4.togglePlay.bind(ke2(t4)), t4.unthrottledSlideToIndex = t4.slideToIndex, t4.slideToIndex = L2(t4.unthrottledSlideToIndex, e4.slideDuration, { trailing: false }), e4.lazyLoad && (t4.lazyLoaded = []), t4;
            }
            return n4 = l3, i3 = [{ key: "componentDidMount", value: function() {
              var e4 = this.props, t4 = e4.autoPlay, n5 = e4.useWindowKeyDown;
              t4 && this.play(), n5 ? window.addEventListener("keydown", this.handleKeyDown) : this.imageGallery.current.addEventListener("keydown", this.handleKeyDown), window.addEventListener("mousedown", this.handleMouseDown), window.addEventListener("touchmove", this.handleTouchMove, { passive: false }), this.initSlideWrapperResizeObserver(this.imageGallerySlideWrapper), this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper), this.addScreenChangeEvent();
            } }, { key: "componentDidUpdate", value: function(e4, t4) {
              var n5 = this.props, i4 = n5.items, r4 = n5.lazyLoad, a3 = n5.slideDuration, s4 = n5.slideInterval, o4 = n5.startIndex, l4 = n5.thumbnailPosition, u4 = n5.showThumbnails, c3 = n5.useWindowKeyDown, h3 = this.state, d3 = h3.currentIndex, f3 = h3.isPlaying, p3 = e4.items.length !== i4.length, m3 = !M2()(e4.items, i4), g3 = e4.startIndex !== o4, v3 = e4.thumbnailPosition !== l4, b3 = e4.showThumbnails !== u4;
              s4 === e4.slideInterval && a3 === e4.slideDuration || f3 && (this.pause(), this.play()), v3 && (this.removeResizeObserver(), this.initSlideWrapperResizeObserver(this.imageGallerySlideWrapper), this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper)), b3 && u4 && this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper), b3 && !u4 && this.removeThumbnailsResizeObserver(), (p3 || b3) && this.handleResize(), t4.currentIndex !== d3 && this.slideThumbnailBar(), e4.slideDuration !== a3 && (this.slideToIndex = L2(this.unthrottledSlideToIndex, a3, { trailing: false })), !r4 || e4.lazyLoad && !m3 || (this.lazyLoaded = []), c3 !== e4.useWindowKeyDown && (c3 ? (this.imageGallery.current.removeEventListener("keydown", this.handleKeyDown), window.addEventListener("keydown", this.handleKeyDown)) : (window.removeEventListener("keydown", this.handleKeyDown), this.imageGallery.current.addEventListener("keydown", this.handleKeyDown))), (g3 || m3) && this.setState({ currentIndex: o4, slideStyle: { transition: "none" } });
            } }, { key: "componentWillUnmount", value: function() {
              var e4 = this.props.useWindowKeyDown;
              window.removeEventListener("mousedown", this.handleMouseDown), window.removeEventListener("touchmove", this.handleTouchMove), this.removeScreenChangeEvent(), this.removeResizeObserver(), this.playPauseIntervalId && (window.clearInterval(this.playPauseIntervalId), this.playPauseIntervalId = null), this.transitionTimer && window.clearTimeout(this.transitionTimer), e4 ? window.removeEventListener("keydown", this.handleKeyDown) : this.imageGallery.current.removeEventListener("keydown", this.handleKeyDown);
            } }, { key: "onSliding", value: function() {
              var e4 = this, t4 = this.state, n5 = t4.currentIndex, i4 = t4.isTransitioning, r4 = this.props, a3 = r4.onSlide, s4 = r4.slideDuration;
              this.transitionTimer = window.setTimeout(function() {
                i4 && (e4.setState({ isTransitioning: !i4, isSwipingThumbnail: false }), a3 && a3(n5));
              }, s4 + 50);
            } }, { key: "onThumbnailClick", value: function(e4, t4) {
              var n5 = this.props.onThumbnailClick;
              e4.target.parentNode.parentNode.blur(), this.slideToIndex(t4, e4), n5 && n5(e4, t4);
            } }, { key: "onThumbnailMouseOver", value: function(e4, t4) {
              var n5 = this;
              this.thumbnailMouseOverTimer && (window.clearTimeout(this.thumbnailMouseOverTimer), this.thumbnailMouseOverTimer = null), this.thumbnailMouseOverTimer = window.setTimeout(function() {
                n5.slideToIndex(t4), n5.pause();
              }, 300);
            } }, { key: "onThumbnailMouseLeave", value: function() {
              if (this.thumbnailMouseOverTimer) {
                var e4 = this.props.autoPlay;
                window.clearTimeout(this.thumbnailMouseOverTimer), this.thumbnailMouseOverTimer = null, e4 && this.play();
              }
            } }, { key: "setThumbsTranslate", value: function(e4) {
              this.setState({ thumbsTranslate: e4 });
            } }, { key: "setModalFullscreen", value: function(e4) {
              var t4 = this.props.onScreenChange;
              this.setState({ modalFullscreen: e4 }), t4 && t4(e4);
            } }, { key: "getThumbsTranslate", value: function(e4) {
              var t4, n5 = this.props, i4 = n5.disableThumbnailScroll, r4 = n5.items, a3 = this.state, s4 = a3.thumbnailsWrapperWidth, o4 = a3.thumbnailsWrapperHeight, l4 = this.thumbnails && this.thumbnails.current;
              if (i4) return 0;
              if (l4) {
                if (this.isThumbnailVertical()) {
                  if (l4.scrollHeight <= o4) return 0;
                  t4 = l4.scrollHeight - o4;
                } else {
                  if (l4.scrollWidth <= s4 || s4 <= 0) return 0;
                  t4 = l4.scrollWidth - s4;
                }
                return e4 * (t4 / (r4.length - 1));
              }
              return 0;
            } }, { key: "getThumbnailPositionClassName", value: function(e4) {
              switch (e4) {
                case "left":
                  e4 = " ".concat("image-gallery-thumbnails-left");
                  break;
                case "right":
                  e4 = " ".concat("image-gallery-thumbnails-right");
                  break;
                case "bottom":
                  e4 = " ".concat("image-gallery-thumbnails-bottom");
                  break;
                case "top":
                  e4 = " ".concat("image-gallery-thumbnails-top");
              }
              return e4;
            } }, { key: "getAlignmentClassName", value: function(e4) {
              var t4 = this.state.currentIndex, n5 = this.props, i4 = n5.infinite, r4 = n5.items, a3 = "", s4 = "image-gallery-left", o4 = "image-gallery-right";
              switch (e4) {
                case t4 - 1:
                  a3 = " ".concat(s4);
                  break;
                case t4:
                  a3 = " ".concat("image-gallery-center");
                  break;
                case t4 + 1:
                  a3 = " ".concat(o4);
              }
              return r4.length >= 3 && i4 && (0 === e4 && t4 === r4.length - 1 ? a3 = " ".concat(o4) : e4 === r4.length - 1 && 0 === t4 && (a3 = " ".concat(s4))), a3;
            } }, { key: "getTranslateXForTwoSlide", value: function(e4) {
              var t4 = this.state, n5 = t4.currentIndex, i4 = t4.currentSlideOffset, r4 = t4.previousIndex, a3 = n5 !== r4, s4 = 0 === e4 && 0 === r4, o4 = 1 === e4 && 1 === r4, l4 = 0 === e4 && 1 === n5, u4 = 1 === e4 && 0 === n5, c3 = 0 === i4, h3 = -100 * n5 + 100 * e4 + i4;
              return i4 > 0 ? this.direction = "left" : i4 < 0 && (this.direction = "right"), u4 && i4 > 0 && (h3 = -100 + i4), l4 && i4 < 0 && (h3 = 100 + i4), a3 ? s4 && c3 && "left" === this.direction ? h3 = 100 : o4 && c3 && "right" === this.direction && (h3 = -100) : (u4 && c3 && "left" === this.direction && (h3 = -100), l4 && c3 && "right" === this.direction && (h3 = 100)), h3;
            } }, { key: "getThumbnailBarHeight", value: function() {
              return this.isThumbnailVertical() ? { height: this.state.gallerySlideWrapperHeight } : {};
            } }, { key: "getSlideStyle", value: function(e4) {
              var t4 = this.state, n5 = t4.currentIndex, i4 = t4.currentSlideOffset, r4 = t4.slideStyle, a3 = this.props, s4 = a3.infinite, o4 = a3.items, l4 = a3.useTranslate3D, u4 = a3.isRTL, c3 = -100 * n5, h3 = o4.length - 1, d3 = (c3 + 100 * e4) * (u4 ? -1 : 1) + i4;
              s4 && o4.length > 2 && (0 === n5 && e4 === h3 ? d3 = -100 * (u4 ? -1 : 1) + i4 : n5 === h3 && 0 === e4 && (d3 = 100 * (u4 ? -1 : 1) + i4)), s4 && 2 === o4.length && (d3 = this.getTranslateXForTwoSlide(e4));
              var f3 = "translate(".concat(d3, "%, 0)");
              return l4 && (f3 = "translate3d(".concat(d3, "%, 0, 0)")), we2({ display: this.isSlideVisible(e4) ? "inherit" : "none", WebkitTransform: f3, MozTransform: f3, msTransform: f3, OTransform: f3, transform: f3 }, r4);
            } }, { key: "getCurrentIndex", value: function() {
              return this.state.currentIndex;
            } }, { key: "getThumbnailStyle", value: function() {
              var e4, t4 = this.props, n5 = t4.useTranslate3D, i4 = t4.isRTL, r4 = this.state, a3 = r4.thumbsTranslate, s4 = r4.thumbsStyle, o4 = i4 ? -1 * a3 : a3;
              return this.isThumbnailVertical() ? (e4 = "translate(0, ".concat(a3, "px)"), n5 && (e4 = "translate3d(0, ".concat(a3, "px, 0)"))) : (e4 = "translate(".concat(o4, "px, 0)"), n5 && (e4 = "translate3d(".concat(o4, "px, 0, 0)"))), we2({ WebkitTransform: e4, MozTransform: e4, msTransform: e4, OTransform: e4, transform: e4 }, s4);
            } }, { key: "getSlideItems", value: function() {
              var e4 = this, n5 = this.state.currentIndex, i4 = this.props, r4 = i4.items, s4 = i4.slideOnThumbnailOver, o4 = i4.onClick, l4 = i4.lazyLoad, u4 = i4.onTouchMove, c3 = i4.onTouchEnd, h3 = i4.onTouchStart, d3 = i4.onMouseOver, f3 = i4.onMouseLeave, p3 = i4.renderItem, m3 = i4.renderThumbInner, g3 = i4.showThumbnails, v3 = i4.showBullets, b3 = [], y3 = [], w3 = [];
              return r4.forEach(function(i5, r5) {
                var T3 = e4.getAlignmentClassName(r5), S3 = i5.originalClass ? " ".concat(i5.originalClass) : "", O3 = i5.thumbnailClass ? " ".concat(i5.thumbnailClass) : "", E3 = i5.renderItem || p3 || e4.renderItem, k3 = i5.renderThumbInner || m3 || e4.renderThumbInner, I3 = !l4 || T3 || e4.lazyLoaded[r5];
                I3 && l4 && !e4.lazyLoaded[r5] && (e4.lazyLoaded[r5] = true);
                var x3 = e4.getSlideStyle(r5), _3 = a2().createElement("div", { "aria-label": "Go to Slide ".concat(r5 + 1), key: "slide-".concat(r5), tabIndex: "-1", className: "image-gallery-slide ".concat(T3, " ").concat(S3), style: x3, onClick: o4, onKeyUp: e4.handleSlideKeyUp, onTouchMove: u4, onTouchEnd: c3, onTouchStart: h3, onMouseOver: d3, onFocus: d3, onMouseLeave: f3, role: "button" }, I3 ? E3(i5) : a2().createElement("div", { style: { height: "100%" } }));
                if (b3.push(_3), g3 && i5.thumbnail) {
                  var R3 = t3("image-gallery-thumbnail", O3, { active: n5 === r5 });
                  y3.push(a2().createElement("button", { key: "thumbnail-".concat(r5), type: "button", tabIndex: "0", "aria-pressed": n5 === r5 ? "true" : "false", "aria-label": "Go to Slide ".concat(r5 + 1), className: R3, onMouseLeave: s4 ? e4.onThumbnailMouseLeave : null, onMouseOver: function(t4) {
                    return e4.handleThumbnailMouseOver(t4, r5);
                  }, onFocus: function(t4) {
                    return e4.handleThumbnailMouseOver(t4, r5);
                  }, onKeyUp: function(t4) {
                    return e4.handleThumbnailKeyUp(t4, r5);
                  }, onClick: function(t4) {
                    return e4.onThumbnailClick(t4, r5);
                  } }, k3(i5)));
                }
                if (v3) {
                  var L3 = t3("image-gallery-bullet", i5.bulletClass, { active: n5 === r5 });
                  w3.push(a2().createElement("button", { type: "button", key: "bullet-".concat(r5), className: L3, onClick: function(t4) {
                    return i5.bulletOnClick && i5.bulletOnClick({ item: i5, itemIndex: r5, currentIndex: n5 }), t4.target.blur(), e4.slideToIndex.call(e4, r5, t4);
                  }, "aria-pressed": n5 === r5 ? "true" : "false", "aria-label": "Go to Slide ".concat(r5 + 1) }));
                }
              }), { slides: b3, thumbnails: y3, bullets: w3 };
            } }, { key: "ignoreIsTransitioning", value: function() {
              var e4 = this.props.items, t4 = this.state, n5 = t4.previousIndex, i4 = t4.currentIndex, r4 = e4.length - 1;
              return Math.abs(n5 - i4) > 1 && !(0 === n5 && i4 === r4) && !(n5 === r4 && 0 === i4);
            } }, { key: "isFirstOrLastSlide", value: function(e4) {
              return e4 === this.props.items.length - 1 || 0 === e4;
            } }, { key: "slideIsTransitioning", value: function(e4) {
              var t4 = this.state, n5 = t4.isTransitioning, i4 = t4.previousIndex, r4 = t4.currentIndex;
              return n5 && !(e4 === i4 || e4 === r4);
            } }, { key: "isSlideVisible", value: function(e4) {
              return !this.slideIsTransitioning(e4) || this.ignoreIsTransitioning() && !this.isFirstOrLastSlide(e4);
            } }, { key: "slideThumbnailBar", value: function() {
              var e4 = this.state, t4 = e4.currentIndex, n5 = e4.isSwipingThumbnail, i4 = -this.getThumbsTranslate(t4);
              n5 || (0 === t4 ? this.setState({ thumbsTranslate: 0, thumbsSwipedTranslate: 0 }) : this.setState({ thumbsTranslate: i4, thumbsSwipedTranslate: i4 }));
            } }, { key: "canSlide", value: function() {
              return this.props.items.length >= 2;
            } }, { key: "canSlideLeft", value: function() {
              var e4 = this.props, t4 = e4.infinite, n5 = e4.isRTL;
              return t4 || (n5 ? this.canSlideNext() : this.canSlidePrevious());
            } }, { key: "canSlideRight", value: function() {
              var e4 = this.props, t4 = e4.infinite, n5 = e4.isRTL;
              return t4 || (n5 ? this.canSlidePrevious() : this.canSlideNext());
            } }, { key: "canSlidePrevious", value: function() {
              return this.state.currentIndex > 0;
            } }, { key: "canSlideNext", value: function() {
              return this.state.currentIndex < this.props.items.length - 1;
            } }, { key: "handleSwiping", value: function(e4) {
              var t4 = e4.event, n5 = e4.absX, i4 = e4.dir, r4 = this.props, a3 = r4.disableSwipe, s4 = r4.stopPropagation, o4 = this.state, l4 = o4.galleryWidth, u4 = o4.isTransitioning, c3 = o4.swipingUpDown, h3 = o4.swipingLeftRight;
              if (i4 !== ee2.UP && i4 !== ee2.DOWN && !c3 || h3) {
                if (i4 !== ee2.LEFT && i4 !== ee2.RIGHT || h3 || this.setState({ swipingLeftRight: true }), !a3) {
                  var d3 = this.props.swipingTransitionDuration;
                  if (s4 && t4.preventDefault(), u4) this.setState({ currentSlideOffset: 0 });
                  else {
                    var f3 = i4 === ee2.RIGHT ? 1 : -1, p3 = n5 / l4 * 100;
                    Math.abs(p3) >= 100 && (p3 = 100);
                    var m3 = { transition: "transform ".concat(d3, "ms ease-out") };
                    this.setState({ currentSlideOffset: f3 * p3, slideStyle: m3 });
                  }
                }
              } else c3 || this.setState({ swipingUpDown: true });
            } }, { key: "handleThumbnailSwiping", value: function(e4) {
              var t4 = e4.event, n5 = e4.absX, i4 = e4.absY, r4 = e4.dir, a3 = this.props, s4 = a3.stopPropagation, o4 = a3.swipingThumbnailTransitionDuration, l4 = this.state, u4 = l4.thumbsSwipedTranslate, c3 = l4.thumbnailsWrapperHeight, h3 = l4.thumbnailsWrapperWidth, d3 = l4.swipingUpDown, f3 = l4.swipingLeftRight;
              if (this.isThumbnailVertical()) {
                if ((r4 === ee2.LEFT || r4 === ee2.RIGHT || f3) && !d3) return void (f3 || this.setState({ swipingLeftRight: true }));
                r4 !== ee2.UP && r4 !== ee2.DOWN || d3 || this.setState({ swipingUpDown: true });
              } else {
                if ((r4 === ee2.UP || r4 === ee2.DOWN || d3) && !f3) return void (d3 || this.setState({ swipingUpDown: true }));
                r4 !== ee2.LEFT && r4 !== ee2.RIGHT || f3 || this.setState({ swipingLeftRight: true });
              }
              var p3, m3, g3, v3, b3, y3 = this.thumbnails && this.thumbnails.current;
              if (this.isThumbnailVertical() ? (p3 = u4 + (r4 === ee2.DOWN ? i4 : -i4), m3 = y3.scrollHeight - c3 + 20, g3 = Math.abs(p3) > m3, v3 = p3 > 20, b3 = y3.scrollHeight <= c3) : (p3 = u4 + (r4 === ee2.RIGHT ? n5 : -n5), m3 = y3.scrollWidth - h3 + 20, g3 = Math.abs(p3) > m3, v3 = p3 > 20, b3 = y3.scrollWidth <= h3), !b3 && (r4 !== ee2.LEFT && r4 !== ee2.UP || !g3) && (r4 !== ee2.RIGHT && r4 !== ee2.DOWN || !v3)) {
                s4 && t4.stopPropagation();
                var w3 = { transition: "transform ".concat(o4, "ms ease-out") };
                this.setState({ thumbsTranslate: p3, thumbsStyle: w3 });
              }
            } }, { key: "handleOnThumbnailSwiped", value: function() {
              var e4 = this.state.thumbsTranslate, t4 = this.props.slideDuration;
              this.resetSwipingDirection(), this.setState({ isSwipingThumbnail: true, thumbsSwipedTranslate: e4, thumbsStyle: { transition: "all ".concat(t4, "ms ease-out") } });
            } }, { key: "sufficientSwipe", value: function() {
              var e4 = this.state.currentSlideOffset, t4 = this.props.swipeThreshold;
              return Math.abs(e4) > t4;
            } }, { key: "resetSwipingDirection", value: function() {
              var e4 = this.state, t4 = e4.swipingUpDown, n5 = e4.swipingLeftRight;
              t4 && this.setState({ swipingUpDown: false }), n5 && this.setState({ swipingLeftRight: false });
            } }, { key: "handleOnSwiped", value: function(e4) {
              var t4 = e4.event, n5 = e4.dir, i4 = e4.velocity, r4 = this.props, a3 = r4.disableSwipe, s4 = r4.stopPropagation, o4 = r4.flickThreshold;
              if (!a3) {
                var l4 = this.props.isRTL;
                s4 && t4.stopPropagation(), this.resetSwipingDirection();
                var u4 = (n5 === ee2.LEFT ? 1 : -1) * (l4 ? -1 : 1), c3 = n5 === ee2.UP || n5 === ee2.DOWN, h3 = i4 > o4 && !c3;
                this.handleOnSwipedTo(u4, h3);
              }
            } }, { key: "handleOnSwipedTo", value: function(e4, t4) {
              var n5 = this.state, i4 = n5.currentIndex, r4 = n5.isTransitioning, a3 = i4;
              !this.sufficientSwipe() && !t4 || r4 || (a3 += e4), (-1 === e4 && !this.canSlideLeft() || 1 === e4 && !this.canSlideRight()) && (a3 = i4), this.unthrottledSlideToIndex(a3);
            } }, { key: "handleTouchMove", value: function(e4) {
              this.state.swipingLeftRight && e4.preventDefault();
            } }, { key: "handleMouseDown", value: function() {
              this.imageGallery.current.classList.add("image-gallery-using-mouse");
            } }, { key: "handleKeyDown", value: function(e4) {
              var t4 = this.props, n5 = t4.disableKeyDown, i4 = t4.useBrowserFullscreen, r4 = this.state.isFullscreen;
              if (this.imageGallery.current.classList.remove("image-gallery-using-mouse"), !n5) switch (parseInt(e4.keyCode || e4.which || 0, 10)) {
                case 37:
                  this.canSlideLeft() && !this.playPauseIntervalId && this.slideLeft(e4);
                  break;
                case 39:
                  this.canSlideRight() && !this.playPauseIntervalId && this.slideRight(e4);
                  break;
                case 27:
                  r4 && !i4 && this.exitFullScreen();
              }
            } }, { key: "handleImageError", value: function(e4) {
              var t4 = this.props.onErrorImageURL;
              t4 && -1 === e4.target.src.indexOf(t4) && (e4.target.src = t4);
            } }, { key: "removeThumbnailsResizeObserver", value: function() {
              this.resizeThumbnailWrapperObserver && this.thumbnailsWrapper && this.thumbnailsWrapper.current && (this.resizeThumbnailWrapperObserver.unobserve(this.thumbnailsWrapper.current), this.resizeThumbnailWrapperObserver = null);
            } }, { key: "removeResizeObserver", value: function() {
              this.resizeSlideWrapperObserver && this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current && (this.resizeSlideWrapperObserver.unobserve(this.imageGallerySlideWrapper.current), this.resizeSlideWrapperObserver = null), this.removeThumbnailsResizeObserver();
            } }, { key: "handleResize", value: function() {
              var e4 = this.state.currentIndex;
              this.imageGallery && (this.imageGallery && this.imageGallery.current && this.setState({ galleryWidth: this.imageGallery.current.offsetWidth }), this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current && this.setState({ gallerySlideWrapperHeight: this.imageGallerySlideWrapper.current.offsetHeight }), this.setThumbsTranslate(-this.getThumbsTranslate(e4)));
            } }, { key: "initSlideWrapperResizeObserver", value: function(e4) {
              var t4 = this;
              e4 && !e4.current || (this.resizeSlideWrapperObserver = new Z2(R2(function(e5) {
                e5 && e5.forEach(function(e6) {
                  t4.setState({ thumbnailsWrapperWidth: e6.contentRect.width }, t4.handleResize);
                });
              }, 50)), this.resizeSlideWrapperObserver.observe(e4.current));
            } }, { key: "initThumbnailWrapperResizeObserver", value: function(e4) {
              var t4 = this;
              e4 && !e4.current || (this.resizeThumbnailWrapperObserver = new Z2(R2(function(e5) {
                e5 && e5.forEach(function(e6) {
                  t4.setState({ thumbnailsWrapperHeight: e6.contentRect.height }, t4.handleResize);
                });
              }, 50)), this.resizeThumbnailWrapperObserver.observe(e4.current));
            } }, { key: "toggleFullScreen", value: function() {
              this.state.isFullscreen ? this.exitFullScreen() : this.fullScreen();
            } }, { key: "togglePlay", value: function() {
              this.playPauseIntervalId ? this.pause() : this.play();
            } }, { key: "handleScreenChange", value: function() {
              var e4 = this.props, t4 = e4.onScreenChange, n5 = e4.useBrowserFullscreen, i4 = document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement, r4 = this.imageGallery.current === i4;
              t4 && t4(r4), n5 && this.setState({ isFullscreen: r4 });
            } }, { key: "slideToIndex", value: function(e4, t4) {
              var n5 = this.state, i4 = n5.currentIndex, r4 = n5.isTransitioning, a3 = this.props, s4 = a3.items, o4 = a3.slideDuration, l4 = a3.onBeforeSlide;
              if (!r4) {
                t4 && this.playPauseIntervalId && (this.pause(false), this.play(false));
                var u4 = s4.length - 1, c3 = e4;
                e4 < 0 ? c3 = u4 : e4 > u4 && (c3 = 0), l4 && c3 !== i4 && l4(c3), this.setState({ previousIndex: i4, currentIndex: c3, isTransitioning: c3 !== i4, currentSlideOffset: 0, slideStyle: { transition: "all ".concat(o4, "ms ease-out") } }, this.onSliding);
              }
            } }, { key: "slideLeft", value: function(e4) {
              var t4 = this.props.isRTL;
              this.slideTo(e4, t4 ? "right" : "left");
            } }, { key: "slideRight", value: function(e4) {
              var t4 = this.props.isRTL;
              this.slideTo(e4, t4 ? "left" : "right");
            } }, { key: "slideTo", value: function(e4, t4) {
              var n5 = this, i4 = this.state, r4 = i4.currentIndex, a3 = i4.currentSlideOffset, s4 = i4.isTransitioning, o4 = this.props.items, l4 = r4 + ("left" === t4 ? -1 : 1);
              s4 || (2 === o4.length ? this.setState({ currentSlideOffset: a3 + ("left" === t4 ? 1e-3 : -1e-3), slideStyle: { transition: "none" } }, function() {
                window.setTimeout(function() {
                  return n5.slideToIndex(l4, e4);
                }, 25);
              }) : this.slideToIndex(l4, e4));
            } }, { key: "handleThumbnailMouseOver", value: function(e4, t4) {
              this.props.slideOnThumbnailOver && this.onThumbnailMouseOver(e4, t4);
            } }, { key: "handleThumbnailKeyUp", value: function(e4, t4) {
              Re2(e4) && this.onThumbnailClick(e4, t4);
            } }, { key: "handleSlideKeyUp", value: function(e4) {
              Re2(e4) && (0, this.props.onClick)(e4);
            } }, { key: "isThumbnailVertical", value: function() {
              var e4 = this.props.thumbnailPosition;
              return "left" === e4 || "right" === e4;
            } }, { key: "addScreenChangeEvent", value: function() {
              var e4 = this;
              xe2.forEach(function(t4) {
                document.addEventListener(t4, e4.handleScreenChange);
              });
            } }, { key: "removeScreenChangeEvent", value: function() {
              var e4 = this;
              xe2.forEach(function(t4) {
                document.removeEventListener(t4, e4.handleScreenChange);
              });
            } }, { key: "fullScreen", value: function() {
              var e4 = this.props.useBrowserFullscreen, t4 = this.imageGallery.current;
              e4 ? t4.requestFullscreen ? t4.requestFullscreen() : t4.msRequestFullscreen ? t4.msRequestFullscreen() : t4.mozRequestFullScreen ? t4.mozRequestFullScreen() : t4.webkitRequestFullscreen ? t4.webkitRequestFullscreen() : this.setModalFullscreen(true) : this.setModalFullscreen(true), this.setState({ isFullscreen: true });
            } }, { key: "exitFullScreen", value: function() {
              var e4 = this.state.isFullscreen, t4 = this.props.useBrowserFullscreen;
              e4 && (t4 ? document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen ? document.msExitFullscreen() : this.setModalFullscreen(false) : this.setModalFullscreen(false), this.setState({ isFullscreen: false }));
            } }, { key: "pauseOrPlay", value: function() {
              var e4 = this.props.infinite, t4 = this.state.currentIndex;
              e4 || this.canSlideRight() ? this.slideToIndex(t4 + 1) : this.pause();
            } }, { key: "play", value: function() {
              var e4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t4 = this.props, n5 = t4.onPlay, i4 = t4.slideInterval, r4 = t4.slideDuration, a3 = this.state.currentIndex;
              this.playPauseIntervalId || (this.setState({ isPlaying: true }), this.playPauseIntervalId = window.setInterval(this.pauseOrPlay, Math.max(i4, r4)), n5 && e4 && n5(a3));
            } }, { key: "pause", value: function() {
              var e4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t4 = this.props.onPause, n5 = this.state.currentIndex;
              this.playPauseIntervalId && (window.clearInterval(this.playPauseIntervalId), this.playPauseIntervalId = null, this.setState({ isPlaying: false }), t4 && e4 && t4(n5));
            } }, { key: "isImageLoaded", value: function(e4) {
              return !!this.loadedImages[e4.original] || (this.loadedImages[e4.original] = true, false);
            } }, { key: "handleImageLoaded", value: function(e4, t4) {
              var n5 = this.props.onImageLoad;
              !this.loadedImages[t4] && n5 && (this.loadedImages[t4] = true, n5(e4));
            } }, { key: "renderItem", value: function(e4) {
              var t4 = this.state.isFullscreen, n5 = this.props.onImageError || this.handleImageError;
              return a2().createElement(ie2, { description: e4.description, fullscreen: e4.fullscreen, handleImageLoaded: this.handleImageLoaded, isFullscreen: t4, onImageError: n5, original: e4.original, originalAlt: e4.originalAlt, originalHeight: e4.originalHeight, originalWidth: e4.originalWidth, originalTitle: e4.originalTitle, sizes: e4.sizes, loading: e4.loading, srcSet: e4.srcSet });
            } }, { key: "renderThumbInner", value: function(e4) {
              var t4 = this.props.onThumbnailError || this.handleImageError;
              return a2().createElement("span", { className: "image-gallery-thumbnail-inner" }, a2().createElement("img", { className: "image-gallery-thumbnail-image", src: e4.thumbnail, height: e4.thumbnailHeight, width: e4.thumbnailWidth, alt: e4.thumbnailAlt, title: e4.thumbnailTitle, loading: e4.thumbnailLoading, onError: t4 }), e4.thumbnailLabel && a2().createElement("div", { className: "image-gallery-thumbnail-label" }, e4.thumbnailLabel));
            } }, { key: "render", value: function() {
              var e4 = this.state, n5 = e4.currentIndex, i4 = e4.isFullscreen, r4 = e4.modalFullscreen, s4 = e4.isPlaying, o4 = this.props, l4 = o4.additionalClass, u4 = o4.disableThumbnailSwipe, c3 = o4.indexSeparator, h3 = o4.isRTL, d3 = o4.items, f3 = o4.thumbnailPosition, p3 = o4.renderFullscreenButton, m3 = o4.renderCustomControls, g3 = o4.renderLeftNav, v3 = o4.renderRightNav, b3 = o4.showBullets, y3 = o4.showFullscreenButton, w3 = o4.showIndex, T3 = o4.showThumbnails, S3 = o4.showNav, O3 = o4.showPlayButton, E3 = o4.renderPlayPauseButton, k3 = this.getThumbnailStyle(), I3 = this.getSlideItems(), x3 = I3.slides, _3 = I3.thumbnails, R3 = I3.bullets, L3 = t3("image-gallery-slide-wrapper", this.getThumbnailPositionClassName(f3), { "image-gallery-rtl": h3 }), P3 = a2().createElement("div", { ref: this.imageGallerySlideWrapper, className: L3 }, m3 && m3(), this.canSlide() ? a2().createElement(a2().Fragment, null, S3 && a2().createElement(a2().Fragment, null, g3(this.slideLeft, !this.canSlideLeft()), v3(this.slideRight, !this.canSlideRight())), a2().createElement(ve2, { className: "image-gallery-swipe", delta: 0, onSwiping: this.handleSwiping, onSwiped: this.handleOnSwiped }, a2().createElement("div", { className: "image-gallery-slides" }, x3))) : a2().createElement("div", { className: "image-gallery-slides" }, x3), O3 && E3(this.togglePlay, s4), b3 && a2().createElement("div", { className: "image-gallery-bullets" }, a2().createElement("div", { className: "image-gallery-bullets-container", role: "navigation", "aria-label": "Bullet Navigation" }, R3)), y3 && p3(this.toggleFullScreen, i4), w3 && a2().createElement("div", { className: "image-gallery-index" }, a2().createElement("span", { className: "image-gallery-index-current" }, n5 + 1), a2().createElement("span", { className: "image-gallery-index-separator" }, c3), a2().createElement("span", { className: "image-gallery-index-total" }, d3.length))), M3 = t3("image-gallery", l4, { "fullscreen-modal": r4 }), W3 = t3("image-gallery-content", this.getThumbnailPositionClassName(f3), { fullscreen: i4 }), D3 = t3("image-gallery-thumbnails-wrapper", this.getThumbnailPositionClassName(f3), { "thumbnails-wrapper-rtl": !this.isThumbnailVertical() && h3 }, { "thumbnails-swipe-horizontal": !this.isThumbnailVertical() && !u4 }, { "thumbnails-swipe-vertical": this.isThumbnailVertical() && !u4 });
              return a2().createElement("div", { ref: this.imageGallery, className: M3, "aria-live": "polite" }, a2().createElement("div", { className: W3 }, ("bottom" === f3 || "right" === f3) && P3, T3 && _3.length > 0 ? a2().createElement(ve2, { className: D3, delta: 0, onSwiping: !u4 && this.handleThumbnailSwiping, onSwiped: !u4 && this.handleOnThumbnailSwiped }, a2().createElement("div", { className: "image-gallery-thumbnails", ref: this.thumbnailsWrapper, style: this.getThumbnailBarHeight() }, a2().createElement("nav", { ref: this.thumbnails, className: "image-gallery-thumbnails-container", style: k3, "aria-label": "Thumbnail Navigation" }, _3))) : null, ("top" === f3 || "left" === f3) && P3));
            } }], i3 && Se2(n4.prototype, i3), l3;
          }(a2().Component);
          Le2.propTypes = { flickThreshold: te2.number, items: (0, te2.arrayOf)((0, te2.shape)({ bulletClass: te2.string, bulletOnClick: te2.func, description: te2.string, original: te2.string, originalHeight: te2.number, originalWidth: te2.number, loading: te2.string, thumbnailHeight: te2.number, thumbnailWidth: te2.number, thumbnailLoading: te2.string, fullscreen: te2.string, originalAlt: te2.string, originalTitle: te2.string, thumbnail: te2.string, thumbnailAlt: te2.string, thumbnailLabel: te2.string, thumbnailTitle: te2.string, originalClass: te2.string, thumbnailClass: te2.string, renderItem: te2.func, renderThumbInner: te2.func, imageSet: _e2, srcSet: te2.string, sizes: te2.string })).isRequired, showNav: te2.bool, autoPlay: te2.bool, lazyLoad: te2.bool, infinite: te2.bool, showIndex: te2.bool, showBullets: te2.bool, showThumbnails: te2.bool, showPlayButton: te2.bool, showFullscreenButton: te2.bool, disableThumbnailScroll: te2.bool, disableKeyDown: te2.bool, disableSwipe: te2.bool, disableThumbnailSwipe: te2.bool, useBrowserFullscreen: te2.bool, onErrorImageURL: te2.string, indexSeparator: te2.string, thumbnailPosition: (0, te2.oneOf)(["top", "bottom", "left", "right"]), startIndex: te2.number, slideDuration: te2.number, slideInterval: te2.number, slideOnThumbnailOver: te2.bool, swipeThreshold: te2.number, swipingTransitionDuration: te2.number, swipingThumbnailTransitionDuration: te2.number, onSlide: te2.func, onBeforeSlide: te2.func, onScreenChange: te2.func, onPause: te2.func, onPlay: te2.func, onClick: te2.func, onImageLoad: te2.func, onImageError: te2.func, onTouchMove: te2.func, onTouchEnd: te2.func, onTouchStart: te2.func, onMouseOver: te2.func, onMouseLeave: te2.func, onThumbnailError: te2.func, onThumbnailClick: te2.func, renderCustomControls: te2.func, renderLeftNav: te2.func, renderRightNav: te2.func, renderPlayPauseButton: te2.func, renderFullscreenButton: te2.func, renderItem: te2.func, renderThumbInner: te2.func, stopPropagation: te2.bool, additionalClass: te2.string, useTranslate3D: te2.bool, isRTL: te2.bool, useWindowKeyDown: te2.bool }, Le2.defaultProps = { onErrorImageURL: "", additionalClass: "", showNav: true, autoPlay: false, lazyLoad: false, infinite: true, showIndex: false, showBullets: false, showThumbnails: true, showPlayButton: true, showFullscreenButton: true, disableThumbnailScroll: false, disableKeyDown: false, disableSwipe: false, disableThumbnailSwipe: false, useTranslate3D: true, isRTL: false, useBrowserFullscreen: true, flickThreshold: 0.4, stopPropagation: false, indexSeparator: " / ", thumbnailPosition: "bottom", startIndex: 0, slideDuration: 450, swipingTransitionDuration: 0, swipingThumbnailTransitionDuration: 0, onSlide: null, onBeforeSlide: null, onScreenChange: null, onPause: null, onPlay: null, onClick: null, onImageLoad: null, onImageError: null, onTouchMove: null, onTouchEnd: null, onTouchStart: null, onMouseOver: null, onMouseLeave: null, onThumbnailError: null, onThumbnailClick: null, renderCustomControls: null, renderThumbInner: null, renderItem: null, slideInterval: 3e3, slideOnThumbnailOver: false, swipeThreshold: 30, renderLeftNav: function(e3, t4) {
            return a2().createElement(ce2, { onClick: e3, disabled: t4 });
          }, renderRightNav: function(e3, t4) {
            return a2().createElement(de2, { onClick: e3, disabled: t4 });
          }, renderPlayPauseButton: function(e3, t4) {
            return a2().createElement(pe2, { onClick: e3, isPlaying: t4 });
          }, renderFullscreenButton: function(e3, t4) {
            return a2().createElement(le2, { onClick: e3, isFullscreen: t4 });
          }, useWindowKeyDown: true };
          const Pe2 = Le2;
        })(), r2;
      })();
    });
  }
});

// node_modules/dayjs/plugin/updateLocale.js
var require_updateLocale = __commonJS({
  "node_modules/dayjs/plugin/updateLocale.js"(exports, module) {
    !function(e, n2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n2() : "function" == typeof define && define.amd ? define(n2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_updateLocale = n2();
    }(exports, function() {
      "use strict";
      return function(e, n2, t2) {
        t2.updateLocale = function(e2, n3) {
          var o2 = t2.Ls[e2];
          if (o2) return (n3 ? Object.keys(n3) : []).forEach(function(e3) {
            o2[e3] = n3[e3];
          }), o2;
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/localeData.js
var require_localeData = __commonJS({
  "node_modules/dayjs/plugin/localeData.js"(exports, module) {
    !function(n2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (n2 = "undefined" != typeof globalThis ? globalThis : n2 || self).dayjs_plugin_localeData = e();
    }(exports, function() {
      "use strict";
      return function(n2, e, t2) {
        var r2 = e.prototype, o2 = function(n3) {
          return n3 && (n3.indexOf ? n3 : n3.s);
        }, u3 = function(n3, e2, t3, r3, u4) {
          var i3 = n3.name ? n3 : n3.$locale(), a3 = o2(i3[e2]), s3 = o2(i3[t3]), f2 = a3 || s3.map(function(n4) {
            return n4.slice(0, r3);
          });
          if (!u4) return f2;
          var d2 = i3.weekStart;
          return f2.map(function(n4, e3) {
            return f2[(e3 + (d2 || 0)) % 7];
          });
        }, i2 = function() {
          return t2.Ls[t2.locale()];
        }, a2 = function(n3, e2) {
          return n3.formats[e2] || function(n4) {
            return n4.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(n5, e3, t3) {
              return e3 || t3.slice(1);
            });
          }(n3.formats[e2.toUpperCase()]);
        }, s2 = function() {
          var n3 = this;
          return { months: function(e2) {
            return e2 ? e2.format("MMMM") : u3(n3, "months");
          }, monthsShort: function(e2) {
            return e2 ? e2.format("MMM") : u3(n3, "monthsShort", "months", 3);
          }, firstDayOfWeek: function() {
            return n3.$locale().weekStart || 0;
          }, weekdays: function(e2) {
            return e2 ? e2.format("dddd") : u3(n3, "weekdays");
          }, weekdaysMin: function(e2) {
            return e2 ? e2.format("dd") : u3(n3, "weekdaysMin", "weekdays", 2);
          }, weekdaysShort: function(e2) {
            return e2 ? e2.format("ddd") : u3(n3, "weekdaysShort", "weekdays", 3);
          }, longDateFormat: function(e2) {
            return a2(n3.$locale(), e2);
          }, meridiem: this.$locale().meridiem, ordinal: this.$locale().ordinal };
        };
        r2.localeData = function() {
          return s2.bind(this)();
        }, t2.localeData = function() {
          var n3 = i2();
          return { firstDayOfWeek: function() {
            return n3.weekStart || 0;
          }, weekdays: function() {
            return t2.weekdays();
          }, weekdaysShort: function() {
            return t2.weekdaysShort();
          }, weekdaysMin: function() {
            return t2.weekdaysMin();
          }, months: function() {
            return t2.months();
          }, monthsShort: function() {
            return t2.monthsShort();
          }, longDateFormat: function(e2) {
            return a2(n3, e2);
          }, meridiem: n3.meridiem, ordinal: n3.ordinal };
        }, t2.months = function() {
          return u3(i2(), "months");
        }, t2.monthsShort = function() {
          return u3(i2(), "monthsShort", "months", 3);
        }, t2.weekdays = function(n3) {
          return u3(i2(), "weekdays", null, null, n3);
        }, t2.weekdaysShort = function(n3) {
          return u3(i2(), "weekdaysShort", "weekdays", 3, n3);
        }, t2.weekdaysMin = function(n3) {
          return u3(i2(), "weekdaysMin", "weekdays", 2, n3);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (r2 = "undefined" != typeof globalThis ? globalThis : r2 || self).dayjs_plugin_relativeTime = e();
    }(exports, function() {
      "use strict";
      return function(r2, e, t2) {
        r2 = r2 || {};
        var n2 = e.prototype, o2 = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i2(r3, e2, t3, o3) {
          return n2.fromToBase(r3, e2, t3, o3);
        }
        t2.en.relativeTime = o2, n2.fromToBase = function(e2, n3, i3, d3, u3) {
          for (var f2, a2, s2, l2 = i3.$locale().relativeTime || o2, h2 = r2.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m2 = h2.length, c2 = 0; c2 < m2; c2 += 1) {
            var y2 = h2[c2];
            y2.d && (f2 = d3 ? t2(e2).diff(i3, y2.d, true) : i3.diff(e2, y2.d, true));
            var p2 = (r2.rounding || Math.round)(Math.abs(f2));
            if (s2 = f2 > 0, p2 <= y2.r || !y2.r) {
              p2 <= 1 && c2 > 0 && (y2 = h2[c2 - 1]);
              var v2 = l2[y2.l];
              u3 && (p2 = u3("" + p2)), a2 = "string" == typeof v2 ? v2.replace("%d", p2) : v2(p2, n3, y2.l, s2);
              break;
            }
          }
          if (n3) return a2;
          var M2 = s2 ? l2.future : l2.past;
          return "function" == typeof M2 ? M2(a2) : M2.replace("%s", a2);
        }, n2.to = function(r3, e2) {
          return i2(r3, e2, this, true);
        }, n2.from = function(r3, e2) {
          return i2(r3, e2, this);
        };
        var d2 = function(r3) {
          return r3.$u ? t2.utc() : t2();
        };
        n2.toNow = function(r3) {
          return this.to(d2(this), r3);
        }, n2.fromNow = function(r3) {
          return this.from(d2(this), r3);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/duration.js
var require_duration = __commonJS({
  "node_modules/dayjs/plugin/duration.js"(exports, module) {
    !function(t2, s2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = s2() : "function" == typeof define && define.amd ? define(s2) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs_plugin_duration = s2();
    }(exports, function() {
      "use strict";
      var t2, s2, n2 = 1e3, i2 = 6e4, e = 36e5, r2 = 864e5, o2 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, u3 = 31536e6, d2 = 2628e6, a2 = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/, h2 = { years: u3, months: d2, days: r2, hours: e, minutes: i2, seconds: n2, milliseconds: 1, weeks: 6048e5 }, c2 = function(t3) {
        return t3 instanceof g2;
      }, f2 = function(t3, s3, n3) {
        return new g2(t3, n3, s3.$l);
      }, m2 = function(t3) {
        return s2.p(t3) + "s";
      }, l2 = function(t3) {
        return t3 < 0;
      }, $2 = function(t3) {
        return l2(t3) ? Math.ceil(t3) : Math.floor(t3);
      }, y2 = function(t3) {
        return Math.abs(t3);
      }, v2 = function(t3, s3) {
        return t3 ? l2(t3) ? { negative: true, format: "" + y2(t3) + s3 } : { negative: false, format: "" + t3 + s3 } : { negative: false, format: "" };
      }, g2 = function() {
        function l3(t3, s3, n3) {
          var i3 = this;
          if (this.$d = {}, this.$l = n3, void 0 === t3 && (this.$ms = 0, this.parseFromMilliseconds()), s3) return f2(t3 * h2[m2(s3)], this);
          if ("number" == typeof t3) return this.$ms = t3, this.parseFromMilliseconds(), this;
          if ("object" == typeof t3) return Object.keys(t3).forEach(function(s4) {
            i3.$d[m2(s4)] = t3[s4];
          }), this.calMilliseconds(), this;
          if ("string" == typeof t3) {
            var e2 = t3.match(a2);
            if (e2) {
              var r3 = e2.slice(2).map(function(t4) {
                return null != t4 ? Number(t4) : 0;
              });
              return this.$d.years = r3[0], this.$d.months = r3[1], this.$d.weeks = r3[2], this.$d.days = r3[3], this.$d.hours = r3[4], this.$d.minutes = r3[5], this.$d.seconds = r3[6], this.calMilliseconds(), this;
            }
          }
          return this;
        }
        var y3 = l3.prototype;
        return y3.calMilliseconds = function() {
          var t3 = this;
          this.$ms = Object.keys(this.$d).reduce(function(s3, n3) {
            return s3 + (t3.$d[n3] || 0) * h2[n3];
          }, 0);
        }, y3.parseFromMilliseconds = function() {
          var t3 = this.$ms;
          this.$d.years = $2(t3 / u3), t3 %= u3, this.$d.months = $2(t3 / d2), t3 %= d2, this.$d.days = $2(t3 / r2), t3 %= r2, this.$d.hours = $2(t3 / e), t3 %= e, this.$d.minutes = $2(t3 / i2), t3 %= i2, this.$d.seconds = $2(t3 / n2), t3 %= n2, this.$d.milliseconds = t3;
        }, y3.toISOString = function() {
          var t3 = v2(this.$d.years, "Y"), s3 = v2(this.$d.months, "M"), n3 = +this.$d.days || 0;
          this.$d.weeks && (n3 += 7 * this.$d.weeks);
          var i3 = v2(n3, "D"), e2 = v2(this.$d.hours, "H"), r3 = v2(this.$d.minutes, "M"), o3 = this.$d.seconds || 0;
          this.$d.milliseconds && (o3 += this.$d.milliseconds / 1e3, o3 = Math.round(1e3 * o3) / 1e3);
          var u4 = v2(o3, "S"), d3 = t3.negative || s3.negative || i3.negative || e2.negative || r3.negative || u4.negative, a3 = e2.format || r3.format || u4.format ? "T" : "", h3 = (d3 ? "-" : "") + "P" + t3.format + s3.format + i3.format + a3 + e2.format + r3.format + u4.format;
          return "P" === h3 || "-P" === h3 ? "P0D" : h3;
        }, y3.toJSON = function() {
          return this.toISOString();
        }, y3.format = function(t3) {
          var n3 = t3 || "YYYY-MM-DDTHH:mm:ss", i3 = { Y: this.$d.years, YY: s2.s(this.$d.years, 2, "0"), YYYY: s2.s(this.$d.years, 4, "0"), M: this.$d.months, MM: s2.s(this.$d.months, 2, "0"), D: this.$d.days, DD: s2.s(this.$d.days, 2, "0"), H: this.$d.hours, HH: s2.s(this.$d.hours, 2, "0"), m: this.$d.minutes, mm: s2.s(this.$d.minutes, 2, "0"), s: this.$d.seconds, ss: s2.s(this.$d.seconds, 2, "0"), SSS: s2.s(this.$d.milliseconds, 3, "0") };
          return n3.replace(o2, function(t4, s3) {
            return s3 || String(i3[t4]);
          });
        }, y3.as = function(t3) {
          return this.$ms / h2[m2(t3)];
        }, y3.get = function(t3) {
          var s3 = this.$ms, n3 = m2(t3);
          return "milliseconds" === n3 ? s3 %= 1e3 : s3 = "weeks" === n3 ? $2(s3 / h2[n3]) : this.$d[n3], s3 || 0;
        }, y3.add = function(t3, s3, n3) {
          var i3;
          return i3 = s3 ? t3 * h2[m2(s3)] : c2(t3) ? t3.$ms : f2(t3, this).$ms, f2(this.$ms + i3 * (n3 ? -1 : 1), this);
        }, y3.subtract = function(t3, s3) {
          return this.add(t3, s3, true);
        }, y3.locale = function(t3) {
          var s3 = this.clone();
          return s3.$l = t3, s3;
        }, y3.clone = function() {
          return f2(this.$ms, this);
        }, y3.humanize = function(s3) {
          return t2().add(this.$ms, "ms").locale(this.$l).fromNow(!s3);
        }, y3.valueOf = function() {
          return this.asMilliseconds();
        }, y3.milliseconds = function() {
          return this.get("milliseconds");
        }, y3.asMilliseconds = function() {
          return this.as("milliseconds");
        }, y3.seconds = function() {
          return this.get("seconds");
        }, y3.asSeconds = function() {
          return this.as("seconds");
        }, y3.minutes = function() {
          return this.get("minutes");
        }, y3.asMinutes = function() {
          return this.as("minutes");
        }, y3.hours = function() {
          return this.get("hours");
        }, y3.asHours = function() {
          return this.as("hours");
        }, y3.days = function() {
          return this.get("days");
        }, y3.asDays = function() {
          return this.as("days");
        }, y3.weeks = function() {
          return this.get("weeks");
        }, y3.asWeeks = function() {
          return this.as("weeks");
        }, y3.months = function() {
          return this.get("months");
        }, y3.asMonths = function() {
          return this.as("months");
        }, y3.years = function() {
          return this.get("years");
        }, y3.asYears = function() {
          return this.as("years");
        }, l3;
      }(), p2 = function(t3, s3, n3) {
        return t3.add(s3.years() * n3, "y").add(s3.months() * n3, "M").add(s3.days() * n3, "d").add(s3.hours() * n3, "h").add(s3.minutes() * n3, "m").add(s3.seconds() * n3, "s").add(s3.milliseconds() * n3, "ms");
      };
      return function(n3, i3, e2) {
        t2 = e2, s2 = e2().$utils(), e2.duration = function(t3, s3) {
          var n4 = e2.locale();
          return f2(t3, { $l: n4 }, s3);
        }, e2.isDuration = c2;
        var r3 = i3.prototype.add, o3 = i3.prototype.subtract;
        i3.prototype.add = function(t3, s3) {
          return c2(t3) ? p2(this, t3, 1) : r3.bind(this)(t3, s3);
        }, i3.prototype.subtract = function(t3, s3) {
          return c2(t3) ? p2(this, t3, -1) : o3.bind(this)(t3, s3);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/utc.js
var require_utc = __commonJS({
  "node_modules/dayjs/plugin/utc.js"(exports, module) {
    !function(t2, i2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = i2() : "function" == typeof define && define.amd ? define(i2) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs_plugin_utc = i2();
    }(exports, function() {
      "use strict";
      var t2 = "minute", i2 = /[+-]\d\d(?::?\d\d)?/g, e = /([+-]|\d\d)/g;
      return function(s2, f2, n2) {
        var u3 = f2.prototype;
        n2.utc = function(t3) {
          var i3 = { date: t3, utc: true, args: arguments };
          return new f2(i3);
        }, u3.utc = function(i3) {
          var e2 = n2(this.toDate(), { locale: this.$L, utc: true });
          return i3 ? e2.add(this.utcOffset(), t2) : e2;
        }, u3.local = function() {
          return n2(this.toDate(), { locale: this.$L, utc: false });
        };
        var r2 = u3.parse;
        u3.parse = function(t3) {
          t3.utc && (this.$u = true), this.$utils().u(t3.$offset) || (this.$offset = t3.$offset), r2.call(this, t3);
        };
        var o2 = u3.init;
        u3.init = function() {
          if (this.$u) {
            var t3 = this.$d;
            this.$y = t3.getUTCFullYear(), this.$M = t3.getUTCMonth(), this.$D = t3.getUTCDate(), this.$W = t3.getUTCDay(), this.$H = t3.getUTCHours(), this.$m = t3.getUTCMinutes(), this.$s = t3.getUTCSeconds(), this.$ms = t3.getUTCMilliseconds();
          } else o2.call(this);
        };
        var a2 = u3.utcOffset;
        u3.utcOffset = function(s3, f3) {
          var n3 = this.$utils().u;
          if (n3(s3)) return this.$u ? 0 : n3(this.$offset) ? a2.call(this) : this.$offset;
          if ("string" == typeof s3 && (s3 = function(t3) {
            void 0 === t3 && (t3 = "");
            var s4 = t3.match(i2);
            if (!s4) return null;
            var f4 = ("" + s4[0]).match(e) || ["-", 0, 0], n4 = f4[0], u5 = 60 * +f4[1] + +f4[2];
            return 0 === u5 ? 0 : "+" === n4 ? u5 : -u5;
          }(s3), null === s3)) return this;
          var u4 = Math.abs(s3) <= 16 ? 60 * s3 : s3;
          if (0 === u4) return this.utc(f3);
          var r3 = this.clone();
          if (f3) return r3.$offset = u4, r3.$u = false, r3;
          var o3 = this.$u ? this.toDate().getTimezoneOffset() : -1 * this.utcOffset();
          return (r3 = this.local().add(u4 + o3, t2)).$offset = u4, r3.$x.$localOffset = o3, r3;
        };
        var h2 = u3.format;
        u3.format = function(t3) {
          var i3 = t3 || (this.$u ? "YYYY-MM-DDTHH:mm:ss[Z]" : "");
          return h2.call(this, i3);
        }, u3.valueOf = function() {
          var t3 = this.$utils().u(this.$offset) ? 0 : this.$offset + (this.$x.$localOffset || this.$d.getTimezoneOffset());
          return this.$d.valueOf() - 6e4 * t3;
        }, u3.isUTC = function() {
          return !!this.$u;
        }, u3.toISOString = function() {
          return this.toDate().toISOString();
        }, u3.toString = function() {
          return this.toDate().toUTCString();
        };
        var l2 = u3.toDate;
        u3.toDate = function(t3) {
          return "s" === t3 && this.$offset ? n2(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate() : l2.call(this);
        };
        var c2 = u3.diff;
        u3.diff = function(t3, i3, e2) {
          if (t3 && this.$u === t3.$u) return c2.call(this, t3, i3, e2);
          var s3 = this.local(), f3 = n2(t3).local();
          return c2.call(s3, f3, i3, e2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/timezone.js
var require_timezone = __commonJS({
  "node_modules/dayjs/plugin/timezone.js"(exports, module) {
    !function(t2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs_plugin_timezone = e();
    }(exports, function() {
      "use strict";
      var t2 = { year: 0, month: 1, day: 2, hour: 3, minute: 4, second: 5 }, e = {};
      return function(n2, i2, o2) {
        var r2, a2 = function(t3, n3, i3) {
          void 0 === i3 && (i3 = {});
          var o3 = new Date(t3), r3 = function(t4, n4) {
            void 0 === n4 && (n4 = {});
            var i4 = n4.timeZoneName || "short", o4 = t4 + "|" + i4, r4 = e[o4];
            return r4 || (r4 = new Intl.DateTimeFormat("en-US", { hour12: false, timeZone: t4, year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit", second: "2-digit", timeZoneName: i4 }), e[o4] = r4), r4;
          }(n3, i3);
          return r3.formatToParts(o3);
        }, u3 = function(e2, n3) {
          for (var i3 = a2(e2, n3), r3 = [], u4 = 0; u4 < i3.length; u4 += 1) {
            var f3 = i3[u4], s3 = f3.type, m2 = f3.value, c2 = t2[s3];
            c2 >= 0 && (r3[c2] = parseInt(m2, 10));
          }
          var d2 = r3[3], l2 = 24 === d2 ? 0 : d2, h2 = r3[0] + "-" + r3[1] + "-" + r3[2] + " " + l2 + ":" + r3[4] + ":" + r3[5] + ":000", v2 = +e2;
          return (o2.utc(h2).valueOf() - (v2 -= v2 % 1e3)) / 6e4;
        }, f2 = i2.prototype;
        f2.tz = function(t3, e2) {
          void 0 === t3 && (t3 = r2);
          var n3, i3 = this.utcOffset(), a3 = this.toDate(), u4 = a3.toLocaleString("en-US", { timeZone: t3 }), f3 = Math.round((a3 - new Date(u4)) / 1e3 / 60), s3 = 15 * -Math.round(a3.getTimezoneOffset() / 15) - f3;
          if (!Number(s3)) n3 = this.utcOffset(0, e2);
          else if (n3 = o2(u4, { locale: this.$L }).$set("millisecond", this.$ms).utcOffset(s3, true), e2) {
            var m2 = n3.utcOffset();
            n3 = n3.add(i3 - m2, "minute");
          }
          return n3.$x.$timezone = t3, n3;
        }, f2.offsetName = function(t3) {
          var e2 = this.$x.$timezone || o2.tz.guess(), n3 = a2(this.valueOf(), e2, { timeZoneName: t3 }).find(function(t4) {
            return "timezonename" === t4.type.toLowerCase();
          });
          return n3 && n3.value;
        };
        var s2 = f2.startOf;
        f2.startOf = function(t3, e2) {
          if (!this.$x || !this.$x.$timezone) return s2.call(this, t3, e2);
          var n3 = o2(this.format("YYYY-MM-DD HH:mm:ss:SSS"), { locale: this.$L });
          return s2.call(n3, t3, e2).tz(this.$x.$timezone, true);
        }, o2.tz = function(t3, e2, n3) {
          var i3 = n3 && e2, a3 = n3 || e2 || r2, f3 = u3(+o2(), a3);
          if ("string" != typeof t3) return o2(t3).tz(a3);
          var s3 = function(t4, e3, n4) {
            var i4 = t4 - 60 * e3 * 1e3, o3 = u3(i4, n4);
            if (e3 === o3) return [i4, e3];
            var r3 = u3(i4 -= 60 * (o3 - e3) * 1e3, n4);
            return o3 === r3 ? [i4, o3] : [t4 - 60 * Math.min(o3, r3) * 1e3, Math.max(o3, r3)];
          }(o2.utc(t3, i3).valueOf(), f3, a3), m2 = s3[0], c2 = s3[1], d2 = o2(m2).utcOffset(c2);
          return d2.$x.$timezone = a3, d2;
        }, o2.tz.guess = function() {
          return Intl.DateTimeFormat().resolvedOptions().timeZone;
        }, o2.tz.setDefault = function(t3) {
          r2 = t3;
        };
      };
    });
  }
});

// node_modules/dayjs/locale/de.js
var require_de = __commonJS({
  "node_modules/dayjs/locale/de.js"(exports, module) {
    !function(e, n2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], n2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_de = n2(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function n2(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = n2(e), a2 = { s: "ein paar Sekunden", m: ["eine Minute", "einer Minute"], mm: "%d Minuten", h: ["eine Stunde", "einer Stunde"], hh: "%d Stunden", d: ["ein Tag", "einem Tag"], dd: ["%d Tage", "%d Tagen"], M: ["ein Monat", "einem Monat"], MM: ["%d Monate", "%d Monaten"], y: ["ein Jahr", "einem Jahr"], yy: ["%d Jahre", "%d Jahren"] };
      function i2(e2, n3, t3) {
        var i3 = a2[t3];
        return Array.isArray(i3) && (i3 = i3[n3 ? 0 : 1]), i3.replace("%d", e2);
      }
      var r2 = { name: "de", weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.".split("_"), ordinal: function(e2) {
        return e2 + ".";
      }, weekStart: 1, yearStart: 4, formats: { LTS: "HH:mm:ss", LT: "HH:mm", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, relativeTime: { future: "in %s", past: "vor %s", s: i2, m: i2, mm: i2, h: i2, hh: i2, d: i2, dd: i2, M: i2, MM: i2, y: i2, yy: i2 } };
      return t2.default.locale(r2, null, true), r2;
    });
  }
});

// node_modules/dayjs/locale/es.js
var require_es = __commonJS({
  "node_modules/dayjs/locale/es.js"(exports, module) {
    !function(e, o2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = o2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], o2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_es = o2(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function o2(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var s2 = o2(e), d2 = { name: "es", monthsShort: "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), weekStart: 1, formats: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, ordinal: function(e2) {
        return e2 + "º";
      } };
      return s2.default.locale(d2, null, true), d2;
    });
  }
});

// node_modules/dayjs/locale/fr.js
var require_fr = __commonJS({
  "node_modules/dayjs/locale/fr.js"(exports, module) {
    !function(e, n2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], n2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_fr = n2(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function n2(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = n2(e), i2 = { name: "fr", weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinal: function(e2) {
        return "" + e2 + (1 === e2 ? "er" : "");
      } };
      return t2.default.locale(i2, null, true), i2;
    });
  }
});

// node_modules/dayjs/locale/hi.js
var require_hi = __commonJS({
  "node_modules/dayjs/locale/hi.js"(exports, module) {
    !function(_2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], e) : (_2 = "undefined" != typeof globalThis ? globalThis : _2 || self).dayjs_locale_hi = e(_2.dayjs);
    }(exports, function(_2) {
      "use strict";
      function e(_3) {
        return _3 && "object" == typeof _3 && "default" in _3 ? _3 : { default: _3 };
      }
      var t2 = e(_2), d2 = { name: "hi", weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"), weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"), monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), ordinal: function(_3) {
        return _3;
      }, formats: { LT: "A h:mm बजे", LTS: "A h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm बजे", LLLL: "dddd, D MMMM YYYY, A h:mm बजे" }, relativeTime: { future: "%s में", past: "%s पहले", s: "कुछ ही क्षण", m: "एक मिनट", mm: "%d मिनट", h: "एक घंटा", hh: "%d घंटे", d: "एक दिन", dd: "%d दिन", M: "एक महीने", MM: "%d महीने", y: "एक वर्ष", yy: "%d वर्ष" } };
      return t2.default.locale(d2, null, true), d2;
    });
  }
});

// node_modules/dayjs/locale/it.js
var require_it = __commonJS({
  "node_modules/dayjs/locale/it.js"(exports, module) {
    !function(e, o2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = o2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], o2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_it = o2(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function o2(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = o2(e), n2 = { name: "it", weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"), weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"), weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"), months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), weekStart: 1, monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "tra %s", past: "%s fa", s: "qualche secondo", m: "un minuto", mm: "%d minuti", h: "un' ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, ordinal: function(e2) {
        return e2 + "º";
      } };
      return t2.default.locale(n2, null, true), n2;
    });
  }
});

// node_modules/dayjs/locale/ja.js
var require_ja = __commonJS({
  "node_modules/dayjs/locale/ja.js"(exports, module) {
    !function(e, _2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = _2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], _2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_ja = _2(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function _2(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = _2(e), d2 = { name: "ja", weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"), weekdaysShort: "日_月_火_水_木_金_土".split("_"), weekdaysMin: "日_月_火_水_木_金_土".split("_"), months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), ordinal: function(e2) {
        return e2 + "日";
      }, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日 dddd HH:mm", l: "YYYY/MM/DD", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日(ddd) HH:mm" }, meridiem: function(e2) {
        return e2 < 12 ? "午前" : "午後";
      }, relativeTime: { future: "%s後", past: "%s前", s: "数秒", m: "1分", mm: "%d分", h: "1時間", hh: "%d時間", d: "1日", dd: "%d日", M: "1ヶ月", MM: "%dヶ月", y: "1年", yy: "%d年" } };
      return t2.default.locale(d2, null, true), d2;
    });
  }
});

// node_modules/dayjs/locale/ko.js
var require_ko = __commonJS({
  "node_modules/dayjs/locale/ko.js"(exports, module) {
    !function(e, _2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = _2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], _2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_ko = _2(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function _2(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var d2 = _2(e), t2 = { name: "ko", weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"), weekdaysShort: "일_월_화_수_목_금_토".split("_"), weekdaysMin: "일_월_화_수_목_금_토".split("_"), months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), ordinal: function(e2) {
        return e2 + "일";
      }, formats: { LT: "A h:mm", LTS: "A h:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY년 MMMM D일", LLL: "YYYY년 MMMM D일 A h:mm", LLLL: "YYYY년 MMMM D일 dddd A h:mm", l: "YYYY.MM.DD.", ll: "YYYY년 MMMM D일", lll: "YYYY년 MMMM D일 A h:mm", llll: "YYYY년 MMMM D일 dddd A h:mm" }, meridiem: function(e2) {
        return e2 < 12 ? "오전" : "오후";
      }, relativeTime: { future: "%s 후", past: "%s 전", s: "몇 초", m: "1분", mm: "%d분", h: "한 시간", hh: "%d시간", d: "하루", dd: "%d일", M: "한 달", MM: "%d달", y: "일 년", yy: "%d년" } };
      return d2.default.locale(t2, null, true), t2;
    });
  }
});

// node_modules/dayjs/locale/nl.js
var require_nl = __commonJS({
  "node_modules/dayjs/locale/nl.js"(exports, module) {
    !function(e, a2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = a2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], a2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_nl = a2(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function a2(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var d2 = a2(e), n2 = { name: "nl", weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), ordinal: function(e2) {
        return "[" + e2 + (1 === e2 || 8 === e2 || e2 >= 20 ? "ste" : "de") + "]";
      }, weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", m: "een minuut", mm: "%d minuten", h: "een uur", hh: "%d uur", d: "een dag", dd: "%d dagen", M: "een maand", MM: "%d maanden", y: "een jaar", yy: "%d jaar" } };
      return d2.default.locale(n2, null, true), n2;
    });
  }
});

// node_modules/dayjs/locale/pt.js
var require_pt = __commonJS({
  "node_modules/dayjs/locale/pt.js"(exports, module) {
    !function(e, a2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = a2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], a2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_pt = a2(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function a2(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var o2 = a2(e), t2 = { name: "pt", weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"), weekdaysShort: "dom_seg_ter_qua_qui_sex_sab".split("_"), weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sa".split("_"), months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), ordinal: function(e2) {
        return e2 + "º";
      }, weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm" }, relativeTime: { future: "em %s", past: "há %s", s: "alguns segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" } };
      return o2.default.locale(t2, null, true), t2;
    });
  }
});

// node_modules/dayjs/locale/ru.js
var require_ru = __commonJS({
  "node_modules/dayjs/locale/ru.js"(exports, module) {
    !function(_2, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], t2) : (_2 = "undefined" != typeof globalThis ? globalThis : _2 || self).dayjs_locale_ru = t2(_2.dayjs);
    }(exports, function(_2) {
      "use strict";
      function t2(_3) {
        return _3 && "object" == typeof _3 && "default" in _3 ? _3 : { default: _3 };
      }
      var e = t2(_2), n2 = "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"), s2 = "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"), r2 = "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"), o2 = "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_"), i2 = /D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;
      function d2(_3, t3, e2) {
        var n3, s3;
        return "m" === e2 ? t3 ? "минута" : "минуту" : _3 + " " + (n3 = +_3, s3 = { mm: t3 ? "минута_минуты_минут" : "минуту_минуты_минут", hh: "час_часа_часов", dd: "день_дня_дней", MM: "месяц_месяца_месяцев", yy: "год_года_лет" }[e2].split("_"), n3 % 10 == 1 && n3 % 100 != 11 ? s3[0] : n3 % 10 >= 2 && n3 % 10 <= 4 && (n3 % 100 < 10 || n3 % 100 >= 20) ? s3[1] : s3[2]);
      }
      var u3 = function(_3, t3) {
        return i2.test(t3) ? n2[_3.month()] : s2[_3.month()];
      };
      u3.s = s2, u3.f = n2;
      var a2 = function(_3, t3) {
        return i2.test(t3) ? r2[_3.month()] : o2[_3.month()];
      };
      a2.s = o2, a2.f = r2;
      var m2 = { name: "ru", weekdays: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"), weekdaysShort: "вск_пнд_втр_срд_чтв_птн_сбт".split("_"), weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"), months: u3, monthsShort: a2, weekStart: 1, yearStart: 4, formats: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., H:mm", LLLL: "dddd, D MMMM YYYY г., H:mm" }, relativeTime: { future: "через %s", past: "%s назад", s: "несколько секунд", m: d2, mm: d2, h: "час", hh: d2, d: "день", dd: d2, M: "месяц", MM: d2, y: "год", yy: d2 }, ordinal: function(_3) {
        return _3;
      }, meridiem: function(_3) {
        return _3 < 4 ? "ночи" : _3 < 12 ? "утра" : _3 < 17 ? "дня" : "вечера";
      } };
      return e.default.locale(m2, null, true), m2;
    });
  }
});

// node_modules/dayjs/locale/tr.js
var require_tr = __commonJS({
  "node_modules/dayjs/locale/tr.js"(exports, module) {
    !function(a2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], e) : (a2 = "undefined" != typeof globalThis ? globalThis : a2 || self).dayjs_locale_tr = e(a2.dayjs);
    }(exports, function(a2) {
      "use strict";
      function e(a3) {
        return a3 && "object" == typeof a3 && "default" in a3 ? a3 : { default: a3 };
      }
      var t2 = e(a2), _2 = { name: "tr", weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"), weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"), months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"), monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"), weekStart: 1, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, relativeTime: { future: "%s sonra", past: "%s önce", s: "birkaç saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir yıl", yy: "%d yıl" }, ordinal: function(a3) {
        return a3 + ".";
      } };
      return t2.default.locale(_2, null, true), _2;
    });
  }
});

// node_modules/dayjs/locale/en.js
var require_en = __commonJS({
  "node_modules/dayjs/locale/en.js"(exports, module) {
    !function(e, n2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n2() : "function" == typeof define && define.amd ? define(n2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_en = n2();
    }(exports, function() {
      "use strict";
      return { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(e) {
        var n2 = ["th", "st", "nd", "rd"], t2 = e % 100;
        return "[" + e + (n2[(t2 - 20) % 10] || n2[t2] || n2[0]) + "]";
      } };
    });
  }
});

// node_modules/fix-webm-duration/fix-webm-duration.js
var require_fix_webm_duration = __commonJS({
  "node_modules/fix-webm-duration/fix-webm-duration.js"(exports, module) {
    (function(name2, definition3) {
      if (typeof define === "function" && define.amd) {
        define(definition3);
      } else if (typeof module !== "undefined" && module.exports) {
        module.exports = definition3();
      } else {
        window.ysFixWebmDuration = definition3();
      }
    })("fix-webm-duration", function() {
      var sections = {
        172351395: { name: "EBML", type: "Container" },
        646: { name: "EBMLVersion", type: "Uint" },
        759: { name: "EBMLReadVersion", type: "Uint" },
        754: { name: "EBMLMaxIDLength", type: "Uint" },
        755: { name: "EBMLMaxSizeLength", type: "Uint" },
        642: { name: "DocType", type: "String" },
        647: { name: "DocTypeVersion", type: "Uint" },
        645: { name: "DocTypeReadVersion", type: "Uint" },
        108: { name: "Void", type: "Binary" },
        63: { name: "CRC-32", type: "Binary" },
        190023271: { name: "SignatureSlot", type: "Container" },
        16010: { name: "SignatureAlgo", type: "Uint" },
        16026: { name: "SignatureHash", type: "Uint" },
        16037: { name: "SignaturePublicKey", type: "Binary" },
        16053: { name: "Signature", type: "Binary" },
        15963: { name: "SignatureElements", type: "Container" },
        15995: { name: "SignatureElementList", type: "Container" },
        9522: { name: "SignedElement", type: "Binary" },
        139690087: { name: "Segment", type: "Container" },
        21863284: { name: "SeekHead", type: "Container" },
        3515: { name: "Seek", type: "Container" },
        5035: { name: "SeekID", type: "Binary" },
        5036: { name: "SeekPosition", type: "Uint" },
        88713574: { name: "Info", type: "Container" },
        13220: { name: "SegmentUID", type: "Binary" },
        13188: { name: "SegmentFilename", type: "String" },
        1882403: { name: "PrevUID", type: "Binary" },
        1868715: { name: "PrevFilename", type: "String" },
        2013475: { name: "NextUID", type: "Binary" },
        1999803: { name: "NextFilename", type: "String" },
        1092: { name: "SegmentFamily", type: "Binary" },
        10532: { name: "ChapterTranslate", type: "Container" },
        10748: { name: "ChapterTranslateEditionUID", type: "Uint" },
        10687: { name: "ChapterTranslateCodec", type: "Uint" },
        10661: { name: "ChapterTranslateID", type: "Binary" },
        710577: { name: "TimecodeScale", type: "Uint" },
        1161: { name: "Duration", type: "Float" },
        1121: { name: "DateUTC", type: "Date" },
        15273: { name: "Title", type: "String" },
        3456: { name: "MuxingApp", type: "String" },
        5953: { name: "WritingApp", type: "String" },
        // 0xf43b675: { name: 'Cluster', type: 'Container' },
        103: { name: "Timecode", type: "Uint" },
        6228: { name: "SilentTracks", type: "Container" },
        6359: { name: "SilentTrackNumber", type: "Uint" },
        39: { name: "Position", type: "Uint" },
        43: { name: "PrevSize", type: "Uint" },
        35: { name: "SimpleBlock", type: "Binary" },
        32: { name: "BlockGroup", type: "Container" },
        33: { name: "Block", type: "Binary" },
        34: { name: "BlockVirtual", type: "Binary" },
        13729: { name: "BlockAdditions", type: "Container" },
        38: { name: "BlockMore", type: "Container" },
        110: { name: "BlockAddID", type: "Uint" },
        37: { name: "BlockAdditional", type: "Binary" },
        27: { name: "BlockDuration", type: "Uint" },
        122: { name: "ReferencePriority", type: "Uint" },
        123: { name: "ReferenceBlock", type: "Int" },
        125: { name: "ReferenceVirtual", type: "Int" },
        36: { name: "CodecState", type: "Binary" },
        13730: { name: "DiscardPadding", type: "Int" },
        14: { name: "Slices", type: "Container" },
        104: { name: "TimeSlice", type: "Container" },
        76: { name: "LaceNumber", type: "Uint" },
        77: { name: "FrameNumber", type: "Uint" },
        75: { name: "BlockAdditionID", type: "Uint" },
        78: { name: "Delay", type: "Uint" },
        79: { name: "SliceDuration", type: "Uint" },
        72: { name: "ReferenceFrame", type: "Container" },
        73: { name: "ReferenceOffset", type: "Uint" },
        74: { name: "ReferenceTimeCode", type: "Uint" },
        47: { name: "EncryptedBlock", type: "Binary" },
        106212971: { name: "Tracks", type: "Container" },
        46: { name: "TrackEntry", type: "Container" },
        87: { name: "TrackNumber", type: "Uint" },
        13253: { name: "TrackUID", type: "Uint" },
        3: { name: "TrackType", type: "Uint" },
        57: { name: "FlagEnabled", type: "Uint" },
        8: { name: "FlagDefault", type: "Uint" },
        5546: { name: "FlagForced", type: "Uint" },
        28: { name: "FlagLacing", type: "Uint" },
        11751: { name: "MinCache", type: "Uint" },
        11768: { name: "MaxCache", type: "Uint" },
        254851: { name: "DefaultDuration", type: "Uint" },
        216698: { name: "DefaultDecodedFieldDuration", type: "Uint" },
        209231: { name: "TrackTimecodeScale", type: "Float" },
        4991: { name: "TrackOffset", type: "Int" },
        5614: { name: "MaxBlockAdditionID", type: "Uint" },
        4974: { name: "Name", type: "String" },
        177564: { name: "Language", type: "String" },
        6: { name: "CodecID", type: "String" },
        9122: { name: "CodecPrivate", type: "Binary" },
        362120: { name: "CodecName", type: "String" },
        13382: { name: "AttachmentLink", type: "Uint" },
        1742487: { name: "CodecSettings", type: "String" },
        1785920: { name: "CodecInfoURL", type: "String" },
        438848: { name: "CodecDownloadURL", type: "String" },
        42: { name: "CodecDecodeAll", type: "Uint" },
        12203: { name: "TrackOverlay", type: "Uint" },
        5802: { name: "CodecDelay", type: "Uint" },
        5819: { name: "SeekPreRoll", type: "Uint" },
        9764: { name: "TrackTranslate", type: "Container" },
        9980: { name: "TrackTranslateEditionUID", type: "Uint" },
        9919: { name: "TrackTranslateCodec", type: "Uint" },
        9893: { name: "TrackTranslateTrackID", type: "Binary" },
        96: { name: "Video", type: "Container" },
        26: { name: "FlagInterlaced", type: "Uint" },
        5048: { name: "StereoMode", type: "Uint" },
        5056: { name: "AlphaMode", type: "Uint" },
        5049: { name: "OldStereoMode", type: "Uint" },
        48: { name: "PixelWidth", type: "Uint" },
        58: { name: "PixelHeight", type: "Uint" },
        5290: { name: "PixelCropBottom", type: "Uint" },
        5307: { name: "PixelCropTop", type: "Uint" },
        5324: { name: "PixelCropLeft", type: "Uint" },
        5341: { name: "PixelCropRight", type: "Uint" },
        5296: { name: "DisplayWidth", type: "Uint" },
        5306: { name: "DisplayHeight", type: "Uint" },
        5298: { name: "DisplayUnit", type: "Uint" },
        5299: { name: "AspectRatioType", type: "Uint" },
        963876: { name: "ColourSpace", type: "Binary" },
        1029411: { name: "GammaValue", type: "Float" },
        230371: { name: "FrameRate", type: "Float" },
        97: { name: "Audio", type: "Container" },
        53: { name: "SamplingFrequency", type: "Float" },
        14517: { name: "OutputSamplingFrequency", type: "Float" },
        31: { name: "Channels", type: "Uint" },
        15739: { name: "ChannelPositions", type: "Binary" },
        8804: { name: "BitDepth", type: "Uint" },
        98: { name: "TrackOperation", type: "Container" },
        99: { name: "TrackCombinePlanes", type: "Container" },
        100: { name: "TrackPlane", type: "Container" },
        101: { name: "TrackPlaneUID", type: "Uint" },
        102: { name: "TrackPlaneType", type: "Uint" },
        105: { name: "TrackJoinBlocks", type: "Container" },
        109: { name: "TrackJoinUID", type: "Uint" },
        64: { name: "TrickTrackUID", type: "Uint" },
        65: { name: "TrickTrackSegmentUID", type: "Binary" },
        70: { name: "TrickTrackFlag", type: "Uint" },
        71: { name: "TrickMasterTrackUID", type: "Uint" },
        68: { name: "TrickMasterTrackSegmentUID", type: "Binary" },
        11648: { name: "ContentEncodings", type: "Container" },
        8768: { name: "ContentEncoding", type: "Container" },
        4145: { name: "ContentEncodingOrder", type: "Uint" },
        4146: { name: "ContentEncodingScope", type: "Uint" },
        4147: { name: "ContentEncodingType", type: "Uint" },
        4148: { name: "ContentCompression", type: "Container" },
        596: { name: "ContentCompAlgo", type: "Uint" },
        597: { name: "ContentCompSettings", type: "Binary" },
        4149: { name: "ContentEncryption", type: "Container" },
        2017: { name: "ContentEncAlgo", type: "Uint" },
        2018: { name: "ContentEncKeyID", type: "Binary" },
        2019: { name: "ContentSignature", type: "Binary" },
        2020: { name: "ContentSigKeyID", type: "Binary" },
        2021: { name: "ContentSigAlgo", type: "Uint" },
        2022: { name: "ContentSigHashAlgo", type: "Uint" },
        206814059: { name: "Cues", type: "Container" },
        59: { name: "CuePoint", type: "Container" },
        51: { name: "CueTime", type: "Uint" },
        55: { name: "CueTrackPositions", type: "Container" },
        119: { name: "CueTrack", type: "Uint" },
        113: { name: "CueClusterPosition", type: "Uint" },
        112: { name: "CueRelativePosition", type: "Uint" },
        50: { name: "CueDuration", type: "Uint" },
        4984: { name: "CueBlockNumber", type: "Uint" },
        106: { name: "CueCodecState", type: "Uint" },
        91: { name: "CueReference", type: "Container" },
        22: { name: "CueRefTime", type: "Uint" },
        23: { name: "CueRefCluster", type: "Uint" },
        4959: { name: "CueRefNumber", type: "Uint" },
        107: { name: "CueRefCodecState", type: "Uint" },
        155296873: { name: "Attachments", type: "Container" },
        8615: { name: "AttachedFile", type: "Container" },
        1662: { name: "FileDescription", type: "String" },
        1646: { name: "FileName", type: "String" },
        1632: { name: "FileMimeType", type: "String" },
        1628: { name: "FileData", type: "Binary" },
        1710: { name: "FileUID", type: "Uint" },
        1653: { name: "FileReferral", type: "Binary" },
        1633: { name: "FileUsedStartTime", type: "Uint" },
        1634: { name: "FileUsedEndTime", type: "Uint" },
        4433776: { name: "Chapters", type: "Container" },
        1465: { name: "EditionEntry", type: "Container" },
        1468: { name: "EditionUID", type: "Uint" },
        1469: { name: "EditionFlagHidden", type: "Uint" },
        1499: { name: "EditionFlagDefault", type: "Uint" },
        1501: { name: "EditionFlagOrdered", type: "Uint" },
        54: { name: "ChapterAtom", type: "Container" },
        13252: { name: "ChapterUID", type: "Uint" },
        5716: { name: "ChapterStringUID", type: "String" },
        17: { name: "ChapterTimeStart", type: "Uint" },
        18: { name: "ChapterTimeEnd", type: "Uint" },
        24: { name: "ChapterFlagHidden", type: "Uint" },
        1432: { name: "ChapterFlagEnabled", type: "Uint" },
        11879: { name: "ChapterSegmentUID", type: "Binary" },
        11964: { name: "ChapterSegmentEditionUID", type: "Uint" },
        9155: { name: "ChapterPhysicalEquiv", type: "Uint" },
        15: { name: "ChapterTrack", type: "Container" },
        9: { name: "ChapterTrackNumber", type: "Uint" },
        0: { name: "ChapterDisplay", type: "Container" },
        5: { name: "ChapString", type: "String" },
        892: { name: "ChapLanguage", type: "String" },
        894: { name: "ChapCountry", type: "String" },
        10564: { name: "ChapProcess", type: "Container" },
        10581: { name: "ChapProcessCodecID", type: "Uint" },
        1293: { name: "ChapProcessPrivate", type: "Binary" },
        10513: { name: "ChapProcessCommand", type: "Container" },
        10530: { name: "ChapProcessTime", type: "Uint" },
        10547: { name: "ChapProcessData", type: "Binary" },
        39109479: { name: "Tags", type: "Container" },
        13171: { name: "Tag", type: "Container" },
        9152: { name: "Targets", type: "Container" },
        10442: { name: "TargetTypeValue", type: "Uint" },
        9162: { name: "TargetType", type: "String" },
        9157: { name: "TagTrackUID", type: "Uint" },
        9161: { name: "TagEditionUID", type: "Uint" },
        9156: { name: "TagChapterUID", type: "Uint" },
        9158: { name: "TagAttachmentUID", type: "Uint" },
        10184: { name: "SimpleTag", type: "Container" },
        1443: { name: "TagName", type: "String" },
        1146: { name: "TagLanguage", type: "String" },
        1156: { name: "TagDefault", type: "Uint" },
        1159: { name: "TagString", type: "String" },
        1157: { name: "TagBinary", type: "Binary" }
      };
      function doInherit(newClass, baseClass) {
        newClass.prototype = Object.create(baseClass.prototype);
        newClass.prototype.constructor = newClass;
      }
      function WebmBase(name2, type) {
        this.name = name2 || "Unknown";
        this.type = type || "Unknown";
      }
      WebmBase.prototype.updateBySource = function() {
      };
      WebmBase.prototype.setSource = function(source) {
        this.source = source;
        this.updateBySource();
      };
      WebmBase.prototype.updateByData = function() {
      };
      WebmBase.prototype.setData = function(data) {
        this.data = data;
        this.updateByData();
      };
      function WebmUint(name2, type) {
        WebmBase.call(this, name2, type || "Uint");
      }
      doInherit(WebmUint, WebmBase);
      function padHex(hex) {
        return hex.length % 2 === 1 ? "0" + hex : hex;
      }
      WebmUint.prototype.updateBySource = function() {
        this.data = "";
        for (var i2 = 0; i2 < this.source.length; i2++) {
          var hex = this.source[i2].toString(16);
          this.data += padHex(hex);
        }
      };
      WebmUint.prototype.updateByData = function() {
        var length = this.data.length / 2;
        this.source = new Uint8Array(length);
        for (var i2 = 0; i2 < length; i2++) {
          var hex = this.data.substr(i2 * 2, 2);
          this.source[i2] = parseInt(hex, 16);
        }
      };
      WebmUint.prototype.getValue = function() {
        return parseInt(this.data, 16);
      };
      WebmUint.prototype.setValue = function(value) {
        this.setData(padHex(value.toString(16)));
      };
      function WebmFloat(name2, type) {
        WebmBase.call(this, name2, type || "Float");
      }
      doInherit(WebmFloat, WebmBase);
      WebmFloat.prototype.getFloatArrayType = function() {
        return this.source && this.source.length === 4 ? Float32Array : Float64Array;
      };
      WebmFloat.prototype.updateBySource = function() {
        var byteArray = this.source.reverse();
        var floatArrayType = this.getFloatArrayType();
        var floatArray = new floatArrayType(byteArray.buffer);
        this.data = floatArray[0];
      };
      WebmFloat.prototype.updateByData = function() {
        var floatArrayType = this.getFloatArrayType();
        var floatArray = new floatArrayType([this.data]);
        var byteArray = new Uint8Array(floatArray.buffer);
        this.source = byteArray.reverse();
      };
      WebmFloat.prototype.getValue = function() {
        return this.data;
      };
      WebmFloat.prototype.setValue = function(value) {
        this.setData(value);
      };
      function WebmContainer(name2, type) {
        WebmBase.call(this, name2, type || "Container");
      }
      doInherit(WebmContainer, WebmBase);
      WebmContainer.prototype.readByte = function() {
        return this.source[this.offset++];
      };
      WebmContainer.prototype.readUint = function() {
        var firstByte = this.readByte();
        var bytes = 8 - firstByte.toString(2).length;
        var value = firstByte - (1 << 7 - bytes);
        for (var i2 = 0; i2 < bytes; i2++) {
          value *= 256;
          value += this.readByte();
        }
        return value;
      };
      WebmContainer.prototype.updateBySource = function() {
        this.data = [];
        for (this.offset = 0; this.offset < this.source.length; this.offset = end2) {
          var id3 = this.readUint();
          var len = this.readUint();
          var end2 = Math.min(this.offset + len, this.source.length);
          var data = this.source.slice(this.offset, end2);
          var info = sections[id3] || { name: "Unknown", type: "Unknown" };
          var ctr = WebmBase;
          switch (info.type) {
            case "Container":
              ctr = WebmContainer;
              break;
            case "Uint":
              ctr = WebmUint;
              break;
            case "Float":
              ctr = WebmFloat;
              break;
          }
          var section = new ctr(info.name, info.type);
          section.setSource(data);
          this.data.push({
            id: id3,
            idHex: id3.toString(16),
            data: section
          });
        }
      };
      WebmContainer.prototype.writeUint = function(x2, draft) {
        for (var bytes = 1, flag = 128; x2 >= flag && bytes < 8; bytes++, flag *= 128) {
        }
        if (!draft) {
          var value = flag + x2;
          for (var i2 = bytes - 1; i2 >= 0; i2--) {
            var c2 = value % 256;
            this.source[this.offset + i2] = c2;
            value = (value - c2) / 256;
          }
        }
        this.offset += bytes;
      };
      WebmContainer.prototype.writeSections = function(draft) {
        this.offset = 0;
        for (var i2 = 0; i2 < this.data.length; i2++) {
          var section = this.data[i2], content3 = section.data.source, contentLength = content3.length;
          this.writeUint(section.id, draft);
          this.writeUint(contentLength, draft);
          if (!draft) {
            this.source.set(content3, this.offset);
          }
          this.offset += contentLength;
        }
        return this.offset;
      };
      WebmContainer.prototype.updateByData = function() {
        var length = this.writeSections("draft");
        this.source = new Uint8Array(length);
        this.writeSections();
      };
      WebmContainer.prototype.getSectionById = function(id3) {
        for (var i2 = 0; i2 < this.data.length; i2++) {
          var section = this.data[i2];
          if (section.id === id3) {
            return section.data;
          }
        }
        return null;
      };
      function WebmFile(source) {
        WebmContainer.call(this, "File", "File");
        this.setSource(source);
      }
      doInherit(WebmFile, WebmContainer);
      WebmFile.prototype.fixDuration = function(duration2, options2) {
        var logger = options2 && options2.logger;
        if (logger === void 0) {
          logger = function(message) {
            console.log(message);
          };
        } else if (!logger) {
          logger = function() {
          };
        }
        var segmentSection = this.getSectionById(139690087);
        if (!segmentSection) {
          logger("[fix-webm-duration] Segment section is missing");
          return false;
        }
        var infoSection = segmentSection.getSectionById(88713574);
        if (!infoSection) {
          logger("[fix-webm-duration] Info section is missing");
          return false;
        }
        var timeScaleSection = infoSection.getSectionById(710577);
        if (!timeScaleSection) {
          logger("[fix-webm-duration] TimecodeScale section is missing");
          return false;
        }
        var durationSection = infoSection.getSectionById(1161);
        if (durationSection) {
          if (durationSection.getValue() <= 0) {
            logger(`[fix-webm-duration] Duration section is present, but the value is ${durationSection.getValue()}`);
            durationSection.setValue(duration2);
          } else {
            logger(`[fix-webm-duration] Duration section is present, and the value is ${durationSection.getValue()}`);
            return false;
          }
        } else {
          logger("[fix-webm-duration] Duration section is missing");
          durationSection = new WebmFloat("Duration", "Float");
          durationSection.setValue(duration2);
          infoSection.data.push({
            id: 1161,
            data: durationSection
          });
        }
        timeScaleSection.setValue(1e6);
        infoSection.updateByData();
        segmentSection.updateByData();
        this.updateByData();
        return true;
      };
      WebmFile.prototype.toBlob = function(mimeType) {
        return new Blob([this.source.buffer], { type: mimeType || "video/webm" });
      };
      function fixWebmDuration2(blob, duration2, callback, options2) {
        if (typeof callback === "object") {
          options2 = callback;
          callback = void 0;
        }
        if (!callback) {
          return new Promise(function(resolve) {
            fixWebmDuration2(blob, duration2, resolve, options2);
          });
        }
        try {
          var reader = new FileReader();
          reader.onloadend = function() {
            try {
              var file = new WebmFile(new Uint8Array(reader.result));
              if (file.fixDuration(duration2, options2)) {
                blob = file.toBlob(blob.type);
              }
            } catch (ex) {
            }
            callback(blob);
          };
          reader.readAsArrayBuffer(blob);
        } catch (ex) {
          callback(blob);
        }
      }
      fixWebmDuration2.default = fixWebmDuration2;
      return fixWebmDuration2;
    });
  }
});

// node_modules/lodash.mergewith/index.js
var require_lodash4 = __commonJS({
  "node_modules/lodash.mergewith/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root4 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n2, iteratee) {
      var index4 = -1, result = Array(n2);
      while (++index4 < n2) {
        result[index4] = iteratee(index4);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue2(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform3) {
      return function(arg) {
        return func(transform3(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root4["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty3 = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer = moduleExports ? root4.Buffer : void 0;
    var Symbol2 = root4.Symbol;
    var Uint8Array2 = root4.Uint8Array;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice2 = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root4, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty3.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty3.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index4 == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index4, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      return index4 < 0 ? void 0 : data[index4][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index4][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty3.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty3.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty3.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start3) {
      return setToString(overRest(func, start3, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string3) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string3),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index4 = -1, length = source.length;
      array || (array = Array(length));
      while (++index4 < length) {
        array[index4] = source[index4];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index4 = -1, length = props.length;
      while (++index4 < length) {
        var key = props[index4];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index4 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index4 < length) {
          var source = sources[index4];
          if (source) {
            assigner(object, source, index4, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index4 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index4];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map4, key) {
      var data = map4.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue2(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty3.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index4, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index4;
      if (type == "number" ? isArrayLike(object) && isIndex(index4, object.length) : type == "string" && index4 in object) {
        return eq(object[index4], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start3, transform3) {
      start3 = nativeMax(start3 === void 0 ? func.length - 1 : start3, 0);
      return function() {
        var args = arguments, index4 = -1, length = nativeMax(args.length - start3, 0), array = Array(length);
        while (++index4 < length) {
          array[index4] = args[start3 + index4];
        }
        index4 = -1;
        var otherArgs = Array(start3 + 1);
        while (++index4 < start3) {
          otherArgs[index4] = args[index4];
        }
        otherArgs[start3] = transform3(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty3.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject2(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty3.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var mergeWith2 = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = mergeWith2;
  }
});

// node_modules/attr-accept/dist/es/index.js
var require_es2 = __commonJS({
  "node_modules/attr-accept/dist/es/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = function(file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
        if (acceptedFilesArray.length === 0) {
          return true;
        }
        var fileName = file.name || "";
        var mimeType = (file.type || "").toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, "");
        return acceptedFilesArray.some(function(type) {
          var validType = type.trim().toLowerCase();
          if (validType.charAt(0) === ".") {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith("/*")) {
            return baseMimeType === validType.replace(/\/.*$/, "");
          }
          return mimeType === validType;
        });
      }
      return true;
    };
  }
});

// node_modules/lodash.defaultsdeep/index.js
var require_lodash5 = __commonJS({
  "node_modules/lodash.defaultsdeep/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root4 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n2, iteratee) {
      var index4 = -1, result = Array(n2);
      while (++index4 < n2) {
        result[index4] = iteratee(index4);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue2(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform3) {
      return function(arg) {
        return func(transform3(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root4["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty3 = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer = moduleExports ? root4.Buffer : void 0;
    var Symbol2 = root4.Symbol;
    var Uint8Array2 = root4.Uint8Array;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice2 = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root4, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty3.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty3.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index4 == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index4, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      return index4 < 0 ? void 0 : data[index4][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index4][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty3.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty3.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty3.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start3) {
      return setToString(overRest(func, start3, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string3) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string3),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index4 = -1, length = source.length;
      array || (array = Array(length));
      while (++index4 < length) {
        array[index4] = source[index4];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index4 = -1, length = props.length;
      while (++index4 < length) {
        var key = props[index4];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index4 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index4 < length) {
          var source = sources[index4];
          if (source) {
            assigner(object, source, index4, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index4 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index4];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject2(objValue) && isObject2(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, void 0, customDefaultsMerge, stack);
        stack["delete"](srcValue);
      }
      return objValue;
    }
    function getMapData(map4, key) {
      var data = map4.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue2(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty3.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index4, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index4;
      if (type == "number" ? isArrayLike(object) && isIndex(index4, object.length) : type == "string" && index4 in object) {
        return eq(object[index4], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start3, transform3) {
      start3 = nativeMax(start3 === void 0 ? func.length - 1 : start3, 0);
      return function() {
        var args = arguments, index4 = -1, length = nativeMax(args.length - start3, 0), array = Array(length);
        while (++index4 < length) {
          array[index4] = args[start3 + index4];
        }
        index4 = -1;
        var otherArgs = Array(start3 + 1);
        while (++index4 < start3) {
          otherArgs[index4] = args[index4];
        }
        otherArgs[start3] = transform3(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty3.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject2(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty3.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    var defaultsDeep2 = baseRest(function(args) {
      args.push(void 0, customDefaultsMerge);
      return apply(mergeWith2, void 0, args);
    });
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var mergeWith2 = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = defaultsDeep2;
  }
});

// node_modules/stream-chat-react/dist/components/Attachment/Attachment.js
var import_react320 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentContainer.js
var import_react319 = __toESM(require_react());
var import_react_player2 = __toESM(require_lib());

// node_modules/linkifyjs/dist/linkify.mjs
var encodedTlds = "aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4w0s2x0a2z0ure5ba0by2idu3namex4d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dad1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3nd0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0axi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp3ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2";
var encodedUtlds = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2";
var numeric = "numeric";
var ascii = "ascii";
var alpha = "alpha";
var asciinumeric = "asciinumeric";
var alphanumeric = "alphanumeric";
var domain = "domain";
var emoji = "emoji";
var scheme = "scheme";
var slashscheme = "slashscheme";
var whitespace = "whitespace";
function registerGroup(name2, groups) {
  if (!(name2 in groups)) {
    groups[name2] = [];
  }
  return groups[name2];
}
function addToGroups(t2, flags, groups) {
  if (flags[numeric]) {
    flags[asciinumeric] = true;
    flags[alphanumeric] = true;
  }
  if (flags[ascii]) {
    flags[asciinumeric] = true;
    flags[alpha] = true;
  }
  if (flags[asciinumeric]) {
    flags[alphanumeric] = true;
  }
  if (flags[alpha]) {
    flags[alphanumeric] = true;
  }
  if (flags[alphanumeric]) {
    flags[domain] = true;
  }
  if (flags[emoji]) {
    flags[domain] = true;
  }
  for (const k2 in flags) {
    const group = registerGroup(k2, groups);
    if (group.indexOf(t2) < 0) {
      group.push(t2);
    }
  }
}
function flagsForToken(t2, groups) {
  const result = {};
  for (const c2 in groups) {
    if (groups[c2].indexOf(t2) >= 0) {
      result[c2] = true;
    }
  }
  return result;
}
function State(token = null) {
  this.j = {};
  this.jr = [];
  this.jd = null;
  this.t = token;
}
State.groups = {};
State.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(input) {
    const state = this;
    const nextState = state.j[input];
    if (nextState) {
      return nextState;
    }
    for (let i2 = 0; i2 < state.jr.length; i2++) {
      const regex = state.jr[i2][0];
      const nextState2 = state.jr[i2][1];
      if (nextState2 && regex.test(input)) {
        return nextState2;
      }
    }
    return state.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(input, exactOnly = false) {
    return exactOnly ? input in this.j : !!this.go(input);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(inputs, next, flags, groups) {
    for (let i2 = 0; i2 < inputs.length; i2++) {
      this.tt(inputs[i2], next, flags, groups);
    }
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(regexp2, next, flags, groups) {
    groups = groups || State.groups;
    let nextState;
    if (next && next.j) {
      nextState = next;
    } else {
      nextState = new State(next);
      if (flags && groups) {
        addToGroups(next, flags, groups);
      }
    }
    this.jr.push([regexp2, nextState]);
    return nextState;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(input, next, flags, groups) {
    let state = this;
    const len = input.length;
    if (!len) {
      return state;
    }
    for (let i2 = 0; i2 < len - 1; i2++) {
      state = state.tt(input[i2]);
    }
    return state.tt(input[len - 1], next, flags, groups);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(input, next, flags, groups) {
    groups = groups || State.groups;
    const state = this;
    if (next && next.j) {
      state.j[input] = next;
      return next;
    }
    const t2 = next;
    let nextState, templateState = state.go(input);
    if (templateState) {
      nextState = new State();
      Object.assign(nextState.j, templateState.j);
      nextState.jr.push.apply(nextState.jr, templateState.jr);
      nextState.jd = templateState.jd;
      nextState.t = templateState.t;
    } else {
      nextState = new State();
    }
    if (t2) {
      if (groups) {
        if (nextState.t && typeof nextState.t === "string") {
          const allFlags = Object.assign(flagsForToken(nextState.t, groups), flags);
          addToGroups(t2, allFlags, groups);
        } else if (flags) {
          addToGroups(t2, flags, groups);
        }
      }
      nextState.t = t2;
    }
    state.j[input] = nextState;
    return nextState;
  }
};
var ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);
var tr = (state, regexp2, next, flags, groups) => state.tr(regexp2, next, flags, groups);
var ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);
var tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);
var WORD = "WORD";
var UWORD = "UWORD";
var ASCIINUMERICAL = "ASCIINUMERICAL";
var ALPHANUMERICAL = "ALPHANUMERICAL";
var LOCALHOST = "LOCALHOST";
var TLD = "TLD";
var UTLD = "UTLD";
var SCHEME = "SCHEME";
var SLASH_SCHEME = "SLASH_SCHEME";
var NUM = "NUM";
var WS = "WS";
var NL = "NL";
var OPENBRACE = "OPENBRACE";
var CLOSEBRACE = "CLOSEBRACE";
var OPENBRACKET = "OPENBRACKET";
var CLOSEBRACKET = "CLOSEBRACKET";
var OPENPAREN = "OPENPAREN";
var CLOSEPAREN = "CLOSEPAREN";
var OPENANGLEBRACKET = "OPENANGLEBRACKET";
var CLOSEANGLEBRACKET = "CLOSEANGLEBRACKET";
var FULLWIDTHLEFTPAREN = "FULLWIDTHLEFTPAREN";
var FULLWIDTHRIGHTPAREN = "FULLWIDTHRIGHTPAREN";
var LEFTCORNERBRACKET = "LEFTCORNERBRACKET";
var RIGHTCORNERBRACKET = "RIGHTCORNERBRACKET";
var LEFTWHITECORNERBRACKET = "LEFTWHITECORNERBRACKET";
var RIGHTWHITECORNERBRACKET = "RIGHTWHITECORNERBRACKET";
var FULLWIDTHLESSTHAN = "FULLWIDTHLESSTHAN";
var FULLWIDTHGREATERTHAN = "FULLWIDTHGREATERTHAN";
var AMPERSAND = "AMPERSAND";
var APOSTROPHE = "APOSTROPHE";
var ASTERISK = "ASTERISK";
var AT = "AT";
var BACKSLASH = "BACKSLASH";
var BACKTICK = "BACKTICK";
var CARET = "CARET";
var COLON = "COLON";
var COMMA = "COMMA";
var DOLLAR = "DOLLAR";
var DOT = "DOT";
var EQUALS = "EQUALS";
var EXCLAMATION = "EXCLAMATION";
var HYPHEN = "HYPHEN";
var PERCENT = "PERCENT";
var PIPE = "PIPE";
var PLUS = "PLUS";
var POUND = "POUND";
var QUERY = "QUERY";
var QUOTE = "QUOTE";
var FULLWIDTHMIDDLEDOT = "FULLWIDTHMIDDLEDOT";
var SEMI = "SEMI";
var SLASH = "SLASH";
var TILDE = "TILDE";
var UNDERSCORE = "UNDERSCORE";
var EMOJI$1 = "EMOJI";
var SYM = "SYM";
var tk = Object.freeze({
  __proto__: null,
  ALPHANUMERICAL,
  AMPERSAND,
  APOSTROPHE,
  ASCIINUMERICAL,
  ASTERISK,
  AT,
  BACKSLASH,
  BACKTICK,
  CARET,
  CLOSEANGLEBRACKET,
  CLOSEBRACE,
  CLOSEBRACKET,
  CLOSEPAREN,
  COLON,
  COMMA,
  DOLLAR,
  DOT,
  EMOJI: EMOJI$1,
  EQUALS,
  EXCLAMATION,
  FULLWIDTHGREATERTHAN,
  FULLWIDTHLEFTPAREN,
  FULLWIDTHLESSTHAN,
  FULLWIDTHMIDDLEDOT,
  FULLWIDTHRIGHTPAREN,
  HYPHEN,
  LEFTCORNERBRACKET,
  LEFTWHITECORNERBRACKET,
  LOCALHOST,
  NL,
  NUM,
  OPENANGLEBRACKET,
  OPENBRACE,
  OPENBRACKET,
  OPENPAREN,
  PERCENT,
  PIPE,
  PLUS,
  POUND,
  QUERY,
  QUOTE,
  RIGHTCORNERBRACKET,
  RIGHTWHITECORNERBRACKET,
  SCHEME,
  SEMI,
  SLASH,
  SLASH_SCHEME,
  SYM,
  TILDE,
  TLD,
  UNDERSCORE,
  UTLD,
  UWORD,
  WORD,
  WS
});
var ASCII_LETTER = /[a-z]/;
var LETTER = new RegExp("\\p{L}", "u");
var EMOJI = new RegExp("\\p{Emoji}", "u");
var EMOJI_VARIATION$1 = /\ufe0f/;
var DIGIT = /\d/;
var SPACE = /\s/;
var regexp = Object.freeze({
  __proto__: null,
  ASCII_LETTER,
  DIGIT,
  EMOJI,
  EMOJI_VARIATION: EMOJI_VARIATION$1,
  LETTER,
  SPACE
});
var CR = "\r";
var LF = "\n";
var EMOJI_VARIATION = "️";
var EMOJI_JOINER = "‍";
var OBJECT_REPLACEMENT = "￼";
var tlds = null;
var utlds = null;
function init$2(customSchemes = []) {
  const groups = {};
  State.groups = groups;
  const Start = new State();
  if (tlds == null) {
    tlds = decodeTlds(encodedTlds);
  }
  if (utlds == null) {
    utlds = decodeTlds(encodedUtlds);
  }
  tt(Start, "'", APOSTROPHE);
  tt(Start, "{", OPENBRACE);
  tt(Start, "}", CLOSEBRACE);
  tt(Start, "[", OPENBRACKET);
  tt(Start, "]", CLOSEBRACKET);
  tt(Start, "(", OPENPAREN);
  tt(Start, ")", CLOSEPAREN);
  tt(Start, "<", OPENANGLEBRACKET);
  tt(Start, ">", CLOSEANGLEBRACKET);
  tt(Start, "（", FULLWIDTHLEFTPAREN);
  tt(Start, "）", FULLWIDTHRIGHTPAREN);
  tt(Start, "「", LEFTCORNERBRACKET);
  tt(Start, "」", RIGHTCORNERBRACKET);
  tt(Start, "『", LEFTWHITECORNERBRACKET);
  tt(Start, "』", RIGHTWHITECORNERBRACKET);
  tt(Start, "＜", FULLWIDTHLESSTHAN);
  tt(Start, "＞", FULLWIDTHGREATERTHAN);
  tt(Start, "&", AMPERSAND);
  tt(Start, "*", ASTERISK);
  tt(Start, "@", AT);
  tt(Start, "`", BACKTICK);
  tt(Start, "^", CARET);
  tt(Start, ":", COLON);
  tt(Start, ",", COMMA);
  tt(Start, "$", DOLLAR);
  tt(Start, ".", DOT);
  tt(Start, "=", EQUALS);
  tt(Start, "!", EXCLAMATION);
  tt(Start, "-", HYPHEN);
  tt(Start, "%", PERCENT);
  tt(Start, "|", PIPE);
  tt(Start, "+", PLUS);
  tt(Start, "#", POUND);
  tt(Start, "?", QUERY);
  tt(Start, '"', QUOTE);
  tt(Start, "/", SLASH);
  tt(Start, ";", SEMI);
  tt(Start, "~", TILDE);
  tt(Start, "_", UNDERSCORE);
  tt(Start, "\\", BACKSLASH);
  tt(Start, "・", FULLWIDTHMIDDLEDOT);
  const Num = tr(Start, DIGIT, NUM, {
    [numeric]: true
  });
  tr(Num, DIGIT, Num);
  const Asciinumeric = tr(Num, ASCII_LETTER, ASCIINUMERICAL, {
    [asciinumeric]: true
  });
  const Alphanumeric = tr(Num, LETTER, ALPHANUMERICAL, {
    [alphanumeric]: true
  });
  const Word = tr(Start, ASCII_LETTER, WORD, {
    [ascii]: true
  });
  tr(Word, DIGIT, Asciinumeric);
  tr(Word, ASCII_LETTER, Word);
  tr(Asciinumeric, DIGIT, Asciinumeric);
  tr(Asciinumeric, ASCII_LETTER, Asciinumeric);
  const UWord = tr(Start, LETTER, UWORD, {
    [alpha]: true
  });
  tr(UWord, ASCII_LETTER);
  tr(UWord, DIGIT, Alphanumeric);
  tr(UWord, LETTER, UWord);
  tr(Alphanumeric, DIGIT, Alphanumeric);
  tr(Alphanumeric, ASCII_LETTER);
  tr(Alphanumeric, LETTER, Alphanumeric);
  const Nl2 = tt(Start, LF, NL, {
    [whitespace]: true
  });
  const Cr = tt(Start, CR, WS, {
    [whitespace]: true
  });
  const Ws = tr(Start, SPACE, WS, {
    [whitespace]: true
  });
  tt(Start, OBJECT_REPLACEMENT, Ws);
  tt(Cr, LF, Nl2);
  tt(Cr, OBJECT_REPLACEMENT, Ws);
  tr(Cr, SPACE, Ws);
  tt(Ws, CR);
  tt(Ws, LF);
  tr(Ws, SPACE, Ws);
  tt(Ws, OBJECT_REPLACEMENT, Ws);
  const Emoji2 = tr(Start, EMOJI, EMOJI$1, {
    [emoji]: true
  });
  tt(Emoji2, "#");
  tr(Emoji2, EMOJI, Emoji2);
  tt(Emoji2, EMOJI_VARIATION, Emoji2);
  const EmojiJoiner = tt(Emoji2, EMOJI_JOINER);
  tt(EmojiJoiner, "#");
  tr(EmojiJoiner, EMOJI, Emoji2);
  const wordjr = [[ASCII_LETTER, Word], [DIGIT, Asciinumeric]];
  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord], [DIGIT, Alphanumeric]];
  for (let i2 = 0; i2 < tlds.length; i2++) {
    fastts(Start, tlds[i2], TLD, WORD, wordjr);
  }
  for (let i2 = 0; i2 < utlds.length; i2++) {
    fastts(Start, utlds[i2], UTLD, UWORD, uwordjr);
  }
  addToGroups(TLD, {
    tld: true,
    ascii: true
  }, groups);
  addToGroups(UTLD, {
    utld: true,
    alpha: true
  }, groups);
  fastts(Start, "file", SCHEME, WORD, wordjr);
  fastts(Start, "mailto", SCHEME, WORD, wordjr);
  fastts(Start, "http", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "https", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftp", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftps", SLASH_SCHEME, WORD, wordjr);
  addToGroups(SCHEME, {
    scheme: true,
    ascii: true
  }, groups);
  addToGroups(SLASH_SCHEME, {
    slashscheme: true,
    ascii: true
  }, groups);
  customSchemes = customSchemes.sort((a2, b2) => a2[0] > b2[0] ? 1 : -1);
  for (let i2 = 0; i2 < customSchemes.length; i2++) {
    const sch = customSchemes[i2][0];
    const optionalSlashSlash = customSchemes[i2][1];
    const flags = optionalSlashSlash ? {
      [scheme]: true
    } : {
      [slashscheme]: true
    };
    if (sch.indexOf("-") >= 0) {
      flags[domain] = true;
    } else if (!ASCII_LETTER.test(sch)) {
      flags[numeric] = true;
    } else if (DIGIT.test(sch)) {
      flags[asciinumeric] = true;
    } else {
      flags[ascii] = true;
    }
    ts(Start, sch, sch, flags);
  }
  ts(Start, "localhost", LOCALHOST, {
    ascii: true
  });
  Start.jd = new State(SYM);
  return {
    start: Start,
    tokens: Object.assign({
      groups
    }, tk)
  };
}
function run$1(start3, str) {
  const iterable = stringToArray(str.replace(/[A-Z]/g, (c2) => c2.toLowerCase()));
  const charCount = iterable.length;
  const tokens = [];
  let cursor = 0;
  let charCursor = 0;
  while (charCursor < charCount) {
    let state = start3;
    let nextState = null;
    let tokenLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    let charsSinceAccepts = -1;
    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        charsSinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts += iterable[charCursor].length;
        charsSinceAccepts++;
      }
      tokenLength += iterable[charCursor].length;
      cursor += iterable[charCursor].length;
      charCursor++;
    }
    cursor -= sinceAccepts;
    charCursor -= charsSinceAccepts;
    tokenLength -= sinceAccepts;
    tokens.push({
      t: latestAccepting.t,
      // token type/name
      v: str.slice(cursor - tokenLength, cursor),
      // string value
      s: cursor - tokenLength,
      // start index
      e: cursor
      // end index (excluding)
    });
  }
  return tokens;
}
function stringToArray(str) {
  const result = [];
  const len = str.length;
  let index4 = 0;
  while (index4 < len) {
    let first = str.charCodeAt(index4);
    let second;
    let char = first < 55296 || first > 56319 || index4 + 1 === len || (second = str.charCodeAt(index4 + 1)) < 56320 || second > 57343 ? str[index4] : str.slice(index4, index4 + 2);
    result.push(char);
    index4 += char.length;
  }
  return result;
}
function fastts(state, input, t2, defaultt, jr) {
  let next;
  const len = input.length;
  for (let i2 = 0; i2 < len - 1; i2++) {
    const char = input[i2];
    if (state.j[char]) {
      next = state.j[char];
    } else {
      next = new State(defaultt);
      next.jr = jr.slice();
      state.j[char] = next;
    }
    state = next;
  }
  next = new State(t2);
  next.jr = jr.slice();
  state.j[input[len - 1]] = next;
  return next;
}
function decodeTlds(encoded) {
  const words = [];
  const stack = [];
  let i2 = 0;
  let digits = "0123456789";
  while (i2 < encoded.length) {
    let popDigitCount = 0;
    while (digits.indexOf(encoded[i2 + popDigitCount]) >= 0) {
      popDigitCount++;
    }
    if (popDigitCount > 0) {
      words.push(stack.join(""));
      for (let popCount = parseInt(encoded.substring(i2, i2 + popDigitCount), 10); popCount > 0; popCount--) {
        stack.pop();
      }
      i2 += popDigitCount;
    } else {
      stack.push(encoded[i2]);
      i2++;
    }
  }
  return words;
}
var defaults = {
  defaultProtocol: "http",
  events: null,
  format: noop,
  formatHref: noop,
  nl2br: false,
  tagName: "a",
  target: null,
  rel: null,
  validate: true,
  truncate: Infinity,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Options(opts, defaultRender = null) {
  let o2 = Object.assign({}, defaults);
  if (opts) {
    o2 = Object.assign(o2, opts instanceof Options ? opts.o : opts);
  }
  const ignoredTags = o2.ignoreTags;
  const uppercaseIgnoredTags = [];
  for (let i2 = 0; i2 < ignoredTags.length; i2++) {
    uppercaseIgnoredTags.push(ignoredTags[i2].toUpperCase());
  }
  this.o = o2;
  if (defaultRender) {
    this.defaultRender = defaultRender;
  }
  this.ignoreTags = uppercaseIgnoredTags;
}
Options.prototype = {
  o: defaults,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(ir) {
    return ir;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(token) {
    return this.get("validate", token.toString(), token);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(key, operator, token) {
    const isCallable = operator != null;
    let option = this.o[key];
    if (!option) {
      return option;
    }
    if (typeof option === "object") {
      option = token.t in option ? option[token.t] : defaults[key];
      if (typeof option === "function" && isCallable) {
        option = option(operator, token);
      }
    } else if (typeof option === "function" && isCallable) {
      option = option(operator, token.t, token);
    }
    return option;
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(key, operator, token) {
    let obj = this.o[key];
    if (typeof obj === "function" && operator != null) {
      obj = obj(operator, token.t, token);
    }
    return obj;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(token) {
    const ir = token.render(this);
    const renderFn = this.get("render", null, token) || this.defaultRender;
    return renderFn(ir, token.t, token);
  }
};
function noop(val) {
  return val;
}
var options = Object.freeze({
  __proto__: null,
  Options,
  defaults
});
function MultiToken(value, tokens) {
  this.t = "token";
  this.v = value;
  this.tk = tokens;
}
MultiToken.prototype = {
  isLink: false,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
   */
  toHref(scheme2) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(options2) {
    const val = this.toString();
    const truncate = options2.get("truncate", val, this);
    const formatted = options2.get("format", val, this);
    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + "…" : formatted;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(options2) {
    return options2.get("formatHref", this.toHref(options2.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(protocol = defaults.defaultProtocol) {
    return {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(protocol),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(options2) {
    return {
      type: this.t,
      value: this.toFormattedString(options2),
      isLink: this.isLink,
      href: this.toFormattedHref(options2),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(options2) {
    return options2.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(options2) {
    const token = this;
    const href = this.toHref(options2.get("defaultProtocol"));
    const formattedHref = options2.get("formatHref", href, this);
    const tagName = options2.get("tagName", href, token);
    const content3 = this.toFormattedString(options2);
    const attributes = {};
    const className = options2.get("className", href, token);
    const target = options2.get("target", href, token);
    const rel = options2.get("rel", href, token);
    const attrs = options2.getObj("attributes", href, token);
    const eventListeners = options2.getObj("events", href, token);
    attributes.href = formattedHref;
    if (className) {
      attributes.class = className;
    }
    if (target) {
      attributes.target = target;
    }
    if (rel) {
      attributes.rel = rel;
    }
    if (attrs) {
      Object.assign(attributes, attrs);
    }
    return {
      tagName,
      attributes,
      content: content3,
      eventListeners
    };
  }
};
function createTokenClass(type, props) {
  class Token extends MultiToken {
    constructor(value, tokens) {
      super(value, tokens);
      this.t = type;
    }
  }
  for (const p2 in props) {
    Token.prototype[p2] = props[p2];
  }
  Token.t = type;
  return Token;
}
var Email = createTokenClass("email", {
  isLink: true,
  toHref() {
    return "mailto:" + this.toString();
  }
});
var Text = createTokenClass("text");
var Nl = createTokenClass("nl");
var Url = createTokenClass("url", {
  isLink: true,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(scheme2 = defaults.defaultProtocol) {
    return this.hasProtocol() ? this.v : `${scheme2}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const tokens = this.tk;
    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;
  }
});
var multi = Object.freeze({
  __proto__: null,
  Base: MultiToken,
  Email,
  MultiToken,
  Nl,
  Text,
  Url,
  createTokenClass
});
var makeState = (arg) => new State(arg);
function init$1({
  groups
}) {
  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);
  const qsNonAccepting = [APOSTROPHE, COLON, COMMA, DOT, EXCLAMATION, PERCENT, QUERY, QUOTE, SEMI, OPENANGLEBRACKET, CLOSEANGLEBRACKET, OPENBRACE, CLOSEBRACE, CLOSEBRACKET, OPENBRACKET, OPENPAREN, CLOSEPAREN, FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN, LEFTCORNERBRACKET, RIGHTCORNERBRACKET, LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET, FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN];
  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, OPENBRACE, CLOSEBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];
  const Start = makeState();
  const Localpart = tt(Start, TILDE);
  ta(Localpart, localpartAccepting, Localpart);
  ta(Localpart, groups.domain, Localpart);
  const Domain = makeState(), Scheme = makeState(), SlashScheme = makeState();
  ta(Start, groups.domain, Domain);
  ta(Start, groups.scheme, Scheme);
  ta(Start, groups.slashscheme, SlashScheme);
  ta(Domain, localpartAccepting, Localpart);
  ta(Domain, groups.domain, Domain);
  const LocalpartAt = tt(Domain, AT);
  tt(Localpart, AT, LocalpartAt);
  tt(Scheme, AT, LocalpartAt);
  tt(SlashScheme, AT, LocalpartAt);
  const LocalpartDot = tt(Localpart, DOT);
  ta(LocalpartDot, localpartAccepting, Localpart);
  ta(LocalpartDot, groups.domain, Localpart);
  const EmailDomain = makeState();
  ta(LocalpartAt, groups.domain, EmailDomain);
  ta(EmailDomain, groups.domain, EmailDomain);
  const EmailDomainDot = tt(EmailDomain, DOT);
  ta(EmailDomainDot, groups.domain, EmailDomain);
  const Email$1 = makeState(Email);
  ta(EmailDomainDot, groups.tld, Email$1);
  ta(EmailDomainDot, groups.utld, Email$1);
  tt(LocalpartAt, LOCALHOST, Email$1);
  const EmailDomainHyphen = tt(EmailDomain, HYPHEN);
  tt(EmailDomainHyphen, HYPHEN, EmailDomainHyphen);
  ta(EmailDomainHyphen, groups.domain, EmailDomain);
  ta(Email$1, groups.domain, EmailDomain);
  tt(Email$1, DOT, EmailDomainDot);
  tt(Email$1, HYPHEN, EmailDomainHyphen);
  const EmailColon = tt(Email$1, COLON);
  ta(EmailColon, groups.numeric, Email);
  const DomainHyphen = tt(Domain, HYPHEN);
  const DomainDot = tt(Domain, DOT);
  tt(DomainHyphen, HYPHEN, DomainHyphen);
  ta(DomainHyphen, groups.domain, Domain);
  ta(DomainDot, localpartAccepting, Localpart);
  ta(DomainDot, groups.domain, Domain);
  const DomainDotTld = makeState(Url);
  ta(DomainDot, groups.tld, DomainDotTld);
  ta(DomainDot, groups.utld, DomainDotTld);
  ta(DomainDotTld, groups.domain, Domain);
  ta(DomainDotTld, localpartAccepting, Localpart);
  tt(DomainDotTld, DOT, DomainDot);
  tt(DomainDotTld, HYPHEN, DomainHyphen);
  tt(DomainDotTld, AT, LocalpartAt);
  const DomainDotTldColon = tt(DomainDotTld, COLON);
  const DomainDotTldColonPort = makeState(Url);
  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);
  const Url$1 = makeState(Url);
  const UrlNonaccept = makeState();
  ta(Url$1, qsAccepting, Url$1);
  ta(Url$1, qsNonAccepting, UrlNonaccept);
  ta(UrlNonaccept, qsAccepting, Url$1);
  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);
  tt(DomainDotTld, SLASH, Url$1);
  tt(DomainDotTldColonPort, SLASH, Url$1);
  const SchemeColon = tt(Scheme, COLON);
  const SlashSchemeColon = tt(SlashScheme, COLON);
  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH);
  const UriPrefix = tt(SlashSchemeColonSlash, SLASH);
  ta(Scheme, groups.domain, Domain);
  tt(Scheme, DOT, DomainDot);
  tt(Scheme, HYPHEN, DomainHyphen);
  ta(SlashScheme, groups.domain, Domain);
  tt(SlashScheme, DOT, DomainDot);
  tt(SlashScheme, HYPHEN, DomainHyphen);
  ta(SchemeColon, groups.domain, Url$1);
  tt(SchemeColon, SLASH, Url$1);
  tt(SchemeColon, QUERY, Url$1);
  ta(UriPrefix, groups.domain, Url$1);
  ta(UriPrefix, qsAccepting, Url$1);
  tt(UriPrefix, SLASH, Url$1);
  const bracketPairs = [
    [OPENBRACE, CLOSEBRACE],
    // {}
    [OPENBRACKET, CLOSEBRACKET],
    // []
    [OPENPAREN, CLOSEPAREN],
    // ()
    [OPENANGLEBRACKET, CLOSEANGLEBRACKET],
    // <>
    [FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN],
    // （）
    [LEFTCORNERBRACKET, RIGHTCORNERBRACKET],
    // 「」
    [LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET],
    // 『』
    [FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN]
    // ＜＞
  ];
  for (let i2 = 0; i2 < bracketPairs.length; i2++) {
    const [OPEN, CLOSE] = bracketPairs[i2];
    const UrlOpen = tt(Url$1, OPEN);
    tt(UrlNonaccept, OPEN, UrlOpen);
    tt(UrlOpen, CLOSE, Url$1);
    const UrlOpenQ = makeState(Url);
    ta(UrlOpen, qsAccepting, UrlOpenQ);
    const UrlOpenSyms = makeState();
    ta(UrlOpen, qsNonAccepting);
    ta(UrlOpenQ, qsAccepting, UrlOpenQ);
    ta(UrlOpenQ, qsNonAccepting, UrlOpenSyms);
    ta(UrlOpenSyms, qsAccepting, UrlOpenQ);
    ta(UrlOpenSyms, qsNonAccepting, UrlOpenSyms);
    tt(UrlOpenQ, CLOSE, Url$1);
    tt(UrlOpenSyms, CLOSE, Url$1);
  }
  tt(Start, LOCALHOST, DomainDotTld);
  tt(Start, NL, Nl);
  return {
    start: Start,
    tokens: tk
  };
}
function run(start3, input, tokens) {
  let len = tokens.length;
  let cursor = 0;
  let multis = [];
  let textTokens = [];
  while (cursor < len) {
    let state = start3;
    let secondState = null;
    let nextState = null;
    let multiLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {
      textTokens.push(tokens[cursor++]);
    }
    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {
      secondState = null;
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts++;
      }
      cursor++;
      multiLength++;
    }
    if (sinceAccepts < 0) {
      cursor -= multiLength;
      if (cursor < len) {
        textTokens.push(tokens[cursor]);
        cursor++;
      }
    } else {
      if (textTokens.length > 0) {
        multis.push(initMultiToken(Text, input, textTokens));
        textTokens = [];
      }
      cursor -= sinceAccepts;
      multiLength -= sinceAccepts;
      const Multi = latestAccepting.t;
      const subtokens = tokens.slice(cursor - multiLength, cursor);
      multis.push(initMultiToken(Multi, input, subtokens));
    }
  }
  if (textTokens.length > 0) {
    multis.push(initMultiToken(Text, input, textTokens));
  }
  return multis;
}
function initMultiToken(Multi, input, tokens) {
  const startIdx = tokens[0].s;
  const endIdx = tokens[tokens.length - 1].e;
  const value = input.slice(startIdx, endIdx);
  return new Multi(value, tokens);
}
var INIT = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: false
};
function init() {
  INIT.scanner = init$2(INIT.customSchemes);
  for (let i2 = 0; i2 < INIT.tokenQueue.length; i2++) {
    INIT.tokenQueue[i2][1]({
      scanner: INIT.scanner
    });
  }
  INIT.parser = init$1(INIT.scanner.tokens);
  for (let i2 = 0; i2 < INIT.pluginQueue.length; i2++) {
    INIT.pluginQueue[i2][1]({
      scanner: INIT.scanner,
      parser: INIT.parser
    });
  }
  INIT.initialized = true;
  return INIT;
}
function tokenize(str) {
  if (!INIT.initialized) {
    init();
  }
  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));
}
tokenize.scan = run$1;
function find(str, type = null, opts = null) {
  if (type && typeof type === "object") {
    if (opts) {
      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);
    }
    opts = type;
    type = null;
  }
  const options2 = new Options(opts);
  const tokens = tokenize(str);
  const filtered = [];
  for (let i2 = 0; i2 < tokens.length; i2++) {
    const token = tokens[i2];
    if (token.isLink && (!type || token.t === type) && options2.check(token)) {
      filtered.push(token.toFormattedObject(options2));
    }
  }
  return filtered;
}
function test(str, type = null) {
  const tokens = tokenize(str);
  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);
}

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentActions.js
var import_react19 = __toESM(require_react());

// node_modules/stream-chat-react/dist/context/ChannelActionContext.js
var import_react = __toESM(require_react());
var ChannelActionContext = import_react.default.createContext(void 0);
var ChannelActionProvider = ({ children, value }) => import_react.default.createElement(ChannelActionContext.Provider, { value }, children);
var useChannelActionContext = (componentName) => {
  const contextValue = (0, import_react.useContext)(ChannelActionContext);
  if (!contextValue) {
    console.warn(`The useChannelActionContext hook was called outside of the ChannelActionContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withChannelActionContext = (Component2) => {
  const WithChannelActionContextComponent = (props) => {
    const channelActionContext = useChannelActionContext();
    return import_react.default.createElement(Component2, { ...props, ...channelActionContext });
  };
  WithChannelActionContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithChannelActionContextComponent;
};

// node_modules/stream-chat-react/dist/context/ChannelListContext.js
var import_react2 = __toESM(require_react());
var ChannelListContext = (0, import_react2.createContext)(void 0);
var ChannelListContextProvider = ({ children, value }) => import_react2.default.createElement(ChannelListContext.Provider, { value }, children);
var useChannelListContext = (componentName) => {
  const contextValue = (0, import_react2.useContext)(ChannelListContext);
  if (!contextValue) {
    console.warn(`The useChannelListContext hook was called outside of the ChannelListContext provider. Make sure this hook is called within the ChannelList component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/ChannelStateContext.js
var import_react3 = __toESM(require_react());
var ChannelStateContext = import_react3.default.createContext(void 0);
var ChannelStateProvider = ({ children, value }) => import_react3.default.createElement(ChannelStateContext.Provider, { value }, children);
var useChannelStateContext = (componentName) => {
  const contextValue = (0, import_react3.useContext)(ChannelStateContext);
  if (!contextValue) {
    console.warn(`The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withChannelStateContext = (Component2) => {
  const WithChannelStateContextComponent = (props) => {
    const channelStateContext = useChannelStateContext();
    return import_react3.default.createElement(Component2, { ...props, ...channelStateContext });
  };
  WithChannelStateContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithChannelStateContextComponent;
};

// node_modules/stream-chat-react/dist/context/ChatContext.js
var import_react4 = __toESM(require_react());

// node_modules/stream-chat-react/dist/context/utils/getDisplayName.js
var getDisplayName = (Component2) => Component2.displayName || Component2.name || "Component";

// node_modules/stream-chat-react/dist/context/ChatContext.js
var ChatContext = import_react4.default.createContext(void 0);
var ChatProvider = ({ children, value }) => import_react4.default.createElement(ChatContext.Provider, { value }, children);
var useChatContext = (componentName) => {
  const contextValue = (0, import_react4.useContext)(ChatContext);
  if (!contextValue) {
    console.warn(`The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withChatContext = (Component2) => {
  const WithChatContextComponent = (props) => {
    const chatContext = useChatContext();
    return import_react4.default.createElement(Component2, { ...props, ...chatContext });
  };
  WithChatContextComponent.displayName = `WithChatContext${getDisplayName(Component2)}`;
  return WithChatContextComponent;
};

// node_modules/stream-chat-react/dist/context/ComponentContext.js
var import_react5 = __toESM(require_react());
var ComponentContext = import_react5.default.createContext({});
var ComponentProvider = ({ children, value }) => import_react5.default.createElement(ComponentContext.Provider, { value }, children);
var useComponentContext = (_componentName) => (0, import_react5.useContext)(ComponentContext);
var withComponentContext = (Component2) => {
  const WithComponentContextComponent = (props) => {
    const componentContext = useComponentContext();
    return import_react5.default.createElement(Component2, { ...props, ...componentContext });
  };
  WithComponentContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithComponentContextComponent;
};

// node_modules/stream-chat-react/dist/context/DialogManagerContext.js
var import_react10 = __toESM(require_react());

// node_modules/nanoid/index.browser.js
var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id3, byte) => {
  byte &= 63;
  if (byte < 36) {
    id3 += byte.toString(36);
  } else if (byte < 62) {
    id3 += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id3 += "-";
  } else {
    id3 += "_";
  }
  return id3;
}, "");

// node_modules/stream-chat-react/dist/components/Dialog/DialogManager.js
var DialogManager = class {
  constructor({ id: id3 } = {}) {
    this.state = new StateStore({
      dialogsById: {}
    });
    this.id = id3 ?? nanoid();
  }
  get openDialogCount() {
    return Object.values(this.state.getLatestValue().dialogsById).reduce((count, dialog) => {
      if (dialog.isOpen)
        return count + 1;
      return count;
    }, 0);
  }
  get(id3) {
    return this.state.getLatestValue().dialogsById[id3];
  }
  getOrCreate({ id: id3 }) {
    let dialog = this.state.getLatestValue().dialogsById[id3];
    if (!dialog) {
      dialog = {
        close: () => {
          this.close(id3);
        },
        id: id3,
        isOpen: false,
        open: () => {
          this.open({ id: id3 });
        },
        removalTimeout: void 0,
        remove: () => {
          this.remove(id3);
        },
        toggle: (closeAll = false) => {
          this.toggle({ id: id3 }, closeAll);
        }
      };
      this.state.next((current) => ({
        ...current,
        ...{ dialogsById: { ...current.dialogsById, [id3]: dialog } }
      }));
    }
    if (dialog.removalTimeout) {
      clearTimeout(dialog.removalTimeout);
      this.state.next((current) => ({
        ...current,
        ...{
          dialogsById: {
            ...current.dialogsById,
            [id3]: {
              ...dialog,
              removalTimeout: void 0
            }
          }
        }
      }));
    }
    return dialog;
  }
  open(params, closeRest) {
    const dialog = this.getOrCreate(params);
    if (dialog.isOpen)
      return;
    if (closeRest) {
      this.closeAll();
    }
    this.state.next((current) => ({
      ...current,
      dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: true } }
    }));
  }
  close(id3) {
    const dialog = this.state.getLatestValue().dialogsById[id3];
    if (!(dialog == null ? void 0 : dialog.isOpen))
      return;
    this.state.next((current) => ({
      ...current,
      dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: false } }
    }));
  }
  closeAll() {
    Object.values(this.state.getLatestValue().dialogsById).forEach((dialog) => dialog.close());
  }
  toggle(params, closeAll = false) {
    var _a;
    if ((_a = this.state.getLatestValue().dialogsById[params.id]) == null ? void 0 : _a.isOpen) {
      this.close(params.id);
    } else {
      this.open(params, closeAll);
    }
  }
  remove(id3) {
    const state = this.state.getLatestValue();
    const dialog = state.dialogsById[id3];
    if (!dialog)
      return;
    if (dialog.removalTimeout) {
      clearTimeout(dialog.removalTimeout);
    }
    this.state.next((current) => {
      const newDialogs = { ...current.dialogsById };
      delete newDialogs[id3];
      return {
        ...current,
        dialogsById: newDialogs
      };
    });
  }
  /**
   * Marks the dialog state as unused. If the dialog id is referenced again quickly,
   * the state will not be removed. Otherwise, the state will be removed after
   * a short timeout.
   */
  markForRemoval(id3) {
    const dialog = this.state.getLatestValue().dialogsById[id3];
    if (!dialog) {
      return;
    }
    this.state.next((current) => ({
      ...current,
      dialogsById: {
        ...current.dialogsById,
        [id3]: {
          ...dialog,
          removalTimeout: setTimeout(() => {
            this.remove(id3);
          }, 16)
        }
      }
    }));
  }
};

// node_modules/stream-chat-react/dist/components/Dialog/DialogPortal.js
var import_react9 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Dialog/hooks/useDialog.js
var import_react7 = __toESM(require_react());

// node_modules/stream-chat-react/dist/store/hooks/useStateStore.js
var import_react6 = __toESM(require_react());
var import_shim = __toESM(require_shim());
var noop2 = () => {
};
function useStateStore(store, selector8) {
  const wrappedSubscription = (0, import_react6.useCallback)((onStoreChange) => {
    const unsubscribe = store == null ? void 0 : store.subscribeWithSelector(selector8, onStoreChange);
    return unsubscribe ?? noop2;
  }, [store, selector8]);
  const wrappedSnapshot = (0, import_react6.useMemo)(() => {
    let cachedTuple;
    return () => {
      const currentValue = store == null ? void 0 : store.getLatestValue();
      if (!currentValue)
        return void 0;
      if (cachedTuple && cachedTuple[0] === currentValue) {
        return cachedTuple[1];
      }
      const newlySelected = selector8(currentValue);
      if (cachedTuple) {
        let selectededAreEqualToCached = true;
        for (const key in cachedTuple[1]) {
          if (cachedTuple[1][key] === newlySelected[key])
            continue;
          selectededAreEqualToCached = false;
          break;
        }
        if (selectededAreEqualToCached)
          return cachedTuple[1];
      }
      cachedTuple = [currentValue, newlySelected];
      return cachedTuple[1];
    };
  }, [store, selector8]);
  const state = (0, import_shim.useSyncExternalStore)(wrappedSubscription, wrappedSnapshot);
  return state;
}

// node_modules/stream-chat-react/dist/components/Dialog/hooks/useDialog.js
var useDialog = ({ dialogManagerId, id: id3 }) => {
  const { dialogManager } = useDialogManager({ dialogManagerId });
  (0, import_react7.useEffect)(() => () => {
    dialogManager.markForRemoval(id3);
  }, [dialogManager, id3]);
  return dialogManager.getOrCreate({ id: id3 });
};
var modalDialogId = "modal-dialog";
var useModalDialog = () => useDialog({ dialogManagerId: modalDialogManagerId, id: modalDialogId });
var useDialogIsOpen = (id3, dialogManagerId) => {
  const { dialogManager } = useDialogManager({ dialogManagerId });
  const dialogIsOpenSelector = (0, import_react7.useCallback)(({ dialogsById }) => {
    var _a;
    return { isOpen: !!((_a = dialogsById[id3]) == null ? void 0 : _a.isOpen) };
  }, [id3]);
  return useStateStore(dialogManager.state, dialogIsOpenSelector).isOpen;
};
var useModalDialogIsOpen = () => useDialogIsOpen(modalDialogId, modalDialogManagerId);
var openedDialogCountSelector = (nextValue) => ({
  openedDialogCount: Object.values(nextValue.dialogsById).reduce((count, dialog) => {
    if (dialog.isOpen)
      return count + 1;
    return count;
  }, 0)
});
var useOpenedDialogCount = ({ dialogManagerId } = {}) => {
  const { dialogManager } = useDialogManager({ dialogManagerId });
  return useStateStore(dialogManager.state, openedDialogCountSelector).openedDialogCount;
};

// node_modules/stream-chat-react/dist/components/Portal/Portal.js
var import_react8 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var Portal = ({ children, getPortalDestination, isOpen }) => {
  const [portalDestination, setPortalDestination] = (0, import_react8.useState)(null);
  (0, import_react8.useLayoutEffect)(() => {
    const destination = getPortalDestination();
    if (!destination || !isOpen)
      return;
    setPortalDestination(destination);
  }, [getPortalDestination, isOpen]);
  if (!portalDestination)
    return null;
  return (0, import_react_dom.createPortal)(children, portalDestination);
};

// node_modules/stream-chat-react/dist/components/Dialog/DialogPortal.js
var DialogPortalDestination = () => {
  const { dialogManager } = useDialogManager();
  const openedDialogCount = useOpenedDialogCount();
  if (!openedDialogCount)
    return null;
  return import_react9.default.createElement("div", { className: "str-chat__dialog-overlay", "data-str-chat__portal-id": dialogManager.id, "data-testid": "str-chat__dialog-overlay", onClick: () => dialogManager.closeAll(), style: {
    "--str-chat__dialog-overlay-height": openedDialogCount > 0 ? "100%" : "0"
  } });
};
var DialogPortalEntry = ({ children, dialogId }) => {
  const { dialogManager } = useDialogManager({ dialogId });
  const dialogIsOpen = useDialogIsOpen(dialogId, dialogManager.id);
  const getPortalDestination = (0, import_react9.useCallback)(() => document.querySelector(`div[data-str-chat__portal-id="${dialogManager.id}"]`), [dialogManager.id]);
  return import_react9.default.createElement(Portal, { getPortalDestination, isOpen: dialogIsOpen }, children);
};

// node_modules/stream-chat-react/dist/context/DialogManagerContext.js
var dialogManagersRegistry = new StateStore({});
var getDialogManager = (id3) => dialogManagersRegistry.getLatestValue()[id3];
var getOrCreateDialogManager = (id3) => {
  let manager = getDialogManager(id3);
  if (!manager) {
    manager = new DialogManager({ id: id3 });
    dialogManagersRegistry.partialNext({ [id3]: manager });
  }
  return manager;
};
var removeDialogManager = (id3) => {
  if (!getDialogManager(id3))
    return;
  dialogManagersRegistry.partialNext({ [id3]: void 0 });
};
var DialogManagerProviderContext = import_react10.default.createContext(void 0);
var DialogManagerProvider = ({ children, id: id3 }) => {
  const [dialogManager, setDialogManager] = (0, import_react10.useState)(() => {
    if (id3)
      return getDialogManager(id3) ?? null;
    return new DialogManager();
  });
  (0, import_react10.useEffect)(() => {
    if (!id3)
      return;
    setDialogManager(getOrCreateDialogManager(id3));
    return () => {
      removeDialogManager(id3);
      setDialogManager(null);
    };
  }, [id3]);
  if (!dialogManager)
    return null;
  return import_react10.default.createElement(
    DialogManagerProviderContext.Provider,
    { value: { dialogManager } },
    children,
    import_react10.default.createElement(DialogPortalDestination, null)
  );
};
var getManagerFromStore = ({ dialogId, dialogManagerId, newState, previousState }) => {
  var _a, _b;
  let managerInNewState;
  let managerInPrevState;
  if (dialogManagerId) {
    if (!dialogId) {
      managerInNewState = newState[dialogManagerId];
      managerInPrevState = previousState == null ? void 0 : previousState[dialogManagerId];
    } else {
      if ((_a = newState[dialogManagerId]) == null ? void 0 : _a.get(dialogId)) {
        managerInNewState = newState[dialogManagerId];
      }
      if ((_b = previousState == null ? void 0 : previousState[dialogManagerId]) == null ? void 0 : _b.get(dialogId)) {
        managerInPrevState = previousState[dialogManagerId];
      }
    }
  } else if (dialogId) {
    managerInNewState = Object.values(newState).find((dialogMng) => dialogId && (dialogMng == null ? void 0 : dialogMng.get(dialogId)));
    managerInPrevState = previousState && Object.values(previousState).find((dialogMng) => dialogId && (dialogMng == null ? void 0 : dialogMng.get(dialogId)));
  }
  return { managerInNewState, managerInPrevState };
};
var useDialogManager = ({ dialogId, dialogManagerId } = {}) => {
  const nearestDialogManagerContext = (0, import_react10.useContext)(DialogManagerProviderContext);
  const [dialogManagerContext, setDialogManagerContext] = (0, import_react10.useState)(() => {
    const { managerInNewState } = getManagerFromStore({
      dialogId,
      dialogManagerId,
      newState: dialogManagersRegistry.getLatestValue(),
      previousState: void 0
    });
    return managerInNewState ? { dialogManager: managerInNewState } : nearestDialogManagerContext;
  });
  (0, import_react10.useEffect)(() => {
    if (!dialogId && !dialogManagerId)
      return;
    const unsubscribe = dialogManagersRegistry.subscribeWithSelector((state) => state, (newState, previousState) => {
      const { managerInNewState, managerInPrevState } = getManagerFromStore({
        dialogId,
        dialogManagerId,
        newState,
        previousState
      });
      if (!managerInPrevState || (managerInNewState == null ? void 0 : managerInNewState.id) !== managerInPrevState.id) {
        setDialogManagerContext((prevState) => {
          if ((prevState == null ? void 0 : prevState.dialogManager.id) === (managerInNewState == null ? void 0 : managerInNewState.id))
            return prevState;
          return {
            dialogManager: managerInNewState || (nearestDialogManagerContext == null ? void 0 : nearestDialogManagerContext.dialogManager)
          };
        });
      }
    });
    return () => {
      unsubscribe();
    };
  }, [dialogId, dialogManagerId, nearestDialogManagerContext == null ? void 0 : nearestDialogManagerContext.dialogManager]);
  if (!(dialogManagerContext == null ? void 0 : dialogManagerContext.dialogManager)) {
    console.warn(`Dialog manager (manager id: ${dialogManagerId}, dialog id: ${dialogId}) is not available`);
  }
  return dialogManagerContext;
};
var modalDialogManagerId = "modal-dialog-manager";
var ModalDialogManagerProvider = ({ children }) => import_react10.default.createElement(DialogManagerProvider, { id: modalDialogManagerId }, children);
var useModalDialogManager = () => (0, import_react10.useMemo)(() => getDialogManager(modalDialogManagerId), []);

// node_modules/stream-chat-react/dist/context/MessageContext.js
var import_react11 = __toESM(require_react());
var MessageContext = import_react11.default.createContext(void 0);
var MessageProvider = ({ children, value }) => import_react11.default.createElement(MessageContext.Provider, { value }, children);
var useMessageContext = (_componentName) => {
  const contextValue = (0, import_react11.useContext)(MessageContext);
  if (!contextValue) {
    return {};
  }
  return contextValue;
};
var withMessageContext = (Component2) => {
  const WithMessageContextComponent = (props) => {
    const messageContext = useMessageContext();
    return import_react11.default.createElement(Component2, { ...props, ...messageContext });
  };
  WithMessageContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithMessageContextComponent;
};

// node_modules/stream-chat-react/dist/context/MessageBounceContext.js
var import_react12 = __toESM(require_react());
var MessageBounceContext = (0, import_react12.createContext)(void 0);
function useMessageBounceContext(componentName) {
  const contextValue = (0, import_react12.useContext)(MessageBounceContext);
  if (!contextValue) {
    console.warn(`The useMessageBounceContext hook was called outside of the MessageBounceContext provider. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
}
function MessageBounceProvider({ children }) {
  const { handleRetry: doHandleRetry, message, setEditingState } = useMessageContext("MessageBounceProvider");
  if (!isMessageBounced(message)) {
    console.warn(`The MessageBounceProvider was rendered for a message that is not bounced. Have you missed the "isMessageBounced" check?`);
  }
  const { removeMessage } = useChannelActionContext("MessageBounceProvider");
  const handleDelete2 = (0, import_react12.useCallback)(() => {
    removeMessage(message);
  }, [message, removeMessage]);
  const handleEdit = (0, import_react12.useCallback)((e) => {
    setEditingState(e);
  }, [setEditingState]);
  const handleRetry = (0, import_react12.useCallback)(() => {
    doHandleRetry(message);
  }, [doHandleRetry, message]);
  const value = (0, import_react12.useMemo)(() => ({
    handleDelete: handleDelete2,
    handleEdit,
    handleRetry,
    message
  }), [handleDelete2, handleEdit, handleRetry, message]);
  return import_react12.default.createElement(MessageBounceContext.Provider, { value }, children);
}

// node_modules/stream-chat-react/dist/context/MessageInputContext.js
var import_react13 = __toESM(require_react());
var MessageInputContext = (0, import_react13.createContext)(void 0);
var MessageInputContextProvider = ({ children, value }) => import_react13.default.createElement(MessageInputContext.Provider, { value }, children);
var useMessageInputContext = (componentName) => {
  const contextValue = (0, import_react13.useContext)(MessageInputContext);
  if (!contextValue) {
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/MessageListContext.js
var import_react14 = __toESM(require_react());
var MessageListContext = (0, import_react14.createContext)(void 0);
var MessageListContextProvider = ({ children, value }) => import_react14.default.createElement(MessageListContext.Provider, { value }, children);
var useMessageListContext = (componentName) => {
  const contextValue = (0, import_react14.useContext)(MessageListContext);
  if (!contextValue) {
    console.warn(`The useMessageListContext hook was called outside of the MessageListContext provider. Make sure this hook is called within the MessageList component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/PollContext.js
var import_react15 = __toESM(require_react());
var PollContext = import_react15.default.createContext(void 0);
var PollProvider = ({ children, poll }) => poll ? import_react15.default.createElement(PollContext.Provider, { value: { poll } }, children) : null;
var usePollContext = () => {
  const contextValue = (0, import_react15.useContext)(PollContext);
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/TranslationContext.js
var import_react16 = __toESM(require_react());
var import_dayjs2 = __toESM(require_dayjs_min());
var import_calendar = __toESM(require_calendar());
var import_localizedFormat = __toESM(require_localizedFormat());

// node_modules/stream-chat-react/dist/i18n/utils.js
var import_dayjs = __toESM(require_dayjs_min());
var notValidDateWarning = "MessageTimestamp was called without a message, or message has invalid created_at date.";
var noParsingFunctionWarning = "MessageTimestamp was called but there is no datetime parsing function available";
var isNumberOrString = (output) => typeof output === "string" || typeof output === "number";
var isDayOrMoment = (output) => !!(output == null ? void 0 : output.isSame);
var isDate = (output) => output !== null && typeof output === "object" && typeof output.getTime === "function";
function getDateString({ calendar: calendar3, calendarFormats, format, formatDate, messageCreatedAt, t: t2, tDateTimeParser, timestampTranslationKey }) {
  if (!messageCreatedAt || typeof messageCreatedAt === "string" && !Date.parse(messageCreatedAt)) {
    console.warn(notValidDateWarning);
    return null;
  }
  if (typeof formatDate === "function") {
    return formatDate(new Date(messageCreatedAt));
  }
  if (t2 && timestampTranslationKey) {
    const options2 = {};
    if (typeof calendar3 !== "undefined" && calendar3 !== null)
      options2.calendar = calendar3;
    if (typeof calendarFormats !== "undefined" && calendarFormats !== null)
      options2.calendarFormats = calendarFormats;
    if (typeof format !== "undefined" && format !== null)
      options2.format = format;
    const translatedTimestamp = t2(timestampTranslationKey, {
      ...options2,
      timestamp: new Date(messageCreatedAt)
    });
    const translationKeyFound = timestampTranslationKey !== translatedTimestamp;
    if (translationKeyFound)
      return translatedTimestamp;
  }
  if (!tDateTimeParser) {
    console.warn(noParsingFunctionWarning);
    return null;
  }
  const parsedTime = tDateTimeParser(messageCreatedAt);
  if (isDayOrMoment(parsedTime)) {
    return calendar3 && parsedTime.calendar ? parsedTime.calendar(void 0, calendarFormats || void 0) : parsedTime.format(format || void 0);
  }
  if (isDate(parsedTime)) {
    return parsedTime.toDateString();
  }
  if (isNumberOrString(parsedTime)) {
    return parsedTime;
  }
  return null;
}
var predefinedFormatters = {
  durationFormatter: (streamI18n) => (value, _2, { format, withSuffix }) => {
    if (format && (0, import_dayjs.isDayjs)(streamI18n.DateTimeParser)) {
      return streamI18n.DateTimeParser.duration(value).format(format);
    }
    return streamI18n.DateTimeParser.duration(value).humanize(!!withSuffix);
  },
  timestampFormatter: (streamI18n) => (value, _2, { calendarFormats, ...options2 }) => {
    let parsedCalendarFormats;
    try {
      if (!options2.calendar) {
        parsedCalendarFormats = {};
      } else if (typeof calendarFormats === "string") {
        parsedCalendarFormats = JSON.parse(calendarFormats);
      } else if (typeof calendarFormats === "object") {
        parsedCalendarFormats = calendarFormats;
      }
    } catch (e) {
      console.error("[TIMESTAMP FORMATTER]", e);
    }
    const result = getDateString({
      ...options2,
      calendarFormats: parsedCalendarFormats,
      messageCreatedAt: value,
      tDateTimeParser: streamI18n.tDateTimeParser
    });
    if (!result || typeof result === "number") {
      return JSON.stringify(value);
    }
    return result;
  }
};
var defaultTranslatorFunction = (key) => key;
var defaultDateTimeParser = (input) => (0, import_dayjs.default)(input);
var isLanguageSupported = (language) => {
  const translations = [
    "de",
    "en",
    "es",
    "fr",
    "hi",
    "it",
    "ja",
    "ko",
    "nl",
    "pt",
    "ru",
    "tr"
  ];
  return translations.some((translation) => language === translation);
};

// node_modules/stream-chat-react/dist/context/TranslationContext.js
import_dayjs2.default.extend(import_calendar.default);
import_dayjs2.default.extend(import_localizedFormat.default);
var TranslationContext = import_react16.default.createContext({
  t: defaultTranslatorFunction,
  tDateTimeParser: defaultDateTimeParser,
  userLanguage: "en"
});
var TranslationProvider = ({ children, value }) => import_react16.default.createElement(TranslationContext.Provider, { value }, children);
var useTranslationContext = (componentName) => {
  const contextValue = (0, import_react16.useContext)(TranslationContext);
  if (!contextValue) {
    console.warn(`The useTranslationContext hook was called outside of the TranslationContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withTranslationContext = (Component2) => {
  const WithTranslationContextComponent = (props) => {
    const translationContext = useTranslationContext();
    return import_react16.default.createElement(Component2, { ...props, ...translationContext });
  };
  WithTranslationContextComponent.displayName = `WithTranslationContext${getDisplayName(Component2)}`;
  return WithTranslationContextComponent;
};

// node_modules/stream-chat-react/dist/context/TypingContext.js
var import_react17 = __toESM(require_react());
var TypingContext = import_react17.default.createContext(void 0);
var TypingProvider = ({ children, value }) => import_react17.default.createElement(TypingContext.Provider, { value }, children);
var useTypingContext = (componentName) => {
  const contextValue = (0, import_react17.useContext)(TypingContext);
  if (!contextValue) {
    console.warn(`The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withTypingContext = (Component2) => {
  const WithTypingContextComponent = (props) => {
    const typingContext = useTypingContext();
    return import_react17.default.createElement(Component2, { ...props, ...typingContext });
  };
  WithTypingContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithTypingContextComponent;
};

// node_modules/stream-chat-react/dist/context/WithComponents.js
var import_react18 = __toESM(require_react());
function WithComponents({ children, overrides }) {
  const parentOverrides = (0, import_react18.useContext)(ComponentContext);
  const actualOverrides = { ...parentOverrides, ...overrides };
  return import_react18.default.createElement(ComponentContext.Provider, { value: actualOverrides }, children);
}

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentActions.js
var UnMemoizedAttachmentActions = (props) => {
  const { actionHandler, actions, id: id3, text: text8 } = props;
  const { t: t2 } = useTranslationContext("UnMemoizedAttachmentActions");
  const handleActionClick = (event, name2, value) => actionHandler == null ? void 0 : actionHandler(name2, value, event);
  return import_react19.default.createElement(
    "div",
    { className: "str-chat__message-attachment-actions" },
    import_react19.default.createElement(
      "div",
      { className: "str-chat__message-attachment-actions-form" },
      import_react19.default.createElement("span", null, text8),
      actions.map((action) => import_react19.default.createElement("button", { className: `str-chat__message-attachment-actions-button str-chat__message-attachment-actions-button--${action.style}`, "data-testid": `${action.name}`, "data-value": action.value, key: `${id3}-${action.value}`, onClick: (event) => handleActionClick(event, action.name, action.value) }, action.text ? t2(action.text) : null))
    )
  );
};
var AttachmentActions = import_react19.default.memo(UnMemoizedAttachmentActions);

// node_modules/stream-chat-react/dist/components/Attachment/Audio.js
var import_react29 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/components/DownloadButton.js
var import_react22 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/icons.js
var import_react20 = __toESM(require_react());
var DownloadIcon = ({ className }) => import_react20.default.createElement(
  "svg",
  { className, "data-testid": "download", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react20.default.createElement("path", { d: "M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z", fill: "black" })
);
var PlayTriangleIcon = () => import_react20.default.createElement(
  "svg",
  { fill: "none", viewBox: "0 0 12 14", xmlns: "http://www.w3.org/2000/svg" },
  import_react20.default.createElement("path", { d: "M0.5 0V14L11.5 7L0.5 0Z", fill: "#080707" })
);
var PauseIcon = () => import_react20.default.createElement(
  "svg",
  { fill: "none", viewBox: "0 0 12 14", xmlns: "http://www.w3.org/2000/svg" },
  import_react20.default.createElement("path", { d: "M0 14H4V0H0V14ZM8 0V14H12V0H8Z", fill: "#080707" })
);
var GeolocationIcon = () => import_react20.default.createElement(
  "svg",
  { className: "str-chat__message-geolocation__icon", fill: "currentColor", viewBox: "0 0 255.856 255.856", xmlns: "http://www.w3.org/2000/svg" },
  import_react20.default.createElement("path", { d: "M127.928 38.8c-30.75 0-55.768 25.017-55.768 55.767s25.018 55.767 55.768 55.767 55.768-25.017 55.768-55.767S158.678 38.8 127.928 38.8zm0 96.533c-22.479 0-40.768-18.288-40.768-40.767S105.449 53.8 127.928 53.8s40.768 18.288 40.768 40.767-18.288 40.766-40.768 40.766z", strokeWidth: "60" }),
  import_react20.default.createElement("path", { d: "M127.928 0C75.784 0 33.362 42.422 33.362 94.566c0 30.072 25.22 74.875 40.253 98.904 9.891 15.809 20.52 30.855 29.928 42.365 15.101 18.474 20.506 20.02 24.386 20.02 3.938 0 9.041-1.547 24.095-20.031 9.429-11.579 20.063-26.616 29.944-42.342 15.136-24.088 40.527-68.971 40.527-98.917C222.495 42.422 180.073 0 127.928 0zm43.641 181.803c-19.396 31.483-37.203 52.757-43.73 58.188-6.561-5.264-24.079-26.032-43.746-58.089-22.707-37.015-35.73-68.848-35.73-87.336C48.362 50.693 84.055 15 127.928 15s79.566 35.693 79.566 79.566c.001 18.382-13.094 50.178-35.925 87.237z" })
);
var ExternalLinkIcon = () => import_react20.default.createElement(
  "svg",
  { fill: "currentColor", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg" },
  import_react20.default.createElement("path", { d: "M12.586 2H10a1 1 0 1 1 0-2h5a1 1 0 0 1 1 1v5a1 1 0 1 1-2 0V3.414l-6.793 6.793a1 1 0 0 1-1.414-1.414L12.586 2zM6 1a1 1 0 1 1 0 2H3a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h8.967a1 1 0 0 0 1-.99L13 9.99a1 1 0 1 1 2 .02l-.033 3.023a3 3 0 0 1-3 2.967H3a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3h3z" })
);

// node_modules/stream-chat-react/dist/components/SafeAnchor/SafeAnchor.js
var import_react21 = __toESM(require_react());
var import_sanitize_url = __toESM(require_dist());
var UnMemoizedSafeAnchor = (props) => {
  const { children, className, download, href, rel, target } = props;
  const { t: t2 } = useTranslationContext("SafeAnchor");
  if (!href)
    return null;
  const sanitized = (0, import_sanitize_url.sanitizeUrl)(href);
  return import_react21.default.createElement("a", { "aria-label": t2("aria/Attachment"), className, download, href: sanitized, rel, target }, children);
};
var SafeAnchor = import_react21.default.memo(UnMemoizedSafeAnchor);

// node_modules/stream-chat-react/dist/components/Attachment/components/DownloadButton.js
var DownloadButton = ({ assetUrl }) => import_react22.default.createElement(
  SafeAnchor,
  { className: "str-chat__message-attachment-file--item-download", download: true, href: assetUrl, target: "_blank" },
  import_react22.default.createElement(DownloadIcon, { className: "str-chat__message-attachment-download-icon" })
);

// node_modules/stream-chat-react/dist/components/Attachment/components/FileSizeIndicator.js
var import_react23 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/utils.js
function prettifyFileSize(bytes, precision = 3) {
  const units = ["B", "kB", "MB", "GB"];
  const exponent = Math.min(Math.floor(Math.log(bytes) / Math.log(1024)), units.length - 1);
  const mantissa = bytes / 1024 ** exponent;
  const formattedMantissa = precision === 0 ? Math.round(mantissa).toString() : mantissa.toPrecision(precision);
  return `${formattedMantissa} ${units[exponent]}`;
}

// node_modules/stream-chat-react/dist/components/Attachment/components/FileSizeIndicator.js
var FileSizeIndicator = ({ fileSize, maximumFractionDigits }) => {
  const actualFileSize = typeof fileSize === "string" ? parseFloat(fileSize) : fileSize;
  if (typeof actualFileSize === "undefined" || !Number.isFinite(Number(actualFileSize))) {
    return null;
  }
  return import_react23.default.createElement("span", { className: "str-chat__message-attachment-file--item-size", "data-testid": "file-size-indicator" }, prettifyFileSize(actualFileSize, maximumFractionDigits));
};

// node_modules/stream-chat-react/dist/components/Attachment/components/ProgressBar.js
var import_react24 = __toESM(require_react());
var ProgressBar = ({ className, onClick, progress }) => import_react24.default.createElement(
  "div",
  { className: clsx_default("str-chat__message-attachment-audio-widget--progress-track", className), "data-progress": progress, "data-testid": "audio-progress", onClick, role: "progressbar", style: {
    "--str-chat__message-attachment-audio-widget-progress": progress + "%"
  } },
  import_react24.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--progress-slider", style: { left: `${progress}px` } })
);

// node_modules/stream-chat-react/dist/components/Attachment/components/PlaybackRateButton.js
var import_react25 = __toESM(require_react());
var PlaybackRateButton = ({ children, onClick }) => import_react25.default.createElement("button", { className: "str-chat__message_attachment__playback-rate-button", "data-testid": "playback-rate-button", onClick }, children);

// node_modules/stream-chat-react/dist/components/Attachment/components/PlayButton.js
var import_react26 = __toESM(require_react());
var PlayButton = ({ isPlaying, onClick }) => import_react26.default.createElement("button", { className: "str-chat__message-attachment-audio-widget--play-button", "data-testid": isPlaying ? "pause-audio" : "play-audio", onClick }, isPlaying ? import_react26.default.createElement(PauseIcon, null) : import_react26.default.createElement(PlayTriangleIcon, null));

// node_modules/stream-chat-react/dist/components/Attachment/components/WaveProgressBar.js
var import_lodash = __toESM(require_lodash());
var import_react27 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/utils.js
var SUPPORTED_VIDEO_FORMATS = [
  "video/mp4",
  "video/ogg",
  "video/webm",
  "video/quicktime"
];
var isGalleryAttachmentType = (attachment) => Array.isArray(attachment.images);
var isSvgAttachment = (attachment) => {
  const filename = attachment.fallback || "";
  return filename.toLowerCase().endsWith(".svg");
};
var divMod = (num, divisor) => [
  Math.floor(num / divisor),
  num % divisor
];
var displayDuration = (totalSeconds) => {
  if (!totalSeconds || totalSeconds < 0)
    return "00:00";
  const [hours, hoursLeftover] = divMod(totalSeconds, 3600);
  const [minutes, seconds] = divMod(hoursLeftover, 60);
  const roundedSeconds = Math.ceil(seconds);
  const prependHrsZero = hours.toString().length === 1 ? "0" : "";
  const prependMinZero = minutes.toString().length === 1 ? "0" : "";
  const prependSecZero = roundedSeconds.toString().length === 1 ? "0" : "";
  const minSec = `${prependMinZero}${minutes}:${prependSecZero}${roundedSeconds}`;
  return hours ? `${prependHrsZero}${hours}:` + minSec : minSec;
};

// node_modules/stream-chat-react/dist/components/Attachment/audioSampling.js
var resampleWaveformData = (waveformData, amplitudesCount) => waveformData.length === amplitudesCount ? waveformData : waveformData.length > amplitudesCount ? downSample(waveformData, amplitudesCount) : upSample(waveformData, amplitudesCount);
function downSample(data, targetOutputSize) {
  if (data.length <= targetOutputSize || targetOutputSize === 0) {
    return data;
  }
  if (targetOutputSize === 1)
    return [mean(data)];
  const result = [];
  const bucketSize = (data.length - 2) / (targetOutputSize - 2);
  let lastSelectedPointIndex = 0;
  result.push(data[lastSelectedPointIndex]);
  let maxAreaPoint, maxArea, triangleArea;
  for (let bucketIndex = 1; bucketIndex < targetOutputSize - 1; bucketIndex++) {
    const previousBucketRefPoint = data[lastSelectedPointIndex];
    const nextBucketMean = getNextBucketMean(data, bucketIndex, bucketSize);
    const currentBucketStartIndex = Math.floor((bucketIndex - 1) * bucketSize) + 1;
    const nextBucketStartIndex = Math.floor(bucketIndex * bucketSize) + 1;
    const countUnitsBetweenAtoC = 1 + nextBucketStartIndex - currentBucketStartIndex;
    maxArea = triangleArea = -1;
    for (let currentPointIndex = currentBucketStartIndex; currentPointIndex < nextBucketStartIndex; currentPointIndex++) {
      const countUnitsBetweenAtoB = Math.abs(currentPointIndex - currentBucketStartIndex) + 1;
      const countUnitsBetweenBtoC = countUnitsBetweenAtoC - countUnitsBetweenAtoB;
      const currentPointValue = data[currentPointIndex];
      triangleArea = triangleAreaHeron(triangleBase(Math.abs(previousBucketRefPoint - currentPointValue), countUnitsBetweenAtoB), triangleBase(Math.abs(currentPointValue - nextBucketMean), countUnitsBetweenBtoC), triangleBase(Math.abs(previousBucketRefPoint - nextBucketMean), countUnitsBetweenAtoC));
      if (triangleArea > maxArea) {
        maxArea = triangleArea;
        maxAreaPoint = data[currentPointIndex];
        lastSelectedPointIndex = currentPointIndex;
      }
    }
    if (typeof maxAreaPoint !== "undefined")
      result.push(maxAreaPoint);
  }
  result.push(data[data.length - 1]);
  return result;
}
var triangleAreaHeron = (a2, b2, c2) => {
  const s2 = (a2 + b2 + c2) / 2;
  return Math.sqrt(s2 * (s2 - a2) * (s2 - b2) * (s2 - c2));
};
var triangleBase = (a2, b2) => Math.sqrt(Math.pow(a2, 2) + Math.pow(b2, 2));
var mean = (values2) => values2.reduce((acc, value) => acc + value, 0) / values2.length;
var getNextBucketMean = (data, currentBucketIndex, bucketSize) => {
  const nextBucketStartIndex = Math.floor(currentBucketIndex * bucketSize) + 1;
  let nextNextBucketStartIndex = Math.floor((currentBucketIndex + 1) * bucketSize) + 1;
  nextNextBucketStartIndex = nextNextBucketStartIndex < data.length ? nextNextBucketStartIndex : data.length;
  return mean(data.slice(nextBucketStartIndex, nextNextBucketStartIndex));
};
var upSample = (values2, targetSize) => {
  if (!values2.length) {
    console.warn("Cannot extend empty array of amplitudes.");
    return values2;
  }
  if (values2.length > targetSize) {
    console.warn("Requested to extend the waveformData that is longer than the target list size");
    return values2;
  }
  if (targetSize === values2.length)
    return values2;
  let [bucketSize, remainder] = divMod(targetSize, values2.length);
  const result = [];
  for (let i2 = 0; i2 < values2.length; i2++) {
    const extra = remainder && remainder-- ? 1 : 0;
    result.push(...Array(bucketSize + extra).fill(values2[i2]));
  }
  return result;
};

// node_modules/stream-chat-react/dist/components/Attachment/components/WaveProgressBar.js
var WaveProgressBar = ({ amplitudesCount = 40, progress = 0, relativeAmplitudeBarWidth = 2, relativeAmplitudeGap = 1, seek, waveformData }) => {
  const [progressIndicator, setProgressIndicator] = (0, import_react27.useState)(null);
  const isDragging = (0, import_react27.useRef)(false);
  const [root4, setRoot] = (0, import_react27.useState)(null);
  const [trackAxisX, setTrackAxisX] = (0, import_react27.useState)();
  const lastRootWidth = (0, import_react27.useRef)(void 0);
  const handleDragStart = (e) => {
    e.preventDefault();
    if (!progressIndicator)
      return;
    isDragging.current = true;
    progressIndicator.style.cursor = "grabbing";
  };
  const handleDrag = (e) => {
    if (!isDragging.current)
      return;
    seek({ ...e });
  };
  const handleDragStop = (0, import_react27.useCallback)(() => {
    if (!progressIndicator)
      return;
    isDragging.current = false;
    progressIndicator.style.removeProperty("cursor");
  }, [progressIndicator]);
  const getTrackAxisX = (0, import_react27.useMemo)(() => (0, import_lodash.default)((rootWidth) => {
    if (rootWidth === lastRootWidth.current)
      return;
    lastRootWidth.current = rootWidth;
    const possibleAmpCount = Math.floor(rootWidth / (relativeAmplitudeGap + relativeAmplitudeBarWidth));
    const tooManyAmplitudesToRender = possibleAmpCount < amplitudesCount;
    const barCount = tooManyAmplitudesToRender ? possibleAmpCount : amplitudesCount;
    const amplitudeBarWidthToGapRatio = relativeAmplitudeBarWidth / (relativeAmplitudeBarWidth + relativeAmplitudeGap);
    const barWidth = barCount && rootWidth / barCount * amplitudeBarWidthToGapRatio;
    setTrackAxisX({
      barCount,
      barWidth,
      gap: barWidth * (relativeAmplitudeGap / relativeAmplitudeBarWidth)
    });
  }, 1), [relativeAmplitudeBarWidth, relativeAmplitudeGap, amplitudesCount]);
  const resampledWaveformData = (0, import_react27.useMemo)(() => trackAxisX ? resampleWaveformData(waveformData, trackAxisX.barCount) : [], [trackAxisX, waveformData]);
  (0, import_react27.useEffect)(() => {
    document.addEventListener("pointerup", handleDragStop);
    return () => {
      document.removeEventListener("pointerup", handleDragStop);
    };
  }, [handleDragStop]);
  (0, import_react27.useEffect)(() => {
    if (!root4 || typeof ResizeObserver === "undefined")
      return;
    const observer = new ResizeObserver(([entry]) => {
      getTrackAxisX(entry.contentRect.width);
    });
    observer.observe(root4);
    return () => {
      observer.disconnect();
    };
  }, [getTrackAxisX, root4]);
  (0, import_react27.useLayoutEffect)(() => {
    if (!root4)
      return;
    const { width: rootWidth } = root4.getBoundingClientRect();
    getTrackAxisX(rootWidth);
  }, [getTrackAxisX, root4]);
  if (!waveformData.length || (trackAxisX == null ? void 0 : trackAxisX.barCount) === 0)
    return null;
  return import_react27.default.createElement(
    "div",
    { className: "str-chat__wave-progress-bar__track", "data-testid": "wave-progress-bar-track", onClick: seek, onPointerDown: handleDragStart, onPointerMove: handleDrag, onPointerUp: handleDragStop, ref: setRoot, role: "progressbar", style: {
      "--str-chat__voice-recording-amplitude-bar-gap-width": (trackAxisX == null ? void 0 : trackAxisX.gap) + "px"
    } },
    resampledWaveformData.map((amplitude, i2) => import_react27.default.createElement("div", { className: clsx_default("str-chat__wave-progress-bar__amplitude-bar", {
      ["str-chat__wave-progress-bar__amplitude-bar--active"]: progress > i2 / resampledWaveformData.length * 100
    }), "data-testid": "amplitude-bar", key: `amplitude-${i2}`, style: {
      "--str-chat__voice-recording-amplitude-bar-width": (trackAxisX == null ? void 0 : trackAxisX.barWidth) + "px",
      "--str-chat__wave-progress-bar__amplitude-bar-height": amplitude ? amplitude * 100 + "%" : "0%"
    } })),
    import_react27.default.createElement("div", { className: "str-chat__wave-progress-bar__progress-indicator", "data-testid": "wave-progress-bar-progress-indicator", ref: setProgressIndicator, style: { left: `${progress < 0 ? 0 : progress > 100 ? 100 : progress}%` } })
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/hooks/useAudioController.js
var import_lodash2 = __toESM(require_lodash());
var import_react28 = __toESM(require_react());
var isSeekable = (audioElement) => !(audioElement.duration === Infinity || isNaN(audioElement.duration));
var elementIsPlaying = (audioElement) => audioElement && !(audioElement.paused || audioElement.ended);
var logError = (e) => console.error("[AUDIO PLAYER]", e);
var DEFAULT_PLAYBACK_RATES = [1, 1.5, 2];
var useAudioController = ({ durationSeconds, mimeType, playbackRates = DEFAULT_PLAYBACK_RATES } = {}) => {
  const { addNotification } = useChannelActionContext("useAudioController");
  const { t: t2 } = useTranslationContext("useAudioController");
  const [isPlaying, setIsPlaying] = (0, import_react28.useState)(false);
  const [playbackError, setPlaybackError] = (0, import_react28.useState)();
  const [canPlayRecord, setCanPlayRecord] = (0, import_react28.useState)(true);
  const [secondsElapsed, setSecondsElapsed] = (0, import_react28.useState)(0);
  const [playbackRateIndex, setPlaybackRateIndex] = (0, import_react28.useState)(0);
  const playTimeout = (0, import_react28.useRef)(void 0);
  const audioRef = (0, import_react28.useRef)(null);
  const registerError = (0, import_react28.useCallback)((e) => {
    logError(e);
    setPlaybackError(e);
    addNotification(e.message, "error");
  }, [addNotification]);
  const togglePlay = (0, import_react28.useCallback)(async () => {
    if (!audioRef.current)
      return;
    clearTimeout(playTimeout.current);
    playTimeout.current = void 0;
    if (mimeType && !audioRef.current.canPlayType(mimeType)) {
      registerError(new Error(t2("Recording format is not supported and cannot be reproduced")));
      setCanPlayRecord(false);
      return;
    }
    if (elementIsPlaying(audioRef.current)) {
      audioRef.current.pause();
      setIsPlaying(false);
    } else {
      playTimeout.current = setTimeout(() => {
        if (!audioRef.current)
          return;
        try {
          audioRef.current.pause();
          setIsPlaying(false);
        } catch (e) {
          registerError(new Error(t2("Failed to play the recording")));
        }
      }, 2e3);
      try {
        await audioRef.current.play();
        setIsPlaying(true);
      } catch (e) {
        registerError(e);
        setIsPlaying(false);
      } finally {
        clearTimeout(playTimeout.current);
        playTimeout.current = void 0;
      }
    }
  }, [mimeType, registerError, t2]);
  const increasePlaybackRate = () => {
    setPlaybackRateIndex((prev) => {
      if (!audioRef.current)
        return prev;
      const nextIndex = prev === playbackRates.length - 1 ? 0 : prev + 1;
      audioRef.current.playbackRate = playbackRates[nextIndex];
      return nextIndex;
    });
  };
  const seek = (0, import_react28.useMemo)(() => (0, import_lodash2.default)(({ clientX, currentTarget }) => {
    if (!(currentTarget && audioRef.current))
      return;
    if (!isSeekable(audioRef.current)) {
      registerError(new Error(t2("Cannot seek in the recording")));
      return;
    }
    const { width, x: x2 } = currentTarget.getBoundingClientRect();
    const ratio = (clientX - x2) / width;
    if (ratio > 1 || ratio < 0)
      return;
    const currentTime = ratio * audioRef.current.duration;
    setSecondsElapsed(currentTime);
    audioRef.current.currentTime = currentTime;
  }, 16), [registerError, t2]);
  (0, import_react28.useEffect)(() => {
    if (!audioRef.current)
      return;
    const audioElement = audioRef.current;
    const handleEnded = () => {
      setSecondsElapsed((audioElement == null ? void 0 : audioElement.duration) ?? durationSeconds ?? 0);
      setIsPlaying(false);
    };
    audioElement.addEventListener("ended", handleEnded);
    const handleError = () => {
      addNotification(t2("Error reproducing the recording"), "error");
      setIsPlaying(false);
    };
    audioElement.addEventListener("error", handleError);
    const handleTimeupdate = () => {
      setSecondsElapsed(audioElement == null ? void 0 : audioElement.currentTime);
    };
    audioElement.addEventListener("timeupdate", handleTimeupdate);
    return () => {
      audioElement.pause();
      audioElement.removeEventListener("ended", handleEnded);
      audioElement.removeEventListener("error", handleError);
      audioElement.removeEventListener("timeupdate", handleTimeupdate);
    };
  }, [addNotification, durationSeconds, t2]);
  return {
    audioRef,
    canPlayRecord,
    increasePlaybackRate,
    isPlaying,
    playbackError,
    playbackRate: playbackRates[playbackRateIndex],
    progress: audioRef.current && secondsElapsed ? secondsElapsed / audioRef.current.duration * 100 : 0,
    secondsElapsed,
    seek,
    togglePlay
  };
};

// node_modules/stream-chat-react/dist/components/Attachment/Audio.js
var UnMemoizedAudio = (props) => {
  const { og: { asset_url, file_size, mime_type, title } } = props;
  const { audioRef, isPlaying, progress, seek, togglePlay } = useAudioController({
    mimeType: mime_type
  });
  if (!asset_url)
    return null;
  const dataTestId = "audio-widget";
  const rootClassName2 = "str-chat__message-attachment-audio-widget";
  return import_react29.default.createElement(
    "div",
    { className: rootClassName2, "data-testid": dataTestId },
    import_react29.default.createElement(
      "audio",
      { ref: audioRef },
      import_react29.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: "audio/mp3" })
    ),
    import_react29.default.createElement(
      "div",
      { className: "str-chat__message-attachment-audio-widget--play-controls" },
      import_react29.default.createElement(PlayButton, { isPlaying, onClick: togglePlay })
    ),
    import_react29.default.createElement(
      "div",
      { className: "str-chat__message-attachment-audio-widget--text" },
      import_react29.default.createElement(
        "div",
        { className: "str-chat__message-attachment-audio-widget--text-first-row" },
        import_react29.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--title" }, title),
        import_react29.default.createElement(DownloadButton, { assetUrl: asset_url })
      ),
      import_react29.default.createElement(
        "div",
        { className: "str-chat__message-attachment-audio-widget--text-second-row" },
        import_react29.default.createElement(FileSizeIndicator, { fileSize: file_size }),
        import_react29.default.createElement(ProgressBar, { onClick: seek, progress })
      )
    )
  );
};
var Audio = import_react29.default.memo(UnMemoizedAudio);

// node_modules/stream-chat-react/dist/components/Attachment/VoiceRecording.js
var import_react312 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIcon.js
var import_react31 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIconSet.js
var import_react30 = __toESM(require_react());
var DEFAULT_SIZE = 40;
var FilePdfIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-pdf", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#E71A01" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M16.39 8.90641C16.215 8.27341 15.787 7.95841 15.426 8.00441C14.99 8.06141 14.526 8.32041 14.34 8.72941C13.854 9.82141 14.768 12.8934 15.028 13.7674L15.073 13.9194C14.015 17.1134 10.394 23.4264 8.62002 23.8534C8.58302 23.4364 8.80602 22.2294 11.146 20.7244C11.266 20.5944 11.406 20.4374 11.471 20.3344C9.49302 21.3004 6.93108 22.8514 8.47102 24.0114C8.55602 24.0774 8.68502 24.1314 8.83402 24.1874C10.014 24.6244 11.666 23.1954 13.327 19.9544C15.157 19.3504 16.633 18.8964 18.722 18.5804C21.005 20.1304 22.538 20.4464 23.578 20.0474C23.866 19.9354 24.32 19.5734 24.45 19.1004C24.515 18.8774 24.608 18.5154 24.432 18.2274C23.842 17.2664 21.452 17.5954 20.032 17.7904C19.779 17.8254 19.557 17.8564 19.381 17.8744C17.552 16.7704 16.289 14.8014 15.778 13.3804C15.857 13.0784 15.936 12.7894 16.012 12.5124C16.397 11.1124 16.701 10.0064 16.392 8.90641H16.39ZM24.45 19.1004C23.605 20.1404 21.628 19.4164 20.05 18.4224C21.507 18.2644 23.01 18.1724 23.661 18.3764C24.488 18.6364 24.459 19.0444 24.451 19.1004H24.45ZM15.601 12.7404C15.296 11.6544 14.868 9.24041 15.555 8.46041C16.701 9.11641 16.266 10.5384 15.825 11.9834C15.748 12.2364 15.671 12.4894 15.601 12.7404ZM13.439 19.5834C15.156 18.9054 16.354 18.4494 18.118 18.1254C16.818 16.9554 16.028 15.6834 15.378 14.3834C14.915 16.0554 13.948 18.5894 13.438 19.5834H13.439Z", fill: "#E71A01", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M13.1719 33.0127V37.4219H12.1875V32.3018H13.1001L13.1719 33.0127ZM15.5132 34.1099V34.1816C15.5132 34.4505 15.4813 34.7 15.4175 34.9302C15.356 35.1603 15.2648 35.3608 15.144 35.5317C15.0233 35.7004 14.8729 35.8325 14.6929 35.9282C14.5151 36.0216 14.3101 36.0684 14.0776 36.0684C13.8521 36.0684 13.6561 36.0228 13.4897 35.9316C13.3234 35.8405 13.1833 35.7129 13.0693 35.5488C12.9577 35.3825 12.8677 35.1899 12.7993 34.9712C12.731 34.7524 12.6785 34.5177 12.6421 34.2671V34.0791C12.6785 33.8102 12.731 33.5641 12.7993 33.3408C12.8677 33.1152 12.9577 32.9204 13.0693 32.7563C13.1833 32.59 13.3223 32.4613 13.4863 32.3701C13.6527 32.279 13.8475 32.2334 14.0708 32.2334C14.3055 32.2334 14.5117 32.2778 14.6895 32.3667C14.8695 32.4556 15.0199 32.5832 15.1406 32.7495C15.2637 32.9159 15.356 33.1141 15.4175 33.3442C15.4813 33.5744 15.5132 33.8296 15.5132 34.1099ZM14.5254 34.1816V34.1099C14.5254 33.9526 14.5117 33.8079 14.4844 33.6758C14.4593 33.5413 14.4183 33.424 14.3613 33.3237C14.3066 33.2235 14.2337 33.146 14.1426 33.0913C14.0537 33.0343 13.9455 33.0059 13.8179 33.0059C13.6834 33.0059 13.5684 33.0275 13.4727 33.0708C13.3792 33.1141 13.3029 33.1768 13.2437 33.2588C13.1844 33.3408 13.14 33.4388 13.1104 33.5527C13.0807 33.6667 13.0625 33.7954 13.0557 33.939V34.4141C13.0671 34.5827 13.099 34.7342 13.1514 34.8687C13.2038 35.0008 13.2847 35.1056 13.394 35.1831C13.5034 35.2606 13.647 35.2993 13.8247 35.2993C13.9546 35.2993 14.064 35.2708 14.1528 35.2139C14.2417 35.1546 14.3135 35.0737 14.3682 34.9712C14.4251 34.8687 14.465 34.7502 14.4878 34.6157C14.5129 34.4813 14.5254 34.3366 14.5254 34.1816ZM18.3091 35.1934V30.75H19.3003V36H18.4082L18.3091 35.1934ZM15.9712 34.1953V34.1235C15.9712 33.841 16.0031 33.5846 16.0669 33.3545C16.1307 33.1221 16.2241 32.9227 16.3472 32.7563C16.4702 32.59 16.6217 32.4613 16.8018 32.3701C16.9818 32.279 17.1868 32.2334 17.417 32.2334C17.6335 32.2334 17.8226 32.279 17.9844 32.3701C18.1484 32.4613 18.2874 32.5911 18.4014 32.7598C18.5176 32.9261 18.611 33.1232 18.6816 33.3511C18.7523 33.5767 18.8035 33.8239 18.8354 34.0928V34.25C18.8035 34.5075 18.7523 34.7467 18.6816 34.9678C18.611 35.1888 18.5176 35.3825 18.4014 35.5488C18.2874 35.7129 18.1484 35.8405 17.9844 35.9316C17.8203 36.0228 17.6289 36.0684 17.4102 36.0684C17.18 36.0684 16.9749 36.0216 16.7949 35.9282C16.6172 35.8348 16.4668 35.7038 16.3438 35.5352C16.223 35.3665 16.1307 35.1683 16.0669 34.9404C16.0031 34.7126 15.9712 34.4642 15.9712 34.1953ZM16.9556 34.1235V34.1953C16.9556 34.348 16.967 34.4904 16.9897 34.6226C17.0148 34.7547 17.0547 34.8721 17.1094 34.9746C17.1663 35.0749 17.2393 35.1535 17.3281 35.2104C17.4193 35.2651 17.5298 35.2925 17.6597 35.2925C17.8283 35.2925 17.9673 35.2549 18.0767 35.1797C18.186 35.1022 18.2692 34.9963 18.3262 34.8618C18.3854 34.7274 18.4196 34.5724 18.4287 34.397V33.9492C18.4219 33.8057 18.4014 33.6769 18.3672 33.563C18.3353 33.4468 18.2874 33.3477 18.2236 33.2656C18.1621 33.1836 18.0846 33.1198 17.9912 33.0742C17.9001 33.0286 17.7918 33.0059 17.6665 33.0059C17.5389 33.0059 17.4295 33.0355 17.3384 33.0947C17.2472 33.1517 17.1732 33.2303 17.1162 33.3306C17.0615 33.4308 17.0205 33.5493 16.9932 33.686C16.9681 33.8205 16.9556 33.9663 16.9556 34.1235ZM21.3237 36H20.3325V31.9736C20.3325 31.6934 20.3872 31.4575 20.4966 31.2661C20.6082 31.0724 20.7643 30.9266 20.9648 30.8286C21.1676 30.7284 21.408 30.6782 21.686 30.6782C21.7772 30.6782 21.8649 30.6851 21.9492 30.6987C22.0335 30.7101 22.1156 30.7249 22.1953 30.7432L22.1851 31.4849C22.1418 31.4735 22.0962 31.4655 22.0483 31.4609C22.0005 31.4564 21.9447 31.4541 21.8809 31.4541C21.7624 31.4541 21.661 31.4746 21.5767 31.5156C21.4946 31.5544 21.432 31.6125 21.3887 31.6899C21.3454 31.7674 21.3237 31.862 21.3237 31.9736V36ZM22.062 32.3018V32.999H19.7822V32.3018H22.062Z", fill: "white" })
);
var FileWordIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-word", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#4285F4" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#4285F4", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#4285F4", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#4285F4", fillRule: "evenodd" })
);
var FileWordIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-word-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11084_64)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#3670D3" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#C1D8FF", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#C1D8FF", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#C1D8FF", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11084_64", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#79A4F2" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#3375E2" })
    )
  )
);
var FilePowerPointIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-powerpoint", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#D65537" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z", fill: "#D65537", fillRule: "evenodd" })
);
var FilePowerPointIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-powerpoint-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11084_76)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#AB381D" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z", fill: "#FFB3A0", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11084_76", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#DC7259" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#D14423" })
    )
  )
);
var FileExcelIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-excel", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#0F9D58" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z", fill: "#0F9D58", fillRule: "evenodd" })
);
var FileExcelIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-excel-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11084_326)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#0C864B" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z", fill: "#A8E7C9", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11084_326", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#64AD8A" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#0C864B" })
    )
  )
);
var FileArchiveIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-archive", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#F8B859" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z", fill: "#F8B859", fillRule: "evenodd" })
);
var FileArchiveIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-archive-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11086_246)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#B67A24" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z", fill: "#FFE9C8", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11086_246", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#FFC775" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#E69E34" })
    )
  )
);
var FileCodeIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-code", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#00ACA1" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z", fill: "#00ACA1", fillRule: "evenodd" })
);
var FileCodeIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-code-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11086_611)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#00ACA1" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z", fill: "#A3DCD8", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11086_611", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#7FC4BD" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#00ACA1" })
    )
  )
);
var FileAudioIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-audio", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#2727B0" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z", fill: "#2727B0", fillRule: "evenodd" })
);
var FileAudioIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-audio-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11086_420)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#1919A5" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z", fill: "#AAAAFF", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11086_420", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#4A4AB8" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#2727B0" })
    )
  )
);
var FileVideoIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-video", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#9D27B0" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { d: "M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z", fill: "#9D27B0" })
);
var FileVideoIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-video-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_18604_164254)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#7A1589" }),
  import_react30.default.createElement("path", { d: "M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z", fill: "#F3A8FF" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_18604_164254", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#A94AB8" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#9D27B0" })
    )
  )
);
var FileFallbackIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-fallback ", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#CFCFCF", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#CFCFCF", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#CFCFCF", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "white" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#DBDBDB" })
    )
  )
);
var FileImageIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-image", className), height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z", fill: "#414D54" })
);

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/mimeTypes.js
var wordMimeTypes = [
  // Microsoft Word
  // .doc .dot
  "application/msword",
  // .doc .dot
  "application/msword-template",
  // .docx
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  // .dotx (no test)
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
  // .docm
  "application/vnd.ms-word.document.macroEnabled.12",
  // .dotm (no test)
  "application/vnd.ms-word.template.macroEnabled.12",
  // LibreOffice/OpenOffice Writer
  // .odt
  "application/vnd.oasis.opendocument.text",
  // .ott
  "application/vnd.oasis.opendocument.text-template",
  // .fodt
  "application/vnd.oasis.opendocument.text-flat-xml"
  // .uot
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var excelMimeTypes = [
  // .csv
  "text/csv",
  // TODO: maybe more data files
  // Microsoft Excel
  // .xls .xlt .xla (no test for .xla)
  "application/vnd.ms-excel",
  // .xlsx
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  // .xltx (no test)
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template",
  // .xlsm
  "application/vnd.ms-excel.sheet.macroEnabled.12",
  // .xltm (no test)
  "application/vnd.ms-excel.template.macroEnabled.12",
  // .xlam (no test)
  "application/vnd.ms-excel.addin.macroEnabled.12",
  // .xlsb (no test)
  "application/vnd.ms-excel.addin.macroEnabled.12",
  // LibreOffice/OpenOffice Calc
  // .ods
  "application/vnd.oasis.opendocument.spreadsheet",
  // .ots
  "application/vnd.oasis.opendocument.spreadsheet-template",
  // .fods
  "application/vnd.oasis.opendocument.spreadsheet-flat-xml"
  // .uos
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var powerpointMimeTypes = [
  // Microsoft Word
  // .ppt .pot .pps .ppa (no test for .ppa)
  "application/vnd.ms-powerpoint",
  // .pptx
  "application/vnd.openxmlformats-officedocument.presentationml.presentation",
  // .potx (no test)
  "application/vnd.openxmlformats-officedocument.presentationml.template",
  // .ppsx
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow",
  // .ppam
  "application/vnd.ms-powerpoint.addin.macroEnabled.12",
  // .pptm
  "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
  // .potm
  "application/vnd.ms-powerpoint.template.macroEnabled.12",
  // .ppsm
  "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
  // LibreOffice/OpenOffice Writer
  // .odp
  "application/vnd.oasis.opendocument.presentation",
  // .otp
  "application/vnd.oasis.opendocument.presentation-template",
  // .fodp
  "application/vnd.oasis.opendocument.presentation-flat-xml"
  // .uop
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var archiveFileTypes = [
  // .zip
  "application/zip",
  // .z7
  "application/x-7z-compressed",
  // .ar
  "application/x-archive",
  // .tar
  "application/x-tar",
  // .tar.gz
  "application/gzip",
  // .tar.Z
  "application/x-compress",
  // .tar.bz2
  "application/x-bzip",
  // .tar.lz
  "application/x-lzip",
  // .tar.lz4
  "application/x-lz4",
  // .tar.lzma
  "application/x-lzma",
  // .tar.lzo (no test)
  "application/x-lzop",
  // .tar.xz
  "application/x-xz",
  // .war
  "application/x-webarchive",
  // .rar
  "application/vnd.rar"
];
var codeFileTypes = [
  // .html .htm
  "text/html",
  // .css
  "text/css",
  // .js
  "application/x-javascript",
  "text/javascript",
  // .json
  "application/json",
  // .py
  "text/x-python",
  // .go
  "text/x-go",
  // .c
  "text/x-csrc",
  // .cpp
  "text/x-c++src",
  // .rb
  "application/x-ruby",
  // .rust
  "text/rust",
  // .java
  "text/x-java",
  // .php
  "application/x-php",
  // .cs
  "text/x-csharp",
  // .scala
  "text/x-scala",
  // .erl
  "text/x-erlang",
  // .sh
  "application/x-shellscript"
];

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/iconMap.js
function generateMimeTypeToIconMap({ FileArchiveIcon: FileArchiveIcon2, FileCodeIcon: FileCodeIcon2, FileExcelIcon: FileExcelIcon2, FilePdfIcon: FilePdfIcon2, FilePowerPointIcon: FilePowerPointIcon2, FileWordIcon: FileWordIcon2 }) {
  const mimeTypeToIconMap = {
    "application/pdf": FilePdfIcon2
  };
  for (const type of wordMimeTypes) {
    mimeTypeToIconMap[type] = FileWordIcon2;
  }
  for (const type of excelMimeTypes) {
    mimeTypeToIconMap[type] = FileExcelIcon2;
  }
  for (const type of powerpointMimeTypes) {
    mimeTypeToIconMap[type] = FilePowerPointIcon2;
  }
  for (const type of archiveFileTypes) {
    mimeTypeToIconMap[type] = FileArchiveIcon2;
  }
  for (const type of codeFileTypes) {
    mimeTypeToIconMap[type] = FileCodeIcon2;
  }
  return mimeTypeToIconMap;
}
function generateGeneralTypeToIconMap({ FileAltIcon, FileAudioIcon: FileAudioIcon2, FileImageIcon: FileImageIcon2, FileVideoIcon: FileVideoIcon2 }) {
  return {
    "audio/": FileAudioIcon2,
    "image/": FileImageIcon2,
    "text/": FileAltIcon,
    "video/": FileVideoIcon2
  };
}
var iconMap = {
  alt: {
    ...generateMimeTypeToIconMap({
      FileArchiveIcon: FileArchiveIconAlt,
      FileCodeIcon: FileCodeIconAlt,
      FileExcelIcon: FileExcelIconAlt,
      FilePdfIcon,
      FilePowerPointIcon: FilePowerPointIconAlt,
      FileWordIcon: FileWordIconAlt
    }),
    ...generateGeneralTypeToIconMap({
      FileAltIcon: FileFallbackIcon,
      FileAudioIcon: FileAudioIconAlt,
      FileImageIcon,
      FileVideoIcon: FileVideoIconAlt
    }),
    fallback: FileFallbackIcon
  },
  standard: {
    ...generateMimeTypeToIconMap({
      FileArchiveIcon,
      FileCodeIcon,
      FileExcelIcon,
      FilePdfIcon,
      FilePowerPointIcon,
      FileWordIcon
    }),
    ...generateGeneralTypeToIconMap({
      FileAltIcon: FileFallbackIcon,
      FileAudioIcon,
      FileImageIcon,
      FileVideoIcon
    }),
    fallback: FileFallbackIcon
  }
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIcon.js
function mimeTypeToIcon(type = "standard", mimeType) {
  const theMap = iconMap[type] || iconMap["standard"];
  if (!mimeType)
    return theMap.fallback;
  const icon = theMap[mimeType];
  if (icon)
    return icon;
  if (mimeType.startsWith("audio/"))
    return theMap["audio/"];
  if (mimeType.startsWith("video/"))
    return theMap["video/"];
  if (mimeType.startsWith("image/"))
    return theMap["image/"];
  if (mimeType.startsWith("text/"))
    return theMap["text/"];
  return theMap.fallback;
}
var FileIcon = (props) => {
  const { big = false, mimeType, size = 50, sizeSmall = 20, type = "standard", ...rest } = props;
  const Icon3 = mimeTypeToIcon(type, mimeType);
  return import_react31.default.createElement(Icon3, { ...rest, size: big ? size : sizeSmall });
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/LoadingIndicator.js
var import_react32 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/UploadButton.js
var import_react311 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/utils.js
var import_react33 = __toESM(require_react());
var useHandleFileChangeWrapper = (resetOnChange = false, handler) => (0, import_react33.useCallback)(({ currentTarget }) => {
  const { files } = currentTarget;
  if (!files)
    return;
  try {
    handler == null ? void 0 : handler(Array.from(files));
  } catch (error) {
    console.error(error);
  }
  if (resetOnChange)
    currentTarget.value = "";
}, [handler, resetOnChange]);
async function dataTransferItemsToFiles(items) {
  if (!items || !items.length) {
    return [];
  }
  const fileLikes = getFileLikes(items);
  if (fileLikes.length) {
    return fileLikes;
  }
  const blobPromises = [];
  for (const item of items) {
    if (item.type === "text/html") {
      blobPromises.push(new Promise((accept) => {
        item.getAsString(async (s2) => {
          const imagePromises = extractImageSources(s2).map((src) => getImageSource(fileLikes, src));
          await Promise.all(imagePromises);
          accept();
        });
      }));
    }
  }
  await Promise.all(blobPromises);
  return fileLikes;
}
function getFileLikes(items) {
  const fileLikes = [];
  for (const item of items) {
    if (item.kind === "file") {
      const file = item.getAsFile();
      if (file) {
        fileLikes.push(file);
      }
    }
  }
  return fileLikes;
}
async function getImageSource(fileLikes, src) {
  let res;
  try {
    res = await fetch(src);
  } catch (e) {
    return;
  }
  const contentType = res.headers.get("Content-type") || "application/octet-stream";
  const buf = await res.arrayBuffer();
  const blob = new Blob([buf], { type: contentType });
  fileLikes.push(blob);
}
var extractImageSources = (s2) => {
  const imageTags = new DOMParser().parseFromString(s2, "text/html").getElementsByTagName("img");
  return Array.from(imageTags, (tag) => tag.src).filter((tag) => tag);
};
var createFileFromBlobs = ({ blobsArray, fileName, mimeType }) => {
  const concatenatedBlob = new Blob(blobsArray, { type: mimeType });
  return new File([concatenatedBlob], fileName, { type: concatenatedBlob.type });
};
var getExtensionFromMimeType = (mimeType) => {
  const match = mimeType.match(/\/([^/;]+)/);
  return match && match[1];
};
var getRecordedMediaTypeFromMimeType = (mimeType) => {
  const match = mimeType.match(/^(audio|video)\/.*$/);
  return match && match[1];
};
var readFileAsArrayBuffer = (file) => new Promise((resolve, reject) => {
  const fileReader = new FileReader();
  fileReader.onload = () => {
    resolve(fileReader.result);
  };
  fileReader.onerror = () => {
    reject(fileReader.error);
  };
  fileReader.readAsArrayBuffer(file);
});

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentSelector.js
var import_react273 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/icons.js
var import_react34 = __toESM(require_react());
var LoadingIndicatorIcon = ({ size = 20 }) => {
  const id3 = (0, import_react34.useMemo)(() => nanoid(), []);
  return import_react34.default.createElement(
    "div",
    { className: "str-chat__loading-indicator" },
    import_react34.default.createElement(
      "svg",
      { "data-testid": "loading-indicator", height: size, viewBox: "0 0 30 30", width: size, xmlns: "http://www.w3.org/2000/svg" },
      import_react34.default.createElement(
        "defs",
        null,
        import_react34.default.createElement(
          "linearGradient",
          { id: `${id3}-linear-gradient`, x1: "50%", x2: "50%", y1: "0%", y2: "100%" },
          import_react34.default.createElement("stop", { offset: "0%", stopColor: "#FFF", stopOpacity: "0" }),
          import_react34.default.createElement("stop", { "data-testid": "stop-color", offset: "100%", stopOpacity: "1" })
        )
      ),
      import_react34.default.createElement("path", { d: "M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z", fill: `url(#${id3}-linear-gradient)`, fillRule: "evenodd" })
    )
  );
};
var UploadIcon = () => {
  const { t: t2 } = useTranslationContext("UploadIcon");
  return import_react34.default.createElement(
    "svg",
    { "data-testid": "attach-icon", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react34.default.createElement("title", null, t2("Attach files")),
    import_react34.default.createElement(
      "g",
      { clipPath: "url(#clip0_10878_5)" },
      import_react34.default.createElement("path", { d: "M12.9997 6.99993L10.9997 6.99993L10.9997 10.9999L6.99972 10.9999L6.99972 12.9999L10.9997 12.9999L10.9997 16.9999L12.9997 16.9999L12.9997 12.9999L16.9997 12.9999L16.9997 10.9999L12.9997 10.9999L12.9997 6.99993ZM11.9997 1.99992C6.47972 1.99992 1.99972 6.47993 1.99972 11.9999C1.99972 17.5199 6.47972 21.9999 11.9997 21.9999C17.5197 21.9999 21.9997 17.5199 21.9997 11.9999C21.9997 6.47993 17.5197 1.99992 11.9997 1.99992ZM11.9997 19.9999C7.58972 19.9999 3.99972 16.4099 3.99972 11.9999C3.99972 7.58993 7.58972 3.99993 11.9997 3.99993C16.4097 3.99993 19.9997 7.58993 19.9997 11.9999C19.9997 16.4099 16.4097 19.9999 11.9997 19.9999Z", fill: "black" })
    ),
    import_react34.default.createElement(
      "defs",
      null,
      import_react34.default.createElement(
        "clipPath",
        { id: "clip0_10878_5" },
        import_react34.default.createElement("rect", { fill: "white", height: "24", width: "24" })
      )
    )
  );
};
var CloseIcon = () => import_react34.default.createElement(
  "svg",
  { "data-testid": "close-no-outline", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react34.default.createElement("path", { d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z", fill: "black" })
);
var RetryIcon = () => import_react34.default.createElement(
  "svg",
  { "data-testid": "retry", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react34.default.createElement("path", { d: "M17.6449 6.35C16.1949 4.9 14.2049 4 11.9949 4C7.57488 4 4.00488 7.58 4.00488 12C4.00488 16.42 7.57488 20 11.9949 20C15.7249 20 18.8349 17.45 19.7249 14H17.6449C16.8249 16.33 14.6049 18 11.9949 18C8.68488 18 5.99488 15.31 5.99488 12C5.99488 8.69 8.68488 6 11.9949 6C13.6549 6 15.1349 6.69 16.2149 7.78L12.9949 11H19.9949V4L17.6449 6.35Z", fill: "black" })
);
var DownloadIcon2 = () => import_react34.default.createElement(
  "svg",
  { "data-testid": "download", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react34.default.createElement("path", { d: "M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z", fill: "black" })
);
var LinkIcon = () => import_react34.default.createElement(
  "svg",
  { fill: "none", height: "11", viewBox: "0 0 20 11", width: "20", xmlns: "http://www.w3.org/2000/svg" },
  import_react34.default.createElement("path", { clipRule: "evenodd", d: "M1.9 5.5C1.9 3.79 3.29 2.4 5 2.4H8.05C8.57467 2.4 9 1.97467 9 1.45C9 0.925329 8.57467 0.5 8.05 0.5H5C2.24 0.5 0 2.74 0 5.5C0 8.26 2.24 10.5 5 10.5H8.05C8.57467 10.5 9 10.0747 9 9.55C9 9.02533 8.57467 8.6 8.05 8.6H5C3.29 8.6 1.9 7.21 1.9 5.5ZM6 5.5C6 6.05228 6.44772 6.5 7 6.5H13C13.5523 6.5 14 6.05228 14 5.5C14 4.94772 13.5523 4.5 13 4.5H7C6.44772 4.5 6 4.94772 6 5.5ZM15 0.5H11.95C11.4253 0.5 11 0.925329 11 1.45C11 1.97467 11.4253 2.4 11.95 2.4H15C16.71 2.4 18.1 3.79 18.1 5.5C18.1 7.21 16.71 8.6 15 8.6H11.95C11.4253 8.6 11 9.02533 11 9.55C11 10.0747 11.4253 10.5 11.95 10.5H15C17.76 10.5 20 8.26 20 5.5C20 2.74 17.76 0.5 15 0.5Z", fill: "#005DFF", fillRule: "evenodd" })
);
var SendIcon = () => {
  const { t: t2 } = useTranslationContext("SendButton");
  return import_react34.default.createElement(
    "svg",
    { "data-testid": "send", fill: "currentColor", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react34.default.createElement("title", null, t2("Send")),
    import_react34.default.createElement("path", { d: "M4.00952 22L24 12L4.00952 2L4 9.77778L18.2857 12L4 14.2222L4.00952 22Z" })
  );
};
var MicIcon = () => import_react34.default.createElement(
  "svg",
  { fill: "currentColor", viewBox: "0 0 14 20", xmlns: "http://www.w3.org/2000/svg" },
  import_react34.default.createElement("path", { d: "M7 12.5C8.66 12.5 10 11.16 10 9.5V3.5C10 1.84 8.66 0.5 7 0.5C5.34 0.5 4 1.84 4 3.5V9.5C4 11.16 5.34 12.5 7 12.5Z" }),
  import_react34.default.createElement("path", { d: "M12 9.5C12 12.26 9.76 14.5 7 14.5C4.24 14.5 2 12.26 2 9.5H0C0 13.03 2.61 15.93 6 16.42V19.5H8V16.42C11.39 15.93 14 13.03 14 9.5H12Z" })
);
var BinIcon = () => import_react34.default.createElement(
  "svg",
  { fill: "currentColor", viewBox: "0 0 32 32", xmlns: "http://www.w3.org/2000/svg" },
  import_react34.default.createElement("path", { d: "M8.00033 25.3333C8.00033 26.8 9.20033 28 10.667 28H21.3337C22.8003 28 24.0003 26.8 24.0003 25.3333V12C24.0003 10.5333 22.8003 9.33333 21.3337 9.33333H10.667C9.20033 9.33333 8.00033 10.5333 8.00033 12V25.3333ZM24.0003 5.33333H20.667L19.7203 4.38667C19.4803 4.14667 19.1337 4 18.787 4H13.2137C12.867 4 12.5203 4.14667 12.2803 4.38667L11.3337 5.33333H8.00033C7.26699 5.33333 6.66699 5.93333 6.66699 6.66667C6.66699 7.4 7.26699 8 8.00033 8H24.0003C24.7337 8 25.3337 7.4 25.3337 6.66667C25.3337 5.93333 24.7337 5.33333 24.0003 5.33333Z" })
);
var PauseIcon2 = () => import_react34.default.createElement(
  "svg",
  { "data-testid": "str-chat__pause-icon", fill: "currentColor", viewBox: "0 0 16 20", xmlns: "http://www.w3.org/2000/svg" },
  import_react34.default.createElement("path", { d: "M0 19.3333H5.33333V0.666626H0V19.3333ZM10.6667 0.666626V19.3333H16V0.666626H10.6667Z" })
);
var PlayIcon = () => import_react34.default.createElement(
  "svg",
  { "data-testid": "str-chat__play-icon", fill: "currentColor", viewBox: "0 0 14 18", xmlns: "http://www.w3.org/2000/svg" },
  import_react34.default.createElement("path", { d: "M0.236328 2.09338V15.9067C0.236328 16.9601 1.39633 17.6001 2.28966 17.0267L13.143 10.1201C13.9697 9.60005 13.9697 8.40005 13.143 7.86672L2.28966 0.973385C1.39633 0.400051 0.236328 1.04005 0.236328 2.09338Z" })
);
var CheckSignIcon = () => import_react34.default.createElement(
  "svg",
  { fill: "currentColor", viewBox: "0 0 18 14", xmlns: "http://www.w3.org/2000/svg" },
  import_react34.default.createElement("path", { d: "M5.79457 10.875L2.32457 7.40502C1.93457 7.01502 1.30457 7.01502 0.91457 7.40502C0.52457 7.79502 0.52457 8.42502 0.91457 8.81502L5.09457 12.995C5.48457 13.385 6.11457 13.385 6.50457 12.995L17.0846 2.41502C17.4746 2.02502 17.4746 1.39502 17.0846 1.00502C16.6946 0.615024 16.0646 0.615024 15.6746 1.00502L5.79457 10.875Z" })
);

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageComposer.js
var import_react260 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Threads/ThreadContext.js
var import_react35 = __toESM(require_react());
var ThreadContext = (0, import_react35.createContext)(void 0);
var useThreadContext = () => (0, import_react35.useContext)(ThreadContext);
var ThreadProvider = ({ children, thread }) => import_react35.default.createElement(
  ThreadContext.Provider,
  { value: thread },
  import_react35.default.createElement(Channel, { channel: thread == null ? void 0 : thread.channel }, children)
);

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadList.js
var import_react253 = __toESM(require_react());

// node_modules/@virtuoso.dev/react-urx/dist/react-urx.esm.js
var import_react36 = __toESM(require_react());

// node_modules/@virtuoso.dev/urx/dist/urx.esm.js
var PUBLISH = 0;
var SUBSCRIBE = 1;
var RESET = 2;
var VALUE = 4;
function compose(a2, b2) {
  return function(arg) {
    return a2(b2(arg));
  };
}
function thrush(arg, proc) {
  return proc(arg);
}
function curry2to1(proc, arg1) {
  return function(arg2) {
    return proc(arg1, arg2);
  };
}
function curry1to0(proc, arg) {
  return function() {
    return proc(arg);
  };
}
function tap(arg, proc) {
  proc(arg);
  return arg;
}
function tup() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return args;
}
function call(proc) {
  proc();
}
function always(value) {
  return function() {
    return value;
  };
}
function joinProc() {
  for (var _len2 = arguments.length, procs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    procs[_key2] = arguments[_key2];
  }
  return function() {
    procs.map(call);
  };
}
function noop3() {
}
function subscribe(emitter, subscription) {
  return emitter(SUBSCRIBE, subscription);
}
function publish(publisher, value) {
  publisher(PUBLISH, value);
}
function reset(emitter) {
  emitter(RESET);
}
function getValue(depot) {
  return depot(VALUE);
}
function connect(emitter, publisher) {
  return subscribe(emitter, curry2to1(publisher, PUBLISH));
}
function handleNext(emitter, subscription) {
  var unsub = emitter(SUBSCRIBE, function(value) {
    unsub();
    subscription(value);
  });
  return unsub;
}
function stream() {
  var subscriptions = [];
  return function(action, arg) {
    switch (action) {
      case RESET:
        subscriptions.splice(0, subscriptions.length);
        return;
      case SUBSCRIBE:
        subscriptions.push(arg);
        return function() {
          var indexOf = subscriptions.indexOf(arg);
          if (indexOf > -1) {
            subscriptions.splice(indexOf, 1);
          }
        };
      case PUBLISH:
        subscriptions.slice().forEach(function(subscription) {
          subscription(arg);
        });
        return;
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function statefulStream(initial) {
  var value = initial;
  var innerSubject = stream();
  return function(action, arg) {
    switch (action) {
      case SUBSCRIBE:
        var subscription = arg;
        subscription(value);
        break;
      case PUBLISH:
        value = arg;
        break;
      case VALUE:
        return value;
    }
    return innerSubject(action, arg);
  };
}
function eventHandler(emitter) {
  var unsub;
  var currentSubscription;
  var cleanup = function cleanup2() {
    return unsub && unsub();
  };
  return function(action, subscription) {
    switch (action) {
      case SUBSCRIBE:
        if (subscription) {
          if (currentSubscription === subscription) {
            return;
          }
          cleanup();
          currentSubscription = subscription;
          unsub = subscribe(emitter, subscription);
          return unsub;
        } else {
          cleanup();
          return noop3;
        }
      case RESET:
        cleanup();
        currentSubscription = null;
        return;
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function streamFromEmitter(emitter) {
  return tap(stream(), function(stream2) {
    return connect(emitter, stream2);
  });
}
function statefulStreamFromEmitter(emitter, initial) {
  return tap(statefulStream(initial), function(stream2) {
    return connect(emitter, stream2);
  });
}
function combineOperators() {
  for (var _len = arguments.length, operators = new Array(_len), _key = 0; _key < _len; _key++) {
    operators[_key] = arguments[_key];
  }
  return function(subscriber) {
    return operators.reduceRight(thrush, subscriber);
  };
}
function pipe(source) {
  for (var _len2 = arguments.length, operators = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    operators[_key2 - 1] = arguments[_key2];
  }
  var project = combineOperators.apply(void 0, operators);
  return function(action, subscription) {
    switch (action) {
      case SUBSCRIBE:
        return subscribe(source, project(subscription));
      case RESET:
        reset(source);
        return;
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function defaultComparator(previous3, next) {
  return previous3 === next;
}
function distinctUntilChanged(comparator) {
  if (comparator === void 0) {
    comparator = defaultComparator;
  }
  var current;
  return function(done) {
    return function(next) {
      if (!comparator(current, next)) {
        current = next;
        done(next);
      }
    };
  };
}
function filter(predicate) {
  return function(done) {
    return function(value) {
      predicate(value) && done(value);
    };
  };
}
function map(project) {
  return function(done) {
    return compose(done, project);
  };
}
function mapTo(value) {
  return function(done) {
    return function() {
      return done(value);
    };
  };
}
function scan(scanner, initial) {
  return function(done) {
    return function(value) {
      return done(initial = scanner(initial, value));
    };
  };
}
function skip(times) {
  return function(done) {
    return function(value) {
      times > 0 ? times-- : done(value);
    };
  };
}
function throttleTime(interval) {
  var currentValue;
  var timeout;
  return function(done) {
    return function(value) {
      currentValue = value;
      if (timeout) {
        return;
      }
      timeout = setTimeout(function() {
        timeout = void 0;
        done(currentValue);
      }, interval);
    };
  };
}
function debounceTime(interval) {
  var currentValue;
  var timeout;
  return function(done) {
    return function(value) {
      currentValue = value;
      if (timeout) {
        clearTimeout(timeout);
      }
      timeout = setTimeout(function() {
        done(currentValue);
      }, interval);
    };
  };
}
function withLatestFrom() {
  for (var _len3 = arguments.length, sources = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    sources[_key3] = arguments[_key3];
  }
  var values2 = new Array(sources.length);
  var called = 0;
  var pendingCall = null;
  var allCalled = Math.pow(2, sources.length) - 1;
  sources.forEach(function(source, index4) {
    var bit = Math.pow(2, index4);
    subscribe(source, function(value) {
      var prevCalled = called;
      called = called | bit;
      values2[index4] = value;
      if (prevCalled !== allCalled && called === allCalled && pendingCall) {
        pendingCall();
        pendingCall = null;
      }
    });
  });
  return function(done) {
    return function(value) {
      var call2 = function call3() {
        return done([value].concat(values2));
      };
      if (called === allCalled) {
        call2();
      } else {
        pendingCall = call2;
      }
    };
  };
}
function merge() {
  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }
  return function(action, subscription) {
    switch (action) {
      case SUBSCRIBE:
        return joinProc.apply(void 0, sources.map(function(source) {
          return subscribe(source, subscription);
        }));
      case RESET:
        return;
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function duc(source, comparator) {
  if (comparator === void 0) {
    comparator = defaultComparator;
  }
  return pipe(source, distinctUntilChanged(comparator));
}
function combineLatest() {
  var innerSubject = stream();
  for (var _len2 = arguments.length, emitters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    emitters[_key2] = arguments[_key2];
  }
  var values2 = new Array(emitters.length);
  var called = 0;
  var allCalled = Math.pow(2, emitters.length) - 1;
  emitters.forEach(function(source, index4) {
    var bit = Math.pow(2, index4);
    subscribe(source, function(value) {
      values2[index4] = value;
      called = called | bit;
      if (called === allCalled) {
        publish(innerSubject, values2);
      }
    });
  });
  return function(action, subscription) {
    switch (action) {
      case SUBSCRIBE:
        if (called === allCalled) {
          subscription(values2);
        }
        return subscribe(innerSubject, subscription);
      case RESET:
        return reset(innerSubject);
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function system(constructor, dependencies, _temp) {
  if (dependencies === void 0) {
    dependencies = [];
  }
  var _ref = _temp === void 0 ? {
    singleton: true
  } : _temp, singleton = _ref.singleton;
  return {
    id: id(),
    constructor,
    dependencies,
    singleton
  };
}
var id = function id2() {
  return Symbol();
};
function init2(systemSpec) {
  var singletons = /* @__PURE__ */ new Map();
  var _init = function _init2(_ref2) {
    var id3 = _ref2.id, constructor = _ref2.constructor, dependencies = _ref2.dependencies, singleton = _ref2.singleton;
    if (singleton && singletons.has(id3)) {
      return singletons.get(id3);
    }
    var system2 = constructor(dependencies.map(function(e) {
      return _init2(e);
    }));
    if (singleton) {
      singletons.set(id3, system2);
    }
    return system2;
  };
  return _init(systemSpec);
}

// node_modules/@virtuoso.dev/react-urx/dist/react-urx.esm.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
function _createForOfIteratorHelperLoose(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (it2) return (it2 = it2.call(o2)).next.bind(it2);
  if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
    if (it2) o2 = it2;
    var i2 = 0;
    return function() {
      if (i2 >= o2.length) return {
        done: true
      };
      return {
        done: false,
        value: o2[i2++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var _excluded = ["children"];
function omit(keys3, obj) {
  var result = {};
  var index4 = {};
  var idx = 0;
  var len = keys3.length;
  while (idx < len) {
    index4[keys3[idx]] = 1;
    idx += 1;
  }
  for (var prop in obj) {
    if (!index4.hasOwnProperty(prop)) {
      result[prop] = obj[prop];
    }
  }
  return result;
}
var useIsomorphicLayoutEffect = typeof document !== "undefined" ? import_react36.useLayoutEffect : import_react36.useEffect;
function systemToComponent(systemSpec, map4, Root) {
  var requiredPropNames = Object.keys(map4.required || {});
  var optionalPropNames = Object.keys(map4.optional || {});
  var methodNames = Object.keys(map4.methods || {});
  var eventNames = Object.keys(map4.events || {});
  var Context = (0, import_react36.createContext)({});
  function applyPropsToSystem(system2, props) {
    if (system2["propsReady"]) {
      publish(system2["propsReady"], false);
    }
    for (var _iterator = _createForOfIteratorHelperLoose(requiredPropNames), _step; !(_step = _iterator()).done; ) {
      var requiredPropName = _step.value;
      var stream2 = system2[map4.required[requiredPropName]];
      publish(stream2, props[requiredPropName]);
    }
    for (var _iterator2 = _createForOfIteratorHelperLoose(optionalPropNames), _step2; !(_step2 = _iterator2()).done; ) {
      var optionalPropName = _step2.value;
      if (optionalPropName in props) {
        var _stream = system2[map4.optional[optionalPropName]];
        publish(_stream, props[optionalPropName]);
      }
    }
    if (system2["propsReady"]) {
      publish(system2["propsReady"], true);
    }
  }
  function buildMethods(system2) {
    return methodNames.reduce(function(acc, methodName) {
      acc[methodName] = function(value) {
        var stream2 = system2[map4.methods[methodName]];
        publish(stream2, value);
      };
      return acc;
    }, {});
  }
  function buildEventHandlers(system2) {
    return eventNames.reduce(function(handlers2, eventName) {
      handlers2[eventName] = eventHandler(system2[map4.events[eventName]]);
      return handlers2;
    }, {});
  }
  var Component2 = (0, import_react36.forwardRef)(function(propsWithChildren, ref) {
    var children = propsWithChildren.children, props = _objectWithoutPropertiesLoose(propsWithChildren, _excluded);
    var _useState = (0, import_react36.useState)(function() {
      return tap(init2(systemSpec), function(system3) {
        return applyPropsToSystem(system3, props);
      });
    }), system2 = _useState[0];
    var _useState2 = (0, import_react36.useState)(curry1to0(buildEventHandlers, system2)), handlers2 = _useState2[0];
    useIsomorphicLayoutEffect(function() {
      for (var _iterator3 = _createForOfIteratorHelperLoose(eventNames), _step3; !(_step3 = _iterator3()).done; ) {
        var eventName = _step3.value;
        if (eventName in props) {
          subscribe(handlers2[eventName], props[eventName]);
        }
      }
      return function() {
        Object.values(handlers2).map(reset);
      };
    }, [props, handlers2, system2]);
    useIsomorphicLayoutEffect(function() {
      applyPropsToSystem(system2, props);
    });
    (0, import_react36.useImperativeHandle)(ref, always(buildMethods(system2)));
    return (0, import_react36.createElement)(Context.Provider, {
      value: system2
    }, Root ? (0, import_react36.createElement)(Root, omit([].concat(requiredPropNames, optionalPropNames, eventNames), props), children) : children);
  });
  var usePublisher = function usePublisher2(key) {
    return (0, import_react36.useCallback)(curry2to1(publish, (0, import_react36.useContext)(Context)[key]), [key]);
  };
  var useEmitterValue = function useEmitterValue2(key) {
    var context = (0, import_react36.useContext)(Context);
    var source = context[key];
    var _useState3 = (0, import_react36.useState)(curry1to0(getValue, source)), value = _useState3[0], setValue = _useState3[1];
    useIsomorphicLayoutEffect(function() {
      return subscribe(source, function(next) {
        if (next !== value) {
          setValue(always(next));
        }
      });
    }, [source, value]);
    return value;
  };
  var useEmitter = function useEmitter2(key, callback) {
    var context = (0, import_react36.useContext)(Context);
    var source = context[key];
    useIsomorphicLayoutEffect(function() {
      return subscribe(source, callback);
    }, [callback, source]);
  };
  return {
    Component: Component2,
    usePublisher,
    useEmitterValue,
    useEmitter
  };
}

// node_modules/react-virtuoso/dist/index.m.js
var n = __toESM(require_react());
var import_react37 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
function c() {
  return c = Object.assign || function(t2) {
    for (var e = 1; e < arguments.length; e++) {
      var n2 = arguments[e];
      for (var o2 in n2) Object.prototype.hasOwnProperty.call(n2, o2) && (t2[o2] = n2[o2]);
    }
    return t2;
  }, c.apply(this, arguments);
}
function m(t2, e) {
  if (null == t2) return {};
  var n2, o2, r2 = {}, i2 = Object.keys(t2);
  for (o2 = 0; o2 < i2.length; o2++) e.indexOf(n2 = i2[o2]) >= 0 || (r2[n2] = t2[n2]);
  return r2;
}
function d(t2, e) {
  (null == e || e > t2.length) && (e = t2.length);
  for (var n2 = 0, o2 = new Array(e); n2 < e; n2++) o2[n2] = t2[n2];
  return o2;
}
function f(t2, e) {
  var n2 = "undefined" != typeof Symbol && t2[Symbol.iterator] || t2["@@iterator"];
  if (n2) return (n2 = n2.call(t2)).next.bind(n2);
  if (Array.isArray(t2) || (n2 = function(t3, e2) {
    if (t3) {
      if ("string" == typeof t3) return d(t3, e2);
      var n3 = Object.prototype.toString.call(t3).slice(8, -1);
      return "Object" === n3 && t3.constructor && (n3 = t3.constructor.name), "Map" === n3 || "Set" === n3 ? Array.from(t3) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? d(t3, e2) : void 0;
    }
  }(t2)) || e && t2 && "number" == typeof t2.length) {
    n2 && (t2 = n2);
    var o2 = 0;
    return function() {
      return o2 >= t2.length ? { done: true } : { done: false, value: t2[o2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var p;
var h;
var g = "undefined" != typeof document ? import_react37.useLayoutEffect : import_react37.useEffect;
!function(t2) {
  t2[t2.DEBUG = 0] = "DEBUG", t2[t2.INFO = 1] = "INFO", t2[t2.WARN = 2] = "WARN", t2[t2.ERROR = 3] = "ERROR";
}(h || (h = {}));
var v = ((p = {})[h.DEBUG] = "debug", p[h.INFO] = "log", p[h.WARN] = "warn", p[h.ERROR] = "error", p);
var S = system(function() {
  var t2 = statefulStream(h.ERROR);
  return { log: statefulStream(function(n2, o2, r2) {
    var i2;
    void 0 === r2 && (r2 = h.INFO), r2 >= (null != (i2 = ("undefined" == typeof globalThis ? window : globalThis).VIRTUOSO_LOG_LEVEL) ? i2 : getValue(t2)) && console[v[r2]]("%creact-virtuoso: %c%s %o", "color: #0253b3; font-weight: bold", "color: initial", n2, o2);
  }), logLevel: t2 };
}, [], { singleton: true });
function I(t2, e) {
  void 0 === e && (e = true);
  var n2 = (0, import_react37.useRef)(null), o2 = function(t3) {
  };
  if ("undefined" != typeof ResizeObserver) {
    var r2 = new ResizeObserver(function(e2) {
      var n3 = e2[0].target;
      null !== n3.offsetParent && t2(n3);
    });
    o2 = function(t3) {
      t3 && e ? (r2.observe(t3), n2.current = t3) : (n2.current && r2.unobserve(n2.current), n2.current = null);
    };
  }
  return { ref: n2, callbackRef: o2 };
}
function C(t2, e) {
  return void 0 === e && (e = true), I(t2, e).callbackRef;
}
function T(t2, e, n2, o2, r2, i2, a2) {
  return I(function(n3) {
    for (var l2 = function(t3, e2, n4, o3) {
      var r3 = t3.length;
      if (0 === r3) return null;
      for (var i3 = [], a3 = 0; a3 < r3; a3++) {
        var l3 = t3.item(a3);
        if (l3 && void 0 !== l3.dataset.index) {
          var s3 = parseInt(l3.dataset.index), u4 = parseFloat(l3.dataset.knownSize), c3 = e2(l3, "offsetHeight");
          if (0 === c3 && o3("Zero-sized element, this should not happen", { child: l3 }, h.ERROR), c3 !== u4) {
            var m3 = i3[i3.length - 1];
            0 === i3.length || m3.size !== c3 || m3.endIndex !== s3 - 1 ? i3.push({ startIndex: s3, endIndex: s3, size: c3 }) : i3[i3.length - 1].endIndex++;
          }
        }
      }
      return i3;
    }(n3.children, e, 0, r2), s2 = n3.parentElement; !s2.dataset.virtuosoScroller; ) s2 = s2.parentElement;
    var u3 = "window" === s2.firstElementChild.dataset.viewportType, c2 = a2 ? a2.scrollTop : u3 ? window.pageYOffset || document.documentElement.scrollTop : s2.scrollTop, m2 = a2 ? a2.scrollHeight : u3 ? document.documentElement.scrollHeight : s2.scrollHeight, d2 = a2 ? a2.offsetHeight : u3 ? window.innerHeight : s2.offsetHeight;
    o2({ scrollTop: Math.max(c2, 0), scrollHeight: m2, viewportHeight: d2 }), null == i2 || i2(function(t3, e2, n4) {
      return "normal" === e2 || null != e2 && e2.endsWith("px") || n4("row-gap was not resolved to pixel value correctly", e2, h.WARN), "normal" === e2 ? 0 : parseInt(null != e2 ? e2 : "0", 10);
    }(0, getComputedStyle(n3).rowGap, r2)), null !== l2 && t2(l2);
  }, n2);
}
function w(t2, e) {
  return Math.round(t2.getBoundingClientRect()[e]);
}
function x(t2, e) {
  return Math.abs(t2 - e) < 1.01;
}
function b(t2, n2, o2, l2, s2) {
  void 0 === l2 && (l2 = noop3);
  var c2 = (0, import_react37.useRef)(null), m2 = (0, import_react37.useRef)(null), d2 = (0, import_react37.useRef)(null), f2 = (0, import_react37.useRef)(false), p2 = (0, import_react37.useCallback)(function(e) {
    var o3 = e.target, r2 = o3 === window || o3 === document, i2 = r2 ? window.pageYOffset || document.documentElement.scrollTop : o3.scrollTop, a2 = r2 ? document.documentElement.scrollHeight : o3.scrollHeight, l3 = r2 ? window.innerHeight : o3.offsetHeight, s3 = function() {
      t2({ scrollTop: Math.max(i2, 0), scrollHeight: a2, viewportHeight: l3 });
    };
    f2.current ? (0, import_react_dom2.flushSync)(s3) : s3(), f2.current = false, null !== m2.current && (i2 === m2.current || i2 <= 0 || i2 === a2 - l3) && (m2.current = null, n2(true), d2.current && (clearTimeout(d2.current), d2.current = null));
  }, [t2, n2]);
  return (0, import_react37.useEffect)(function() {
    var t3 = s2 || c2.current;
    return l2(s2 || c2.current), p2({ target: t3 }), t3.addEventListener("scroll", p2, { passive: true }), function() {
      l2(null), t3.removeEventListener("scroll", p2);
    };
  }, [c2, p2, o2, l2, s2]), { scrollerRef: c2, scrollByCallback: function(t3) {
    f2.current = true, c2.current.scrollBy(t3);
  }, scrollToCallback: function(e) {
    var o3 = c2.current;
    if (o3 && (!("offsetHeight" in o3) || 0 !== o3.offsetHeight)) {
      var r2, i2, a2, l3 = "smooth" === e.behavior;
      if (o3 === window ? (i2 = Math.max(w(document.documentElement, "height"), document.documentElement.scrollHeight), r2 = window.innerHeight, a2 = document.documentElement.scrollTop) : (i2 = o3.scrollHeight, r2 = w(o3, "height"), a2 = o3.scrollTop), e.top = Math.ceil(Math.max(Math.min(i2 - r2, e.top), 0)), x(r2, i2) || e.top === a2) return t2({ scrollTop: a2, scrollHeight: i2, viewportHeight: r2 }), void (l3 && n2(true));
      l3 ? (m2.current = e.top, d2.current && clearTimeout(d2.current), d2.current = setTimeout(function() {
        d2.current = null, m2.current = null, n2(true);
      }, 1e3)) : m2.current = null, o3.scrollTo(e);
    }
  } };
}
var y = system(function() {
  var t2 = stream(), n2 = stream(), o2 = statefulStream(0), r2 = stream(), i2 = statefulStream(0), a2 = stream(), l2 = stream(), s2 = statefulStream(0), u3 = statefulStream(0), c2 = statefulStream(0), m2 = statefulStream(0), d2 = stream(), f2 = stream(), p2 = statefulStream(false), h2 = statefulStream(false);
  return connect(pipe(t2, map(function(t3) {
    return t3.scrollTop;
  })), n2), connect(pipe(t2, map(function(t3) {
    return t3.scrollHeight;
  })), l2), connect(n2, i2), { scrollContainerState: t2, scrollTop: n2, viewportHeight: a2, headerHeight: s2, fixedHeaderHeight: u3, fixedFooterHeight: c2, footerHeight: m2, scrollHeight: l2, smoothScrollTargetReached: r2, react18ConcurrentRendering: h2, scrollTo: d2, scrollBy: f2, statefulScrollTop: i2, deviation: o2, scrollingInProgress: p2 };
}, [], { singleton: true });
var H = { lvl: 0 };
function E(t2, e, n2, o2, r2) {
  return void 0 === o2 && (o2 = H), void 0 === r2 && (r2 = H), { k: t2, v: e, lvl: n2, l: o2, r: r2 };
}
function R(t2) {
  return t2 === H;
}
function L() {
  return H;
}
function k(t2, e) {
  if (R(t2)) return H;
  var n2 = t2.k, o2 = t2.l, r2 = t2.r;
  if (e === n2) {
    if (R(o2)) return r2;
    if (R(r2)) return o2;
    var i2 = O(o2);
    return A(V(t2, { k: i2[0], v: i2[1], l: M(o2) }));
  }
  return A(V(t2, e < n2 ? { l: k(o2, e) } : { r: k(r2, e) }));
}
function F(t2, e, n2) {
  if (void 0 === n2 && (n2 = "k"), R(t2)) return [-Infinity, void 0];
  if (t2[n2] === e) return [t2.k, t2.v];
  if (t2[n2] < e) {
    var o2 = F(t2.r, e, n2);
    return -Infinity === o2[0] ? [t2.k, t2.v] : o2;
  }
  return F(t2.l, e, n2);
}
function z(t2, e, n2) {
  return R(t2) ? E(e, n2, 1) : e === t2.k ? V(t2, { k: e, v: n2 }) : function(t3) {
    return D(G(t3));
  }(V(t2, e < t2.k ? { l: z(t2.l, e, n2) } : { r: z(t2.r, e, n2) }));
}
function B(t2, e, n2) {
  if (R(t2)) return [];
  var o2 = t2.k, r2 = t2.v, i2 = t2.r, a2 = [];
  return o2 > e && (a2 = a2.concat(B(t2.l, e, n2))), o2 >= e && o2 <= n2 && a2.push({ k: o2, v: r2 }), o2 <= n2 && (a2 = a2.concat(B(i2, e, n2))), a2;
}
function P(t2) {
  return R(t2) ? [] : [].concat(P(t2.l), [{ k: t2.k, v: t2.v }], P(t2.r));
}
function O(t2) {
  return R(t2.r) ? [t2.k, t2.v] : O(t2.r);
}
function M(t2) {
  return R(t2.r) ? t2.l : A(V(t2, { r: M(t2.r) }));
}
function V(t2, e) {
  return E(void 0 !== e.k ? e.k : t2.k, void 0 !== e.v ? e.v : t2.v, void 0 !== e.lvl ? e.lvl : t2.lvl, void 0 !== e.l ? e.l : t2.l, void 0 !== e.r ? e.r : t2.r);
}
function U(t2) {
  return R(t2) || t2.lvl > t2.r.lvl;
}
function A(t2) {
  var e = t2.l, n2 = t2.r, o2 = t2.lvl;
  if (n2.lvl >= o2 - 1 && e.lvl >= o2 - 1) return t2;
  if (o2 > n2.lvl + 1) {
    if (U(e)) return G(V(t2, { lvl: o2 - 1 }));
    if (R(e) || R(e.r)) throw new Error("Unexpected empty nodes");
    return V(e.r, { l: V(e, { r: e.r.l }), r: V(t2, { l: e.r.r, lvl: o2 - 1 }), lvl: o2 });
  }
  if (U(t2)) return D(V(t2, { lvl: o2 - 1 }));
  if (R(n2) || R(n2.l)) throw new Error("Unexpected empty nodes");
  var r2 = n2.l, i2 = U(r2) ? n2.lvl - 1 : n2.lvl;
  return V(r2, { l: V(t2, { r: r2.l, lvl: o2 - 1 }), r: D(V(n2, { l: r2.r, lvl: i2 })), lvl: r2.lvl + 1 });
}
function W(t2, e, n2) {
  return R(t2) ? [] : N(B(t2, F(t2, e)[0], n2), function(t3) {
    return { index: t3.k, value: t3.v };
  });
}
function N(t2, e) {
  var n2 = t2.length;
  if (0 === n2) return [];
  for (var o2 = e(t2[0]), r2 = o2.index, i2 = o2.value, a2 = [], l2 = 1; l2 < n2; l2++) {
    var s2 = e(t2[l2]), u3 = s2.index, c2 = s2.value;
    a2.push({ start: r2, end: u3 - 1, value: i2 }), r2 = u3, i2 = c2;
  }
  return a2.push({ start: r2, end: Infinity, value: i2 }), a2;
}
function D(t2) {
  var e = t2.r, n2 = t2.lvl;
  return R(e) || R(e.r) || e.lvl !== n2 || e.r.lvl !== n2 ? t2 : V(e, { l: V(t2, { r: e.l }), lvl: n2 + 1 });
}
function G(t2) {
  var e = t2.l;
  return R(e) || e.lvl !== t2.lvl ? t2 : V(e, { r: V(t2, { l: e.r }) });
}
function _(t2, e, n2, o2) {
  void 0 === o2 && (o2 = 0);
  for (var r2 = t2.length - 1; o2 <= r2; ) {
    var i2 = Math.floor((o2 + r2) / 2), a2 = n2(t2[i2], e);
    if (0 === a2) return i2;
    if (-1 === a2) {
      if (r2 - o2 < 2) return i2 - 1;
      r2 = i2 - 1;
    } else {
      if (r2 === o2) return i2;
      o2 = i2 + 1;
    }
  }
  throw new Error("Failed binary finding record in array - " + t2.join(",") + ", searched for " + e);
}
function j(t2, e, n2) {
  return t2[_(t2, e, n2)];
}
var K = system(function() {
  return { recalcInProgress: statefulStream(false) };
}, [], { singleton: true });
function Y(t2) {
  var e = t2.size, n2 = t2.startIndex, o2 = t2.endIndex;
  return function(t3) {
    return t3.start === n2 && (t3.end === o2 || Infinity === t3.end) && t3.value === e;
  };
}
function q(t2, e) {
  var n2 = t2.index;
  return e === n2 ? 0 : e < n2 ? -1 : 1;
}
function Z(t2, e) {
  var n2 = t2.offset;
  return e === n2 ? 0 : e < n2 ? -1 : 1;
}
function J(t2) {
  return { index: t2.index, value: t2 };
}
function $(t2, e, n2, o2) {
  var r2 = t2, i2 = 0, a2 = 0, l2 = 0, s2 = 0;
  if (0 !== e) {
    l2 = r2[s2 = _(r2, e - 1, q)].offset;
    var u3 = F(n2, e - 1);
    i2 = u3[0], a2 = u3[1], r2.length && r2[s2].size === F(n2, e)[1] && (s2 -= 1), r2 = r2.slice(0, s2 + 1);
  } else r2 = [];
  for (var c2, m2 = f(W(n2, e, Infinity)); !(c2 = m2()).done; ) {
    var d2 = c2.value, p2 = d2.start, h2 = d2.value, g2 = p2 - i2, v2 = g2 * a2 + l2 + g2 * o2;
    r2.push({ offset: v2, size: h2, index: p2 }), i2 = p2, l2 = v2, a2 = h2;
  }
  return { offsetTree: r2, lastIndex: i2, lastOffset: l2, lastSize: a2 };
}
function Q(t2, e) {
  var n2 = e[0], o2 = e[1], r2 = e[3];
  n2.length > 0 && (0, e[2])("received item sizes", n2, h.DEBUG);
  var i2 = t2.sizeTree, a2 = i2, l2 = 0;
  if (o2.length > 0 && R(i2) && 2 === n2.length) {
    var s2 = n2[0].size, u3 = n2[1].size;
    a2 = o2.reduce(function(t3, e2) {
      return z(z(t3, e2, s2), e2 + 1, u3);
    }, a2);
  } else {
    var c2 = function(t3, e2) {
      for (var n3, o3 = R(t3) ? 0 : Infinity, r3 = f(e2); !(n3 = r3()).done; ) {
        var i3 = n3.value, a3 = i3.size, l3 = i3.startIndex, s3 = i3.endIndex;
        if (o3 = Math.min(o3, l3), R(t3)) t3 = z(t3, 0, a3);
        else {
          var u4 = W(t3, l3 - 1, s3 + 1);
          if (!u4.some(Y(i3))) {
            for (var c3, m3 = false, d3 = false, p2 = f(u4); !(c3 = p2()).done; ) {
              var h2 = c3.value, g2 = h2.start, v2 = h2.end, S2 = h2.value;
              m3 ? (s3 >= g2 || a3 === S2) && (t3 = k(t3, g2)) : (d3 = S2 !== a3, m3 = true), v2 > s3 && s3 >= g2 && S2 !== a3 && (t3 = z(t3, s3 + 1, S2));
            }
            d3 && (t3 = z(t3, l3, a3));
          }
        }
      }
      return [t3, o3];
    }(a2, n2);
    a2 = c2[0], l2 = c2[1];
  }
  if (a2 === i2) return t2;
  var m2 = $(t2.offsetTree, l2, a2, r2), d2 = m2.offsetTree;
  return { sizeTree: a2, offsetTree: d2, lastIndex: m2.lastIndex, lastOffset: m2.lastOffset, lastSize: m2.lastSize, groupOffsetTree: o2.reduce(function(t3, e2) {
    return z(t3, e2, X(e2, d2, r2));
  }, L()), groupIndices: o2 };
}
function X(t2, e, n2) {
  if (0 === e.length) return 0;
  var o2 = j(e, t2, q), r2 = t2 - o2.index, i2 = o2.size * r2 + (r2 - 1) * n2 + o2.offset;
  return i2 > 0 ? i2 + n2 : i2;
}
function tt2(t2, e, n2) {
  if (function(t3) {
    return void 0 !== t3.groupIndex;
  }(t2)) return e.groupIndices[t2.groupIndex] + 1;
  var o2 = et("LAST" === t2.index ? n2 : t2.index, e);
  return Math.max(0, o2, Math.min(n2, o2));
}
function et(t2, e) {
  if (!nt(e)) return t2;
  for (var n2 = 0; e.groupIndices[n2] <= t2 + n2; ) n2++;
  return t2 + n2;
}
function nt(t2) {
  return !R(t2.groupOffsetTree);
}
var ot = { offsetHeight: "height", offsetWidth: "width" };
var rt = system(function(t2) {
  var n2 = t2[0].log, o2 = t2[1].recalcInProgress, r2 = stream(), i2 = stream(), a2 = statefulStreamFromEmitter(i2, 0), l2 = stream(), s2 = stream(), u3 = statefulStream(0), m2 = statefulStream([]), d2 = statefulStream(void 0), f2 = statefulStream(void 0), p2 = statefulStream(function(t3, e) {
    return w(t3, ot[e]);
  }), g2 = statefulStream(void 0), v2 = statefulStream(0), S2 = { offsetTree: [], sizeTree: L(), groupOffsetTree: L(), lastIndex: 0, lastOffset: 0, lastSize: 0, groupIndices: [] }, I2 = statefulStreamFromEmitter(pipe(r2, withLatestFrom(m2, n2, v2), scan(Q, S2), distinctUntilChanged()), S2);
  connect(pipe(m2, filter(function(t3) {
    return t3.length > 0;
  }), withLatestFrom(I2, v2), map(function(t3) {
    var e = t3[0], n3 = t3[1], o3 = t3[2], r3 = e.reduce(function(t4, e2, r4) {
      return z(t4, e2, X(e2, n3.offsetTree, o3) || r4);
    }, L());
    return c({}, n3, { groupIndices: e, groupOffsetTree: r3 });
  })), I2), connect(pipe(i2, withLatestFrom(I2), filter(function(t3) {
    return t3[0] < t3[1].lastIndex;
  }), map(function(t3) {
    var e = t3[1];
    return [{ startIndex: t3[0], endIndex: e.lastIndex, size: e.lastSize }];
  })), r2), connect(d2, f2);
  var C2 = statefulStreamFromEmitter(pipe(d2, map(function(t3) {
    return void 0 === t3;
  })), true);
  connect(pipe(f2, filter(function(t3) {
    return void 0 !== t3 && R(getValue(I2).sizeTree);
  }), map(function(t3) {
    return [{ startIndex: 0, endIndex: 0, size: t3 }];
  })), r2);
  var T2 = streamFromEmitter(pipe(r2, withLatestFrom(I2), scan(function(t3, e) {
    var n3 = e[1];
    return { changed: n3 !== t3.sizes, sizes: n3 };
  }, { changed: false, sizes: S2 }), map(function(t3) {
    return t3.changed;
  })));
  subscribe(pipe(u3, scan(function(t3, e) {
    return { diff: t3.prev - e, prev: e };
  }, { diff: 0, prev: 0 }), map(function(t3) {
    return t3.diff;
  })), function(t3) {
    t3 > 0 ? (publish(o2, true), publish(l2, t3)) : t3 < 0 && publish(s2, t3);
  }), subscribe(pipe(u3, withLatestFrom(n2)), function(t3) {
    t3[0] < 0 && (0, t3[1])("`firstItemIndex` prop should not be set to less than zero. If you don't know the total count, just use a very high value", { firstItemIndex: u3 }, h.ERROR);
  });
  var x2 = streamFromEmitter(l2);
  connect(pipe(l2, withLatestFrom(I2), map(function(t3) {
    var e = t3[0], n3 = t3[1];
    if (n3.groupIndices.length > 0) throw new Error("Virtuoso: prepending items does not work with groups");
    return P(n3.sizeTree).reduce(function(t4, n4) {
      var o3 = n4.k, r3 = n4.v;
      return { ranges: [].concat(t4.ranges, [{ startIndex: t4.prevIndex, endIndex: o3 + e - 1, size: t4.prevSize }]), prevIndex: o3 + e, prevSize: r3 };
    }, { ranges: [], prevIndex: 0, prevSize: n3.lastSize }).ranges;
  })), r2);
  var b2 = streamFromEmitter(pipe(s2, withLatestFrom(I2, v2), map(function(t3) {
    return X(-t3[0], t3[1].offsetTree, t3[2]);
  })));
  return connect(pipe(s2, withLatestFrom(I2, v2), map(function(t3) {
    var e = t3[0], n3 = t3[1], o3 = t3[2];
    if (n3.groupIndices.length > 0) throw new Error("Virtuoso: shifting items does not work with groups");
    var r3 = P(n3.sizeTree).reduce(function(t4, n4) {
      var o4 = n4.v;
      return z(t4, Math.max(0, n4.k + e), o4);
    }, L());
    return c({}, n3, { sizeTree: r3 }, $(n3.offsetTree, 0, r3, o3));
  })), I2), { data: g2, totalCount: i2, sizeRanges: r2, groupIndices: m2, defaultItemSize: f2, fixedItemSize: d2, unshiftWith: l2, shiftWith: s2, shiftWithOffset: b2, beforeUnshiftWith: x2, firstItemIndex: u3, gap: v2, sizes: I2, listRefresh: T2, statefulTotalCount: a2, trackItemSizes: C2, itemSize: p2 };
}, tup(S, K), { singleton: true });
var it = "undefined" != typeof document && "scrollBehavior" in document.documentElement.style;
function at(t2) {
  var e = "number" == typeof t2 ? { index: t2 } : t2;
  return e.align || (e.align = "start"), e.behavior && it || (e.behavior = "auto"), e.offset || (e.offset = 0), e;
}
var lt = system(function(t2) {
  var n2 = t2[0], o2 = n2.sizes, r2 = n2.totalCount, i2 = n2.listRefresh, a2 = n2.gap, l2 = t2[1], s2 = l2.scrollingInProgress, u3 = l2.viewportHeight, c2 = l2.scrollTo, m2 = l2.smoothScrollTargetReached, d2 = l2.headerHeight, f2 = l2.footerHeight, p2 = l2.fixedHeaderHeight, g2 = l2.fixedFooterHeight, v2 = t2[2].log, S2 = stream(), I2 = statefulStream(0), C2 = null, T2 = null, w2 = null;
  function x2() {
    C2 && (C2(), C2 = null), w2 && (w2(), w2 = null), T2 && (clearTimeout(T2), T2 = null), publish(s2, false);
  }
  return connect(pipe(S2, withLatestFrom(o2, u3, r2, I2, d2, f2, v2), withLatestFrom(a2, p2, g2), map(function(t3) {
    var n3 = t3[0], o3 = n3[0], r3 = n3[1], a3 = n3[2], l3 = n3[3], u4 = n3[4], c3 = n3[5], d3 = n3[6], f3 = n3[7], p3 = t3[1], g3 = t3[2], v3 = t3[3], I3 = at(o3), b2 = I3.align, y2 = I3.behavior, H2 = I3.offset, E2 = l3 - 1, R2 = tt2(I3, r3, E2), L2 = X(R2, r3.offsetTree, p3) + c3;
    "end" === b2 ? (L2 += g3 + F(r3.sizeTree, R2)[1] - a3 + v3, R2 === E2 && (L2 += d3)) : "center" === b2 ? L2 += (g3 + F(r3.sizeTree, R2)[1] - a3 + v3) / 2 : L2 -= u4, H2 && (L2 += H2);
    var k2 = function(t4) {
      x2(), t4 ? (f3("retrying to scroll to", { location: o3 }, h.DEBUG), publish(S2, o3)) : f3("list did not change, scroll successful", {}, h.DEBUG);
    };
    if (x2(), "smooth" === y2) {
      var z2 = false;
      w2 = subscribe(i2, function(t4) {
        z2 = z2 || t4;
      }), C2 = handleNext(m2, function() {
        k2(z2);
      });
    } else C2 = handleNext(pipe(i2, function(t4) {
      var e = setTimeout(function() {
        t4(false);
      }, 150);
      return function(n4) {
        n4 && (t4(true), clearTimeout(e));
      };
    }), k2);
    return T2 = setTimeout(function() {
      x2();
    }, 1200), publish(s2, true), f3("scrolling from index to", { index: R2, top: L2, behavior: y2 }, h.DEBUG), { top: L2, behavior: y2 };
  })), c2), { scrollToIndex: S2, topListHeight: I2 };
}, tup(rt, y, S), { singleton: true });
var st = "up";
var ut = { atBottom: false, notAtBottomBecause: "NOT_SHOWING_LAST_ITEM", state: { offsetBottom: 0, scrollTop: 0, viewportHeight: 0, scrollHeight: 0 } };
var ct = system(function(t2) {
  var n2 = t2[0], o2 = n2.scrollContainerState, r2 = n2.scrollTop, i2 = n2.viewportHeight, a2 = n2.headerHeight, l2 = n2.footerHeight, s2 = n2.scrollBy, u3 = statefulStream(false), c2 = statefulStream(true), m2 = stream(), d2 = stream(), f2 = statefulStream(4), p2 = statefulStream(0), h2 = statefulStreamFromEmitter(pipe(merge(pipe(duc(r2), skip(1), mapTo(true)), pipe(duc(r2), skip(1), mapTo(false), debounceTime(100))), distinctUntilChanged()), false), g2 = statefulStreamFromEmitter(pipe(merge(pipe(s2, mapTo(true)), pipe(s2, mapTo(false), debounceTime(200))), distinctUntilChanged()), false);
  connect(pipe(combineLatest(duc(r2), duc(p2)), map(function(t3) {
    return t3[0] <= t3[1];
  }), distinctUntilChanged()), c2), connect(pipe(c2, throttleTime(50)), d2);
  var v2 = streamFromEmitter(pipe(combineLatest(o2, duc(i2), duc(a2), duc(l2), duc(f2)), scan(function(t3, e) {
    var n3, o3, r3 = e[0], i3 = r3.scrollTop, a3 = r3.scrollHeight, l3 = e[1], s3 = { viewportHeight: l3, scrollTop: i3, scrollHeight: a3 };
    return i3 + l3 - a3 > -e[4] ? (i3 > t3.state.scrollTop ? (n3 = "SCROLLED_DOWN", o3 = t3.state.scrollTop - i3) : (n3 = "SIZE_DECREASED", o3 = t3.state.scrollTop - i3 || t3.scrollTopDelta), { atBottom: true, state: s3, atBottomBecause: n3, scrollTopDelta: o3 }) : { atBottom: false, notAtBottomBecause: s3.scrollHeight > t3.state.scrollHeight ? "SIZE_INCREASED" : l3 < t3.state.viewportHeight ? "VIEWPORT_HEIGHT_DECREASING" : i3 < t3.state.scrollTop ? "SCROLLING_UPWARDS" : "NOT_FULLY_SCROLLED_TO_LAST_ITEM_BOTTOM", state: s3 };
  }, ut), distinctUntilChanged(function(t3, e) {
    return t3 && t3.atBottom === e.atBottom;
  }))), S2 = statefulStreamFromEmitter(pipe(o2, scan(function(t3, e) {
    var n3 = e.scrollTop, o3 = e.scrollHeight, r3 = e.viewportHeight;
    return x(t3.scrollHeight, o3) ? { scrollTop: n3, scrollHeight: o3, jump: 0, changed: false } : t3.scrollTop !== n3 && o3 - (n3 + r3) < 1 ? { scrollHeight: o3, scrollTop: n3, jump: t3.scrollTop - n3, changed: true } : { scrollHeight: o3, scrollTop: n3, jump: 0, changed: true };
  }, { scrollHeight: 0, jump: 0, scrollTop: 0, changed: false }), filter(function(t3) {
    return t3.changed;
  }), map(function(t3) {
    return t3.jump;
  })), 0);
  connect(pipe(v2, map(function(t3) {
    return t3.atBottom;
  })), u3), connect(pipe(u3, throttleTime(50)), m2);
  var I2 = statefulStream("down");
  connect(pipe(o2, map(function(t3) {
    return t3.scrollTop;
  }), distinctUntilChanged(), scan(function(t3, n3) {
    return getValue(g2) ? { direction: t3.direction, prevScrollTop: n3 } : { direction: n3 < t3.prevScrollTop ? st : "down", prevScrollTop: n3 };
  }, { direction: "down", prevScrollTop: 0 }), map(function(t3) {
    return t3.direction;
  })), I2), connect(pipe(o2, throttleTime(50), mapTo("none")), I2);
  var C2 = statefulStream(0);
  return connect(pipe(h2, filter(function(t3) {
    return !t3;
  }), mapTo(0)), C2), connect(pipe(r2, throttleTime(100), withLatestFrom(h2), filter(function(t3) {
    return !!t3[1];
  }), scan(function(t3, e) {
    return [t3[1], e[0]];
  }, [0, 0]), map(function(t3) {
    return t3[1] - t3[0];
  })), C2), { isScrolling: h2, isAtTop: c2, isAtBottom: u3, atBottomState: v2, atTopStateChange: d2, atBottomStateChange: m2, scrollDirection: I2, atBottomThreshold: f2, atTopThreshold: p2, scrollVelocity: C2, lastJumpDueToItemResize: S2 };
}, tup(y));
var mt = system(function(t2) {
  var n2 = t2[0].log, o2 = statefulStream(false), r2 = streamFromEmitter(pipe(o2, filter(function(t3) {
    return t3;
  }), distinctUntilChanged()));
  return subscribe(o2, function(t3) {
    t3 && getValue(n2)("props updated", {}, h.DEBUG);
  }), { propsReady: o2, didMount: r2 };
}, tup(S), { singleton: true });
var dt = system(function(t2) {
  var n2 = t2[0], o2 = n2.sizes, r2 = n2.listRefresh, i2 = n2.defaultItemSize, a2 = t2[1].scrollTop, l2 = t2[2].scrollToIndex, s2 = t2[3].didMount, u3 = statefulStream(true), c2 = statefulStream(0);
  return connect(pipe(s2, withLatestFrom(c2), filter(function(t3) {
    return !!t3[1];
  }), mapTo(false)), u3), subscribe(pipe(combineLatest(r2, s2), withLatestFrom(u3, o2, i2), filter(function(t3) {
    var e = t3[1], n3 = t3[3];
    return t3[0][1] && (!R(t3[2].sizeTree) || void 0 !== n3) && !e;
  }), withLatestFrom(c2)), function(t3) {
    var n3 = t3[1];
    setTimeout(function() {
      handleNext(a2, function() {
        publish(u3, true);
      }), publish(l2, n3);
    });
  }), { scrolledToInitialItem: u3, initialTopMostItemIndex: c2 };
}, tup(rt, y, lt, mt), { singleton: true });
function ft(t2) {
  return !!t2 && ("smooth" === t2 ? "smooth" : "auto");
}
var pt = system(function(t2) {
  var n2 = t2[0], o2 = n2.totalCount, r2 = n2.listRefresh, i2 = t2[1], a2 = i2.isAtBottom, l2 = i2.atBottomState, s2 = t2[2].scrollToIndex, u3 = t2[3].scrolledToInitialItem, c2 = t2[4], m2 = c2.propsReady, d2 = c2.didMount, f2 = t2[5].log, p2 = t2[6].scrollingInProgress, g2 = statefulStream(false), v2 = stream(), S2 = null;
  function I2(t3) {
    publish(s2, { index: "LAST", align: "end", behavior: t3 });
  }
  function C2(t3) {
    var n3 = handleNext(l2, function(n4) {
      !t3 || n4.atBottom || "SIZE_INCREASED" !== n4.notAtBottomBecause || S2 || (getValue(f2)("scrolling to bottom due to increased size", {}, h.DEBUG), I2("auto"));
    });
    setTimeout(n3, 100);
  }
  return subscribe(pipe(combineLatest(pipe(duc(o2), skip(1)), d2), withLatestFrom(duc(g2), a2, u3, p2), map(function(t3) {
    var e = t3[0], n3 = e[0], o3 = e[1] && t3[3], r3 = "auto";
    return o3 && (r3 = function(t4, e2) {
      return "function" == typeof t4 ? ft(t4(e2)) : e2 && ft(t4);
    }(t3[1], t3[2] || t3[4]), o3 = o3 && !!r3), { totalCount: n3, shouldFollow: o3, followOutputBehavior: r3 };
  }), filter(function(t3) {
    return t3.shouldFollow;
  })), function(t3) {
    var n3 = t3.totalCount, o3 = t3.followOutputBehavior;
    S2 && (S2(), S2 = null), S2 = handleNext(r2, function() {
      getValue(f2)("following output to ", { totalCount: n3 }, h.DEBUG), I2(o3), S2 = null;
    });
  }), subscribe(pipe(combineLatest(duc(g2), o2, m2), filter(function(t3) {
    return t3[0] && t3[2];
  }), scan(function(t3, e) {
    var n3 = e[1];
    return { refreshed: t3.value === n3, value: n3 };
  }, { refreshed: false, value: 0 }), filter(function(t3) {
    return t3.refreshed;
  }), withLatestFrom(g2, o2)), function(t3) {
    C2(false !== t3[1]);
  }), subscribe(v2, function() {
    C2(false !== getValue(g2));
  }), subscribe(combineLatest(duc(g2), l2), function(t3) {
    var e = t3[1];
    t3[0] && !e.atBottom && "VIEWPORT_HEIGHT_DECREASING" === e.notAtBottomBecause && I2("auto");
  }), { followOutput: g2, autoscrollToBottom: v2 };
}, tup(rt, ct, lt, dt, mt, S, y));
function ht(t2) {
  return t2.reduce(function(t3, e) {
    return t3.groupIndices.push(t3.totalCount), t3.totalCount += e + 1, t3;
  }, { totalCount: 0, groupIndices: [] });
}
var gt = system(function(t2) {
  var n2 = t2[0], o2 = n2.totalCount, r2 = n2.groupIndices, i2 = n2.sizes, a2 = t2[1], l2 = a2.scrollTop, s2 = a2.headerHeight, u3 = stream(), c2 = stream(), m2 = streamFromEmitter(pipe(u3, map(ht)));
  return connect(pipe(m2, map(function(t3) {
    return t3.totalCount;
  })), o2), connect(pipe(m2, map(function(t3) {
    return t3.groupIndices;
  })), r2), connect(pipe(combineLatest(l2, i2, s2), filter(function(t3) {
    return nt(t3[1]);
  }), map(function(t3) {
    return F(t3[1].groupOffsetTree, Math.max(t3[0] - t3[2], 0), "v")[0];
  }), distinctUntilChanged(), map(function(t3) {
    return [t3];
  })), c2), { groupCounts: u3, topItemsIndexes: c2 };
}, tup(rt, y));
function vt(t2, e) {
  return !(!t2 || t2[0] !== e[0] || t2[1] !== e[1]);
}
function St(t2, e) {
  return !(!t2 || t2.startIndex !== e.startIndex || t2.endIndex !== e.endIndex);
}
function It(t2, e, n2) {
  return "number" == typeof t2 ? n2 === st && "top" === e || "down" === n2 && "bottom" === e ? t2 : 0 : n2 === st ? "top" === e ? t2.main : t2.reverse : "bottom" === e ? t2.main : t2.reverse;
}
function Ct(t2, e) {
  return "number" == typeof t2 ? t2 : t2[e] || 0;
}
var Tt = system(function(t2) {
  var n2 = t2[0], o2 = n2.scrollTop, r2 = n2.viewportHeight, i2 = n2.deviation, a2 = n2.headerHeight, l2 = n2.fixedHeaderHeight, s2 = stream(), u3 = statefulStream(0), c2 = statefulStream(0), m2 = statefulStream(0), d2 = statefulStreamFromEmitter(pipe(combineLatest(duc(o2), duc(r2), duc(a2), duc(s2, vt), duc(m2), duc(u3), duc(l2), duc(i2), duc(c2)), map(function(t3) {
    var e = t3[0], n3 = t3[1], o3 = t3[2], r3 = t3[3], i3 = r3[0], a3 = r3[1], l3 = t3[4], s3 = t3[6], u4 = t3[7], c3 = t3[8], m3 = e - u4, d3 = t3[5] + s3, f2 = Math.max(o3 - m3, 0), p2 = "none", h2 = Ct(c3, "top"), g2 = Ct(c3, "bottom");
    return i3 -= u4, a3 += o3 + s3, (i3 += o3 + s3) > e + d3 - h2 && (p2 = st), (a3 -= u4) < e - f2 + n3 + g2 && (p2 = "down"), "none" !== p2 ? [Math.max(m3 - o3 - It(l3, "top", p2) - h2, 0), m3 - f2 - s3 + n3 + It(l3, "bottom", p2) + g2] : null;
  }), filter(function(t3) {
    return null != t3;
  }), distinctUntilChanged(vt)), [0, 0]);
  return { listBoundary: s2, overscan: m2, topListHeight: u3, increaseViewportBy: c2, visibleRange: d2 };
}, tup(y), { singleton: true });
var wt = { items: [], topItems: [], offsetTop: 0, offsetBottom: 0, top: 0, bottom: 0, topListHeight: 0, totalCount: 0, firstItemIndex: 0 };
function xt(t2, e, n2) {
  if (0 === t2.length) return [];
  if (!nt(e)) return t2.map(function(t3) {
    return c({}, t3, { index: t3.index + n2, originalIndex: t3.index });
  });
  for (var o2, r2 = [], i2 = W(e.groupOffsetTree, t2[0].index, t2[t2.length - 1].index), a2 = void 0, l2 = 0, s2 = f(t2); !(o2 = s2()).done; ) {
    var u3 = o2.value;
    (!a2 || a2.end < u3.index) && (a2 = i2.shift(), l2 = e.groupIndices.indexOf(a2.start)), r2.push(c({}, u3.index === a2.start ? { type: "group", index: l2 } : { index: u3.index - (l2 + 1) + n2, groupIndex: l2 }, { size: u3.size, offset: u3.offset, originalIndex: u3.index, data: u3.data }));
  }
  return r2;
}
function bt(t2, e, n2, o2, r2, i2) {
  var a2 = 0, l2 = 0;
  if (t2.length > 0) {
    a2 = t2[0].offset;
    var s2 = t2[t2.length - 1];
    l2 = s2.offset + s2.size;
  }
  var u3 = n2 - r2.lastIndex, c2 = a2, m2 = r2.lastOffset + u3 * r2.lastSize + (u3 - 1) * o2 - l2;
  return { items: xt(t2, r2, i2), topItems: xt(e, r2, i2), topListHeight: e.reduce(function(t3, e2) {
    return e2.size + t3;
  }, 0), offsetTop: a2, offsetBottom: m2, top: c2, bottom: l2, totalCount: n2, firstItemIndex: i2 };
}
var yt = system(function(t2) {
  var n2 = t2[0], o2 = n2.sizes, r2 = n2.totalCount, i2 = n2.data, a2 = n2.firstItemIndex, l2 = n2.gap, s2 = t2[1], u3 = t2[2], m2 = u3.visibleRange, d2 = u3.listBoundary, p2 = u3.topListHeight, h2 = t2[3], g2 = h2.scrolledToInitialItem, v2 = h2.initialTopMostItemIndex, S2 = t2[4].topListHeight, I2 = t2[5], C2 = t2[6].didMount, T2 = t2[7].recalcInProgress, w2 = statefulStream([]), x2 = stream();
  connect(s2.topItemsIndexes, w2);
  var b2 = statefulStreamFromEmitter(pipe(combineLatest(C2, T2, duc(m2, vt), duc(r2), duc(o2), duc(v2), g2, duc(w2), duc(a2), duc(l2), i2), filter(function(t3) {
    return t3[0] && !t3[1];
  }), map(function(t3) {
    var n3 = t3[2], o3 = n3[0], r3 = n3[1], i3 = t3[3], a3 = t3[5], l3 = t3[6], s3 = t3[7], u4 = t3[8], m3 = t3[9], d3 = t3[10], p3 = t3[4], h3 = p3.sizeTree, g3 = p3.offsetTree;
    if (0 === i3 || 0 === o3 && 0 === r3) return c({}, wt, { totalCount: i3 });
    if (R(h3)) return bt(function(t4, e, n4) {
      if (nt(e)) {
        var o4 = et(t4, e);
        return [{ index: F(e.groupOffsetTree, o4)[0], size: 0, offset: 0 }, { index: o4, size: 0, offset: 0, data: n4 && n4[0] }];
      }
      return [{ index: t4, size: 0, offset: 0, data: n4 && n4[0] }];
    }(function(t4, e) {
      return "number" == typeof t4 ? t4 : "LAST" === t4.index ? e - 1 : t4.index;
    }(a3, i3), p3, d3), [], i3, m3, p3, u4);
    var v3 = [];
    if (s3.length > 0) for (var S3, I3 = s3[0], C3 = s3[s3.length - 1], T3 = 0, w3 = f(W(h3, I3, C3)); !(S3 = w3()).done; ) for (var x3 = S3.value, b3 = x3.value, y2 = Math.max(x3.start, I3), H2 = Math.min(x3.end, C3), E2 = y2; E2 <= H2; E2++) v3.push({ index: E2, size: b3, offset: T3, data: d3 && d3[E2] }), T3 += b3;
    if (!l3) return bt([], v3, i3, m3, p3, u4);
    var L2 = s3.length > 0 ? s3[s3.length - 1] + 1 : 0, k2 = function(t4, e, n4, o4) {
      return void 0 === o4 && (o4 = 0), o4 > 0 && (e = Math.max(e, j(t4, o4, q).offset)), N((i4 = n4, l4 = _(r4 = t4, e, a4 = Z), s4 = _(r4, i4, a4, l4), r4.slice(l4, s4 + 1)), J);
      var r4, i4, a4, l4, s4;
    }(g3, o3, r3, L2);
    if (0 === k2.length) return null;
    var z2 = i3 - 1;
    return bt(tap([], function(t4) {
      for (var e, n4 = f(k2); !(e = n4()).done; ) {
        var i4 = e.value, a4 = i4.value, l4 = a4.offset, s4 = i4.start, u5 = a4.size;
        if (a4.offset < o3) {
          var c2 = (s4 += Math.floor((o3 - a4.offset + m3) / (u5 + m3))) - i4.start;
          l4 += c2 * u5 + c2 * m3;
        }
        s4 < L2 && (l4 += (L2 - s4) * u5, s4 = L2);
        for (var p4 = Math.min(i4.end, z2), h4 = s4; h4 <= p4 && !(l4 >= r3); h4++) t4.push({ index: h4, size: u5, offset: l4, data: d3 && d3[h4] }), l4 += u5 + m3;
      }
    }), v3, i3, m3, p3, u4);
  }), filter(function(t3) {
    return null !== t3;
  }), distinctUntilChanged()), wt);
  return connect(pipe(i2, filter(function(t3) {
    return void 0 !== t3;
  }), map(function(t3) {
    return t3.length;
  })), r2), connect(pipe(b2, map(function(t3) {
    return t3.topListHeight;
  })), S2), connect(S2, p2), connect(pipe(b2, map(function(t3) {
    return [t3.top, t3.bottom];
  })), d2), connect(pipe(b2, map(function(t3) {
    return t3.items;
  })), x2), c({ listState: b2, topItemsIndexes: w2, endReached: streamFromEmitter(pipe(b2, filter(function(t3) {
    return t3.items.length > 0;
  }), withLatestFrom(r2, i2), filter(function(t3) {
    var e = t3[0].items;
    return e[e.length - 1].originalIndex === t3[1] - 1;
  }), map(function(t3) {
    return [t3[1] - 1, t3[2]];
  }), distinctUntilChanged(vt), map(function(t3) {
    return t3[0];
  }))), startReached: streamFromEmitter(pipe(b2, throttleTime(200), filter(function(t3) {
    var e = t3.items;
    return e.length > 0 && e[0].originalIndex === t3.topItems.length;
  }), map(function(t3) {
    return t3.items[0].index;
  }), distinctUntilChanged())), rangeChanged: streamFromEmitter(pipe(b2, filter(function(t3) {
    return t3.items.length > 0;
  }), map(function(t3) {
    for (var e = t3.items, n3 = 0, o3 = e.length - 1; "group" === e[n3].type && n3 < o3; ) n3++;
    for (; "group" === e[o3].type && o3 > n3; ) o3--;
    return { startIndex: e[n3].index, endIndex: e[o3].index };
  }), distinctUntilChanged(St))), itemsRendered: x2 }, I2);
}, tup(rt, gt, Tt, dt, lt, ct, mt, K), { singleton: true });
var Ht = system(function(t2) {
  var n2 = t2[0], o2 = n2.sizes, r2 = n2.firstItemIndex, i2 = n2.data, a2 = n2.gap, l2 = t2[1].listState, s2 = t2[2].didMount, u3 = statefulStream(0);
  return connect(pipe(s2, withLatestFrom(u3), filter(function(t3) {
    return 0 !== t3[1];
  }), withLatestFrom(o2, r2, a2, i2), map(function(t3) {
    var e = t3[0][1], n3 = t3[1], o3 = t3[2], r3 = t3[3], i3 = t3[4], a3 = void 0 === i3 ? [] : i3, l3 = 0;
    if (n3.groupIndices.length > 0) for (var s3, u4 = f(n3.groupIndices); !((s3 = u4()).done || s3.value - l3 >= e); ) l3++;
    var c2 = e + l3;
    return bt(Array.from({ length: c2 }).map(function(t4, e2) {
      return { index: e2, size: 0, offset: 0, data: a3[e2] };
    }), [], c2, r3, n3, o3);
  })), l2), { initialItemCount: u3 };
}, tup(rt, yt, mt), { singleton: true });
var Et = system(function(t2) {
  var n2 = t2[0].scrollVelocity, o2 = statefulStream(false), r2 = stream(), i2 = statefulStream(false);
  return connect(pipe(n2, withLatestFrom(i2, o2, r2), filter(function(t3) {
    return !!t3[1];
  }), map(function(t3) {
    var e = t3[0], n3 = t3[1], o3 = t3[2], r3 = t3[3], i3 = n3.enter;
    if (o3) {
      if ((0, n3.exit)(e, r3)) return false;
    } else if (i3(e, r3)) return true;
    return o3;
  }), distinctUntilChanged()), o2), subscribe(pipe(combineLatest(o2, n2, r2), withLatestFrom(i2)), function(t3) {
    var e = t3[0], n3 = t3[1];
    return e[0] && n3 && n3.change && n3.change(e[1], e[2]);
  }), { isSeeking: o2, scrollSeekConfiguration: i2, scrollVelocity: n2, scrollSeekRangeChanged: r2 };
}, tup(ct), { singleton: true });
var Rt = system(function(t2) {
  var n2 = t2[0].topItemsIndexes, o2 = statefulStream(0);
  return connect(pipe(o2, filter(function(t3) {
    return t3 > 0;
  }), map(function(t3) {
    return Array.from({ length: t3 }).map(function(t4, e) {
      return e;
    });
  })), n2), { topItemCount: o2 };
}, tup(yt));
var Lt = system(function(t2) {
  var n2 = t2[0], o2 = n2.footerHeight, r2 = n2.headerHeight, i2 = n2.fixedHeaderHeight, a2 = n2.fixedFooterHeight, l2 = t2[1].listState, s2 = stream(), u3 = statefulStreamFromEmitter(pipe(combineLatest(o2, a2, r2, i2, l2), map(function(t3) {
    var e = t3[4];
    return t3[0] + t3[1] + t3[2] + t3[3] + e.offsetBottom + e.bottom;
  })), 0);
  return connect(duc(u3), s2), { totalListHeight: u3, totalListHeightChanged: s2 };
}, tup(y, yt), { singleton: true });
function kt(t2) {
  var e, n2 = false;
  return function() {
    return n2 || (n2 = true, e = t2()), e;
  };
}
var Ft = kt(function() {
  return /iP(ad|hone|od).+Version\/[\d.]+.*Safari/i.test(navigator.userAgent);
});
var zt = system(function(t2) {
  var n2 = t2[0], o2 = n2.scrollBy, r2 = n2.scrollTop, i2 = n2.deviation, a2 = n2.scrollingInProgress, l2 = t2[1], s2 = l2.isScrolling, u3 = l2.isAtBottom, c2 = l2.scrollDirection, m2 = t2[3], d2 = m2.beforeUnshiftWith, f2 = m2.shiftWithOffset, p2 = m2.sizes, g2 = m2.gap, v2 = t2[4].log, S2 = t2[5].recalcInProgress, I2 = streamFromEmitter(pipe(t2[2].listState, withLatestFrom(l2.lastJumpDueToItemResize), scan(function(t3, e) {
    var n3 = t3[1], o3 = e[0], r3 = o3.items, i3 = o3.totalCount, a3 = o3.bottom + o3.offsetBottom, l3 = 0;
    return t3[2] === i3 && n3.length > 0 && r3.length > 0 && (0 === r3[0].originalIndex && 0 === n3[0].originalIndex || 0 != (l3 = a3 - t3[3]) && (l3 += e[1])), [l3, r3, i3, a3];
  }, [0, [], 0, 0]), filter(function(t3) {
    return 0 !== t3[0];
  }), withLatestFrom(r2, c2, a2, u3, v2), filter(function(t3) {
    return !t3[3] && 0 !== t3[1] && t3[2] === st;
  }), map(function(t3) {
    var e = t3[0][0];
    return (0, t3[5])("Upward scrolling compensation", { amount: e }, h.DEBUG), e;
  })));
  function C2(t3) {
    t3 > 0 ? (publish(o2, { top: -t3, behavior: "auto" }), publish(i2, 0)) : (publish(i2, 0), publish(o2, { top: -t3, behavior: "auto" }));
  }
  return subscribe(pipe(I2, withLatestFrom(i2, s2)), function(t3) {
    var n3 = t3[0], o3 = t3[1];
    t3[2] && Ft() ? publish(i2, o3 - n3) : C2(-n3);
  }), subscribe(pipe(combineLatest(statefulStreamFromEmitter(s2, false), i2, S2), filter(function(t3) {
    return !t3[0] && !t3[2] && 0 !== t3[1];
  }), map(function(t3) {
    return t3[1];
  }), throttleTime(1)), C2), connect(pipe(f2, map(function(t3) {
    return { top: -t3 };
  })), o2), subscribe(pipe(d2, withLatestFrom(p2, g2), map(function(t3) {
    var e = t3[0];
    return e * t3[1].lastSize + e * t3[2];
  })), function(t3) {
    publish(i2, t3), requestAnimationFrame(function() {
      publish(o2, { top: t3 }), requestAnimationFrame(function() {
        publish(i2, 0), publish(S2, false);
      });
    });
  }), { deviation: i2 };
}, tup(y, ct, yt, rt, S, K));
var Bt = system(function(t2) {
  var n2 = t2[0].totalListHeight, o2 = t2[1].didMount, r2 = t2[2].scrollTo, i2 = statefulStream(0);
  return subscribe(pipe(o2, withLatestFrom(i2), filter(function(t3) {
    return 0 !== t3[1];
  }), map(function(t3) {
    return { top: t3[1] };
  })), function(t3) {
    handleNext(pipe(n2, filter(function(t4) {
      return 0 !== t4;
    })), function() {
      setTimeout(function() {
        publish(r2, t3);
      });
    });
  }), { initialScrollTop: i2 };
}, tup(Lt, mt, y), { singleton: true });
var Pt = system(function(t2) {
  var n2 = t2[0].viewportHeight, o2 = t2[1].totalListHeight, r2 = statefulStream(false);
  return { alignToBottom: r2, paddingTopAddition: statefulStreamFromEmitter(pipe(combineLatest(r2, n2, o2), filter(function(t3) {
    return t3[0];
  }), map(function(t3) {
    return Math.max(0, t3[1] - t3[2]);
  }), distinctUntilChanged()), 0) };
}, tup(y, Lt), { singleton: true });
var Ot = system(function(t2) {
  var n2 = t2[0], o2 = n2.scrollTo, r2 = n2.scrollContainerState, i2 = stream(), a2 = stream(), l2 = stream(), s2 = statefulStream(false), u3 = statefulStream(void 0);
  return connect(pipe(combineLatest(i2, a2), map(function(t3) {
    var e = t3[0], n3 = e.viewportHeight, o3 = e.scrollHeight;
    return { scrollTop: Math.max(0, e.scrollTop - t3[1].offsetTop), scrollHeight: o3, viewportHeight: n3 };
  })), r2), connect(pipe(o2, withLatestFrom(a2), map(function(t3) {
    var e = t3[0];
    return c({}, e, { top: e.top + t3[1].offsetTop });
  })), l2), { useWindowScroll: s2, customScrollParent: u3, windowScrollContainerState: i2, windowViewportRect: a2, windowScrollTo: l2 };
}, tup(y));
var Mt = ["done", "behavior", "align"];
var Vt = system(function(t2) {
  var n2 = t2[0], o2 = n2.sizes, r2 = n2.totalCount, i2 = n2.gap, a2 = t2[1], l2 = a2.scrollTop, s2 = a2.viewportHeight, u3 = a2.headerHeight, d2 = a2.fixedHeaderHeight, f2 = a2.fixedFooterHeight, p2 = a2.scrollingInProgress, h2 = t2[2].scrollToIndex, g2 = stream();
  return connect(pipe(g2, withLatestFrom(o2, s2, r2, u3, d2, f2, l2), withLatestFrom(i2), map(function(t3) {
    var n3 = t3[0], o3 = n3[0], r3 = n3[1], i3 = n3[2], a3 = n3[3], l3 = n3[4], s3 = n3[5], u4 = n3[6], d3 = n3[7], f3 = t3[1], h3 = o3.done, g3 = o3.behavior, v2 = o3.align, S2 = m(o3, Mt), I2 = null, C2 = tt2(o3, r3, a3 - 1), T2 = X(C2, r3.offsetTree, f3) + l3 + s3;
    return T2 < d3 + s3 ? I2 = c({}, S2, { behavior: g3, align: null != v2 ? v2 : "start" }) : T2 + F(r3.sizeTree, C2)[1] > d3 + i3 - u4 && (I2 = c({}, S2, { behavior: g3, align: null != v2 ? v2 : "end" })), I2 ? h3 && handleNext(pipe(p2, skip(1), filter(function(t4) {
      return false === t4;
    })), h3) : h3 && h3(), I2;
  }), filter(function(t3) {
    return null !== t3;
  })), h2), { scrollIntoView: g2 };
}, tup(rt, y, lt, yt, S), { singleton: true });
var Ut = ["listState", "topItemsIndexes"];
var At = system(function(t2) {
  return c({}, t2[0], t2[1], t2[2], t2[3], t2[4], t2[5], t2[6], t2[7], t2[8]);
}, tup(Tt, Ht, mt, Et, Lt, Bt, Pt, Ot, Vt));
var Wt = system(function(t2) {
  var n2 = t2[0], o2 = n2.totalCount, r2 = n2.sizeRanges, i2 = n2.fixedItemSize, a2 = n2.defaultItemSize, l2 = n2.trackItemSizes, s2 = n2.itemSize, u3 = n2.data, d2 = n2.firstItemIndex, f2 = n2.groupIndices, p2 = n2.statefulTotalCount, h2 = n2.gap, g2 = t2[1], v2 = g2.initialTopMostItemIndex, S2 = g2.scrolledToInitialItem, I2 = t2[2], C2 = t2[3], T2 = t2[4], w2 = T2.listState, x2 = T2.topItemsIndexes, b2 = m(T2, Ut), y2 = t2[5].scrollToIndex, H2 = t2[7].topItemCount, E2 = t2[8].groupCounts, R2 = t2[9], L2 = t2[10];
  return connect(b2.rangeChanged, R2.scrollSeekRangeChanged), connect(pipe(R2.windowViewportRect, map(function(t3) {
    return t3.visibleHeight;
  })), I2.viewportHeight), c({ totalCount: o2, data: u3, firstItemIndex: d2, sizeRanges: r2, initialTopMostItemIndex: v2, scrolledToInitialItem: S2, topItemsIndexes: x2, topItemCount: H2, groupCounts: E2, fixedItemHeight: i2, defaultItemHeight: a2, gap: h2 }, C2, { statefulTotalCount: p2, listState: w2, scrollToIndex: y2, trackItemSizes: l2, itemSize: s2, groupIndices: f2 }, b2, R2, I2, L2);
}, tup(rt, dt, y, pt, yt, lt, zt, Rt, gt, At, S));
var Nt = kt(function() {
  if ("undefined" == typeof document) return "sticky";
  var t2 = document.createElement("div");
  return t2.style.position = "-webkit-sticky", "-webkit-sticky" === t2.style.position ? "-webkit-sticky" : "sticky";
});
function Dt(t2, e) {
  var n2 = (0, import_react37.useRef)(null), o2 = (0, import_react37.useCallback)(function(o3) {
    if (null !== o3 && o3.offsetParent) {
      var r2, i2, a2 = o3.getBoundingClientRect(), l3 = a2.width;
      if (e) {
        var s3 = e.getBoundingClientRect(), u4 = a2.top - s3.top;
        r2 = s3.height - Math.max(0, u4), i2 = u4 + e.scrollTop;
      } else r2 = window.innerHeight - Math.max(0, a2.top), i2 = a2.top + window.pageYOffset;
      n2.current = { offsetTop: i2, visibleHeight: r2, visibleWidth: l3 }, t2(n2.current);
    }
  }, [t2, e]), l2 = I(o2), s2 = l2.callbackRef, u3 = l2.ref, c2 = (0, import_react37.useCallback)(function() {
    o2(u3.current);
  }, [o2, u3]);
  return (0, import_react37.useEffect)(function() {
    if (e) {
      e.addEventListener("scroll", c2);
      var t3 = new ResizeObserver(c2);
      return t3.observe(e), function() {
        e.removeEventListener("scroll", c2), t3.unobserve(e);
      };
    }
    return window.addEventListener("scroll", c2), window.addEventListener("resize", c2), function() {
      window.removeEventListener("scroll", c2), window.removeEventListener("resize", c2);
    };
  }, [c2, e]), s2;
}
var Gt = n.createContext(void 0);
var _t = ["placeholder"];
var jt = ["style", "children"];
var Kt = ["style", "children"];
function Yt(t2) {
  return t2;
}
var qt = system(function() {
  var t2 = statefulStream(function(t3) {
    return "Item " + t3;
  }), n2 = statefulStream(null), o2 = statefulStream(function(t3) {
    return "Group " + t3;
  }), r2 = statefulStream({}), i2 = statefulStream(Yt), a2 = statefulStream("div"), l2 = statefulStream(noop3), s2 = function(t3, n3) {
    return void 0 === n3 && (n3 = null), statefulStreamFromEmitter(pipe(r2, map(function(e) {
      return e[t3];
    }), distinctUntilChanged()), n3);
  };
  return { context: n2, itemContent: t2, groupContent: o2, components: r2, computeItemKey: i2, headerFooterTag: a2, scrollerRef: l2, FooterComponent: s2("Footer"), HeaderComponent: s2("Header"), TopItemListComponent: s2("TopItemList"), ListComponent: s2("List", "div"), ItemComponent: s2("Item", "div"), GroupComponent: s2("Group", "div"), ScrollerComponent: s2("Scroller", "div"), EmptyPlaceholder: s2("EmptyPlaceholder"), ScrollSeekPlaceholder: s2("ScrollSeekPlaceholder") };
});
function Zt(t2, n2) {
  var o2 = stream();
  return subscribe(o2, function() {
    return console.warn("react-virtuoso: You are using a deprecated property. " + n2, "color: red;", "color: inherit;", "color: blue;");
  }), connect(o2, t2), o2;
}
var Jt = system(function(t2) {
  var n2 = t2[0], o2 = t2[1], r2 = { item: Zt(o2.itemContent, "Rename the %citem%c prop to %citemContent."), group: Zt(o2.groupContent, "Rename the %cgroup%c prop to %cgroupContent."), topItems: Zt(n2.topItemCount, "Rename the %ctopItems%c prop to %ctopItemCount."), itemHeight: Zt(n2.fixedItemHeight, "Rename the %citemHeight%c prop to %cfixedItemHeight."), scrollingStateChange: Zt(n2.isScrolling, "Rename the %cscrollingStateChange%c prop to %cisScrolling."), adjustForPrependedItems: stream(), maxHeightCacheSize: stream(), footer: stream(), header: stream(), HeaderContainer: stream(), FooterContainer: stream(), ItemContainer: stream(), ScrollContainer: stream(), GroupContainer: stream(), ListContainer: stream(), emptyComponent: stream(), scrollSeek: stream() };
  function i2(t3, n3, r3) {
    connect(pipe(t3, withLatestFrom(o2.components), map(function(t4) {
      var e, o3 = t4[0], i3 = t4[1];
      return console.warn("react-virtuoso: " + r3 + " property is deprecated. Pass components." + n3 + " instead."), c({}, i3, ((e = {})[n3] = o3, e));
    })), o2.components);
  }
  return subscribe(r2.adjustForPrependedItems, function() {
    console.warn("react-virtuoso: adjustForPrependedItems is no longer supported. Use the firstItemIndex property instead - https://virtuoso.dev/prepend-items.", "color: red;", "color: inherit;", "color: blue;");
  }), subscribe(r2.maxHeightCacheSize, function() {
    console.warn("react-virtuoso: maxHeightCacheSize is no longer necessary. Setting it has no effect - remove it from your code.");
  }), subscribe(r2.HeaderContainer, function() {
    console.warn("react-virtuoso: HeaderContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the header component and pass components.Header to change its contents.");
  }), subscribe(r2.FooterContainer, function() {
    console.warn("react-virtuoso: FooterContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the footer component and pass components.Footer to change its contents.");
  }), subscribe(r2.scrollSeek, function(t3) {
    var r3 = t3.placeholder, i3 = m(t3, _t);
    console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."), publish(o2.components, c({}, getValue(o2.components), { ScrollSeekPlaceholder: r3 })), publish(n2.scrollSeekConfiguration, i3);
  }), i2(r2.footer, "Footer", "footer"), i2(r2.header, "Header", "header"), i2(r2.ItemContainer, "Item", "ItemContainer"), i2(r2.ListContainer, "List", "ListContainer"), i2(r2.ScrollContainer, "Scroller", "ScrollContainer"), i2(r2.emptyComponent, "EmptyPlaceholder", "emptyComponent"), i2(r2.GroupContainer, "Group", "GroupContainer"), c({}, n2, o2, r2);
}, tup(Wt, qt));
var $t = function(t2) {
  return n.createElement("div", { style: { height: t2.height } });
};
var Qt = { position: Nt(), zIndex: 1, overflowAnchor: "none" };
var Xt = { overflowAnchor: "none" };
var te = n.memo(function(t2) {
  var o2 = t2.showTopList, r2 = void 0 !== o2 && o2, i2 = he("listState"), a2 = pe("sizeRanges"), s2 = he("useWindowScroll"), u3 = he("customScrollParent"), m2 = pe("windowScrollContainerState"), d2 = pe("scrollContainerState"), f2 = u3 || s2 ? m2 : d2, p2 = he("itemContent"), h2 = he("context"), g2 = he("groupContent"), v2 = he("trackItemSizes"), S2 = he("itemSize"), I2 = he("log"), C2 = pe("gap"), w2 = T(a2, S2, v2, r2 ? noop3 : f2, I2, C2, u3).callbackRef, x2 = n.useState(0), b2 = x2[0], y2 = x2[1];
  ge("deviation", function(t3) {
    b2 !== t3 && y2(t3);
  });
  var H2 = he("EmptyPlaceholder"), E2 = he("ScrollSeekPlaceholder") || $t, R2 = he("ListComponent"), L2 = he("ItemComponent"), k2 = he("GroupComponent"), F2 = he("computeItemKey"), z2 = he("isSeeking"), B2 = he("groupIndices").length > 0, P2 = he("paddingTopAddition"), O2 = r2 ? {} : { boxSizing: "border-box", paddingTop: i2.offsetTop + P2, paddingBottom: i2.offsetBottom, marginTop: b2 };
  return !r2 && 0 === i2.totalCount && H2 ? (0, import_react37.createElement)(H2, re(H2, h2)) : (0, import_react37.createElement)(R2, c({}, re(R2, h2), { ref: w2, style: O2, "data-test-id": r2 ? "virtuoso-top-item-list" : "virtuoso-item-list" }), (r2 ? i2.topItems : i2.items).map(function(t3) {
    var e = t3.originalIndex, n2 = F2(e + i2.firstItemIndex, t3.data, h2);
    return z2 ? (0, import_react37.createElement)(E2, c({}, re(E2, h2), { key: n2, index: t3.index, height: t3.size, type: t3.type || "item" }, "group" === t3.type ? {} : { groupIndex: t3.groupIndex })) : "group" === t3.type ? (0, import_react37.createElement)(k2, c({}, re(k2, h2), { key: n2, "data-index": e, "data-known-size": t3.size, "data-item-index": t3.index, style: Qt }), g2(t3.index)) : (0, import_react37.createElement)(L2, c({}, re(L2, h2), { key: n2, "data-index": e, "data-known-size": t3.size, "data-item-index": t3.index, "data-item-group-index": t3.groupIndex, style: Xt }), B2 ? p2(t3.index, t3.groupIndex, t3.data, h2) : p2(t3.index, t3.data, h2));
  }));
});
var ee = { height: "100%", outline: "none", overflowY: "auto", position: "relative", WebkitOverflowScrolling: "touch" };
var ne = { width: "100%", height: "100%", position: "absolute", top: 0 };
var oe = { width: "100%", position: Nt(), top: 0 };
function re(t2, e) {
  if ("string" != typeof t2) return { context: e };
}
var ie = n.memo(function() {
  var t2 = he("HeaderComponent"), e = pe("headerHeight"), n2 = he("headerFooterTag"), o2 = C(function(t3) {
    return e(w(t3, "height"));
  }), r2 = he("context");
  return t2 ? (0, import_react37.createElement)(n2, { ref: o2 }, (0, import_react37.createElement)(t2, re(t2, r2))) : null;
});
var ae = n.memo(function() {
  var t2 = he("FooterComponent"), e = pe("footerHeight"), n2 = he("headerFooterTag"), o2 = C(function(t3) {
    return e(w(t3, "height"));
  }), r2 = he("context");
  return t2 ? (0, import_react37.createElement)(n2, { ref: o2 }, (0, import_react37.createElement)(t2, re(t2, r2))) : null;
});
function le(t2) {
  var e = t2.usePublisher, o2 = t2.useEmitter, r2 = t2.useEmitterValue;
  return n.memo(function(t3) {
    var n2 = t3.style, i2 = t3.children, a2 = m(t3, jt), s2 = e("scrollContainerState"), u3 = r2("ScrollerComponent"), d2 = e("smoothScrollTargetReached"), f2 = r2("scrollerRef"), p2 = r2("context"), h2 = b(s2, d2, u3, f2), g2 = h2.scrollerRef, v2 = h2.scrollByCallback;
    return o2("scrollTo", h2.scrollToCallback), o2("scrollBy", v2), (0, import_react37.createElement)(u3, c({ ref: g2, style: c({}, ee, n2), "data-test-id": "virtuoso-scroller", "data-virtuoso-scroller": true, tabIndex: 0 }, a2, re(u3, p2)), i2);
  });
}
function se(t2) {
  var o2 = t2.usePublisher, r2 = t2.useEmitter, i2 = t2.useEmitterValue;
  return n.memo(function(t3) {
    var n2 = t3.style, a2 = t3.children, s2 = m(t3, Kt), u3 = o2("windowScrollContainerState"), d2 = i2("ScrollerComponent"), f2 = o2("smoothScrollTargetReached"), p2 = i2("totalListHeight"), h2 = i2("deviation"), v2 = i2("customScrollParent"), S2 = i2("context"), I2 = b(u3, f2, d2, noop3, v2), C2 = I2.scrollerRef, T2 = I2.scrollByCallback, w2 = I2.scrollToCallback;
    return g(function() {
      return C2.current = v2 || window, function() {
        C2.current = null;
      };
    }, [C2, v2]), r2("windowScrollTo", w2), r2("scrollBy", T2), (0, import_react37.createElement)(d2, c({ style: c({ position: "relative" }, n2, 0 !== p2 ? { height: p2 + h2 } : {}), "data-virtuoso-scroller": true }, s2, re(d2, S2)), a2);
  });
}
var ue = function(t2) {
  var o2 = t2.children, r2 = (0, import_react37.useContext)(Gt), i2 = pe("viewportHeight"), a2 = pe("fixedItemHeight"), l2 = C(compose(i2, function(t3) {
    return w(t3, "height");
  }));
  return n.useEffect(function() {
    r2 && (i2(r2.viewportHeight), a2(r2.itemHeight));
  }, [r2, i2, a2]), n.createElement("div", { style: ne, ref: l2, "data-viewport-type": "element" }, o2);
};
var ce = function(t2) {
  var e = t2.children, o2 = (0, import_react37.useContext)(Gt), r2 = pe("windowViewportRect"), i2 = pe("fixedItemHeight"), a2 = he("customScrollParent"), l2 = Dt(r2, a2);
  return n.useEffect(function() {
    o2 && (i2(o2.itemHeight), r2({ offsetTop: 0, visibleHeight: o2.viewportHeight, visibleWidth: 100 }));
  }, [o2, r2, i2]), n.createElement("div", { ref: l2, style: ne, "data-viewport-type": "window" }, e);
};
var me = function(t2) {
  var e = t2.children, n2 = he("TopItemListComponent"), o2 = he("headerHeight"), r2 = c({}, oe, { marginTop: o2 + "px" }), i2 = he("context");
  return (0, import_react37.createElement)(n2 || "div", { style: r2, context: i2 }, e);
};
var de = systemToComponent(Jt, { required: {}, optional: { context: "context", followOutput: "followOutput", firstItemIndex: "firstItemIndex", itemContent: "itemContent", groupContent: "groupContent", overscan: "overscan", increaseViewportBy: "increaseViewportBy", totalCount: "totalCount", topItemCount: "topItemCount", initialTopMostItemIndex: "initialTopMostItemIndex", components: "components", groupCounts: "groupCounts", atBottomThreshold: "atBottomThreshold", atTopThreshold: "atTopThreshold", computeItemKey: "computeItemKey", defaultItemHeight: "defaultItemHeight", fixedItemHeight: "fixedItemHeight", itemSize: "itemSize", scrollSeekConfiguration: "scrollSeekConfiguration", headerFooterTag: "headerFooterTag", data: "data", initialItemCount: "initialItemCount", initialScrollTop: "initialScrollTop", alignToBottom: "alignToBottom", useWindowScroll: "useWindowScroll", customScrollParent: "customScrollParent", scrollerRef: "scrollerRef", logLevel: "logLevel", react18ConcurrentRendering: "react18ConcurrentRendering", item: "item", group: "group", topItems: "topItems", itemHeight: "itemHeight", scrollingStateChange: "scrollingStateChange", maxHeightCacheSize: "maxHeightCacheSize", footer: "footer", header: "header", ItemContainer: "ItemContainer", ScrollContainer: "ScrollContainer", ListContainer: "ListContainer", GroupContainer: "GroupContainer", emptyComponent: "emptyComponent", HeaderContainer: "HeaderContainer", FooterContainer: "FooterContainer", scrollSeek: "scrollSeek" }, methods: { scrollToIndex: "scrollToIndex", scrollIntoView: "scrollIntoView", scrollTo: "scrollTo", scrollBy: "scrollBy", adjustForPrependedItems: "adjustForPrependedItems", autoscrollToBottom: "autoscrollToBottom" }, events: { isScrolling: "isScrolling", endReached: "endReached", startReached: "startReached", rangeChanged: "rangeChanged", atBottomStateChange: "atBottomStateChange", atTopStateChange: "atTopStateChange", totalListHeightChanged: "totalListHeightChanged", itemsRendered: "itemsRendered", groupIndices: "groupIndices" } }, n.memo(function(t2) {
  var e = he("useWindowScroll"), o2 = he("topItemsIndexes").length > 0, r2 = he("customScrollParent"), i2 = r2 || e ? ce : ue;
  return n.createElement(r2 || e ? Se : ve, c({}, t2), n.createElement(i2, null, n.createElement(ie, null), n.createElement(te, null), n.createElement(ae, null)), o2 && n.createElement(me, null, n.createElement(te, { showTopList: true })));
}));
var fe = de.Component;
var pe = de.usePublisher;
var he = de.useEmitterValue;
var ge = de.useEmitter;
var ve = le({ usePublisher: pe, useEmitterValue: he, useEmitter: ge });
var Se = se({ usePublisher: pe, useEmitterValue: he, useEmitter: ge });
var Ie = { items: [], offsetBottom: 0, offsetTop: 0, top: 0, bottom: 0, itemHeight: 0, itemWidth: 0 };
var Ce = { items: [{ index: 0 }], offsetBottom: 0, offsetTop: 0, top: 0, bottom: 0, itemHeight: 0, itemWidth: 0 };
var Te = Math.round;
var we = Math.ceil;
var xe = Math.floor;
var be = Math.min;
var ye = Math.max;
function He(t2, e) {
  return Array.from({ length: e - t2 + 1 }).map(function(e2, n2) {
    return { index: n2 + t2 };
  });
}
function Ee(t2, e) {
  return t2 && t2.column === e.column && t2.row === e.row;
}
var Re = system(function(t2) {
  var n2 = t2[0], o2 = n2.overscan, r2 = n2.visibleRange, i2 = n2.listBoundary, a2 = t2[1], l2 = a2.scrollTop, s2 = a2.viewportHeight, u3 = a2.scrollBy, m2 = a2.scrollTo, d2 = a2.smoothScrollTargetReached, f2 = a2.scrollContainerState, p2 = t2[2], h2 = t2[3], g2 = t2[4], v2 = g2.propsReady, S2 = g2.didMount, I2 = t2[5], C2 = I2.windowViewportRect, T2 = I2.windowScrollTo, w2 = I2.useWindowScroll, x2 = I2.customScrollParent, b2 = I2.windowScrollContainerState, y2 = t2[6], H2 = statefulStream(0), E2 = statefulStream(0), R2 = statefulStream(Ie), L2 = statefulStream({ height: 0, width: 0 }), k2 = statefulStream({ height: 0, width: 0 }), F2 = stream(), z2 = stream(), B2 = statefulStream(0), P2 = statefulStream({ row: 0, column: 0 });
  connect(pipe(S2, withLatestFrom(E2), filter(function(t3) {
    return 0 !== t3[1];
  }), map(function(t3) {
    return { items: He(0, t3[1] - 1), top: 0, bottom: 0, offsetBottom: 0, offsetTop: 0, itemHeight: 0, itemWidth: 0 };
  })), R2), connect(pipe(combineLatest(duc(H2), r2, duc(P2, Ee), duc(k2, function(t3, e) {
    return t3 && t3.width === e.width && t3.height === e.height;
  })), withLatestFrom(L2), map(function(t3) {
    var e = t3[0], n3 = e[0], o3 = e[1], r3 = o3[0], i3 = o3[1], a3 = e[2], l3 = e[3], s3 = t3[1], u4 = a3.row, c2 = l3.height, m3 = l3.width, d3 = s3.width;
    if (0 === n3 || 0 === d3) return Ie;
    if (0 === m3) return Ce;
    var f3 = Fe(d3, m3, a3.column), p3 = f3 * xe((r3 + u4) / (c2 + u4)), h3 = f3 * we((i3 + u4) / (c2 + u4)) - 1;
    h3 = ye(0, be(n3 - 1, h3));
    var g3 = He(p3 = be(h3, ye(0, p3)), h3), v3 = Le(s3, a3, l3, g3), S3 = v3.top, I3 = v3.bottom, C3 = we(n3 / f3);
    return { items: g3, offsetTop: S3, offsetBottom: C3 * c2 + (C3 - 1) * u4 - I3, top: S3, bottom: I3, itemHeight: c2, itemWidth: m3 };
  })), R2), connect(pipe(L2, map(function(t3) {
    return t3.height;
  })), s2), connect(pipe(combineLatest(L2, k2, R2, P2), map(function(t3) {
    var e = Le(t3[0], t3[3], t3[1], t3[2].items);
    return [e.top, e.bottom];
  }), distinctUntilChanged(vt)), i2);
  var O2 = streamFromEmitter(pipe(duc(R2), filter(function(t3) {
    return t3.items.length > 0;
  }), withLatestFrom(H2), filter(function(t3) {
    var e = t3[0].items;
    return e[e.length - 1].index === t3[1] - 1;
  }), map(function(t3) {
    return t3[1] - 1;
  }), distinctUntilChanged())), M2 = streamFromEmitter(pipe(duc(R2), filter(function(t3) {
    var e = t3.items;
    return e.length > 0 && 0 === e[0].index;
  }), mapTo(0), distinctUntilChanged())), V2 = streamFromEmitter(pipe(duc(R2), filter(function(t3) {
    return t3.items.length > 0;
  }), map(function(t3) {
    var e = t3.items;
    return { startIndex: e[0].index, endIndex: e[e.length - 1].index };
  }), distinctUntilChanged(St)));
  connect(V2, h2.scrollSeekRangeChanged), connect(pipe(F2, withLatestFrom(L2, k2, H2, P2), map(function(t3) {
    var e = t3[1], n3 = t3[2], o3 = t3[3], r3 = t3[4], i3 = at(t3[0]), a3 = i3.align, l3 = i3.behavior, s3 = i3.offset, u4 = i3.index;
    "LAST" === u4 && (u4 = o3 - 1);
    var c2 = ke(e, r3, n3, u4 = ye(0, u4, be(o3 - 1, u4)));
    return "end" === a3 ? c2 = Te(c2 - e.height + n3.height) : "center" === a3 && (c2 = Te(c2 - e.height / 2 + n3.height / 2)), s3 && (c2 += s3), { top: c2, behavior: l3 };
  })), m2);
  var U2 = statefulStreamFromEmitter(pipe(R2, map(function(t3) {
    return t3.offsetBottom + t3.bottom;
  })), 0);
  return connect(pipe(C2, map(function(t3) {
    return { width: t3.visibleWidth, height: t3.visibleHeight };
  })), L2), c({ totalCount: H2, viewportDimensions: L2, itemDimensions: k2, scrollTop: l2, scrollHeight: z2, overscan: o2, scrollBy: u3, scrollTo: m2, scrollToIndex: F2, smoothScrollTargetReached: d2, windowViewportRect: C2, windowScrollTo: T2, useWindowScroll: w2, customScrollParent: x2, windowScrollContainerState: b2, deviation: B2, scrollContainerState: f2, initialItemCount: E2, gap: P2 }, h2, { gridState: R2, totalListHeight: U2 }, p2, { startReached: M2, endReached: O2, rangeChanged: V2, propsReady: v2 }, y2);
}, tup(Tt, y, ct, Et, mt, Ot, S));
function Le(t2, e, n2, o2) {
  var r2 = n2.height;
  return void 0 === r2 || 0 === o2.length ? { top: 0, bottom: 0 } : { top: ke(t2, e, n2, o2[0].index), bottom: ke(t2, e, n2, o2[o2.length - 1].index) + r2 };
}
function ke(t2, e, n2, o2) {
  var r2 = Fe(t2.width, n2.width, e.column), i2 = xe(o2 / r2), a2 = i2 * n2.height + ye(0, i2 - 1) * e.row;
  return a2 > 0 ? a2 + e.row : a2;
}
function Fe(t2, e, n2) {
  return ye(1, xe((t2 + n2) / (e + n2)));
}
var ze = ["placeholder"];
var Be = system(function() {
  var t2 = statefulStream(function(t3) {
    return "Item " + t3;
  }), n2 = statefulStream({}), o2 = statefulStream(null), r2 = statefulStream("virtuoso-grid-item"), i2 = statefulStream("virtuoso-grid-list"), a2 = statefulStream(Yt), l2 = statefulStream(noop3), s2 = function(t3, o3) {
    return void 0 === o3 && (o3 = null), statefulStreamFromEmitter(pipe(n2, map(function(e) {
      return e[t3];
    }), distinctUntilChanged()), o3);
  };
  return { context: o2, itemContent: t2, components: n2, computeItemKey: a2, itemClassName: r2, listClassName: i2, scrollerRef: l2, ListComponent: s2("List", "div"), ItemComponent: s2("Item", "div"), ScrollerComponent: s2("Scroller", "div"), ScrollSeekPlaceholder: s2("ScrollSeekPlaceholder", "div") };
});
var Pe = system(function(t2) {
  var n2 = t2[0], o2 = t2[1], r2 = { item: Zt(o2.itemContent, "Rename the %citem%c prop to %citemContent."), ItemContainer: stream(), ScrollContainer: stream(), ListContainer: stream(), emptyComponent: stream(), scrollSeek: stream() };
  function i2(t3, n3, r3) {
    connect(pipe(t3, withLatestFrom(o2.components), map(function(t4) {
      var e, o3 = t4[0], i3 = t4[1];
      return console.warn("react-virtuoso: " + r3 + " property is deprecated. Pass components." + n3 + " instead."), c({}, i3, ((e = {})[n3] = o3, e));
    })), o2.components);
  }
  return subscribe(r2.scrollSeek, function(t3) {
    var r3 = t3.placeholder, i3 = m(t3, ze);
    console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."), publish(o2.components, c({}, getValue(o2.components), { ScrollSeekPlaceholder: r3 })), publish(n2.scrollSeekConfiguration, i3);
  }), i2(r2.ItemContainer, "Item", "ItemContainer"), i2(r2.ListContainer, "List", "ListContainer"), i2(r2.ScrollContainer, "Scroller", "ScrollContainer"), c({}, n2, o2, r2);
}, tup(Re, Be));
var Oe = n.memo(function() {
  var t2 = Ne("gridState"), e = Ne("listClassName"), n2 = Ne("itemClassName"), o2 = Ne("itemContent"), r2 = Ne("computeItemKey"), i2 = Ne("isSeeking"), a2 = We("scrollHeight"), s2 = Ne("ItemComponent"), u3 = Ne("ListComponent"), m2 = Ne("ScrollSeekPlaceholder"), d2 = Ne("context"), f2 = We("itemDimensions"), p2 = We("gap"), h2 = Ne("log"), g2 = C(function(t3) {
    a2(t3.parentElement.parentElement.scrollHeight);
    var e2 = t3.firstChild;
    e2 && f2(e2.getBoundingClientRect()), p2({ row: je("row-gap", getComputedStyle(t3).rowGap, h2), column: je("column-gap", getComputedStyle(t3).columnGap, h2) });
  });
  return (0, import_react37.createElement)(u3, c({ ref: g2, className: e }, re(u3, d2), { style: { paddingTop: t2.offsetTop, paddingBottom: t2.offsetBottom } }), t2.items.map(function(e2) {
    var a3 = r2(e2.index);
    return i2 ? (0, import_react37.createElement)(m2, c({ key: a3 }, re(m2, d2), { index: e2.index, height: t2.itemHeight, width: t2.itemWidth })) : (0, import_react37.createElement)(s2, c({}, re(s2, d2), { className: n2, "data-index": e2.index, key: a3 }), o2(e2.index, d2));
  }));
});
var Me = function(t2) {
  var e = t2.children, o2 = We("viewportDimensions"), r2 = C(function(t3) {
    o2(t3.getBoundingClientRect());
  });
  return n.createElement("div", { style: ne, ref: r2 }, e);
};
var Ve = function(t2) {
  var e = t2.children, o2 = Dt(We("windowViewportRect"), Ne("customScrollParent"));
  return n.createElement("div", { ref: o2, style: ne }, e);
};
var Ue = systemToComponent(Pe, { optional: { context: "context", totalCount: "totalCount", overscan: "overscan", itemContent: "itemContent", components: "components", computeItemKey: "computeItemKey", initialItemCount: "initialItemCount", scrollSeekConfiguration: "scrollSeekConfiguration", listClassName: "listClassName", itemClassName: "itemClassName", useWindowScroll: "useWindowScroll", customScrollParent: "customScrollParent", scrollerRef: "scrollerRef", item: "item", ItemContainer: "ItemContainer", ScrollContainer: "ScrollContainer", ListContainer: "ListContainer", scrollSeek: "scrollSeek" }, methods: { scrollTo: "scrollTo", scrollBy: "scrollBy", scrollToIndex: "scrollToIndex" }, events: { isScrolling: "isScrolling", endReached: "endReached", startReached: "startReached", rangeChanged: "rangeChanged", atBottomStateChange: "atBottomStateChange", atTopStateChange: "atTopStateChange" } }, n.memo(function(t2) {
  var e = c({}, t2), o2 = Ne("useWindowScroll"), r2 = Ne("customScrollParent"), i2 = r2 || o2 ? Ve : Me;
  return n.createElement(r2 || o2 ? _e : Ge, c({}, e), n.createElement(i2, null, n.createElement(Oe, null)));
}));
var Ae = Ue.Component;
var We = Ue.usePublisher;
var Ne = Ue.useEmitterValue;
var De = Ue.useEmitter;
var Ge = le({ usePublisher: We, useEmitterValue: Ne, useEmitter: De });
var _e = se({ usePublisher: We, useEmitterValue: Ne, useEmitter: De });
function je(t2, e, n2) {
  return "normal" === e || null != e && e.endsWith("px") || n2(t2 + " was not resolved to pixel value correctly", e, h.WARN), "normal" === e ? 0 : parseInt(null != e ? e : "0", 10);
}
var Ke = system(function() {
  var t2 = statefulStream(function(t3) {
    return n.createElement("td", null, "Item $", t3);
  }), o2 = statefulStream(null), r2 = statefulStream(null), i2 = statefulStream(null), a2 = statefulStream({}), l2 = statefulStream(Yt), s2 = statefulStream(noop3), u3 = function(t3, n2) {
    return void 0 === n2 && (n2 = null), statefulStreamFromEmitter(pipe(a2, map(function(e) {
      return e[t3];
    }), distinctUntilChanged()), n2);
  };
  return { context: o2, itemContent: t2, fixedHeaderContent: r2, fixedFooterContent: i2, components: a2, computeItemKey: l2, scrollerRef: s2, TableComponent: u3("Table", "table"), TableHeadComponent: u3("TableHead", "thead"), TableFooterComponent: u3("TableFoot", "tfoot"), TableBodyComponent: u3("TableBody", "tbody"), TableRowComponent: u3("TableRow", "tr"), ScrollerComponent: u3("Scroller", "div"), EmptyPlaceholder: u3("EmptyPlaceholder"), ScrollSeekPlaceholder: u3("ScrollSeekPlaceholder"), FillerRow: u3("FillerRow") };
});
var Ye = system(function(t2) {
  return c({}, t2[0], t2[1]);
}, tup(Wt, Ke));
var qe = function(t2) {
  return n.createElement("tr", null, n.createElement("td", { style: { height: t2.height } }));
};
var Ze = function(t2) {
  return n.createElement("tr", null, n.createElement("td", { style: { height: t2.height, padding: 0, border: 0 } }));
};
var Je = n.memo(function() {
  var t2 = nn("listState"), e = en("sizeRanges"), o2 = nn("useWindowScroll"), r2 = nn("customScrollParent"), i2 = en("windowScrollContainerState"), a2 = en("scrollContainerState"), s2 = r2 || o2 ? i2 : a2, u3 = nn("itemContent"), m2 = nn("trackItemSizes"), d2 = T(e, nn("itemSize"), m2, s2, nn("log"), void 0, r2), f2 = d2.callbackRef, p2 = d2.ref, h2 = n.useState(0), g2 = h2[0], v2 = h2[1];
  on("deviation", function(t3) {
    g2 !== t3 && (p2.current.style.marginTop = t3 + "px", v2(t3));
  });
  var S2 = nn("EmptyPlaceholder"), I2 = nn("ScrollSeekPlaceholder") || qe, C2 = nn("FillerRow") || Ze, w2 = nn("TableBodyComponent"), x2 = nn("TableRowComponent"), b2 = nn("computeItemKey"), y2 = nn("isSeeking"), H2 = nn("paddingTopAddition"), E2 = nn("firstItemIndex"), R2 = nn("statefulTotalCount"), L2 = nn("context");
  if (0 === R2 && S2) return (0, import_react37.createElement)(S2, re(S2, L2));
  var k2 = t2.offsetTop + H2 + g2, F2 = t2.offsetBottom, z2 = k2 > 0 ? n.createElement(C2, { height: k2, key: "padding-top" }) : null, B2 = F2 > 0 ? n.createElement(C2, { height: F2, key: "padding-bottom" }) : null, P2 = t2.items.map(function(t3) {
    var e2 = t3.originalIndex, n2 = b2(e2 + E2, t3.data, L2);
    return y2 ? (0, import_react37.createElement)(I2, c({}, re(I2, L2), { key: n2, index: t3.index, height: t3.size, type: t3.type || "item" })) : (0, import_react37.createElement)(x2, c({}, re(x2, L2), { key: n2, "data-index": e2, "data-known-size": t3.size, "data-item-index": t3.index, style: { overflowAnchor: "none" } }), u3(t3.index, t3.data, L2));
  });
  return (0, import_react37.createElement)(w2, c({ ref: f2, "data-test-id": "virtuoso-item-list" }, re(w2, L2)), [z2].concat(P2, [B2]));
});
var $e = function(t2) {
  var o2 = t2.children, r2 = (0, import_react37.useContext)(Gt), i2 = en("viewportHeight"), a2 = en("fixedItemHeight"), l2 = C(compose(i2, function(t3) {
    return w(t3, "height");
  }));
  return n.useEffect(function() {
    r2 && (i2(r2.viewportHeight), a2(r2.itemHeight));
  }, [r2, i2, a2]), n.createElement("div", { style: ne, ref: l2, "data-viewport-type": "element" }, o2);
};
var Qe = function(t2) {
  var e = t2.children, o2 = (0, import_react37.useContext)(Gt), r2 = en("windowViewportRect"), i2 = en("fixedItemHeight"), a2 = nn("customScrollParent"), l2 = Dt(r2, a2);
  return n.useEffect(function() {
    o2 && (i2(o2.itemHeight), r2({ offsetTop: 0, visibleHeight: o2.viewportHeight, visibleWidth: 100 }));
  }, [o2, r2, i2]), n.createElement("div", { ref: l2, style: ne, "data-viewport-type": "window" }, e);
};
var Xe = systemToComponent(Ye, { required: {}, optional: { context: "context", followOutput: "followOutput", firstItemIndex: "firstItemIndex", itemContent: "itemContent", fixedHeaderContent: "fixedHeaderContent", fixedFooterContent: "fixedFooterContent", overscan: "overscan", increaseViewportBy: "increaseViewportBy", totalCount: "totalCount", topItemCount: "topItemCount", initialTopMostItemIndex: "initialTopMostItemIndex", components: "components", groupCounts: "groupCounts", atBottomThreshold: "atBottomThreshold", atTopThreshold: "atTopThreshold", computeItemKey: "computeItemKey", defaultItemHeight: "defaultItemHeight", fixedItemHeight: "fixedItemHeight", itemSize: "itemSize", scrollSeekConfiguration: "scrollSeekConfiguration", data: "data", initialItemCount: "initialItemCount", initialScrollTop: "initialScrollTop", alignToBottom: "alignToBottom", useWindowScroll: "useWindowScroll", customScrollParent: "customScrollParent", scrollerRef: "scrollerRef", logLevel: "logLevel", react18ConcurrentRendering: "react18ConcurrentRendering" }, methods: { scrollToIndex: "scrollToIndex", scrollIntoView: "scrollIntoView", scrollTo: "scrollTo", scrollBy: "scrollBy" }, events: { isScrolling: "isScrolling", endReached: "endReached", startReached: "startReached", rangeChanged: "rangeChanged", atBottomStateChange: "atBottomStateChange", atTopStateChange: "atTopStateChange", totalListHeightChanged: "totalListHeightChanged", itemsRendered: "itemsRendered", groupIndices: "groupIndices" } }, n.memo(function(t2) {
  var o2 = nn("useWindowScroll"), r2 = nn("customScrollParent"), i2 = en("fixedHeaderHeight"), a2 = en("fixedFooterHeight"), l2 = nn("fixedHeaderContent"), s2 = nn("fixedFooterContent"), u3 = nn("context"), m2 = C(compose(i2, function(t3) {
    return w(t3, "height");
  })), d2 = C(compose(a2, function(t3) {
    return w(t3, "height");
  })), f2 = r2 || o2 ? an : rn, p2 = r2 || o2 ? Qe : $e, h2 = nn("TableComponent"), g2 = nn("TableHeadComponent"), v2 = nn("TableFooterComponent"), S2 = l2 ? n.createElement(g2, c({ key: "TableHead", style: { zIndex: 1, position: "sticky", top: 0 }, ref: m2 }, re(g2, u3)), l2()) : null, I2 = s2 ? n.createElement(v2, c({ key: "TableFoot", style: { zIndex: 1, position: "sticky", bottom: 0 }, ref: d2 }, re(v2, u3)), s2()) : null;
  return n.createElement(f2, c({}, t2), n.createElement(p2, null, n.createElement(h2, c({ style: { borderSpacing: 0 } }, re(h2, u3)), [S2, n.createElement(Je, { key: "TableBody" }), I2])));
}));
var tn = Xe.Component;
var en = Xe.usePublisher;
var nn = Xe.useEmitterValue;
var on = Xe.useEmitter;
var rn = le({ usePublisher: en, useEmitterValue: nn, useEmitter: on });
var an = se({ usePublisher: en, useEmitterValue: nn, useEmitter: on });
var ln = fe;

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItem.js
var import_react249 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItemUI.js
var import_react248 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/Timestamp.js
var import_react38 = __toESM(require_react());
function Timestamp(props) {
  const { calendar: calendar3, calendarFormats, customClass, format, timestamp } = props;
  const { formatDate } = useMessageContext("MessageTimestamp");
  const { t: t2, tDateTimeParser } = useTranslationContext("MessageTimestamp");
  const normalizedTimestamp = timestamp && isDate(timestamp) ? timestamp.toISOString() : timestamp;
  const when = (0, import_react38.useMemo)(() => getDateString({
    calendar: calendar3,
    calendarFormats,
    format,
    formatDate,
    messageCreatedAt: normalizedTimestamp,
    t: t2,
    tDateTimeParser,
    timestampTranslationKey: "timestamp/MessageTimestamp"
  }), [
    calendar3,
    calendarFormats,
    format,
    formatDate,
    normalizedTimestamp,
    t2,
    tDateTimeParser
  ]);
  if (!when) {
    return null;
  }
  return import_react38.default.createElement("time", { className: customClass, dateTime: normalizedTimestamp, title: normalizedTimestamp }, when);
}

// node_modules/stream-chat-react/dist/components/Avatar/Avatar.js
var import_react40 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Threads/icons.js
var import_react39 = __toESM(require_react());
var Icon = {
  MessageBubble: (props) => import_react39.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--message-bubble", fill: "none", height: "14", viewBox: "0 0 14 14", width: "14", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react39.default.createElement("path", { d: "M1.66659 1.66665H12.3333V9.66665H2.44659L1.66659 10.4466V1.66665ZM1.66659 0.333313C0.933252 0.333313 0.339919 0.933313 0.339919 1.66665L0.333252 13.6666L2.99992 11H12.3333C13.0666 11 13.6666 10.4 13.6666 9.66665V1.66665C13.6666 0.933313 13.0666 0.333313 12.3333 0.333313H1.66659ZM2.99992 6.99998H10.9999V8.33331H2.99992V6.99998ZM2.99992 4.99998H10.9999V6.33331H2.99992V4.99998ZM2.99992 2.99998H10.9999V4.33331H2.99992V2.99998Z", fill: "currentColor" })
  ),
  MessageBubbleEmpty: (props) => import_react39.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--message-bubble-empty", fill: "none", height: "20", viewBox: "0 0 20 20", width: "20", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react39.default.createElement("path", { d: "M18 0H2C0.9 0 0 0.9 0 2V20L4 16H18C19.1 16 20 15.1 20 14V2C20 0.9 19.1 0 18 0ZM18 14H4L2 16V2H18V14Z", fill: "currentColor" })
  ),
  Reload: (props) => import_react39.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--reload", fill: "none", height: "22", viewBox: "0 0 16 22", width: "16", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react39.default.createElement("path", { d: "M8 3V0L4 4L8 8V5C11.31 5 14 7.69 14 11C14 12.01 13.75 12.97 13.3 13.8L14.76 15.26C15.54 14.03 16 12.57 16 11C16 6.58 12.42 3 8 3ZM8 17C4.69 17 2 14.31 2 11C2 9.99 2.25 9.03 2.7 8.2L1.24 6.74C0.46 7.97 0 9.43 0 11C0 15.42 3.58 19 8 19V22L12 18L8 14V17Z", fill: "currentColor" })
  ),
  User: (props) => import_react39.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--user", fill: "none", height: "16", viewBox: "0 0 16 16", width: "16", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react39.default.createElement("path", { d: "M8 2C9.1 2 10 2.9 10 4C10 5.1 9.1 6 8 6C6.9 6 6 5.1 6 4C6 2.9 6.9 2 8 2ZM8 12C10.7 12 13.8 13.29 14 14H2C2.23 13.28 5.31 12 8 12ZM8 0C5.79 0 4 1.79 4 4C4 6.21 5.79 8 8 8C10.21 8 12 6.21 12 4C12 1.79 10.21 0 8 0ZM8 10C5.33 10 0 11.34 0 14V16H16V14C16 11.34 10.67 10 8 10Z", fill: "currentColor" })
  )
};

// node_modules/stream-chat-react/dist/utils/getChannel.js
var WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL = {};
var getChannel = async ({ channel, client, id: id3, members, options: options2, type }) => {
  if (!channel && !type) {
    throw new Error("Channel or channel type have to be provided to query a channel.");
  }
  const theChannel = channel || client.channel(type, id3, { members });
  const originalCid = (theChannel == null ? void 0 : theChannel.id) ? theChannel.cid : members && members.length ? generateChannelTempCid(theChannel.type, members) : void 0;
  if (!originalCid) {
    throw new Error("Channel ID or channel members array have to be provided to query a channel.");
  }
  const queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
  if (queryPromise) {
    await queryPromise;
  } else {
    try {
      WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = theChannel.watch(options2);
      await WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
    } finally {
      delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
    }
  }
  return theChannel;
};
var generateChannelTempCid = (channelType, members) => {
  if (!members)
    return;
  const membersStr = [...members].sort().join(",");
  return `${channelType}:!members-${membersStr}`;
};

// node_modules/stream-chat-react/dist/utils/getWholeChar.js
var getWholeChar = (str, i2) => {
  const code4 = str.charCodeAt(i2);
  if (Number.isNaN(code4))
    return "";
  if (code4 < 55296 || code4 > 57343)
    return str.charAt(i2);
  if (55296 <= code4 && code4 <= 56319) {
    if (str.length <= i2 + 1) {
      throw "High surrogate without following low surrogate";
    }
    const next = str.charCodeAt(i2 + 1);
    if (56320 > next || next > 57343) {
      throw "High surrogate without following low surrogate";
    }
    return str.charAt(i2) + str.charAt(i2 + 1);
  }
  if (i2 === 0) {
    throw "Low surrogate without preceding high surrogate";
  }
  const prev = str.charCodeAt(i2 - 1);
  if (55296 > prev || prev > 56319) {
    throw "Low surrogate without preceding high surrogate";
  }
  return "";
};

// node_modules/stream-chat-react/dist/components/Avatar/Avatar.js
var Avatar = (props) => {
  const { className, image: image3, name: name2, onClick = () => void 0, onMouseOver = () => void 0 } = props;
  const [error, setError] = (0, import_react40.useState)(false);
  (0, import_react40.useEffect)(() => {
    setError(false);
  }, [image3]);
  const nameStr = (name2 == null ? void 0 : name2.toString()) || "";
  const initials = getWholeChar(nameStr, 0);
  const showImage = image3 && !error;
  return import_react40.default.createElement("div", { className: clsx_default(`str-chat__avatar str-chat__message-sender-avatar`, className, {
    ["str-chat__avatar--multiple-letters"]: initials.length > 1,
    ["str-chat__avatar--no-letters"]: !initials.length,
    ["str-chat__avatar--one-letter"]: initials.length === 1
  }), "data-testid": "avatar", onClick, onMouseOver, role: "button", title: name2 }, showImage ? import_react40.default.createElement("img", { alt: initials, className: "str-chat__avatar-image", "data-testid": "avatar-img", onError: () => setError(true), src: image3 }) : import_react40.default.createElement(
    import_react40.default.Fragment,
    null,
    !!initials.length && import_react40.default.createElement("div", { className: clsx_default("str-chat__avatar-fallback"), "data-testid": "avatar-fallback" }, initials),
    !initials.length && import_react40.default.createElement(Icon.User, null)
  ));
};

// node_modules/stream-chat-react/dist/components/Avatar/ChannelAvatar.js
var import_react41 = __toESM(require_react());
var ChannelAvatar = ({ groupChannelDisplayInfo, image: image3, name: name2, user, ...sharedProps }) => {
  if (groupChannelDisplayInfo) {
    return import_react41.default.createElement(GroupAvatar, { groupChannelDisplayInfo, ...sharedProps });
  }
  return import_react41.default.createElement(Avatar, { image: image3, name: name2, user, ...sharedProps });
};

// node_modules/stream-chat-react/dist/components/Avatar/GroupAvatar.js
var import_react42 = __toESM(require_react());
var GroupAvatar = ({ className, groupChannelDisplayInfo, onClick, onMouseOver }) => import_react42.default.createElement("div", { className: clsx_default(`str-chat__avatar-group`, { "str-chat__avatar-group--three-part": groupChannelDisplayInfo.length === 3 }, className), "data-testid": "group-avatar", onClick, onMouseOver, role: "button" }, groupChannelDisplayInfo.slice(0, 4).map(({ image: image3, name: name2 }, i2) => import_react42.default.createElement(Avatar, { className: clsx_default({
  "str-chat__avatar--single": groupChannelDisplayInfo.length === 3 && i2 === 0
}), image: image3, key: `${name2}-${image3}-${i2}`, name: name2 })));

// node_modules/stream-chat-react/dist/components/Threads/UnreadCountBadge.js
var import_react43 = __toESM(require_react());
var UnreadCountBadge = ({ children, count, position: position3 }) => import_react43.default.createElement(
  "div",
  { className: "str-chat__unread-count-badge-container" },
  children,
  count > 0 && import_react43.default.createElement("div", { className: clsx_default("str-chat__unread-count-badge", position3 && `str-chat__unread-count-badge--${position3}`) }, count)
);

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js
var import_lodash16 = __toESM(require_lodash());
var import_react246 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewMessenger.js
var import_react78 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewActionButtons.js
var import_react77 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelList.js
var import_react64 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useConnectionRecoveredListener.js
var import_react44 = __toESM(require_react());
var useConnectionRecoveredListener = (forceUpdate) => {
  const { client } = useChatContext("useConnectionRecoveredListener");
  (0, import_react44.useEffect)(() => {
    const handleEvent = () => {
      if (forceUpdate) {
        forceUpdate();
      }
    };
    client.on("connection.recovered", handleEvent);
    return () => {
      client.off("connection.recovered", handleEvent);
    };
  }, [client, forceUpdate]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMobileNavigation.js
var import_react45 = __toESM(require_react());
var useMobileNavigation = (channelListRef, navOpen, closeMobileNav) => {
  (0, import_react45.useEffect)(() => {
    const handleClickOutside = (event) => {
      if (closeMobileNav && channelListRef.current && !channelListRef.current.contains(event.target) && navOpen) {
        closeMobileNav();
      }
    };
    document.addEventListener("click", handleClickOutside);
    return () => {
      document.removeEventListener("click", handleClickOutside);
    };
  }, [channelListRef, closeMobileNav, navOpen]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/usePaginatedChannels.js
var import_react46 = __toESM(require_react());
var import_lodash4 = __toESM(require_lodash2());

// node_modules/stream-chat-react/dist/components/ChannelList/utils.js
var import_lodash3 = __toESM(require_lodash2());
var MAX_QUERY_CHANNELS_LIMIT = 30;
var moveChannelUp = ({ activeChannel, channels, cid }) => {
  const channelIndex = channels.findIndex((channel2) => channel2.cid === cid);
  if (!activeChannel && channelIndex <= 0)
    return channels;
  const channel = activeChannel || channels[channelIndex];
  return (0, import_lodash3.default)([channel, ...channels], "cid");
};
function findLastPinnedChannelIndex({ channels }) {
  let lastPinnedChannelIndex = null;
  for (const channel of channels) {
    if (!isChannelPinned(channel))
      break;
    if (typeof lastPinnedChannelIndex === "number") {
      lastPinnedChannelIndex++;
    } else {
      lastPinnedChannelIndex = 0;
    }
  }
  return lastPinnedChannelIndex;
}
var moveChannelUpwards = ({ channels, channelToMove, channelToMoveIndexWithinChannels, sort }) => {
  const targetChannelIndex = channelToMoveIndexWithinChannels ?? channels.findIndex((channel) => channel.cid === channelToMove.cid);
  const targetChannelExistsWithinList = targetChannelIndex >= 0;
  const targetChannelAlreadyAtTheTop = targetChannelIndex === 0;
  const considerPinnedChannels = shouldConsiderPinnedChannels(sort);
  const isTargetChannelPinned = isChannelPinned(channelToMove);
  if (targetChannelAlreadyAtTheTop || considerPinnedChannels && isTargetChannelPinned) {
    return channels;
  }
  const newChannels = [...channels];
  if (targetChannelExistsWithinList) {
    newChannels.splice(targetChannelIndex, 1);
  }
  let lastPinnedChannelIndex = null;
  if (considerPinnedChannels) {
    lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });
  }
  newChannels.splice(typeof lastPinnedChannelIndex === "number" ? lastPinnedChannelIndex + 1 : 0, 0, channelToMove);
  return newChannels;
};
var shouldConsiderPinnedChannels = (sort) => {
  const value = extractSortValue({ atIndex: 0, sort, targetKey: "pinned_at" });
  if (typeof value !== "number")
    return false;
  return Math.abs(value) === 1;
};
var extractSortValue = ({ atIndex, sort, targetKey }) => {
  if (!sort)
    return null;
  let option = null;
  if (Array.isArray(sort)) {
    option = sort[atIndex] ?? null;
  } else {
    let index4 = 0;
    for (const key in sort) {
      if (index4 !== atIndex) {
        index4++;
        continue;
      }
      if (key !== targetKey) {
        return null;
      }
      option = sort;
      break;
    }
  }
  return (option == null ? void 0 : option[targetKey]) ?? null;
};
var shouldConsiderArchivedChannels = (filters) => {
  if (!filters)
    return false;
  return typeof filters.archived === "boolean";
};
var isChannelPinned = (channel) => {
  if (!channel)
    return false;
  const membership = channel.state.membership;
  return typeof membership.pinned_at === "string";
};
var isChannelArchived = (channel) => {
  if (!channel)
    return false;
  const membership = channel.state.membership;
  return typeof membership.archived_at === "string";
};

// node_modules/stream-chat-react/dist/constants/limits.js
var DEFAULT_INITIAL_CHANNEL_PAGE_SIZE = 25;
var DEFAULT_NEXT_CHANNEL_PAGE_SIZE = 100;
var DEFAULT_JUMP_TO_PAGE_SIZE = 100;
var DEFAULT_THREAD_PAGE_SIZE = 50;
var DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD = 250;
var DEFAULT_UPLOAD_SIZE_LIMIT_BYTES = 100 * 1024 * 1024;
var DEFAULT_HIGHLIGHT_DURATION = 500;

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/usePaginatedChannels.js
var RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 5e3;
var MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 2e3;
var usePaginatedChannels = (client, filters, sort, options2, activeChannelHandler, recoveryThrottleIntervalMs = RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS, customQueryChannels) => {
  const { channelsQueryState: { error, setError, setQueryInProgress } } = useChatContext("usePaginatedChannels");
  const [channels, setChannels] = (0, import_react46.useState)([]);
  const [hasNextPage, setHasNextPage] = (0, import_react46.useState)(true);
  const lastRecoveryTimestamp = (0, import_react46.useRef)(void 0);
  const recoveryThrottleInterval = recoveryThrottleIntervalMs < MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS ? MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS : recoveryThrottleIntervalMs ?? RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS;
  const filterString = (0, import_react46.useMemo)(() => JSON.stringify(filters), [filters]);
  const sortString = (0, import_react46.useMemo)(() => JSON.stringify(sort), [sort]);
  const queryChannels = async (queryType = "load-more") => {
    setError(null);
    if (queryType === "reload") {
      setChannels([]);
    }
    setQueryInProgress(queryType);
    try {
      if (customQueryChannels) {
        await customQueryChannels({
          currentChannels: channels,
          queryType,
          setChannels,
          setHasNextPage
        });
      } else {
        const offset2 = queryType === "reload" ? 0 : channels.length;
        const newOptions = {
          limit: (options2 == null ? void 0 : options2.limit) ?? MAX_QUERY_CHANNELS_LIMIT,
          message_limit: (options2 == null ? void 0 : options2.message_limit) ?? DEFAULT_INITIAL_CHANNEL_PAGE_SIZE,
          offset: offset2,
          ...options2
        };
        const channelQueryResponse = await client.queryChannels(filters, sort || {}, newOptions);
        const newChannels = queryType === "reload" ? channelQueryResponse : (0, import_lodash4.default)([...channels, ...channelQueryResponse], "cid");
        setChannels(newChannels);
        setHasNextPage(channelQueryResponse.length >= newOptions.limit);
        if (!offset2 && activeChannelHandler) {
          activeChannelHandler(newChannels, setChannels);
        }
      }
    } catch (error2) {
      console.warn(error2);
      setError(error2);
    }
    setQueryInProgress(null);
  };
  const throttleRecover = (0, import_react46.useCallback)(() => {
    const now = Date.now();
    const isFirstRecovery = !lastRecoveryTimestamp.current;
    const timeElapsedSinceLastRecoveryMs = lastRecoveryTimestamp.current ? now - lastRecoveryTimestamp.current : 0;
    if (!isFirstRecovery && timeElapsedSinceLastRecoveryMs < recoveryThrottleInterval && !error) {
      return;
    }
    lastRecoveryTimestamp.current = now;
    queryChannels("reload");
  }, [error, queryChannels, recoveryThrottleInterval]);
  const loadNextPage = () => queryChannels();
  (0, import_react46.useEffect)(() => {
    if (client.recoverStateOnReconnect)
      return;
    const { unsubscribe } = client.on("connection.recovered", throttleRecover);
    return () => {
      unsubscribe();
    };
  }, [client, throttleRecover]);
  (0, import_react46.useEffect)(() => {
    queryChannels("reload");
  }, [filterString, sortString]);
  return {
    channels,
    hasNextPage,
    loadNextPage,
    setChannels
  };
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelListShape.js
var import_react47 = __toESM(require_react());
var shared = ({ customHandler, event, setChannels }) => {
  if (typeof customHandler === "function") {
    return customHandler(setChannels, event);
  }
  setChannels((channels) => {
    const channelIndex = channels.findIndex((channel) => channel.cid === event.cid);
    if (channelIndex < 0)
      return channels;
    channels.splice(channelIndex, 1);
    return [...channels];
  });
};
var useChannelListShapeDefaults = () => {
  const { client } = useChatContext();
  const handleMessageNew = (0, import_react47.useCallback)(({ allowNewMessagesFromUnfilteredChannels, customHandler, event, filters, lockChannelOrder, setChannels, sort }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    const channelType = event.channel_type;
    const channelId = event.channel_id;
    if (!channelType || !channelId)
      return;
    setChannels((currentChannels) => {
      const targetChannel = client.channel(channelType, channelId);
      const targetChannelIndex = currentChannels.indexOf(targetChannel);
      const targetChannelExistsWithinList = targetChannelIndex >= 0;
      const isTargetChannelPinned = isChannelPinned(targetChannel);
      const isTargetChannelArchived = isChannelArchived(targetChannel);
      const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
      const considerPinnedChannels = shouldConsiderPinnedChannels(sort);
      if (
        // filter is defined, target channel is archived and filter option is set to false
        considerArchivedChannels && isTargetChannelArchived && !filters.archived || // filter is defined, target channel isn't archived and filter option is set to true
        considerArchivedChannels && !isTargetChannelArchived && filters.archived || // sort option is defined, target channel is pinned
        considerPinnedChannels && isTargetChannelPinned || // list order is locked
        lockChannelOrder || // target channel is not within the loaded list and loading from cache is disallowed
        !targetChannelExistsWithinList && !allowNewMessagesFromUnfilteredChannels
      ) {
        return currentChannels;
      }
      return moveChannelUpwards({
        channels: currentChannels,
        channelToMove: targetChannel,
        channelToMoveIndexWithinChannels: targetChannelIndex,
        sort
      });
    });
  }, [client]);
  const handleNotificationMessageNew = (0, import_react47.useCallback)(async ({ allowNewMessagesFromUnfilteredChannels, customHandler, event, filters, setChannels, sort }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    if (!event.channel) {
      return;
    }
    const channel = await getChannel({
      client,
      id: event.channel.id,
      type: event.channel.type
    });
    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
    if (isChannelArchived(channel) && considerArchivedChannels && !filters.archived) {
      return;
    }
    if (!allowNewMessagesFromUnfilteredChannels) {
      return;
    }
    setChannels((channels) => moveChannelUpwards({
      channels,
      channelToMove: channel,
      sort
    }));
  }, [client]);
  const handleNotificationAddedToChannel = (0, import_react47.useCallback)(async ({ allowNewMessagesFromUnfilteredChannels, customHandler, event, setChannels, sort }) => {
    var _a;
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    if (!event.channel || !allowNewMessagesFromUnfilteredChannels) {
      return;
    }
    const channel = await getChannel({
      client,
      id: event.channel.id,
      members: (_a = event.channel.members) == null ? void 0 : _a.reduce((newMembers, { user, user_id }) => {
        const userId = user_id || (user == null ? void 0 : user.id);
        if (userId)
          newMembers.push(userId);
        return newMembers;
      }, []),
      type: event.channel.type
    });
    setChannels((channels) => moveChannelUpwards({
      channels,
      channelToMove: channel,
      sort
    }));
  }, [client]);
  const handleNotificationRemovedFromChannel = (0, import_react47.useCallback)(({ customHandler, event, setChannels }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    setChannels((channels) => channels.filter((channel) => {
      var _a;
      return channel.cid !== ((_a = event.channel) == null ? void 0 : _a.cid);
    }));
  }, []);
  const handleMemberUpdated = (0, import_react47.useCallback)(({ event, filters, lockChannelOrder, setChannels, sort }) => {
    var _a;
    if (!((_a = event.member) == null ? void 0 : _a.user) || event.member.user.id !== client.userID || !event.channel_type) {
      return;
    }
    const channelType = event.channel_type;
    const channelId = event.channel_id;
    const considerPinnedChannels = shouldConsiderPinnedChannels(sort);
    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
    if (!considerPinnedChannels && !considerArchivedChannels || lockChannelOrder) {
      return;
    }
    const pinnedAtSort = extractSortValue({ atIndex: 0, sort, targetKey: "pinned_at" });
    setChannels((currentChannels) => {
      const targetChannel = client.channel(channelType, channelId);
      const targetChannelIndex = currentChannels.indexOf(targetChannel);
      const targetChannelExistsWithinList = targetChannelIndex >= 0;
      const isTargetChannelArchived = isChannelArchived(targetChannel);
      const isTargetChannelPinned = isChannelPinned(targetChannel);
      const newChannels = [...currentChannels];
      if (targetChannelExistsWithinList) {
        newChannels.splice(targetChannelIndex, 1);
      }
      if (considerArchivedChannels && isTargetChannelArchived && !filters.archived || considerArchivedChannels && !isTargetChannelArchived && filters.archived) {
        return newChannels;
      }
      let lastPinnedChannelIndex = null;
      if (pinnedAtSort === 1 || pinnedAtSort === -1 && !isTargetChannelPinned) {
        lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });
      }
      const newTargetChannelIndex = typeof lastPinnedChannelIndex === "number" ? lastPinnedChannelIndex + 1 : 0;
      newChannels.splice(newTargetChannelIndex, 0, targetChannel);
      return newChannels;
    });
  }, [client]);
  const handleChannelDeleted = (0, import_react47.useCallback)((p2) => shared(p2), []);
  const handleChannelHidden = (0, import_react47.useCallback)((p2) => shared(p2), []);
  const handleChannelVisible = (0, import_react47.useCallback)(async ({ customHandler, event, filters, setChannels, sort }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    if (!event.channel_id && !event.channel_type) {
      return;
    }
    const channel = await getChannel({
      client,
      id: event.channel_id,
      type: event.channel_type
    });
    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
    if (isChannelArchived(channel) && considerArchivedChannels && !filters.archived) {
      return;
    }
    setChannels((channels) => moveChannelUpwards({
      channels,
      channelToMove: channel,
      sort
    }));
  }, [client]);
  const handleChannelTruncated = (0, import_react47.useCallback)(({ customHandler, event, setChannels }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    setChannels((channels) => [...channels]);
  }, []);
  const handleChannelUpdated = (0, import_react47.useCallback)(({ customHandler, event, setChannels }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    setChannels((channels) => {
      var _a, _b, _c, _d;
      const channelIndex = channels.findIndex((channel) => {
        var _a2;
        return channel.cid === ((_a2 = event.channel) == null ? void 0 : _a2.cid);
      });
      if (channelIndex > -1 && event.channel) {
        const newChannels = channels;
        newChannels[channelIndex].data = {
          ...event.channel,
          hidden: ((_a = event.channel) == null ? void 0 : _a.hidden) ?? ((_b = newChannels[channelIndex].data) == null ? void 0 : _b.hidden),
          own_capabilities: ((_c = event.channel) == null ? void 0 : _c.own_capabilities) ?? ((_d = newChannels[channelIndex].data) == null ? void 0 : _d.own_capabilities)
        };
        return [...newChannels];
      }
      return channels;
    });
  }, []);
  const handleUserPresenceChanged = (0, import_react47.useCallback)(({ event, setChannels }) => {
    setChannels((channels) => {
      const newChannels = channels.map((channel) => {
        var _a;
        if (!((_a = event.user) == null ? void 0 : _a.id) || !channel.state.members[event.user.id]) {
          return channel;
        }
        const newChannel = channel;
        newChannel.state.members[event.user.id].user = event.user;
        return newChannel;
      });
      return newChannels;
    });
  }, []);
  return (0, import_react47.useMemo)(() => ({
    handleChannelDeleted,
    handleChannelHidden,
    handleChannelTruncated,
    handleChannelUpdated,
    handleChannelVisible,
    handleMemberUpdated,
    handleMessageNew,
    handleNotificationAddedToChannel,
    handleNotificationMessageNew,
    handleNotificationRemovedFromChannel,
    handleUserPresenceChanged
  }), [
    handleChannelDeleted,
    handleChannelHidden,
    handleChannelTruncated,
    handleChannelUpdated,
    handleChannelVisible,
    handleMemberUpdated,
    handleMessageNew,
    handleNotificationAddedToChannel,
    handleNotificationMessageNew,
    handleNotificationRemovedFromChannel,
    handleUserPresenceChanged
  ]);
};
var usePrepareShapeHandlers = ({ allowNewMessagesFromUnfilteredChannels, customHandleChannelListShape, filters, lockChannelOrder, onAddedToChannel, onChannelDeleted, onChannelHidden, onChannelTruncated, onChannelUpdated, onChannelVisible, onMessageNew, onMessageNewHandler, onRemovedFromChannel, setChannels, sort }) => {
  const defaults2 = useChannelListShapeDefaults();
  const defaultHandleChannelListShapeRef = (0, import_react47.useRef)(void 0);
  const customHandleChannelListShapeRef = (0, import_react47.useRef)(void 0);
  customHandleChannelListShapeRef.current = (event) => {
    customHandleChannelListShape == null ? void 0 : customHandleChannelListShape({ defaults: defaults2, event, setChannels });
  };
  defaultHandleChannelListShapeRef.current = (event) => {
    switch (event.type) {
      case "message.new":
        defaults2.handleMessageNew({
          allowNewMessagesFromUnfilteredChannels,
          customHandler: onMessageNewHandler,
          event,
          filters,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      case "notification.message_new":
        defaults2.handleNotificationMessageNew({
          allowNewMessagesFromUnfilteredChannels,
          customHandler: onMessageNew,
          event,
          filters,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      case "notification.added_to_channel":
        defaults2.handleNotificationAddedToChannel({
          allowNewMessagesFromUnfilteredChannels,
          customHandler: onAddedToChannel,
          event,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      case "notification.removed_from_channel":
        defaults2.handleNotificationRemovedFromChannel({
          customHandler: onRemovedFromChannel,
          event,
          setChannels
        });
        break;
      case "channel.deleted":
        defaults2.handleChannelDeleted({
          customHandler: onChannelDeleted,
          event,
          setChannels
        });
        break;
      case "channel.hidden":
        defaults2.handleChannelHidden({
          customHandler: onChannelHidden,
          event,
          setChannels
        });
        break;
      case "channel.visible":
        defaults2.handleChannelVisible({
          customHandler: onChannelVisible,
          event,
          filters,
          setChannels,
          sort
        });
        break;
      case "channel.truncated":
        defaults2.handleChannelTruncated({
          customHandler: onChannelTruncated,
          event,
          setChannels
        });
        break;
      case "channel.updated":
        defaults2.handleChannelUpdated({
          customHandler: onChannelUpdated,
          event,
          setChannels
        });
        break;
      case "user.presence.changed":
        defaults2.handleUserPresenceChanged({ event, setChannels });
        break;
      case "member.updated":
        defaults2.handleMemberUpdated({
          event,
          filters,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      default:
        break;
    }
  };
  const defaultFn = (0, import_react47.useCallback)((e) => {
    var _a;
    (_a = defaultHandleChannelListShapeRef.current) == null ? void 0 : _a.call(defaultHandleChannelListShapeRef, e);
  }, []);
  const customFn = (0, import_react47.useMemo)(() => {
    if (!customHandleChannelListShape)
      return null;
    return (e) => {
      var _a;
      (_a = customHandleChannelListShapeRef.current) == null ? void 0 : _a.call(customHandleChannelListShapeRef, e);
    };
  }, [customHandleChannelListShape]);
  return {
    customHandler: customFn,
    defaultHandler: defaultFn
  };
};
var useChannelListShape = (handler) => {
  const { client } = useChatContext();
  (0, import_react47.useEffect)(() => {
    const subscription = client.on("all", handler);
    return subscription.unsubscribe;
  }, [client, handler]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelListMessenger.js
var import_react50 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Loading/LoadingChannels.js
var import_react48 = __toESM(require_react());
var LoadingItems = () => import_react48.default.createElement(
  "div",
  { className: "str-chat__loading-channels-item str-chat__channel-preview-loading" },
  import_react48.default.createElement("div", { className: "str-chat__loading-channels-avatar" }),
  import_react48.default.createElement(
    "div",
    { className: "str-chat__loading-channels-meta str-chat__channel-preview-end-loading" },
    import_react48.default.createElement("div", { className: "str-chat__loading-channels-username" }),
    import_react48.default.createElement("div", { className: "str-chat__loading-channels-status" })
  )
);
var UnMemoizedLoadingChannels = () => import_react48.default.createElement(
  "div",
  { className: "str-chat__loading-channels" },
  import_react48.default.createElement(LoadingItems, null),
  import_react48.default.createElement(LoadingItems, null),
  import_react48.default.createElement(LoadingItems, null)
);
var LoadingChannels = import_react48.default.memo(UnMemoizedLoadingChannels);

// node_modules/stream-chat-react/dist/components/UtilityComponents/NullComponent.js
var NullComponent = () => null;

// node_modules/stream-chat-react/dist/components/UtilityComponents/ErrorBoundary.js
var import_react49 = __toESM(require_react());
var ErrorBoundary = class extends import_react49.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  componentDidCatch(error, information) {
    console.error(error, information);
  }
  render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }
    return this.props.children;
  }
};

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelListMessenger.js
var ChannelListMessenger = (props) => {
  const { children, error = null, loading, LoadingErrorIndicator: LoadingErrorIndicator2 = NullComponent, LoadingIndicator: LoadingIndicator2 = LoadingChannels } = props;
  const { t: t2 } = useTranslationContext("ChannelListMessenger");
  if (error) {
    return import_react50.default.createElement(LoadingErrorIndicator2, { error });
  }
  if (loading) {
    return import_react50.default.createElement(LoadingIndicator2, null);
  }
  return import_react50.default.createElement(
    "div",
    { className: "str-chat__channel-list-messenger str-chat__channel-list-messenger-react" },
    import_react50.default.createElement("div", { "aria-label": t2("aria/Channel list"), className: "str-chat__channel-list-messenger__main str-chat__channel-list-messenger-react__main", role: "listbox" }, children)
  );
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/ChannelSearch.js
var import_react56 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelSearch/hooks/useChannelSearch.js
var import_react51 = __toESM(require_react());
var import_lodash5 = __toESM(require_lodash3());
var import_lodash6 = __toESM(require_lodash2());

// node_modules/stream-chat-react/dist/components/ChannelSearch/utils.js
var isChannel = (output) => output.cid != null;

// node_modules/stream-chat-react/dist/components/ChannelSearch/hooks/useChannelSearch.js
var useChannelSearch = ({ channelType = "messaging", clearSearchOnClickOutside = true, disabled = false, onSearch: onSearchCallback, onSearchExit, onSelectResult, searchDebounceIntervalMs = 300, searchForChannels = false, searchForUsers = true, searchFunction, searchQueryParams, setChannels }) => {
  const { client, setActiveChannel } = useChatContext("useChannelSearch");
  const [inputIsFocused, setInputIsFocused] = (0, import_react51.useState)(false);
  const [query, setQuery] = (0, import_react51.useState)("");
  const [results, setResults] = (0, import_react51.useState)([]);
  const [searching, setSearching] = (0, import_react51.useState)(false);
  const searchQueryPromiseInProgress = (0, import_react51.useRef)(false);
  const shouldIgnoreQueryResults = (0, import_react51.useRef)(false);
  const inputRef = (0, import_react51.useRef)(null);
  const searchBarRef = (0, import_react51.useRef)(null);
  const clearState = (0, import_react51.useCallback)(() => {
    setQuery("");
    setResults([]);
    setSearching(false);
    shouldIgnoreQueryResults.current = searchQueryPromiseInProgress.current;
  }, []);
  const activateSearch = (0, import_react51.useCallback)(() => {
    setInputIsFocused(true);
  }, []);
  const exitSearch = (0, import_react51.useCallback)(() => {
    var _a;
    setInputIsFocused(false);
    (_a = inputRef.current) == null ? void 0 : _a.blur();
    clearState();
    onSearchExit == null ? void 0 : onSearchExit();
  }, [clearState, onSearchExit]);
  (0, import_react51.useEffect)(() => {
    if (disabled)
      return;
    const clickListener = (event) => {
      var _a;
      if (!(event.target instanceof HTMLElement))
        return;
      const isInputClick = (_a = searchBarRef.current) == null ? void 0 : _a.contains(event.target);
      if (isInputClick)
        return;
      if (inputIsFocused && !query || clearSearchOnClickOutside) {
        exitSearch();
      }
    };
    document.addEventListener("click", clickListener);
    return () => document.removeEventListener("click", clickListener);
  }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);
  (0, import_react51.useEffect)(() => {
    if (!inputRef.current || disabled)
      return;
    const handleKeyDown = (event) => {
      if (event.key === "Escape")
        return exitSearch();
    };
    inputRef.current.addEventListener("keydown", handleKeyDown);
    return () => {
      var _a;
      (_a = inputRef.current) == null ? void 0 : _a.removeEventListener("keydown", handleKeyDown);
    };
  }, [disabled]);
  const selectResult = (0, import_react51.useCallback)(
    async (result) => {
      if (!client.userID)
        return;
      if (onSelectResult) {
        await onSelectResult({
          setQuery,
          setResults,
          setSearching
        }, result);
        return;
      }
      let selectedChannel;
      if (isChannel(result)) {
        setActiveChannel(result);
        selectedChannel = result;
      } else {
        const newChannel = client.channel(channelType, {
          members: [client.userID, result.id]
        });
        await newChannel.watch();
        setActiveChannel(newChannel);
        selectedChannel = newChannel;
      }
      setChannels == null ? void 0 : setChannels((channels) => (0, import_lodash6.default)([selectedChannel, ...channels], "cid"));
      if (clearSearchOnClickOutside) {
        exitSearch();
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      clearSearchOnClickOutside,
      client,
      exitSearch,
      onSelectResult,
      setActiveChannel,
      setChannels
    ]
  );
  const getChannels = (0, import_react51.useCallback)(async (text8) => {
    var _a, _b, _c, _d, _e2, _f;
    if (!searchForChannels && !searchForUsers)
      return;
    let results2 = [];
    const promises = [];
    try {
      if (searchForChannels) {
        promises.push(client.queryChannels({
          members: { $in: [client.userID] },
          name: { $autocomplete: text8 },
          ...(_a = searchQueryParams == null ? void 0 : searchQueryParams.channelFilters) == null ? void 0 : _a.filters
        }, ((_b = searchQueryParams == null ? void 0 : searchQueryParams.channelFilters) == null ? void 0 : _b.sort) || {}, { limit: 5, ...(_c = searchQueryParams == null ? void 0 : searchQueryParams.channelFilters) == null ? void 0 : _c.options }));
      }
      if (searchForUsers) {
        promises.push(client.queryUsers({
          $or: [{ id: { $autocomplete: text8 } }, { name: { $autocomplete: text8 } }],
          ...(_d = searchQueryParams == null ? void 0 : searchQueryParams.userFilters) == null ? void 0 : _d.filters
        }, { id: 1, ...(_e2 = searchQueryParams == null ? void 0 : searchQueryParams.userFilters) == null ? void 0 : _e2.sort }, { limit: 8, ...(_f = searchQueryParams == null ? void 0 : searchQueryParams.userFilters) == null ? void 0 : _f.options }));
      }
      if (promises.length) {
        searchQueryPromiseInProgress.current = true;
        const resolved = await Promise.all(promises);
        if (searchForChannels && searchForUsers) {
          const [channels, { users }] = resolved;
          results2 = [...channels, ...users.filter((u3) => {
            var _a2;
            return u3.id !== ((_a2 = client.user) == null ? void 0 : _a2.id);
          })];
        } else if (searchForChannels) {
          const [channels] = resolved;
          results2 = [...channels];
        } else if (searchForUsers) {
          const [{ users }] = resolved;
          results2 = [...users.filter((u3) => {
            var _a2;
            return u3.id !== ((_a2 = client.user) == null ? void 0 : _a2.id);
          })];
        }
      }
    } catch (error) {
      console.error(error);
    }
    setSearching(false);
    if (!shouldIgnoreQueryResults.current) {
      setResults(results2);
    } else {
      shouldIgnoreQueryResults.current = false;
    }
    searchQueryPromiseInProgress.current = false;
  }, [client, searchForChannels, searchForUsers, searchQueryParams]);
  const scheduleGetChannels = (0, import_react51.useCallback)((0, import_lodash5.default)(getChannels, searchDebounceIntervalMs), [getChannels, searchDebounceIntervalMs]);
  const onSearch = (0, import_react51.useCallback)((event) => {
    event.preventDefault();
    if (disabled)
      return;
    if (searchFunction) {
      searchFunction({
        setQuery,
        setResults,
        setSearching
      }, event);
    } else if (!searchForChannels && !searchForUsers) {
      return;
    } else if (event.target.value) {
      setSearching(true);
      setQuery(event.target.value);
      scheduleGetChannels(event.target.value);
    } else if (!event.target.value) {
      clearState();
      scheduleGetChannels.cancel();
    }
    onSearchCallback == null ? void 0 : onSearchCallback(event);
  }, [
    clearState,
    disabled,
    scheduleGetChannels,
    onSearchCallback,
    searchForChannels,
    searchForUsers,
    searchFunction
  ]);
  return {
    activateSearch,
    clearState,
    exitSearch,
    inputIsFocused,
    inputRef,
    onSearch,
    query,
    results,
    searchBarRef,
    searching,
    selectResult
  };
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchBar.js
var import_react54 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelSearch/icons.js
var import_react52 = __toESM(require_react());
var MenuIcon = () => import_react52.default.createElement(
  "svg",
  { "data-testid": "menu-icon", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react52.default.createElement("path", { clipRule: "evenodd", d: "M3 8V6H21V8H3ZM3 13H21V11H3V13ZM3 18H21V16H3V18Z", fill: "black", fillRule: "evenodd" })
);
var ReturnIcon = () => import_react52.default.createElement(
  "svg",
  { "data-testid": "return-icon", fill: "none", height: "20", viewBox: "0 0 22 22", width: "20", xmlns: "http://www.w3.org/2000/svg" },
  import_react52.default.createElement("path", { d: "M21.6668 9.66666V12.3333H5.6529L12.9932 19.6736L11.1076 21.5592L0.54834 11L11.1076 0.440765L12.9932 2.32638L5.6529 9.66666H21.6668Z", fill: "#080707" })
);
var XIcon = () => import_react52.default.createElement(
  "svg",
  { fill: "none", height: "14", viewBox: "0 0 14 14", width: "14", xmlns: "http://www.w3.org/2000/svg" },
  import_react52.default.createElement("path", { d: "M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z", fill: "#747881" })
);
var SearchIcon = ({ className }) => import_react52.default.createElement(
  "svg",
  { className, fill: "none", height: "18", viewBox: "0 0 18 18", width: "18", xmlns: "http://www.w3.org/2000/svg" },
  import_react52.default.createElement("path", { d: "M12.7549 11.255H11.9649L11.6849 10.985C12.6649 9.845 13.2549 8.365 13.2549 6.755C13.2549 3.165 10.3449 0.255005 6.75488 0.255005C3.16488 0.255005 0.254883 3.165 0.254883 6.755C0.254883 10.345 3.16488 13.255 6.75488 13.255C8.36488 13.255 9.84488 12.665 10.9849 11.685L11.2549 11.965V12.755L16.2549 17.745L17.7449 16.255L12.7549 11.255ZM6.75488 11.255C4.26488 11.255 2.25488 9.245 2.25488 6.755C2.25488 4.26501 4.26488 2.255 6.75488 2.255C9.24488 2.255 11.2549 4.26501 11.2549 6.755C11.2549 9.245 9.24488 11.255 6.75488 11.255Z", fill: "#747881" })
);

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchInput.js
var import_react53 = __toESM(require_react());
var SearchInput = (props) => {
  const { disabled, inputRef, onSearch, placeholder, query } = props;
  const { t: t2 } = useTranslationContext("SearchInput");
  return import_react53.default.createElement("input", { className: "str-chat__channel-search-input", "data-testid": "search-input", disabled, onChange: onSearch, placeholder: placeholder ?? t2("Search"), ref: inputRef, type: "text", value: query });
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchBar.js
var SearchBarButton = ({ children, className, onClick }) => import_react54.default.createElement("button", { className: clsx_default("str-chat__channel-search-bar-button", className), "data-testid": "search-bar-button", onClick }, children);
var SearchBar = (props) => {
  const { activateSearch, AppMenu, ClearInputIcon = XIcon, exitSearch, ExitSearchIcon = ReturnIcon, inputIsFocused, MenuIcon: MenuIcon3 = MenuIcon, searchBarRef, SearchInput: SearchInput2 = SearchInput, SearchInputIcon = SearchIcon, ...inputProps } = props;
  const [menuIsOpen, setMenuIsOpen] = (0, import_react54.useState)(false);
  const appMenuRef = (0, import_react54.useRef)(null);
  (0, import_react54.useEffect)(() => {
    if (!appMenuRef.current)
      return;
    const handleKeyDown = (event) => {
      if (menuIsOpen && event.key === "Escape") {
        setMenuIsOpen(false);
      }
    };
    const clickListener = (e) => {
      var _a;
      if (!(e.target instanceof HTMLElement) || !menuIsOpen || ((_a = appMenuRef.current) == null ? void 0 : _a.contains(e.target)))
        return;
      setMenuIsOpen(false);
    };
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("click", clickListener);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("click", clickListener);
    };
  }, [menuIsOpen]);
  (0, import_react54.useEffect)(() => {
    if (!props.inputRef.current)
      return;
    const input = props.inputRef.current;
    const handleFocus = () => {
      activateSearch();
    };
    const handleBlur = (e) => {
      e.stopPropagation();
    };
    input.addEventListener("focus", handleFocus);
    input.addEventListener("blur", handleBlur);
    return () => {
      input.removeEventListener("focus", handleFocus);
      input.removeEventListener("blur", handleBlur);
    };
  }, [activateSearch, props.inputRef]);
  const handleClearClick = (0, import_react54.useCallback)(() => {
    var _a;
    exitSearch();
    (_a = inputProps.inputRef.current) == null ? void 0 : _a.focus();
  }, [exitSearch, inputProps.inputRef]);
  const closeAppMenu = (0, import_react54.useCallback)(() => setMenuIsOpen(false), []);
  return import_react54.default.createElement(
    "div",
    { className: "str-chat__channel-search-bar", "data-testid": "search-bar", ref: searchBarRef },
    inputIsFocused ? import_react54.default.createElement(
      SearchBarButton,
      { className: "str-chat__channel-search-bar-button--exit-search", onClick: exitSearch },
      import_react54.default.createElement(ExitSearchIcon, null)
    ) : AppMenu ? import_react54.default.createElement(
      SearchBarButton,
      { className: "str-chat__channel-search-bar-button--menu", onClick: () => setMenuIsOpen((prev) => !prev) },
      import_react54.default.createElement(MenuIcon3, null)
    ) : null,
    import_react54.default.createElement(
      "div",
      { className: clsx_default("str-chat__channel-search-input--wrapper", inputProps.query && "str-chat__channel-search-input--wrapper-active") },
      import_react54.default.createElement(
        "div",
        { className: "str-chat__channel-search-input--icon" },
        import_react54.default.createElement(SearchInputIcon, null)
      ),
      import_react54.default.createElement(SearchInput2, { ...inputProps }),
      import_react54.default.createElement(
        "button",
        { className: "str-chat__channel-search-input--clear-button", "data-testid": "clear-input-button", disabled: !inputProps.query, onClick: handleClearClick },
        import_react54.default.createElement(ClearInputIcon, null)
      )
    ),
    menuIsOpen && AppMenu && import_react54.default.createElement(
      "div",
      { ref: appMenuRef },
      import_react54.default.createElement(AppMenu, { close: closeAppMenu })
    )
  );
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchResults.js
var import_react55 = __toESM(require_react());
var DefaultSearchEmpty = () => {
  const { t: t2 } = useTranslationContext("SearchResults");
  return import_react55.default.createElement(
    "div",
    { "aria-live": "polite", className: "str-chat__channel-search-container-empty" },
    import_react55.default.createElement(SearchIcon, null),
    t2("No results found")
  );
};
var DefaultSearchResultsHeader = ({ results }) => {
  const { t: t2 } = useTranslationContext("SearchResultsHeader");
  return import_react55.default.createElement("div", { className: "str-chat__channel-search-results-header", "data-testid": "channel-search-results-header" }, t2("searchResultsCount", {
    count: results.length
  }));
};
var DefaultSearchResultsList = (props) => {
  const { focusedUser, results, SearchResultItem, selectResult } = props;
  return import_react55.default.createElement(import_react55.default.Fragment, null, results.map((result, index4) => import_react55.default.createElement(SearchResultItem, { focusedUser, index: index4, key: index4, result, selectResult })));
};
var DefaultSearchResultItem = (props) => {
  const { focusedUser, index: index4, result, selectResult } = props;
  const focused = focusedUser === index4;
  const className = clsx_default("str-chat__channel-search-result", focused && "str-chat__channel-search-result--focused");
  if (isChannel(result)) {
    const channel = result;
    return import_react55.default.createElement(ChannelPreview, { channel, className, onSelect: () => selectResult(channel) });
  } else {
    return import_react55.default.createElement(
      "button",
      { "aria-label": `Select User Channel: ${result.name || ""}`, className, "data-testid": "channel-search-result-user", onClick: () => selectResult(result), role: "option" },
      import_react55.default.createElement(Avatar, { className: "str-chat__avatar--channel-preview", image: result.image, name: result.name || result.id, user: result }),
      import_react55.default.createElement("div", { className: "str-chat__channel-search-result--display-name" }, result.name || result.id)
    );
  }
};
var ResultsContainer = ({ children, popupResults }) => {
  const { t: t2 } = useTranslationContext("ResultsContainer");
  return import_react55.default.createElement("div", { "aria-label": t2("aria/Channel search results"), className: clsx_default(`str-chat__channel-search-result-list`, popupResults ? "popup" : "inline") }, children);
};
var SearchResults = (props) => {
  const { popupResults, results, SearchEmpty = DefaultSearchEmpty, searching, SearchLoading, SearchResultItem = DefaultSearchResultItem, SearchResultsHeader = DefaultSearchResultsHeader, SearchResultsList = DefaultSearchResultsList, selectResult } = props;
  const { t: t2 } = useTranslationContext("SearchResults");
  const [focusedResult, setFocusedResult] = (0, import_react55.useState)();
  const handleKeyDown = (0, import_react55.useCallback)((event) => {
    if (event.key === "ArrowUp") {
      setFocusedResult((prevFocused) => {
        if (prevFocused === void 0)
          return 0;
        return prevFocused === 0 ? results.length - 1 : prevFocused - 1;
      });
    }
    if (event.key === "ArrowDown") {
      setFocusedResult((prevFocused) => {
        if (prevFocused === void 0)
          return 0;
        return prevFocused === results.length - 1 ? 0 : prevFocused + 1;
      });
    }
    if (event.key === "Enter") {
      event.preventDefault();
      setFocusedResult((prevFocused) => {
        if (typeof prevFocused !== "undefined") {
          selectResult(results[prevFocused]);
          return void 0;
        }
        return prevFocused;
      });
    }
  }, [results, selectResult]);
  (0, import_react55.useEffect)(() => {
    document.addEventListener("keydown", handleKeyDown, false);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [handleKeyDown]);
  if (searching) {
    return import_react55.default.createElement(ResultsContainer, { popupResults }, SearchLoading ? import_react55.default.createElement(SearchLoading, null) : import_react55.default.createElement("div", { className: "str-chat__channel-search-container-searching", "data-testid": "search-in-progress-indicator" }, t2("Searching...")));
  }
  if (!results.length) {
    return import_react55.default.createElement(
      ResultsContainer,
      { popupResults },
      import_react55.default.createElement(SearchEmpty, null)
    );
  }
  return import_react55.default.createElement(
    ResultsContainer,
    { popupResults },
    import_react55.default.createElement(SearchResultsHeader, { results }),
    import_react55.default.createElement(SearchResultsList, { focusedUser: focusedResult, results, SearchResultItem, selectResult })
  );
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/ChannelSearch.js
var UnMemoizedChannelSearch = (props) => {
  const { AppMenu, ClearInputIcon, ExitSearchIcon, MenuIcon: MenuIcon3, placeholder, popupResults = false, SearchBar: SearchBar2 = SearchBar, SearchEmpty, SearchInput: SearchInput2 = SearchInput, SearchInputIcon, SearchLoading, SearchResultItem, SearchResultsHeader, SearchResultsList, ...channelSearchParams } = props;
  const { activateSearch, clearState, exitSearch, inputIsFocused, inputRef, onSearch, query, results, searchBarRef, searching, selectResult } = useChannelSearch(channelSearchParams);
  return import_react56.default.createElement(
    "div",
    { className: clsx_default("str-chat__channel-search", popupResults ? "str-chat__channel-search--popup" : "str-chat__channel-search--inline", {
      "str-chat__channel-search--with-results": results.length > 0
    }), "data-testid": "channel-search" },
    import_react56.default.createElement(SearchBar2, { activateSearch, AppMenu, ClearInputIcon, clearState, disabled: channelSearchParams.disabled, exitSearch, ExitSearchIcon, inputIsFocused, inputRef, MenuIcon: MenuIcon3, onSearch, placeholder, query, searchBarRef, SearchInput: SearchInput2, SearchInputIcon }),
    query && import_react56.default.createElement(SearchResults, { popupResults, results, SearchEmpty, searching, SearchLoading, SearchResultItem, SearchResultsHeader, SearchResultsList, selectResult })
  );
};
var ChannelSearch = import_react56.default.memo(UnMemoizedChannelSearch);

// node_modules/stream-chat-react/dist/components/EmptyStateIndicator/EmptyStateIndicator.js
var import_react58 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/EmptyStateIndicator/icons.js
var import_react57 = __toESM(require_react());
var ChatBubble = () => import_react57.default.createElement(
  "svg",
  { "data-testid": "chat-bubble", fill: "none", height: "96", viewBox: "0 0 136 136", width: "96", xmlns: "http://www.w3.org/2000/svg" },
  import_react57.default.createElement("path", { d: "M106 24.5H30C24.775 24.5 20.5 28.775 20.5 34V119.5L39.5 100.5H106C111.225 100.5 115.5 96.225 115.5 91V34C115.5 28.775 111.225 24.5 106 24.5ZM106 91H39.5L30 100.5V34H106V91Z", fill: "#B4B7BB" })
);

// node_modules/stream-chat-react/dist/components/EmptyStateIndicator/EmptyStateIndicator.js
var UnMemoizedEmptyStateIndicator = (props) => {
  const { listType } = props;
  const { t: t2 } = useTranslationContext("EmptyStateIndicator");
  if (listType === "thread")
    return null;
  if (listType === "channel") {
    const text8 = t2("You have no channels currently");
    return import_react58.default.createElement(
      import_react58.default.Fragment,
      null,
      import_react58.default.createElement(
        "div",
        { className: "str-chat__channel-list-empty" },
        import_react58.default.createElement(ChatBubble, null),
        import_react58.default.createElement("p", { role: "listitem" }, text8)
      )
    );
  }
  if (listType === "message") {
    const text8 = t2("No chats here yet…");
    return import_react58.default.createElement(
      "div",
      { className: "str-chat__empty-channel" },
      import_react58.default.createElement(ChatBubble, null),
      import_react58.default.createElement("p", { className: "str-chat__empty-channel-text", role: "listitem" }, text8)
    );
  }
  return import_react58.default.createElement("p", null, "No items exist");
};
var EmptyStateIndicator = import_react58.default.memo(UnMemoizedEmptyStateIndicator);

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMorePaginator.js
var import_react63 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMoreButton.js
var import_react62 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Loading/LoadingChannel.js
var import_react59 = __toESM(require_react());
var LoadingMessage = () => import_react59.default.createElement(
  "div",
  { className: "str-chat__loading-channel-message" },
  import_react59.default.createElement("div", { className: "str-chat__loading-channel-message-avatar" }),
  import_react59.default.createElement(
    "div",
    { className: "str-chat__loading-channel-message-end" },
    import_react59.default.createElement("div", { className: "str-chat__loading-channel-message-sender" }),
    import_react59.default.createElement(
      "div",
      { className: "str-chat__loading-channel-message-last-row" },
      import_react59.default.createElement("div", { className: "str-chat__loading-channel-message-text" }),
      import_react59.default.createElement("div", { className: "str-chat__loading-channel-message-date" })
    )
  )
);
var LoadingMessageInput = () => import_react59.default.createElement(
  "div",
  { className: "str-chat__loading-channel-message-input-row" },
  import_react59.default.createElement("div", { className: "str-chat__loading-channel-message-input" }),
  import_react59.default.createElement("div", { className: "str-chat__loading-channel-message-send" })
);
var LoadingChannelHeader = () => import_react59.default.createElement(
  "div",
  { className: "str-chat__loading-channel-header" },
  import_react59.default.createElement("div", { className: "str-chat__loading-channel-header-avatar" }),
  import_react59.default.createElement(
    "div",
    { className: "str-chat__loading-channel-header-end" },
    import_react59.default.createElement("div", { className: "str-chat__loading-channel-header-name" }),
    import_react59.default.createElement("div", { className: "str-chat__loading-channel-header-info" })
  )
);
var LoadingChannel = () => import_react59.default.createElement(
  "div",
  { className: "str-chat__loading-channel" },
  import_react59.default.createElement(LoadingChannelHeader, null),
  import_react59.default.createElement("div", { className: "str-chat__loading-channel-message-list" }, Array.from(Array(3)).map((_2, i2) => import_react59.default.createElement(LoadingMessage, { key: `loading-message-${i2}` }))),
  import_react59.default.createElement(LoadingMessageInput, null)
);

// node_modules/stream-chat-react/dist/components/Loading/LoadingErrorIndicator.js
var import_react60 = __toESM(require_react());
var UnMemoizedLoadingErrorIndicator = ({ error }) => {
  const { t: t2 } = useTranslationContext("LoadingErrorIndicator");
  if (!error)
    return null;
  return import_react60.default.createElement("div", null, t2("Error: {{ errorMessage }}", { errorMessage: error.message }));
};
var LoadingErrorIndicator = import_react60.default.memo(UnMemoizedLoadingErrorIndicator, (prevProps, nextProps) => {
  var _a, _b;
  return ((_a = prevProps.error) == null ? void 0 : _a.message) === ((_b = nextProps.error) == null ? void 0 : _b.message);
});

// node_modules/stream-chat-react/dist/components/Loading/LoadingIndicator.js
var import_react61 = __toESM(require_react());
var UnMemoizedLoadingIndicator = (props) => {
  const { color: color2 = "#006CFF", size = 15 } = props;
  return import_react61.default.createElement(
    "div",
    { className: `str-chat__loading-indicator`, "data-testid": "loading-indicator-wrapper", style: { height: size, width: size } },
    import_react61.default.createElement(
      "svg",
      { height: size, viewBox: `0 0 30 30`, width: size, xmlns: "http://www.w3.org/2000/svg" },
      import_react61.default.createElement(
        "defs",
        null,
        import_react61.default.createElement(
          "linearGradient",
          { id: "a", x1: "50%", x2: "50%", y1: "0%", y2: "100%" },
          import_react61.default.createElement("stop", { offset: "0%", stopColor: "#FFF", stopOpacity: "0" }),
          import_react61.default.createElement("stop", { "data-testid": "loading-indicator-circle", offset: "100%", stopColor: color2, stopOpacity: "1", style: { stopColor: color2 } })
        )
      ),
      import_react61.default.createElement("path", { d: "M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z", fill: "url(#a)", fillRule: "evenodd" })
    )
  );
};
var LoadingIndicator = import_react61.default.memo(UnMemoizedLoadingIndicator, (prevProps, nextProps) => prevProps.color === nextProps.color && prevProps.size === nextProps.size);

// node_modules/stream-chat-react/dist/utils/deprecationWarning.js
var deprecationAndReplacementWarning = (pairs, component) => {
  pairs.forEach((data) => {
    const [[oldName, oldValue], [newName, newValue]] = [
      Object.entries(data[0])[0],
      Object.entries(data[1])[0]
    ];
    if (typeof oldValue !== "undefined" && typeof newValue === "undefined" || typeof oldValue !== "undefined" && typeof newValue !== "undefined") {
      console.warn(`[Deprecation notice (${component})]: prefer using prop ${newName} instead of ${oldName}`);
    }
  });
};

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMoreButton.js
var UnMemoizedLoadMoreButton = ({ children, isLoading, onClick, refreshing }) => {
  const { t: t2 } = useTranslationContext("UnMemoizedLoadMoreButton");
  const childrenOrDefaultString = children ?? t2("Load more");
  const loading = typeof isLoading !== "undefined" ? isLoading : refreshing;
  (0, import_react62.useEffect)(() => {
    deprecationAndReplacementWarning([[{ refreshing }, { isLoading }]], "LoadMoreButton");
  }, []);
  return import_react62.default.createElement(
    "div",
    { className: "str-chat__load-more-button" },
    import_react62.default.createElement("button", { "aria-label": t2("aria/Load More Channels"), className: "str-chat__load-more-button__button str-chat__cta-button", "data-testid": "load-more-button", disabled: loading, onClick }, loading ? import_react62.default.createElement(LoadingIndicator, null) : childrenOrDefaultString)
  );
};
var LoadMoreButton = import_react62.default.memo(UnMemoizedLoadMoreButton);

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMorePaginator.js
var UnMemoizedLoadMorePaginator = (props) => {
  const { children, hasNextPage, isLoading, LoadMoreButton: LoadMoreButton2 = LoadMoreButton, loadNextPage, refreshing, reverse } = props;
  const loadingState = typeof isLoading !== "undefined" ? isLoading : refreshing;
  (0, import_react63.useEffect)(() => {
    deprecationAndReplacementWarning([[{ refreshing }, { isLoading }]], "LoadMorePaginator");
  }, []);
  return import_react63.default.createElement(
    import_react63.default.Fragment,
    null,
    !reverse && children,
    hasNextPage && import_react63.default.createElement(LoadMoreButton2, { isLoading: loadingState, onClick: loadNextPage }),
    reverse && children
  );
};
var LoadMorePaginator = import_react63.default.memo(UnMemoizedLoadMorePaginator);

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelList.js
var DEFAULT_FILTERS = {};
var DEFAULT_OPTIONS = {};
var DEFAULT_SORT = {};
var searchControllerStateSelector = (nextValue) => ({
  searchIsActive: nextValue.isActive
});
var UnMemoizedChannelList = (props) => {
  const { additionalChannelSearchProps, allowNewMessagesFromUnfilteredChannels = true, Avatar: Avatar2 = Avatar, channelRenderFilterFn, ChannelSearch: ChannelSearch2 = ChannelSearch, customActiveChannel, customQueryChannels, EmptyStateIndicator: EmptyStateIndicator2 = EmptyStateIndicator, filters = {}, getLatestMessagePreview: getLatestMessagePreview2, List = ChannelListMessenger, LoadingErrorIndicator: LoadingErrorIndicator2 = NullComponent, LoadingIndicator: LoadingIndicator2 = LoadingChannels, lockChannelOrder = false, onAddedToChannel, onChannelDeleted, onChannelHidden, onChannelTruncated, onChannelUpdated, onChannelVisible, onMessageNew, onMessageNewHandler, onRemovedFromChannel, options: options2, Paginator = LoadMorePaginator, Preview, recoveryThrottleIntervalMs, renderChannels, sendChannelsToList = false, setActiveChannelOnMount = true, showChannelSearch = false, sort = DEFAULT_SORT, watchers = {} } = props;
  const { channel, channelsQueryState, client, closeMobileNav, customClasses, navOpen = false, searchController, setActiveChannel, theme, useImageFlagEmojisOnWindows } = useChatContext("ChannelList");
  const { Search } = useComponentContext();
  const channelListRef = (0, import_react64.useRef)(null);
  const [channelUpdateCount, setChannelUpdateCount] = (0, import_react64.useState)(0);
  const [searchActive, setSearchActive] = (0, import_react64.useState)(false);
  const { searchIsActive } = useStateStore(searchController.state, searchControllerStateSelector);
  const activeChannelHandler = async (channels2, setChannels2) => {
    if (!channels2.length || channels2.length > ((options2 == null ? void 0 : options2.limit) || MAX_QUERY_CHANNELS_LIMIT)) {
      return;
    }
    if (customActiveChannel) {
      let customActiveChannelObject = channels2.find((chan) => chan.id === customActiveChannel);
      if (!customActiveChannelObject) {
        [customActiveChannelObject] = await client.queryChannels({
          id: customActiveChannel
        });
      }
      if (customActiveChannelObject) {
        setActiveChannel(customActiveChannelObject, watchers);
        const newChannels = moveChannelUpwards({
          channels: channels2,
          channelToMove: customActiveChannelObject,
          sort
        });
        setChannels2(newChannels);
      }
      return;
    }
    if (setActiveChannelOnMount) {
      setActiveChannel(channels2[0], watchers);
    }
  };
  const forceUpdate = (0, import_react64.useCallback)(() => setChannelUpdateCount((count) => count + 1), []);
  const onSearch = (0, import_react64.useCallback)((event) => {
    var _a;
    setSearchActive(!!event.target.value);
    (_a = additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.onSearch) == null ? void 0 : _a.call(additionalChannelSearchProps, event);
  }, [additionalChannelSearchProps]);
  const onSearchExit = (0, import_react64.useCallback)(() => {
    var _a;
    setSearchActive(false);
    (_a = additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.onSearchExit) == null ? void 0 : _a.call(additionalChannelSearchProps);
  }, [additionalChannelSearchProps]);
  const { channels, hasNextPage, loadNextPage, setChannels } = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options2 || DEFAULT_OPTIONS, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels);
  const loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;
  useMobileNavigation(channelListRef, navOpen, closeMobileNav);
  const { customHandler, defaultHandler } = usePrepareShapeHandlers({
    allowNewMessagesFromUnfilteredChannels,
    filters,
    lockChannelOrder,
    onAddedToChannel,
    onChannelDeleted,
    onChannelHidden,
    onChannelTruncated,
    onChannelUpdated,
    onChannelVisible,
    onMessageNew,
    onMessageNewHandler,
    onRemovedFromChannel,
    setChannels,
    sort
    // TODO: implement
    // customHandleChannelListShape
  });
  useChannelListShape(customHandler ?? defaultHandler);
  useConnectionRecoveredListener(forceUpdate);
  (0, import_react64.useEffect)(() => {
    const handleEvent = (event) => {
      if (event.cid === (channel == null ? void 0 : channel.cid)) {
        setActiveChannel();
      }
    };
    client.on("channel.deleted", handleEvent);
    client.on("channel.hidden", handleEvent);
    return () => {
      client.off("channel.deleted", handleEvent);
      client.off("channel.hidden", handleEvent);
    };
  }, [channel == null ? void 0 : channel.cid]);
  const renderChannel = (item) => {
    const previewProps = {
      activeChannel: channel,
      Avatar: Avatar2,
      channel: item,
      // forces the update of preview component on channel update
      channelUpdateCount,
      getLatestMessagePreview: getLatestMessagePreview2,
      key: item.cid,
      Preview,
      setActiveChannel,
      watchers
    };
    return import_react64.default.createElement(ChannelPreview, { ...previewProps });
  };
  const baseClass = "str-chat__channel-list";
  const className = clsx_default((customClasses == null ? void 0 : customClasses.chat) ?? "str-chat", theme, (customClasses == null ? void 0 : customClasses.channelList) ?? `${baseClass} ${baseClass}-react`, {
    "str-chat--windows-flags": useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),
    [`${baseClass}--open`]: navOpen
  });
  const showChannelList = !searchActive && !searchIsActive || (additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.popupResults);
  return import_react64.default.createElement(
    ChannelListContextProvider,
    { value: { channels, hasNextPage, loadNextPage, setChannels } },
    import_react64.default.createElement(
      "div",
      { className, ref: channelListRef },
      showChannelSearch && (Search ? import_react64.default.createElement(Search, { directMessagingChannelType: additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.channelType, disabled: additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.disabled, exitSearchOnInputBlur: additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.clearSearchOnClickOutside, placeholder: additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.placeholder }) : import_react64.default.createElement(ChannelSearch2, { onSearch, onSearchExit, setChannels, ...additionalChannelSearchProps })),
      showChannelList && import_react64.default.createElement(List, { error: channelsQueryState.error, loadedChannels: sendChannelsToList ? loadedChannels : void 0, loading: !!channelsQueryState.queryInProgress && ["reload", "uninitialized"].includes(channelsQueryState.queryInProgress), LoadingErrorIndicator: LoadingErrorIndicator2, LoadingIndicator: LoadingIndicator2, setChannels }, !(loadedChannels == null ? void 0 : loadedChannels.length) ? import_react64.default.createElement(EmptyStateIndicator2, { listType: "channel" }) : import_react64.default.createElement(Paginator, { hasNextPage, isLoading: channelsQueryState.queryInProgress === "load-more", loadNextPage }, renderChannels ? renderChannels(loadedChannels, renderChannel) : loadedChannels.map((channel2) => renderChannel(channel2))))
    )
  );
};
var ChannelList = import_react64.default.memo(UnMemoizedChannelList);

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelDeletedListener.js
var import_react65 = __toESM(require_react());
var useChannelDeletedListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useChannelDeletedListener");
  (0, import_react65.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => {
          const channelIndex = channels.findIndex((channel) => channel.cid === event.cid);
          if (channelIndex < 0)
            return [...channels];
          channels.splice(channelIndex, 1);
          return [...channels];
        });
      }
    };
    client.on("channel.deleted", handleEvent);
    return () => {
      client.off("channel.deleted", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelHiddenListener.js
var import_react66 = __toESM(require_react());
var useChannelHiddenListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useChannelHiddenListener");
  (0, import_react66.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => {
          const channelIndex = channels.findIndex((channel) => channel.cid === event.cid);
          if (channelIndex < 0)
            return [...channels];
          channels.splice(channelIndex, 1);
          return [...channels];
        });
      }
    };
    client.on("channel.hidden", handleEvent);
    return () => {
      client.off("channel.hidden", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelTruncatedListener.js
var import_react67 = __toESM(require_react());
var useChannelTruncatedListener = (setChannels, customHandler, forceUpdate) => {
  const { client } = useChatContext("useChannelTruncatedListener");
  (0, import_react67.useEffect)(() => {
    const handleEvent = (event) => {
      setChannels((channels) => [...channels]);
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      }
      if (forceUpdate) {
        forceUpdate();
      }
    };
    client.on("channel.truncated", handleEvent);
    return () => {
      client.off("channel.truncated", handleEvent);
    };
  }, [client, customHandler, forceUpdate, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelUpdatedListener.js
var import_react68 = __toESM(require_react());
var useChannelUpdatedListener = (setChannels, customHandler, forceUpdate) => {
  const { client } = useChatContext("useChannelUpdatedListener");
  (0, import_react68.useEffect)(() => {
    const handleEvent = (event) => {
      setChannels((channels) => {
        var _a, _b, _c, _d;
        const channelIndex = channels.findIndex((channel) => {
          var _a2;
          return channel.cid === ((_a2 = event.channel) == null ? void 0 : _a2.cid);
        });
        if (channelIndex > -1 && event.channel) {
          const newChannels = channels;
          newChannels[channelIndex].data = {
            ...event.channel,
            hidden: ((_a = event.channel) == null ? void 0 : _a.hidden) ?? ((_b = newChannels[channelIndex].data) == null ? void 0 : _b.hidden),
            own_capabilities: ((_c = event.channel) == null ? void 0 : _c.own_capabilities) ?? ((_d = newChannels[channelIndex].data) == null ? void 0 : _d.own_capabilities)
          };
          return [...newChannels];
        }
        return channels;
      });
      if (forceUpdate) {
        forceUpdate();
      }
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      }
    };
    client.on("channel.updated", handleEvent);
    return () => {
      client.off("channel.updated", handleEvent);
    };
  }, [client, customHandler, forceUpdate, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelVisibleListener.js
var import_react69 = __toESM(require_react());
var import_lodash7 = __toESM(require_lodash2());
var useChannelVisibleListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useChannelVisibleListener");
  (0, import_react69.useEffect)(() => {
    const handleEvent = async (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else if (event.type && event.channel_type && event.channel_id) {
        const channel = await getChannel({
          client,
          id: event.channel_id,
          type: event.channel_type
        });
        setChannels((channels) => (0, import_lodash7.default)([channel, ...channels], "cid"));
      }
    };
    client.on("channel.visible", handleEvent);
    return () => {
      client.off("channel.visible", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMessageNewListener.js
var import_react70 = __toESM(require_react());
var import_lodash8 = __toESM(require_lodash2());
var useMessageNewListener = (setChannels, customHandler, lockChannelOrder = false, allowNewMessagesFromUnfilteredChannels = true) => {
  const { client } = useChatContext("useMessageNewListener");
  (0, import_react70.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => {
          const channelInList = channels.filter((channel) => channel.cid === event.cid).length > 0;
          if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {
            const channel = client.channel(event.channel_type, event.channel_id);
            return (0, import_lodash8.default)([channel, ...channels], "cid");
          }
          if (!lockChannelOrder)
            return moveChannelUp({ channels, cid: event.cid || "" });
          return channels;
        });
      }
    };
    client.on("message.new", handleEvent);
    return () => {
      client.off("message.new", handleEvent);
    };
  }, [
    allowNewMessagesFromUnfilteredChannels,
    client,
    customHandler,
    lockChannelOrder,
    setChannels
  ]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationAddedToChannelListener.js
var import_react71 = __toESM(require_react());
var import_lodash9 = __toESM(require_lodash2());
var useNotificationAddedToChannelListener = (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels = true) => {
  const { client } = useChatContext("useNotificationAddedToChannelListener");
  (0, import_react71.useEffect)(() => {
    const handleEvent = async (event) => {
      var _a, _b;
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else if (allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) == null ? void 0 : _a.type)) {
        const channel = await getChannel({
          client,
          id: event.channel.id,
          members: (_b = event.channel.members) == null ? void 0 : _b.reduce((acc, { user, user_id }) => {
            const userId = user_id || (user == null ? void 0 : user.id);
            if (userId) {
              acc.push(userId);
            }
            return acc;
          }, []),
          type: event.channel.type
        });
        setChannels((channels) => (0, import_lodash9.default)([channel, ...channels], "cid"));
      }
    };
    client.on("notification.added_to_channel", handleEvent);
    return () => {
      client.off("notification.added_to_channel", handleEvent);
    };
  }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationMessageNewListener.js
var import_react72 = __toESM(require_react());
var import_lodash10 = __toESM(require_lodash2());
var useNotificationMessageNewListener = (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels = true) => {
  const { client } = useChatContext("useNotificationMessageNewListener");
  (0, import_react72.useEffect)(() => {
    const handleEvent = async (event) => {
      var _a;
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else if (allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) == null ? void 0 : _a.type)) {
        const channel = await getChannel({
          client,
          id: event.channel.id,
          type: event.channel.type
        });
        setChannels((channels) => (0, import_lodash10.default)([channel, ...channels], "cid"));
      }
    };
    client.on("notification.message_new", handleEvent);
    return () => {
      client.off("notification.message_new", handleEvent);
    };
  }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationRemovedFromChannelListener.js
var import_react73 = __toESM(require_react());
var useNotificationRemovedFromChannelListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useNotificationRemovedFromChannelListener");
  (0, import_react73.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => channels.filter((channel) => {
          var _a;
          return channel.cid !== ((_a = event.channel) == null ? void 0 : _a.cid);
        }));
      }
    };
    client.on("notification.removed_from_channel", handleEvent);
    return () => {
      client.off("notification.removed_from_channel", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useUserPresenceChangedListener.js
var import_react74 = __toESM(require_react());
var useUserPresenceChangedListener = (setChannels) => {
  const { client } = useChatContext("useUserPresenceChangedListener");
  (0, import_react74.useEffect)(() => {
    const handleEvent = (event) => {
      setChannels((channels) => {
        const newChannels = channels.map((channel) => {
          var _a;
          if (!((_a = event.user) == null ? void 0 : _a.id) || !channel.state.members[event.user.id]) {
            return channel;
          }
          const newChannel = channel;
          newChannel.state.members[event.user.id].user = event.user;
          return newChannel;
        });
        return [...newChannels];
      });
    };
    client.on("user.presence.changed", handleEvent);
    return () => {
      client.off("user.presence.changed", handleEvent);
    };
  }, [client, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useSelectedChannelState.js
var import_react75 = __toESM(require_react());
var import_shim2 = __toESM(require_shim());
var noop4 = () => {
};
function useSelectedChannelState({ channel, selector: selector8, stateChangeEventKeys = ["all"] }) {
  const subscribe2 = (0, import_react75.useCallback)((onStoreChange) => {
    if (!channel)
      return noop4;
    const subscriptions = stateChangeEventKeys.map((et2) => channel.on(et2, () => {
      onStoreChange(selector8(channel));
    }));
    return () => subscriptions.forEach((subscription) => subscription.unsubscribe());
  }, [channel, selector8, stateChangeEventKeys]);
  const getSnapshot = (0, import_react75.useCallback)(() => {
    if (!channel)
      return void 0;
    return selector8(channel);
  }, [channel, selector8]);
  return (0, import_shim2.useSyncExternalStore)(subscribe2, getSnapshot);
}

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelMembershipState.js
var selector = (c2) => c2.state.membership;
var keys = ["member.updated"];
function useChannelMembershipState(channel) {
  return useSelectedChannelState({ channel, selector, stateChangeEventKeys: keys });
}

// node_modules/stream-chat-react/dist/components/ChannelPreview/icons.js
var import_react76 = __toESM(require_react());
var Icon2 = {
  ArchiveBox: (props) => import_react76.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--archive-box", fill: "currentColor", viewBox: "0 0 512 512", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react76.default.createElement("path", { d: "M32 32l448 0c17.7 0 32 14.3 32 32l0 32c0 17.7-14.3 32-32 32L32 128C14.3 128 0 113.7 0 96L0 64C0 46.3 14.3 32 32 32zm0 128l448 0 0 256c0 35.3-28.7 64-64 64L96 480c-35.3 0-64-28.7-64-64l0-256zm128 80c0 8.8 7.2 16 16 16l160 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-160 0c-8.8 0-16 7.2-16 16z" })
  ),
  Pin: (props) => import_react76.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--pin", fill: "currentColor", viewBox: "0 0 384 512", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react76.default.createElement("path", { d: "M32 32C32 14.3 46.3 0 64 0L320 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-29.5 0 11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3L32 352c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64 64 64C46.3 64 32 49.7 32 32zM160 384l64 0 0 96c0 17.7-14.3 32-32 32s-32-14.3-32-32l0-96z" })
  )
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewActionButtons.js
function ChannelPreviewActionButtons({ channel }) {
  const membership = useChannelMembershipState(channel);
  const { t: t2 } = useTranslationContext();
  return import_react77.default.createElement(
    "div",
    { className: "str-chat__channel-preview__action-buttons" },
    import_react77.default.createElement(
      "button",
      { "aria-label": membership.pinned_at ? t2("Unpin") : t2("Pin"), className: clsx_default("str-chat__channel-preview__action-button", "str-chat__channel-preview__action-button--pin", membership.pinned_at && "str-chat__channel-preview__action-button--active"), onClick: (e) => {
        e.stopPropagation();
        if (membership.pinned_at) {
          channel.unpin();
        } else {
          channel.pin();
        }
      }, title: membership.pinned_at ? t2("Unpin") : t2("Pin") },
      import_react77.default.createElement(Icon2.Pin, null)
    ),
    import_react77.default.createElement(
      "button",
      { "aria-label": membership.archived_at ? t2("Unarchive") : t2("Archive"), className: clsx_default("str-chat__channel-preview__action-button", "str-chat__channel-preview__action-button--archive", membership.archived_at && "str-chat__channel-preview__action-button--active"), onClick: (e) => {
        e.stopPropagation();
        if (membership.archived_at) {
          channel.unarchive();
        } else {
          channel.archive();
        }
      }, title: membership.archived_at ? t2("Unarchive") : t2("Archive") },
      import_react77.default.createElement(Icon2.ArchiveBox, null)
    )
  );
}

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewMessenger.js
var UnMemoizedChannelPreviewMessenger = (props) => {
  var _a, _b;
  const { active, Avatar: Avatar2 = Avatar, channel, className: customClassName = "", displayImage, displayTitle, groupChannelDisplayInfo, latestMessagePreview, onSelect: customOnSelectChannel, setActiveChannel, unread, watchers } = props;
  const { ChannelPreviewActionButtons: ChannelPreviewActionButtons2 = ChannelPreviewActionButtons } = useComponentContext();
  const channelPreviewButton = (0, import_react78.useRef)(null);
  const avatarName = displayTitle || ((_b = (_a = channel.state.messages[channel.state.messages.length - 1]) == null ? void 0 : _a.user) == null ? void 0 : _b.id);
  const onSelectChannel = (e) => {
    if (customOnSelectChannel) {
      customOnSelectChannel(e);
    } else if (setActiveChannel) {
      setActiveChannel(channel, watchers);
    }
    if (channelPreviewButton == null ? void 0 : channelPreviewButton.current) {
      channelPreviewButton.current.blur();
    }
  };
  return import_react78.default.createElement(
    "div",
    { className: "str-chat__channel-preview-container" },
    import_react78.default.createElement(ChannelPreviewActionButtons2, { channel }),
    import_react78.default.createElement(
      "button",
      { "aria-label": `Select Channel: ${displayTitle || ""}`, "aria-selected": active, className: clsx_default(`str-chat__channel-preview-messenger str-chat__channel-preview`, active && "str-chat__channel-preview-messenger--active", unread && unread >= 1 && "str-chat__channel-preview-messenger--unread", customClassName), "data-testid": "channel-preview-button", onClick: onSelectChannel, ref: channelPreviewButton, role: "option" },
      import_react78.default.createElement(
        "div",
        { className: "str-chat__channel-preview-messenger--left" },
        import_react78.default.createElement(Avatar2, { className: "str-chat__avatar--channel-preview", groupChannelDisplayInfo, image: displayImage, name: avatarName })
      ),
      import_react78.default.createElement(
        "div",
        { className: "str-chat__channel-preview-end" },
        import_react78.default.createElement(
          "div",
          { className: "str-chat__channel-preview-end-first-row" },
          import_react78.default.createElement(
            "div",
            { className: "str-chat__channel-preview-messenger--name" },
            import_react78.default.createElement("span", null, displayTitle)
          ),
          !!unread && import_react78.default.createElement("div", { className: "str-chat__channel-preview-unread-badge", "data-testid": "unread-badge" }, unread)
        ),
        import_react78.default.createElement("div", { className: "str-chat__channel-preview-messenger--last-message" }, latestMessagePreview)
      )
    )
  );
};
var ChannelPreviewMessenger = import_react78.default.memo(UnMemoizedChannelPreviewMessenger);

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useIsChannelMuted.js
var import_react79 = __toESM(require_react());
var useIsChannelMuted = (channel) => {
  const { client } = useChatContext("useIsChannelMuted");
  const [muted, setMuted] = (0, import_react79.useState)(channel.muteStatus());
  (0, import_react79.useEffect)(() => {
    const handleEvent = () => setMuted(channel.muteStatus());
    client.on("notification.channel_mutes_updated", handleEvent);
    return () => client.off("notification.channel_mutes_updated", handleEvent);
  }, [muted]);
  return muted;
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useChannelPreviewInfo.js
var import_react244 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelPreview/utils.js
var import_react243 = __toESM(require_react());

// node_modules/devlop/lib/development.js
var AssertionError = class extends Error {
  /**
   * Create an assertion error.
   *
   * @param {string} message
   *   Message explaining error.
   * @param {unknown} actual
   *   Value.
   * @param {unknown} expected
   *   Baseline.
   * @param {string} operator
   *   Name of equality operation.
   * @param {boolean} generated
   *   Whether `message` is a custom message or not
   * @returns
   *   Instance.
   */
  // eslint-disable-next-line max-params
  constructor(message, actual, expected, operator, generated) {
    super(message);
    __publicField(
      this,
      "name",
      /** @type {const} */
      "Assertion"
    );
    __publicField(
      this,
      "code",
      /** @type {const} */
      "ERR_ASSERTION"
    );
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.actual = actual;
    this.expected = expected;
    this.generated = generated;
    this.operator = operator;
  }
};
function ok(value, message) {
  assert(
    Boolean(value),
    false,
    true,
    "ok",
    "Expected value to be truthy",
    message
  );
}
function unreachable(message) {
  assert(false, false, true, "ok", "Unreachable", message);
}
function assert(bool, actual, expected, operator, defaultMessage, userMessage) {
  if (!bool) {
    throw userMessage instanceof Error ? userMessage : new AssertionError(
      userMessage || defaultMessage,
      actual,
      expected,
      operator,
      !userMessage
    );
  }
}

// node_modules/comma-separated-tokens/index.js
function stringify(values2, options2) {
  const settings = options2 || {};
  const input = values2[values2.length - 1] === "" ? [...values2, ""] : values2;
  return input.join(
    (settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")
  ).trim();
}

// node_modules/estree-util-is-identifier-name/lib/index.js
var nameRe = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
var nameReJsx = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
var emptyOptions = {};
function name(name2, options2) {
  const settings = options2 || emptyOptions;
  const re3 = settings.jsx ? nameReJsx : nameRe;
  return re3.test(name2);
}

// node_modules/hast-util-whitespace/lib/index.js
var re2 = /[ \t\n\f\r]/g;
function whitespace2(thing) {
  return typeof thing === "object" ? thing.type === "text" ? empty(thing.value) : false : empty(thing);
}
function empty(value) {
  return value.replace(re2, "") === "";
}

// node_modules/property-information/lib/util/schema.js
var Schema = class {
  /**
   * @param {SchemaType['property']} property
   *   Property.
   * @param {SchemaType['normal']} normal
   *   Normal.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Schema.
   */
  constructor(property, normal, space2) {
    this.normal = normal;
    this.property = property;
    if (space2) {
      this.space = space2;
    }
  }
};
Schema.prototype.normal = {};
Schema.prototype.property = {};
Schema.prototype.space = void 0;

// node_modules/property-information/lib/util/merge.js
function merge2(definitions, space2) {
  const property = {};
  const normal = {};
  for (const definition3 of definitions) {
    Object.assign(property, definition3.property);
    Object.assign(normal, definition3.normal);
  }
  return new Schema(property, normal, space2);
}

// node_modules/property-information/lib/normalize.js
function normalize(value) {
  return value.toLowerCase();
}

// node_modules/property-information/lib/util/info.js
var Info = class {
  /**
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @returns
   *   Info.
   */
  constructor(property, attribute) {
    this.attribute = attribute;
    this.property = property;
  }
};
Info.prototype.attribute = "";
Info.prototype.booleanish = false;
Info.prototype.boolean = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.commaSeparated = false;
Info.prototype.defined = false;
Info.prototype.mustUseProperty = false;
Info.prototype.number = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.property = "";
Info.prototype.spaceSeparated = false;
Info.prototype.space = void 0;

// node_modules/property-information/lib/util/types.js
var types_exports = {};
__export(types_exports, {
  boolean: () => boolean,
  booleanish: () => booleanish,
  commaOrSpaceSeparated: () => commaOrSpaceSeparated,
  commaSeparated: () => commaSeparated,
  number: () => number,
  overloadedBoolean: () => overloadedBoolean,
  spaceSeparated: () => spaceSeparated
});
var powers = 0;
var boolean = increment();
var booleanish = increment();
var overloadedBoolean = increment();
var number = increment();
var spaceSeparated = increment();
var commaSeparated = increment();
var commaOrSpaceSeparated = increment();
function increment() {
  return 2 ** ++powers;
}

// node_modules/property-information/lib/util/defined-info.js
var checks = (
  /** @type {ReadonlyArray<keyof typeof types>} */
  Object.keys(types_exports)
);
var DefinedInfo = class extends Info {
  /**
   * @constructor
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @param {number | null | undefined} [mask]
   *   Mask.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Info.
   */
  constructor(property, attribute, mask, space2) {
    let index4 = -1;
    super(property, attribute);
    mark(this, "space", space2);
    if (typeof mask === "number") {
      while (++index4 < checks.length) {
        const check = checks[index4];
        mark(this, checks[index4], (mask & types_exports[check]) === types_exports[check]);
      }
    }
  }
};
DefinedInfo.prototype.defined = true;
function mark(values2, key, value) {
  if (value) {
    values2[key] = value;
  }
}

// node_modules/property-information/lib/util/create.js
function create(definition3) {
  const properties = {};
  const normals = {};
  for (const [property, value] of Object.entries(definition3.properties)) {
    const info = new DefinedInfo(
      property,
      definition3.transform(definition3.attributes || {}, property),
      value,
      definition3.space
    );
    if (definition3.mustUseProperty && definition3.mustUseProperty.includes(property)) {
      info.mustUseProperty = true;
    }
    properties[property] = info;
    normals[normalize(property)] = property;
    normals[normalize(info.attribute)] = property;
  }
  return new Schema(properties, normals, definition3.space);
}

// node_modules/property-information/lib/aria.js
var aria = create({
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null
  },
  transform(_2, property) {
    return property === "role" ? property : "aria-" + property.slice(4).toLowerCase();
  }
});

// node_modules/property-information/lib/util/case-sensitive-transform.js
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}

// node_modules/property-information/lib/util/case-insensitive-transform.js
function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase());
}

// node_modules/property-information/lib/html.js
var html = create({
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: boolean,
    allowPaymentRequest: boolean,
    allowUserMedia: boolean,
    alt: null,
    as: null,
    async: boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: boolean,
    autoPlay: boolean,
    blocking: spaceSeparated,
    capture: null,
    charSet: null,
    checked: boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: boolean,
    defer: boolean,
    dir: null,
    dirName: null,
    disabled: boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: boolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: boolean,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: boolean,
    muted: boolean,
    name: null,
    nonce: null,
    noModule: boolean,
    noValidate: boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeToggle: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: boolean,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: boolean,
    reversed: boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: boolean,
    seamless: boolean,
    selected: boolean,
    shadowRootClonable: boolean,
    shadowRootDelegatesFocus: boolean,
    shadowRootMode: null,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,
    writingSuggestions: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: number,
    // `<img>` and `<object>`
    leftMargin: number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: number,
    // `<body>`
    marginWidth: number,
    // `<body>`
    noResize: boolean,
    // `<frame>`
    noHref: boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: boolean,
    disableRemotePlayback: boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null
  },
  space: "html",
  transform: caseInsensitiveTransform
});

// node_modules/property-information/lib/svg.js
var svg = create({
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    transformOrigin: "transform-origin",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  },
  space: "svg",
  transform: caseSensitiveTransform
});

// node_modules/property-information/lib/xlink.js
var xlink = create({
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  },
  space: "xlink",
  transform(_2, property) {
    return "xlink:" + property.slice(5).toLowerCase();
  }
});

// node_modules/property-information/lib/xmlns.js
var xmlns = create({
  attributes: { xmlnsxlink: "xmlns:xlink" },
  properties: { xmlnsXLink: null, xmlns: null },
  space: "xmlns",
  transform: caseInsensitiveTransform
});

// node_modules/property-information/lib/xml.js
var xml = create({
  properties: { xmlBase: null, xmlLang: null, xmlSpace: null },
  space: "xml",
  transform(_2, property) {
    return "xml:" + property.slice(3).toLowerCase();
  }
});

// node_modules/property-information/lib/hast-to-react.js
var hastToReact = {
  classId: "classID",
  dataType: "datatype",
  itemId: "itemID",
  strokeDashArray: "strokeDasharray",
  strokeDashOffset: "strokeDashoffset",
  strokeLineCap: "strokeLinecap",
  strokeLineJoin: "strokeLinejoin",
  strokeMiterLimit: "strokeMiterlimit",
  typeOf: "typeof",
  xLinkActuate: "xlinkActuate",
  xLinkArcRole: "xlinkArcrole",
  xLinkHref: "xlinkHref",
  xLinkRole: "xlinkRole",
  xLinkShow: "xlinkShow",
  xLinkTitle: "xlinkTitle",
  xLinkType: "xlinkType",
  xmlnsXLink: "xmlnsXlink"
};

// node_modules/property-information/lib/find.js
var cap = /[A-Z]/g;
var dash = /-[a-z]/g;
var valid = /^data[-\w.:]+$/i;
function find2(schema, value) {
  const normal = normalize(value);
  let property = value;
  let Type = Info;
  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }
  if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
    if (value.charAt(4) === "-") {
      const rest = value.slice(5).replace(dash, camelcase);
      property = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      const rest = value.slice(4);
      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab);
        if (dashes.charAt(0) !== "-") {
          dashes = "-" + dashes;
        }
        value = "data" + dashes;
      }
    }
    Type = DefinedInfo;
  }
  return new Type(property, value);
}
function kebab($0) {
  return "-" + $0.toLowerCase();
}
function camelcase($0) {
  return $0.charAt(1).toUpperCase();
}

// node_modules/property-information/index.js
var html2 = merge2([aria, html, xlink, xmlns, xml], "html");
var svg2 = merge2([aria, svg, xlink, xmlns, xml], "svg");

// node_modules/space-separated-tokens/index.js
function stringify2(values2) {
  return values2.join(" ").trim();
}

// node_modules/hast-util-to-jsx-runtime/lib/index.js
var import_style_to_js = __toESM(require_cjs3(), 1);

// node_modules/unist-util-position/lib/index.js
var pointEnd = point("end");
var pointStart = point("start");
function point(type) {
  return point4;
  function point4(node2) {
    const point5 = node2 && node2.position && node2.position[type] || {};
    if (typeof point5.line === "number" && point5.line > 0 && typeof point5.column === "number" && point5.column > 0) {
      return {
        line: point5.line,
        column: point5.column,
        offset: typeof point5.offset === "number" && point5.offset > -1 ? point5.offset : void 0
      };
    }
  }
}
function position(node2) {
  const start3 = pointStart(node2);
  const end2 = pointEnd(node2);
  if (start3 && end2) {
    return { start: start3, end: end2 };
  }
}

// node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition(value) {
  if (!value || typeof value !== "object") {
    return "";
  }
  if ("position" in value || "type" in value) {
    return position2(value.position);
  }
  if ("start" in value || "end" in value) {
    return position2(value);
  }
  if ("line" in value || "column" in value) {
    return point2(value);
  }
  return "";
}
function point2(point4) {
  return index(point4 && point4.line) + ":" + index(point4 && point4.column);
}
function position2(pos) {
  return point2(pos && pos.start) + "-" + point2(pos && pos.end);
}
function index(value) {
  return value && typeof value === "number" ? value : 1;
}

// node_modules/vfile-message/lib/index.js
var VFileMessage = class extends Error {
  /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // eslint-disable-next-line complexity
  constructor(causeOrReason, optionsOrParentOrPlace, origin) {
    super();
    if (typeof optionsOrParentOrPlace === "string") {
      origin = optionsOrParentOrPlace;
      optionsOrParentOrPlace = void 0;
    }
    let reason = "";
    let options2 = {};
    let legacyCause = false;
    if (optionsOrParentOrPlace) {
      if ("line" in optionsOrParentOrPlace && "column" in optionsOrParentOrPlace) {
        options2 = { place: optionsOrParentOrPlace };
      } else if ("start" in optionsOrParentOrPlace && "end" in optionsOrParentOrPlace) {
        options2 = { place: optionsOrParentOrPlace };
      } else if ("type" in optionsOrParentOrPlace) {
        options2 = {
          ancestors: [optionsOrParentOrPlace],
          place: optionsOrParentOrPlace.position
        };
      } else {
        options2 = { ...optionsOrParentOrPlace };
      }
    }
    if (typeof causeOrReason === "string") {
      reason = causeOrReason;
    } else if (!options2.cause && causeOrReason) {
      legacyCause = true;
      reason = causeOrReason.message;
      options2.cause = causeOrReason;
    }
    if (!options2.ruleId && !options2.source && typeof origin === "string") {
      const index4 = origin.indexOf(":");
      if (index4 === -1) {
        options2.ruleId = origin;
      } else {
        options2.source = origin.slice(0, index4);
        options2.ruleId = origin.slice(index4 + 1);
      }
    }
    if (!options2.place && options2.ancestors && options2.ancestors) {
      const parent = options2.ancestors[options2.ancestors.length - 1];
      if (parent) {
        options2.place = parent.position;
      }
    }
    const start3 = options2.place && "start" in options2.place ? options2.place.start : options2.place;
    this.ancestors = options2.ancestors || void 0;
    this.cause = options2.cause || void 0;
    this.column = start3 ? start3.column : void 0;
    this.fatal = void 0;
    this.file;
    this.message = reason;
    this.line = start3 ? start3.line : void 0;
    this.name = stringifyPosition(options2.place) || "1:1";
    this.place = options2.place || void 0;
    this.reason = this.message;
    this.ruleId = options2.ruleId || void 0;
    this.source = options2.source || void 0;
    this.stack = legacyCause && options2.cause && typeof options2.cause.stack === "string" ? options2.cause.stack : "";
    this.actual;
    this.expected;
    this.note;
    this.url;
  }
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.column = void 0;
VFileMessage.prototype.line = void 0;
VFileMessage.prototype.ancestors = void 0;
VFileMessage.prototype.cause = void 0;
VFileMessage.prototype.fatal = void 0;
VFileMessage.prototype.place = void 0;
VFileMessage.prototype.ruleId = void 0;
VFileMessage.prototype.source = void 0;

// node_modules/hast-util-to-jsx-runtime/lib/index.js
var own = {}.hasOwnProperty;
var emptyMap = /* @__PURE__ */ new Map();
var cap2 = /[A-Z]/g;
var tableElements = /* @__PURE__ */ new Set(["table", "tbody", "thead", "tfoot", "tr"]);
var tableCellElement = /* @__PURE__ */ new Set(["td", "th"]);
var docs = "https://github.com/syntax-tree/hast-util-to-jsx-runtime";
function toJsxRuntime(tree, options2) {
  if (!options2 || options2.Fragment === void 0) {
    throw new TypeError("Expected `Fragment` in options");
  }
  const filePath = options2.filePath || void 0;
  let create2;
  if (options2.development) {
    if (typeof options2.jsxDEV !== "function") {
      throw new TypeError(
        "Expected `jsxDEV` in options when `development: true`"
      );
    }
    create2 = developmentCreate(filePath, options2.jsxDEV);
  } else {
    if (typeof options2.jsx !== "function") {
      throw new TypeError("Expected `jsx` in production options");
    }
    if (typeof options2.jsxs !== "function") {
      throw new TypeError("Expected `jsxs` in production options");
    }
    create2 = productionCreate(filePath, options2.jsx, options2.jsxs);
  }
  const state = {
    Fragment: options2.Fragment,
    ancestors: [],
    components: options2.components || {},
    create: create2,
    elementAttributeNameCase: options2.elementAttributeNameCase || "react",
    evaluater: options2.createEvaluater ? options2.createEvaluater() : void 0,
    filePath,
    ignoreInvalidStyle: options2.ignoreInvalidStyle || false,
    passKeys: options2.passKeys !== false,
    passNode: options2.passNode || false,
    schema: options2.space === "svg" ? svg2 : html2,
    stylePropertyNameCase: options2.stylePropertyNameCase || "dom",
    tableCellAlignToStyle: options2.tableCellAlignToStyle !== false
  };
  const result = one(state, tree, void 0);
  if (result && typeof result !== "string") {
    return result;
  }
  return state.create(
    tree,
    state.Fragment,
    { children: result || void 0 },
    void 0
  );
}
function one(state, node2, key) {
  if (node2.type === "element") {
    return element(state, node2, key);
  }
  if (node2.type === "mdxFlowExpression" || node2.type === "mdxTextExpression") {
    return mdxExpression(state, node2);
  }
  if (node2.type === "mdxJsxFlowElement" || node2.type === "mdxJsxTextElement") {
    return mdxJsxElement(state, node2, key);
  }
  if (node2.type === "mdxjsEsm") {
    return mdxEsm(state, node2);
  }
  if (node2.type === "root") {
    return root(state, node2, key);
  }
  if (node2.type === "text") {
    return text(state, node2);
  }
}
function element(state, node2, key) {
  const parentSchema = state.schema;
  let schema = parentSchema;
  if (node2.tagName.toLowerCase() === "svg" && parentSchema.space === "html") {
    schema = svg2;
    state.schema = schema;
  }
  state.ancestors.push(node2);
  const type = findComponentFromName(state, node2.tagName, false);
  const props = createElementProps(state, node2);
  let children = createChildren(state, node2);
  if (tableElements.has(node2.tagName)) {
    children = children.filter(function(child) {
      return typeof child === "string" ? !whitespace2(child) : true;
    });
  }
  addNode(state, props, type, node2);
  addChildren(props, children);
  state.ancestors.pop();
  state.schema = parentSchema;
  return state.create(node2, type, props, key);
}
function mdxExpression(state, node2) {
  if (node2.data && node2.data.estree && state.evaluater) {
    const program = node2.data.estree;
    const expression = program.body[0];
    ok(expression.type === "ExpressionStatement");
    return (
      /** @type {Child | undefined} */
      state.evaluater.evaluateExpression(expression.expression)
    );
  }
  crashEstree(state, node2.position);
}
function mdxEsm(state, node2) {
  if (node2.data && node2.data.estree && state.evaluater) {
    return (
      /** @type {Child | undefined} */
      state.evaluater.evaluateProgram(node2.data.estree)
    );
  }
  crashEstree(state, node2.position);
}
function mdxJsxElement(state, node2, key) {
  const parentSchema = state.schema;
  let schema = parentSchema;
  if (node2.name === "svg" && parentSchema.space === "html") {
    schema = svg2;
    state.schema = schema;
  }
  state.ancestors.push(node2);
  const type = node2.name === null ? state.Fragment : findComponentFromName(state, node2.name, true);
  const props = createJsxElementProps(state, node2);
  const children = createChildren(state, node2);
  addNode(state, props, type, node2);
  addChildren(props, children);
  state.ancestors.pop();
  state.schema = parentSchema;
  return state.create(node2, type, props, key);
}
function root(state, node2, key) {
  const props = {};
  addChildren(props, createChildren(state, node2));
  return state.create(node2, state.Fragment, props, key);
}
function text(_2, node2) {
  return node2.value;
}
function addNode(state, props, type, node2) {
  if (typeof type !== "string" && type !== state.Fragment && state.passNode) {
    props.node = node2;
  }
}
function addChildren(props, children) {
  if (children.length > 0) {
    const value = children.length > 1 ? children : children[0];
    if (value) {
      props.children = value;
    }
  }
}
function productionCreate(_2, jsx2, jsxs2) {
  return create2;
  function create2(_3, type, props, key) {
    const isStaticChildren = Array.isArray(props.children);
    const fn2 = isStaticChildren ? jsxs2 : jsx2;
    return key ? fn2(type, props, key) : fn2(type, props);
  }
}
function developmentCreate(filePath, jsxDEV) {
  return create2;
  function create2(node2, type, props, key) {
    const isStaticChildren = Array.isArray(props.children);
    const point4 = pointStart(node2);
    return jsxDEV(
      type,
      props,
      key,
      isStaticChildren,
      {
        columnNumber: point4 ? point4.column - 1 : void 0,
        fileName: filePath,
        lineNumber: point4 ? point4.line : void 0
      },
      void 0
    );
  }
}
function createElementProps(state, node2) {
  const props = {};
  let alignValue;
  let prop;
  for (prop in node2.properties) {
    if (prop !== "children" && own.call(node2.properties, prop)) {
      const result = createProperty(state, prop, node2.properties[prop]);
      if (result) {
        const [key, value] = result;
        if (state.tableCellAlignToStyle && key === "align" && typeof value === "string" && tableCellElement.has(node2.tagName)) {
          alignValue = value;
        } else {
          props[key] = value;
        }
      }
    }
  }
  if (alignValue) {
    const style = (
      /** @type {Style} */
      props.style || (props.style = {})
    );
    style[state.stylePropertyNameCase === "css" ? "text-align" : "textAlign"] = alignValue;
  }
  return props;
}
function createJsxElementProps(state, node2) {
  const props = {};
  for (const attribute of node2.attributes) {
    if (attribute.type === "mdxJsxExpressionAttribute") {
      if (attribute.data && attribute.data.estree && state.evaluater) {
        const program = attribute.data.estree;
        const expression = program.body[0];
        ok(expression.type === "ExpressionStatement");
        const objectExpression = expression.expression;
        ok(objectExpression.type === "ObjectExpression");
        const property = objectExpression.properties[0];
        ok(property.type === "SpreadElement");
        Object.assign(
          props,
          state.evaluater.evaluateExpression(property.argument)
        );
      } else {
        crashEstree(state, node2.position);
      }
    } else {
      const name2 = attribute.name;
      let value;
      if (attribute.value && typeof attribute.value === "object") {
        if (attribute.value.data && attribute.value.data.estree && state.evaluater) {
          const program = attribute.value.data.estree;
          const expression = program.body[0];
          ok(expression.type === "ExpressionStatement");
          value = state.evaluater.evaluateExpression(expression.expression);
        } else {
          crashEstree(state, node2.position);
        }
      } else {
        value = attribute.value === null ? true : attribute.value;
      }
      props[name2] = /** @type {Props[keyof Props]} */
      value;
    }
  }
  return props;
}
function createChildren(state, node2) {
  const children = [];
  let index4 = -1;
  const countsByName = state.passKeys ? /* @__PURE__ */ new Map() : emptyMap;
  while (++index4 < node2.children.length) {
    const child = node2.children[index4];
    let key;
    if (state.passKeys) {
      const name2 = child.type === "element" ? child.tagName : child.type === "mdxJsxFlowElement" || child.type === "mdxJsxTextElement" ? child.name : void 0;
      if (name2) {
        const count = countsByName.get(name2) || 0;
        key = name2 + "-" + count;
        countsByName.set(name2, count + 1);
      }
    }
    const result = one(state, child, key);
    if (result !== void 0) children.push(result);
  }
  return children;
}
function createProperty(state, prop, value) {
  const info = find2(state.schema, prop);
  if (value === null || value === void 0 || typeof value === "number" && Number.isNaN(value)) {
    return;
  }
  if (Array.isArray(value)) {
    value = info.commaSeparated ? stringify(value) : stringify2(value);
  }
  if (info.property === "style") {
    let styleObject = typeof value === "object" ? value : parseStyle(state, String(value));
    if (state.stylePropertyNameCase === "css") {
      styleObject = transformStylesToCssCasing(styleObject);
    }
    return ["style", styleObject];
  }
  return [
    state.elementAttributeNameCase === "react" && info.space ? hastToReact[info.property] || info.property : info.attribute,
    value
  ];
}
function parseStyle(state, value) {
  try {
    return (0, import_style_to_js.default)(value, { reactCompat: true });
  } catch (error) {
    if (state.ignoreInvalidStyle) {
      return {};
    }
    const cause = (
      /** @type {Error} */
      error
    );
    const message = new VFileMessage("Cannot parse `style` attribute", {
      ancestors: state.ancestors,
      cause,
      ruleId: "style",
      source: "hast-util-to-jsx-runtime"
    });
    message.file = state.filePath || void 0;
    message.url = docs + "#cannot-parse-style-attribute";
    throw message;
  }
}
function findComponentFromName(state, name2, allowExpression) {
  let result;
  if (!allowExpression) {
    result = { type: "Literal", value: name2 };
  } else if (name2.includes(".")) {
    const identifiers = name2.split(".");
    let index4 = -1;
    let node2;
    while (++index4 < identifiers.length) {
      const prop = name(identifiers[index4]) ? { type: "Identifier", name: identifiers[index4] } : { type: "Literal", value: identifiers[index4] };
      node2 = node2 ? {
        type: "MemberExpression",
        object: node2,
        property: prop,
        computed: Boolean(index4 && prop.type === "Literal"),
        optional: false
      } : prop;
    }
    ok(node2, "always a result");
    result = node2;
  } else {
    result = name(name2) && !/^[a-z]/.test(name2) ? { type: "Identifier", name: name2 } : { type: "Literal", value: name2 };
  }
  if (result.type === "Literal") {
    const name3 = (
      /** @type {string | number} */
      result.value
    );
    return own.call(state.components, name3) ? state.components[name3] : name3;
  }
  if (state.evaluater) {
    return state.evaluater.evaluateExpression(result);
  }
  crashEstree(state);
}
function crashEstree(state, place) {
  const message = new VFileMessage(
    "Cannot handle MDX estrees without `createEvaluater`",
    {
      ancestors: state.ancestors,
      place,
      ruleId: "mdx-estree",
      source: "hast-util-to-jsx-runtime"
    }
  );
  message.file = state.filePath || void 0;
  message.url = docs + "#cannot-handle-mdx-estrees-without-createevaluater";
  throw message;
}
function transformStylesToCssCasing(domCasing) {
  const cssCasing = {};
  let from;
  for (from in domCasing) {
    if (own.call(domCasing, from)) {
      cssCasing[transformStyleToCssCasing(from)] = domCasing[from];
    }
  }
  return cssCasing;
}
function transformStyleToCssCasing(from) {
  let to = from.replace(cap2, toDash);
  if (to.slice(0, 3) === "ms-") to = "-" + to;
  return to;
}
function toDash($0) {
  return "-" + $0.toLowerCase();
}

// node_modules/html-url-attributes/lib/index.js
var urlAttributes = {
  action: ["form"],
  cite: ["blockquote", "del", "ins", "q"],
  data: ["object"],
  formAction: ["button", "input"],
  href: ["a", "area", "base", "link"],
  icon: ["menuitem"],
  itemId: null,
  manifest: ["html"],
  ping: ["a", "area"],
  poster: ["video"],
  src: [
    "audio",
    "embed",
    "iframe",
    "img",
    "input",
    "script",
    "source",
    "track",
    "video"
  ]
};

// node_modules/react-markdown/lib/index.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react80 = __toESM(require_react(), 1);

// node_modules/mdast-util-to-string/lib/index.js
var emptyOptions2 = {};
function toString(value, options2) {
  const settings = options2 || emptyOptions2;
  const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
  const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
  return one2(value, includeImageAlt, includeHtml);
}
function one2(value, includeImageAlt, includeHtml) {
  if (node(value)) {
    if ("value" in value) {
      return value.type === "html" && !includeHtml ? "" : value.value;
    }
    if (includeImageAlt && "alt" in value && value.alt) {
      return value.alt;
    }
    if ("children" in value) {
      return all(value.children, includeImageAlt, includeHtml);
    }
  }
  if (Array.isArray(value)) {
    return all(value, includeImageAlt, includeHtml);
  }
  return "";
}
function all(values2, includeImageAlt, includeHtml) {
  const result = [];
  let index4 = -1;
  while (++index4 < values2.length) {
    result[index4] = one2(values2[index4], includeImageAlt, includeHtml);
  }
  return result.join("");
}
function node(value) {
  return Boolean(value && typeof value === "object");
}

// node_modules/decode-named-character-reference/index.dom.js
var element2 = document.createElement("i");
function decodeNamedCharacterReference(value) {
  const characterReference2 = "&" + value + ";";
  element2.innerHTML = characterReference2;
  const character = element2.textContent;
  if (
    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
    // yield `null`.
    character.charCodeAt(character.length - 1) === 59 && value !== "semi"
  ) {
    return false;
  }
  return character === characterReference2 ? false : character;
}

// node_modules/micromark-util-symbol/lib/codes.js
var codes = (
  /** @type {const} */
  {
    carriageReturn: -5,
    lineFeed: -4,
    carriageReturnLineFeed: -3,
    horizontalTab: -2,
    virtualSpace: -1,
    eof: null,
    nul: 0,
    soh: 1,
    stx: 2,
    etx: 3,
    eot: 4,
    enq: 5,
    ack: 6,
    bel: 7,
    bs: 8,
    ht: 9,
    // `\t`
    lf: 10,
    // `\n`
    vt: 11,
    // `\v`
    ff: 12,
    // `\f`
    cr: 13,
    // `\r`
    so: 14,
    si: 15,
    dle: 16,
    dc1: 17,
    dc2: 18,
    dc3: 19,
    dc4: 20,
    nak: 21,
    syn: 22,
    etb: 23,
    can: 24,
    em: 25,
    sub: 26,
    esc: 27,
    fs: 28,
    gs: 29,
    rs: 30,
    us: 31,
    space: 32,
    exclamationMark: 33,
    // `!`
    quotationMark: 34,
    // `"`
    numberSign: 35,
    // `#`
    dollarSign: 36,
    // `$`
    percentSign: 37,
    // `%`
    ampersand: 38,
    // `&`
    apostrophe: 39,
    // `'`
    leftParenthesis: 40,
    // `(`
    rightParenthesis: 41,
    // `)`
    asterisk: 42,
    // `*`
    plusSign: 43,
    // `+`
    comma: 44,
    // `,`
    dash: 45,
    // `-`
    dot: 46,
    // `.`
    slash: 47,
    // `/`
    digit0: 48,
    // `0`
    digit1: 49,
    // `1`
    digit2: 50,
    // `2`
    digit3: 51,
    // `3`
    digit4: 52,
    // `4`
    digit5: 53,
    // `5`
    digit6: 54,
    // `6`
    digit7: 55,
    // `7`
    digit8: 56,
    // `8`
    digit9: 57,
    // `9`
    colon: 58,
    // `:`
    semicolon: 59,
    // `;`
    lessThan: 60,
    // `<`
    equalsTo: 61,
    // `=`
    greaterThan: 62,
    // `>`
    questionMark: 63,
    // `?`
    atSign: 64,
    // `@`
    uppercaseA: 65,
    // `A`
    uppercaseB: 66,
    // `B`
    uppercaseC: 67,
    // `C`
    uppercaseD: 68,
    // `D`
    uppercaseE: 69,
    // `E`
    uppercaseF: 70,
    // `F`
    uppercaseG: 71,
    // `G`
    uppercaseH: 72,
    // `H`
    uppercaseI: 73,
    // `I`
    uppercaseJ: 74,
    // `J`
    uppercaseK: 75,
    // `K`
    uppercaseL: 76,
    // `L`
    uppercaseM: 77,
    // `M`
    uppercaseN: 78,
    // `N`
    uppercaseO: 79,
    // `O`
    uppercaseP: 80,
    // `P`
    uppercaseQ: 81,
    // `Q`
    uppercaseR: 82,
    // `R`
    uppercaseS: 83,
    // `S`
    uppercaseT: 84,
    // `T`
    uppercaseU: 85,
    // `U`
    uppercaseV: 86,
    // `V`
    uppercaseW: 87,
    // `W`
    uppercaseX: 88,
    // `X`
    uppercaseY: 89,
    // `Y`
    uppercaseZ: 90,
    // `Z`
    leftSquareBracket: 91,
    // `[`
    backslash: 92,
    // `\`
    rightSquareBracket: 93,
    // `]`
    caret: 94,
    // `^`
    underscore: 95,
    // `_`
    graveAccent: 96,
    // `` ` ``
    lowercaseA: 97,
    // `a`
    lowercaseB: 98,
    // `b`
    lowercaseC: 99,
    // `c`
    lowercaseD: 100,
    // `d`
    lowercaseE: 101,
    // `e`
    lowercaseF: 102,
    // `f`
    lowercaseG: 103,
    // `g`
    lowercaseH: 104,
    // `h`
    lowercaseI: 105,
    // `i`
    lowercaseJ: 106,
    // `j`
    lowercaseK: 107,
    // `k`
    lowercaseL: 108,
    // `l`
    lowercaseM: 109,
    // `m`
    lowercaseN: 110,
    // `n`
    lowercaseO: 111,
    // `o`
    lowercaseP: 112,
    // `p`
    lowercaseQ: 113,
    // `q`
    lowercaseR: 114,
    // `r`
    lowercaseS: 115,
    // `s`
    lowercaseT: 116,
    // `t`
    lowercaseU: 117,
    // `u`
    lowercaseV: 118,
    // `v`
    lowercaseW: 119,
    // `w`
    lowercaseX: 120,
    // `x`
    lowercaseY: 121,
    // `y`
    lowercaseZ: 122,
    // `z`
    leftCurlyBrace: 123,
    // `{`
    verticalBar: 124,
    // `|`
    rightCurlyBrace: 125,
    // `}`
    tilde: 126,
    // `~`
    del: 127,
    // Unicode Specials block.
    byteOrderMarker: 65279,
    // Unicode Specials block.
    replacementCharacter: 65533
    // `�`
  }
);

// node_modules/micromark-util-symbol/lib/constants.js
var constants = (
  /** @type {const} */
  {
    attentionSideAfter: 2,
    // Symbol to mark an attention sequence as after content: `a*`
    attentionSideBefore: 1,
    // Symbol to mark an attention sequence as before content: `*a`
    atxHeadingOpeningFenceSizeMax: 6,
    // 6 number signs is fine, 7 isn’t.
    autolinkDomainSizeMax: 63,
    // 63 characters is fine, 64 is too many.
    autolinkSchemeSizeMax: 32,
    // 32 characters is fine, 33 is too many.
    cdataOpeningString: "CDATA[",
    // And preceded by `<![`.
    characterGroupPunctuation: 2,
    // Symbol used to indicate a character is punctuation
    characterGroupWhitespace: 1,
    // Symbol used to indicate a character is whitespace
    characterReferenceDecimalSizeMax: 7,
    // `&#9999999;`.
    characterReferenceHexadecimalSizeMax: 6,
    // `&#xff9999;`.
    characterReferenceNamedSizeMax: 31,
    // `&CounterClockwiseContourIntegral;`.
    codeFencedSequenceSizeMin: 3,
    // At least 3 ticks or tildes are needed.
    contentTypeContent: "content",
    contentTypeDocument: "document",
    contentTypeFlow: "flow",
    contentTypeString: "string",
    contentTypeText: "text",
    hardBreakPrefixSizeMin: 2,
    // At least 2 trailing spaces are needed.
    htmlBasic: 6,
    // Symbol for `<div`
    htmlCdata: 5,
    // Symbol for `<![CDATA[]]>`
    htmlComment: 2,
    // Symbol for `<!---->`
    htmlComplete: 7,
    // Symbol for `<x>`
    htmlDeclaration: 4,
    // Symbol for `<!doctype>`
    htmlInstruction: 3,
    // Symbol for `<?php?>`
    htmlRawSizeMax: 8,
    // Length of `textarea`.
    htmlRaw: 1,
    // Symbol for `<script>`
    linkResourceDestinationBalanceMax: 32,
    // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>
    linkReferenceSizeMax: 999,
    // See: <https://spec.commonmark.org/0.30/#link-label>
    listItemValueSizeMax: 10,
    // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>
    numericBaseDecimal: 10,
    numericBaseHexadecimal: 16,
    tabSize: 4,
    // Tabs have a hard-coded size of 4, per CommonMark.
    thematicBreakMarkerCountMin: 3,
    // At least 3 asterisks, dashes, or underscores are needed.
    v8MaxSafeChunkSize: 1e4
    // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.
  }
);

// node_modules/micromark-util-symbol/lib/types.js
var types = (
  /** @type {const} */
  {
    // Generic type for data, such as in a title, a destination, etc.
    data: "data",
    // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).
    // Such as, between a fenced code fence and an info string.
    whitespace: "whitespace",
    // Generic type for line endings (line feed, carriage return, carriage return +
    // line feed).
    lineEnding: "lineEnding",
    // A line ending, but ending a blank line.
    lineEndingBlank: "lineEndingBlank",
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a
    // line.
    linePrefix: "linePrefix",
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a
    // line.
    lineSuffix: "lineSuffix",
    // Whole ATX heading:
    //
    // ```markdown
    // #
    // ## Alpha
    // ### Bravo ###
    // ```
    //
    // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.
    atxHeading: "atxHeading",
    // Sequence of number signs in an ATX heading (`###`).
    atxHeadingSequence: "atxHeadingSequence",
    // Content in an ATX heading (`alpha`).
    // Includes text.
    atxHeadingText: "atxHeadingText",
    // Whole autolink (`<https://example.com>` or `<admin@example.com>`)
    // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.
    autolink: "autolink",
    // Email autolink w/o markers (`admin@example.com`)
    autolinkEmail: "autolinkEmail",
    // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).
    autolinkMarker: "autolinkMarker",
    // Protocol autolink w/o markers (`https://example.com`)
    autolinkProtocol: "autolinkProtocol",
    // A whole character escape (`\-`).
    // Includes `escapeMarker` and `characterEscapeValue`.
    characterEscape: "characterEscape",
    // The escaped character (`-`).
    characterEscapeValue: "characterEscapeValue",
    // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).
    // Includes `characterReferenceMarker`, an optional
    // `characterReferenceMarkerNumeric`, in which case an optional
    // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.
    characterReference: "characterReference",
    // The start or end marker (`&` or `;`).
    characterReferenceMarker: "characterReferenceMarker",
    // Mark reference as numeric (`#`).
    characterReferenceMarkerNumeric: "characterReferenceMarkerNumeric",
    // Mark reference as numeric (`x` or `X`).
    characterReferenceMarkerHexadecimal: "characterReferenceMarkerHexadecimal",
    // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).
    characterReferenceValue: "characterReferenceValue",
    // Whole fenced code:
    //
    // ````markdown
    // ```js
    // alert(1)
    // ```
    // ````
    codeFenced: "codeFenced",
    // A fenced code fence, including whitespace, sequence, info, and meta
    // (` ```js `).
    codeFencedFence: "codeFencedFence",
    // Sequence of grave accent or tilde characters (` ``` `) in a fence.
    codeFencedFenceSequence: "codeFencedFenceSequence",
    // Info word (`js`) in a fence.
    // Includes string.
    codeFencedFenceInfo: "codeFencedFenceInfo",
    // Meta words (`highlight="1"`) in a fence.
    // Includes string.
    codeFencedFenceMeta: "codeFencedFenceMeta",
    // A line of code.
    codeFlowValue: "codeFlowValue",
    // Whole indented code:
    //
    // ```markdown
    //     alert(1)
    // ```
    //
    // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.
    codeIndented: "codeIndented",
    // A text code (``` `alpha` ```).
    // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include
    // `codeTextPadding`.
    codeText: "codeText",
    codeTextData: "codeTextData",
    // A space or line ending right after or before a tick.
    codeTextPadding: "codeTextPadding",
    // A text code fence (` `` `).
    codeTextSequence: "codeTextSequence",
    // Whole content:
    //
    // ```markdown
    // [a]: b
    // c
    // =
    // d
    // ```
    //
    // Includes `paragraph` and `definition`.
    content: "content",
    // Whole definition:
    //
    // ```markdown
    // [micromark]: https://github.com/micromark/micromark
    // ```
    //
    // Includes `definitionLabel`, `definitionMarker`, `whitespace`,
    // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.
    definition: "definition",
    // Destination of a definition (`https://github.com/micromark/micromark` or
    // `<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.
    definitionDestination: "definitionDestination",
    // Enclosed destination of a definition
    // (`<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteralMarker` and optionally
    // `definitionDestinationString`.
    definitionDestinationLiteral: "definitionDestinationLiteral",
    // Markers of an enclosed definition destination (`<` or `>`).
    definitionDestinationLiteralMarker: "definitionDestinationLiteralMarker",
    // Unenclosed destination of a definition
    // (`https://github.com/micromark/micromark`).
    // Includes `definitionDestinationString`.
    definitionDestinationRaw: "definitionDestinationRaw",
    // Text in an destination (`https://github.com/micromark/micromark`).
    // Includes string.
    definitionDestinationString: "definitionDestinationString",
    // Label of a definition (`[micromark]`).
    // Includes `definitionLabelMarker` and `definitionLabelString`.
    definitionLabel: "definitionLabel",
    // Markers of a definition label (`[` or `]`).
    definitionLabelMarker: "definitionLabelMarker",
    // Value of a definition label (`micromark`).
    // Includes string.
    definitionLabelString: "definitionLabelString",
    // Marker between a label and a destination (`:`).
    definitionMarker: "definitionMarker",
    // Title of a definition (`"x"`, `'y'`, or `(z)`).
    // Includes `definitionTitleMarker` and optionally `definitionTitleString`.
    definitionTitle: "definitionTitle",
    // Marker around a title of a definition (`"`, `'`, `(`, or `)`).
    definitionTitleMarker: "definitionTitleMarker",
    // Data without markers in a title (`z`).
    // Includes string.
    definitionTitleString: "definitionTitleString",
    // Emphasis (`*alpha*`).
    // Includes `emphasisSequence` and `emphasisText`.
    emphasis: "emphasis",
    // Sequence of emphasis markers (`*` or `_`).
    emphasisSequence: "emphasisSequence",
    // Emphasis text (`alpha`).
    // Includes text.
    emphasisText: "emphasisText",
    // The character escape marker (`\`).
    escapeMarker: "escapeMarker",
    // A hard break created with a backslash (`\\n`).
    // Note: does not include the line ending.
    hardBreakEscape: "hardBreakEscape",
    // A hard break created with trailing spaces (`  \n`).
    // Does not include the line ending.
    hardBreakTrailing: "hardBreakTrailing",
    // Flow HTML:
    //
    // ```markdown
    // <div
    // ```
    //
    // Inlcudes `lineEnding`, `htmlFlowData`.
    htmlFlow: "htmlFlow",
    htmlFlowData: "htmlFlowData",
    // HTML in text (the tag in `a <i> b`).
    // Includes `lineEnding`, `htmlTextData`.
    htmlText: "htmlText",
    htmlTextData: "htmlTextData",
    // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or
    // `![alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    image: "image",
    // Whole link label (`[*alpha*]`).
    // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.
    label: "label",
    // Text in an label (`*alpha*`).
    // Includes text.
    labelText: "labelText",
    // Start a link label (`[`).
    // Includes a `labelMarker`.
    labelLink: "labelLink",
    // Start an image label (`![`).
    // Includes `labelImageMarker` and `labelMarker`.
    labelImage: "labelImage",
    // Marker of a label (`[` or `]`).
    labelMarker: "labelMarker",
    // Marker to start an image (`!`).
    labelImageMarker: "labelImageMarker",
    // End a label (`]`).
    // Includes `labelMarker`.
    labelEnd: "labelEnd",
    // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    link: "link",
    // Whole paragraph:
    //
    // ```markdown
    // alpha
    // bravo.
    // ```
    //
    // Includes text.
    paragraph: "paragraph",
    // A reference (`[alpha]` or `[]`).
    // Includes `referenceMarker` and an optional `referenceString`.
    reference: "reference",
    // A reference marker (`[` or `]`).
    referenceMarker: "referenceMarker",
    // Reference text (`alpha`).
    // Includes string.
    referenceString: "referenceString",
    // A resource (`(https://example.com "alpha")`).
    // Includes `resourceMarker`, an optional `resourceDestination` with an optional
    // `whitespace` and `resourceTitle`.
    resource: "resource",
    // A resource destination (`https://example.com`).
    // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.
    resourceDestination: "resourceDestination",
    // A literal resource destination (`<https://example.com>`).
    // Includes `resourceDestinationLiteralMarker` and optionally
    // `resourceDestinationString`.
    resourceDestinationLiteral: "resourceDestinationLiteral",
    // A resource destination marker (`<` or `>`).
    resourceDestinationLiteralMarker: "resourceDestinationLiteralMarker",
    // A raw resource destination (`https://example.com`).
    // Includes `resourceDestinationString`.
    resourceDestinationRaw: "resourceDestinationRaw",
    // Resource destination text (`https://example.com`).
    // Includes string.
    resourceDestinationString: "resourceDestinationString",
    // A resource marker (`(` or `)`).
    resourceMarker: "resourceMarker",
    // A resource title (`"alpha"`, `'alpha'`, or `(alpha)`).
    // Includes `resourceTitleMarker` and optionally `resourceTitleString`.
    resourceTitle: "resourceTitle",
    // A resource title marker (`"`, `'`, `(`, or `)`).
    resourceTitleMarker: "resourceTitleMarker",
    // Resource destination title (`alpha`).
    // Includes string.
    resourceTitleString: "resourceTitleString",
    // Whole setext heading:
    //
    // ```markdown
    // alpha
    // bravo
    // =====
    // ```
    //
    // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and
    // `setextHeadingLine`.
    setextHeading: "setextHeading",
    // Content in a setext heading (`alpha\nbravo`).
    // Includes text.
    setextHeadingText: "setextHeadingText",
    // Underline in a setext heading, including whitespace suffix (`==`).
    // Includes `setextHeadingLineSequence`.
    setextHeadingLine: "setextHeadingLine",
    // Sequence of equals or dash characters in underline in a setext heading (`-`).
    setextHeadingLineSequence: "setextHeadingLineSequence",
    // Strong (`**alpha**`).
    // Includes `strongSequence` and `strongText`.
    strong: "strong",
    // Sequence of strong markers (`**` or `__`).
    strongSequence: "strongSequence",
    // Strong text (`alpha`).
    // Includes text.
    strongText: "strongText",
    // Whole thematic break:
    //
    // ```markdown
    // * * *
    // ```
    //
    // Includes `thematicBreakSequence` and `whitespace`.
    thematicBreak: "thematicBreak",
    // A sequence of one or more thematic break markers (`***`).
    thematicBreakSequence: "thematicBreakSequence",
    // Whole block quote:
    //
    // ```markdown
    // > a
    // >
    // > b
    // ```
    //
    // Includes `blockQuotePrefix` and flow.
    blockQuote: "blockQuote",
    // The `>` or `> ` of a block quote.
    blockQuotePrefix: "blockQuotePrefix",
    // The `>` of a block quote prefix.
    blockQuoteMarker: "blockQuoteMarker",
    // The optional ` ` of a block quote prefix.
    blockQuotePrefixWhitespace: "blockQuotePrefixWhitespace",
    // Whole ordered list:
    //
    // ```markdown
    // 1. a
    //    b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listOrdered: "listOrdered",
    // Whole unordered list:
    //
    // ```markdown
    // - a
    //   b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listUnordered: "listUnordered",
    // The indent of further list item lines.
    listItemIndent: "listItemIndent",
    // A marker, as in, `*`, `+`, `-`, `.`, or `)`.
    listItemMarker: "listItemMarker",
    // The thing that starts a list item, such as `1. `.
    // Includes `listItemValue` if ordered, `listItemMarker`, and
    // `listItemPrefixWhitespace` (unless followed by a line ending).
    listItemPrefix: "listItemPrefix",
    // The whitespace after a marker.
    listItemPrefixWhitespace: "listItemPrefixWhitespace",
    // The numerical value of an ordered item.
    listItemValue: "listItemValue",
    // Internal types used for subtokenizers, compiled away
    chunkDocument: "chunkDocument",
    chunkContent: "chunkContent",
    chunkFlow: "chunkFlow",
    chunkText: "chunkText",
    chunkString: "chunkString"
  }
);

// node_modules/micromark-util-symbol/lib/values.js
var values = (
  /** @type {const} */
  {
    ht: "	",
    lf: "\n",
    cr: "\r",
    space: " ",
    exclamationMark: "!",
    quotationMark: '"',
    numberSign: "#",
    dollarSign: "$",
    percentSign: "%",
    ampersand: "&",
    apostrophe: "'",
    leftParenthesis: "(",
    rightParenthesis: ")",
    asterisk: "*",
    plusSign: "+",
    comma: ",",
    dash: "-",
    dot: ".",
    slash: "/",
    digit0: "0",
    digit1: "1",
    digit2: "2",
    digit3: "3",
    digit4: "4",
    digit5: "5",
    digit6: "6",
    digit7: "7",
    digit8: "8",
    digit9: "9",
    colon: ":",
    semicolon: ";",
    lessThan: "<",
    equalsTo: "=",
    greaterThan: ">",
    questionMark: "?",
    atSign: "@",
    uppercaseA: "A",
    uppercaseB: "B",
    uppercaseC: "C",
    uppercaseD: "D",
    uppercaseE: "E",
    uppercaseF: "F",
    uppercaseG: "G",
    uppercaseH: "H",
    uppercaseI: "I",
    uppercaseJ: "J",
    uppercaseK: "K",
    uppercaseL: "L",
    uppercaseM: "M",
    uppercaseN: "N",
    uppercaseO: "O",
    uppercaseP: "P",
    uppercaseQ: "Q",
    uppercaseR: "R",
    uppercaseS: "S",
    uppercaseT: "T",
    uppercaseU: "U",
    uppercaseV: "V",
    uppercaseW: "W",
    uppercaseX: "X",
    uppercaseY: "Y",
    uppercaseZ: "Z",
    leftSquareBracket: "[",
    backslash: "\\",
    rightSquareBracket: "]",
    caret: "^",
    underscore: "_",
    graveAccent: "`",
    lowercaseA: "a",
    lowercaseB: "b",
    lowercaseC: "c",
    lowercaseD: "d",
    lowercaseE: "e",
    lowercaseF: "f",
    lowercaseG: "g",
    lowercaseH: "h",
    lowercaseI: "i",
    lowercaseJ: "j",
    lowercaseK: "k",
    lowercaseL: "l",
    lowercaseM: "m",
    lowercaseN: "n",
    lowercaseO: "o",
    lowercaseP: "p",
    lowercaseQ: "q",
    lowercaseR: "r",
    lowercaseS: "s",
    lowercaseT: "t",
    lowercaseU: "u",
    lowercaseV: "v",
    lowercaseW: "w",
    lowercaseX: "x",
    lowercaseY: "y",
    lowercaseZ: "z",
    leftCurlyBrace: "{",
    verticalBar: "|",
    rightCurlyBrace: "}",
    tilde: "~",
    replacementCharacter: "�"
  }
);

// node_modules/micromark-util-chunked/dev/index.js
function splice(list4, start3, remove, items) {
  const end2 = list4.length;
  let chunkStart = 0;
  let parameters;
  if (start3 < 0) {
    start3 = -start3 > end2 ? 0 : end2 + start3;
  } else {
    start3 = start3 > end2 ? end2 : start3;
  }
  remove = remove > 0 ? remove : 0;
  if (items.length < constants.v8MaxSafeChunkSize) {
    parameters = Array.from(items);
    parameters.unshift(start3, remove);
    list4.splice(...parameters);
  } else {
    if (remove) list4.splice(start3, remove);
    while (chunkStart < items.length) {
      parameters = items.slice(
        chunkStart,
        chunkStart + constants.v8MaxSafeChunkSize
      );
      parameters.unshift(start3, 0);
      list4.splice(...parameters);
      chunkStart += constants.v8MaxSafeChunkSize;
      start3 += constants.v8MaxSafeChunkSize;
    }
  }
}
function push(list4, items) {
  if (list4.length > 0) {
    splice(list4, list4.length, 0, items);
    return list4;
  }
  return items;
}

// node_modules/micromark-util-combine-extensions/index.js
var hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
  const all2 = {};
  let index4 = -1;
  while (++index4 < extensions.length) {
    syntaxExtension(all2, extensions[index4]);
  }
  return all2;
}
function syntaxExtension(all2, extension2) {
  let hook;
  for (hook in extension2) {
    const maybe = hasOwnProperty.call(all2, hook) ? all2[hook] : void 0;
    const left2 = maybe || (all2[hook] = {});
    const right2 = extension2[hook];
    let code4;
    if (right2) {
      for (code4 in right2) {
        if (!hasOwnProperty.call(left2, code4)) left2[code4] = [];
        const value = right2[code4];
        constructs(
          // @ts-expect-error Looks like a list.
          left2[code4],
          Array.isArray(value) ? value : value ? [value] : []
        );
      }
    }
  }
}
function constructs(existing, list4) {
  let index4 = -1;
  const before = [];
  while (++index4 < list4.length) {
    ;
    (list4[index4].add === "after" ? existing : before).push(list4[index4]);
  }
  splice(existing, 0, 0, before);
}

// node_modules/micromark-util-decode-numeric-character-reference/dev/index.js
function decodeNumericCharacterReference(value, base) {
  const code4 = Number.parseInt(value, base);
  if (
    // C0 except for HT, LF, FF, CR, space.
    code4 < codes.ht || code4 === codes.vt || code4 > codes.cr && code4 < codes.space || // Control character (DEL) of C0, and C1 controls.
    code4 > codes.tilde && code4 < 160 || // Lone high surrogates and low surrogates.
    code4 > 55295 && code4 < 57344 || // Noncharacters.
    code4 > 64975 && code4 < 65008 || /* eslint-disable no-bitwise */
    (code4 & 65535) === 65535 || (code4 & 65535) === 65534 || /* eslint-enable no-bitwise */
    // Out of range
    code4 > 1114111
  ) {
    return values.replacementCharacter;
  }
  return String.fromCodePoint(code4);
}

// node_modules/micromark-util-normalize-identifier/dev/index.js
function normalizeIdentifier(value) {
  return value.replace(/[\t\n\r ]+/g, values.space).replace(/^ | $/g, "").toLowerCase().toUpperCase();
}

// node_modules/micromark-util-character/dev/index.js
var asciiAlpha = regexCheck(/[A-Za-z]/);
var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code4) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code4 !== null && (code4 < codes.space || code4 === codes.del)
  );
}
var asciiDigit = regexCheck(/\d/);
var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code4) {
  return code4 !== null && code4 < codes.horizontalTab;
}
function markdownLineEndingOrSpace(code4) {
  return code4 !== null && (code4 < codes.nul || code4 === codes.space);
}
function markdownSpace(code4) {
  return code4 === codes.horizontalTab || code4 === codes.virtualSpace || code4 === codes.space;
}
var unicodePunctuation = regexCheck(new RegExp("\\p{P}|\\p{S}", "u"));
var unicodeWhitespace = regexCheck(/\s/);
function regexCheck(regex) {
  return check;
  function check(code4) {
    return code4 !== null && code4 > -1 && regex.test(String.fromCharCode(code4));
  }
}

// node_modules/micromark-util-sanitize-uri/dev/index.js
function normalizeUri(value) {
  const result = [];
  let index4 = -1;
  let start3 = 0;
  let skip2 = 0;
  while (++index4 < value.length) {
    const code4 = value.charCodeAt(index4);
    let replace2 = "";
    if (code4 === codes.percentSign && asciiAlphanumeric(value.charCodeAt(index4 + 1)) && asciiAlphanumeric(value.charCodeAt(index4 + 2))) {
      skip2 = 2;
    } else if (code4 < 128) {
      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code4))) {
        replace2 = String.fromCharCode(code4);
      }
    } else if (code4 > 55295 && code4 < 57344) {
      const next = value.charCodeAt(index4 + 1);
      if (code4 < 56320 && next > 56319 && next < 57344) {
        replace2 = String.fromCharCode(code4, next);
        skip2 = 1;
      } else {
        replace2 = values.replacementCharacter;
      }
    } else {
      replace2 = String.fromCharCode(code4);
    }
    if (replace2) {
      result.push(value.slice(start3, index4), encodeURIComponent(replace2));
      start3 = index4 + skip2 + 1;
      replace2 = "";
    }
    if (skip2) {
      index4 += skip2;
      skip2 = 0;
    }
  }
  return result.join("") + value.slice(start3);
}

// node_modules/micromark/dev/lib/compile.js
var hasOwnProperty2 = {}.hasOwnProperty;

// node_modules/micromark-factory-space/dev/index.js
function factorySpace(effects, ok3, type, max2) {
  const limit = max2 ? max2 - 1 : Number.POSITIVE_INFINITY;
  let size = 0;
  return start3;
  function start3(code4) {
    if (markdownSpace(code4)) {
      effects.enter(type);
      return prefix(code4);
    }
    return ok3(code4);
  }
  function prefix(code4) {
    if (markdownSpace(code4) && size++ < limit) {
      effects.consume(code4);
      return prefix;
    }
    effects.exit(type);
    return ok3(code4);
  }
}

// node_modules/micromark/dev/lib/initialize/content.js
var content = { tokenize: initializeContent };
function initializeContent(effects) {
  const contentStart = effects.attempt(
    this.parser.constructs.contentInitial,
    afterContentStartConstruct,
    paragraphInitial
  );
  let previous3;
  return contentStart;
  function afterContentStartConstruct(code4) {
    ok(
      code4 === codes.eof || markdownLineEnding(code4),
      "expected eol or eof"
    );
    if (code4 === codes.eof) {
      effects.consume(code4);
      return;
    }
    effects.enter(types.lineEnding);
    effects.consume(code4);
    effects.exit(types.lineEnding);
    return factorySpace(effects, contentStart, types.linePrefix);
  }
  function paragraphInitial(code4) {
    ok(
      code4 !== codes.eof && !markdownLineEnding(code4),
      "expected anything other than a line ending or EOF"
    );
    effects.enter(types.paragraph);
    return lineStart(code4);
  }
  function lineStart(code4) {
    const token = effects.enter(types.chunkText, {
      contentType: constants.contentTypeText,
      previous: previous3
    });
    if (previous3) {
      previous3.next = token;
    }
    previous3 = token;
    return data(code4);
  }
  function data(code4) {
    if (code4 === codes.eof) {
      effects.exit(types.chunkText);
      effects.exit(types.paragraph);
      effects.consume(code4);
      return;
    }
    if (markdownLineEnding(code4)) {
      effects.consume(code4);
      effects.exit(types.chunkText);
      return lineStart;
    }
    effects.consume(code4);
    return data;
  }
}

// node_modules/micromark/dev/lib/initialize/document.js
var document2 = { tokenize: initializeDocument };
var containerConstruct = { tokenize: tokenizeContainer };
function initializeDocument(effects) {
  const self2 = this;
  const stack = [];
  let continued = 0;
  let childFlow;
  let childToken;
  let lineStartOffset;
  return start3;
  function start3(code4) {
    if (continued < stack.length) {
      const item = stack[continued];
      self2.containerState = item[1];
      ok(
        item[0].continuation,
        "expected `continuation` to be defined on container construct"
      );
      return effects.attempt(
        item[0].continuation,
        documentContinue,
        checkNewContainers
      )(code4);
    }
    return checkNewContainers(code4);
  }
  function documentContinue(code4) {
    ok(
      self2.containerState,
      "expected `containerState` to be defined after continuation"
    );
    continued++;
    if (self2.containerState._closeFlow) {
      self2.containerState._closeFlow = void 0;
      if (childFlow) {
        closeFlow();
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let point4;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === types.chunkFlow) {
          point4 = self2.events[indexBeforeFlow][1].end;
          break;
        }
      }
      ok(point4, "could not find previous flow chunk");
      exitContainers(continued);
      let index4 = indexBeforeExits;
      while (index4 < self2.events.length) {
        self2.events[index4][1].end = { ...point4 };
        index4++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index4;
      return checkNewContainers(code4);
    }
    return start3(code4);
  }
  function checkNewContainers(code4) {
    if (continued === stack.length) {
      if (!childFlow) {
        return documentContinued(code4);
      }
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code4);
      }
      self2.interrupt = Boolean(
        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
      );
    }
    self2.containerState = {};
    return effects.check(
      containerConstruct,
      thereIsANewContainer,
      thereIsNoNewContainer
    )(code4);
  }
  function thereIsANewContainer(code4) {
    if (childFlow) closeFlow();
    exitContainers(continued);
    return documentContinued(code4);
  }
  function thereIsNoNewContainer(code4) {
    self2.parser.lazy[self2.now().line] = continued !== stack.length;
    lineStartOffset = self2.now().offset;
    return flowStart(code4);
  }
  function documentContinued(code4) {
    self2.containerState = {};
    return effects.attempt(
      containerConstruct,
      containerContinue,
      flowStart
    )(code4);
  }
  function containerContinue(code4) {
    ok(
      self2.currentConstruct,
      "expected `currentConstruct` to be defined on tokenizer"
    );
    ok(
      self2.containerState,
      "expected `containerState` to be defined on tokenizer"
    );
    continued++;
    stack.push([self2.currentConstruct, self2.containerState]);
    return documentContinued(code4);
  }
  function flowStart(code4) {
    if (code4 === codes.eof) {
      if (childFlow) closeFlow();
      exitContainers(0);
      effects.consume(code4);
      return;
    }
    childFlow = childFlow || self2.parser.flow(self2.now());
    effects.enter(types.chunkFlow, {
      _tokenizer: childFlow,
      contentType: constants.contentTypeFlow,
      previous: childToken
    });
    return flowContinue(code4);
  }
  function flowContinue(code4) {
    if (code4 === codes.eof) {
      writeToChild(effects.exit(types.chunkFlow), true);
      exitContainers(0);
      effects.consume(code4);
      return;
    }
    if (markdownLineEnding(code4)) {
      effects.consume(code4);
      writeToChild(effects.exit(types.chunkFlow));
      continued = 0;
      self2.interrupt = void 0;
      return start3;
    }
    effects.consume(code4);
    return flowContinue;
  }
  function writeToChild(token, endOfFile) {
    ok(childFlow, "expected `childFlow` to be defined when continuing");
    const stream2 = self2.sliceStream(token);
    if (endOfFile) stream2.push(null);
    token.previous = childToken;
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream2);
    if (self2.parser.lazy[token.start.line]) {
      let index4 = childFlow.events.length;
      while (index4--) {
        if (
          // The token starts before the line ending…
          childFlow.events[index4][1].start.offset < lineStartOffset && // …and either is not ended yet…
          (!childFlow.events[index4][1].end || // …or ends after it.
          childFlow.events[index4][1].end.offset > lineStartOffset)
        ) {
          return;
        }
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let seen;
      let point4;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === types.chunkFlow) {
          if (seen) {
            point4 = self2.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      ok(point4, "could not find previous flow chunk");
      exitContainers(continued);
      index4 = indexBeforeExits;
      while (index4 < self2.events.length) {
        self2.events[index4][1].end = { ...point4 };
        index4++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index4;
    }
  }
  function exitContainers(size) {
    let index4 = stack.length;
    while (index4-- > size) {
      const entry = stack[index4];
      self2.containerState = entry[1];
      ok(
        entry[0].exit,
        "expected `exit` to be defined on container construct"
      );
      entry[0].exit.call(self2, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    ok(
      self2.containerState,
      "expected `containerState` to be defined when closing flow"
    );
    ok(childFlow, "expected `childFlow` to be defined when closing it");
    childFlow.write([codes.eof]);
    childToken = void 0;
    childFlow = void 0;
    self2.containerState._closeFlow = void 0;
  }
}
function tokenizeContainer(effects, ok3, nok) {
  ok(
    this.parser.constructs.disable.null,
    "expected `disable.null` to be populated"
  );
  return factorySpace(
    effects,
    effects.attempt(this.parser.constructs.document, ok3, nok),
    types.linePrefix,
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
  );
}

// node_modules/micromark-util-classify-character/dev/index.js
function classifyCharacter(code4) {
  if (code4 === codes.eof || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
    return constants.characterGroupWhitespace;
  }
  if (unicodePunctuation(code4)) {
    return constants.characterGroupPunctuation;
  }
}

// node_modules/micromark-util-resolve-all/index.js
function resolveAll(constructs2, events, context) {
  const called = [];
  let index4 = -1;
  while (++index4 < constructs2.length) {
    const resolve = constructs2[index4].resolveAll;
    if (resolve && !called.includes(resolve)) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }
  return events;
}

// node_modules/micromark-core-commonmark/dev/lib/attention.js
var attention = {
  name: "attention",
  resolveAll: resolveAllAttention,
  tokenize: tokenizeAttention
};
function resolveAllAttention(events, context) {
  let index4 = -1;
  let open;
  let group;
  let text8;
  let openingSequence;
  let closingSequence;
  let use2;
  let nextEvents;
  let offset2;
  while (++index4 < events.length) {
    if (events[index4][0] === "enter" && events[index4][1].type === "attentionSequence" && events[index4][1]._close) {
      open = index4;
      while (open--) {
        if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index4][1]).charCodeAt(0)) {
          if ((events[open][1]._close || events[index4][1]._open) && (events[index4][1].end.offset - events[index4][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index4][1].end.offset - events[index4][1].start.offset) % 3)) {
            continue;
          }
          use2 = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index4][1].end.offset - events[index4][1].start.offset > 1 ? 2 : 1;
          const start3 = { ...events[open][1].end };
          const end2 = { ...events[index4][1].start };
          movePoint(start3, -use2);
          movePoint(end2, use2);
          openingSequence = {
            type: use2 > 1 ? types.strongSequence : types.emphasisSequence,
            start: start3,
            end: { ...events[open][1].end }
          };
          closingSequence = {
            type: use2 > 1 ? types.strongSequence : types.emphasisSequence,
            start: { ...events[index4][1].start },
            end: end2
          };
          text8 = {
            type: use2 > 1 ? types.strongText : types.emphasisText,
            start: { ...events[open][1].end },
            end: { ...events[index4][1].start }
          };
          group = {
            type: use2 > 1 ? types.strong : types.emphasis,
            start: { ...openingSequence.start },
            end: { ...closingSequence.end }
          };
          events[open][1].end = { ...openingSequence.start };
          events[index4][1].start = { ...closingSequence.end };
          nextEvents = [];
          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = push(nextEvents, [
              ["enter", events[open][1], context],
              ["exit", events[open][1], context]
            ]);
          }
          nextEvents = push(nextEvents, [
            ["enter", group, context],
            ["enter", openingSequence, context],
            ["exit", openingSequence, context],
            ["enter", text8, context]
          ]);
          ok(
            context.parser.constructs.insideSpan.null,
            "expected `insideSpan` to be populated"
          );
          nextEvents = push(
            nextEvents,
            resolveAll(
              context.parser.constructs.insideSpan.null,
              events.slice(open + 1, index4),
              context
            )
          );
          nextEvents = push(nextEvents, [
            ["exit", text8, context],
            ["enter", closingSequence, context],
            ["exit", closingSequence, context],
            ["exit", group, context]
          ]);
          if (events[index4][1].end.offset - events[index4][1].start.offset) {
            offset2 = 2;
            nextEvents = push(nextEvents, [
              ["enter", events[index4][1], context],
              ["exit", events[index4][1], context]
            ]);
          } else {
            offset2 = 0;
          }
          splice(events, open - 1, index4 - open + 3, nextEvents);
          index4 = open + nextEvents.length - offset2 - 2;
          break;
        }
      }
    }
  }
  index4 = -1;
  while (++index4 < events.length) {
    if (events[index4][1].type === "attentionSequence") {
      events[index4][1].type = "data";
    }
  }
  return events;
}
function tokenizeAttention(effects, ok3) {
  const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
  const previous3 = this.previous;
  const before = classifyCharacter(previous3);
  let marker;
  return start3;
  function start3(code4) {
    ok(
      code4 === codes.asterisk || code4 === codes.underscore,
      "expected asterisk or underscore"
    );
    marker = code4;
    effects.enter("attentionSequence");
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      return inside;
    }
    const token = effects.exit("attentionSequence");
    const after = classifyCharacter(code4);
    ok(attentionMarkers2, "expected `attentionMarkers` to be populated");
    const open = !after || after === constants.characterGroupPunctuation && before || attentionMarkers2.includes(code4);
    const close = !before || before === constants.characterGroupPunctuation && after || attentionMarkers2.includes(previous3);
    token._open = Boolean(
      marker === codes.asterisk ? open : open && (before || !close)
    );
    token._close = Boolean(
      marker === codes.asterisk ? close : close && (after || !open)
    );
    return ok3(code4);
  }
}
function movePoint(point4, offset2) {
  point4.column += offset2;
  point4.offset += offset2;
  point4._bufferIndex += offset2;
}

// node_modules/micromark-core-commonmark/dev/lib/autolink.js
var autolink = { name: "autolink", tokenize: tokenizeAutolink };
function tokenizeAutolink(effects, ok3, nok) {
  let size = 0;
  return start3;
  function start3(code4) {
    ok(code4 === codes.lessThan, "expected `<`");
    effects.enter(types.autolink);
    effects.enter(types.autolinkMarker);
    effects.consume(code4);
    effects.exit(types.autolinkMarker);
    effects.enter(types.autolinkProtocol);
    return open;
  }
  function open(code4) {
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return schemeOrEmailAtext;
    }
    if (code4 === codes.atSign) {
      return nok(code4);
    }
    return emailAtext(code4);
  }
  function schemeOrEmailAtext(code4) {
    if (code4 === codes.plusSign || code4 === codes.dash || code4 === codes.dot || asciiAlphanumeric(code4)) {
      size = 1;
      return schemeInsideOrEmailAtext(code4);
    }
    return emailAtext(code4);
  }
  function schemeInsideOrEmailAtext(code4) {
    if (code4 === codes.colon) {
      effects.consume(code4);
      size = 0;
      return urlInside;
    }
    if ((code4 === codes.plusSign || code4 === codes.dash || code4 === codes.dot || asciiAlphanumeric(code4)) && size++ < constants.autolinkSchemeSizeMax) {
      effects.consume(code4);
      return schemeInsideOrEmailAtext;
    }
    size = 0;
    return emailAtext(code4);
  }
  function urlInside(code4) {
    if (code4 === codes.greaterThan) {
      effects.exit(types.autolinkProtocol);
      effects.enter(types.autolinkMarker);
      effects.consume(code4);
      effects.exit(types.autolinkMarker);
      effects.exit(types.autolink);
      return ok3;
    }
    if (code4 === codes.eof || code4 === codes.space || code4 === codes.lessThan || asciiControl(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return urlInside;
  }
  function emailAtext(code4) {
    if (code4 === codes.atSign) {
      effects.consume(code4);
      return emailAtSignOrDot;
    }
    if (asciiAtext(code4)) {
      effects.consume(code4);
      return emailAtext;
    }
    return nok(code4);
  }
  function emailAtSignOrDot(code4) {
    return asciiAlphanumeric(code4) ? emailLabel(code4) : nok(code4);
  }
  function emailLabel(code4) {
    if (code4 === codes.dot) {
      effects.consume(code4);
      size = 0;
      return emailAtSignOrDot;
    }
    if (code4 === codes.greaterThan) {
      effects.exit(types.autolinkProtocol).type = types.autolinkEmail;
      effects.enter(types.autolinkMarker);
      effects.consume(code4);
      effects.exit(types.autolinkMarker);
      effects.exit(types.autolink);
      return ok3;
    }
    return emailValue(code4);
  }
  function emailValue(code4) {
    if ((code4 === codes.dash || asciiAlphanumeric(code4)) && size++ < constants.autolinkDomainSizeMax) {
      const next = code4 === codes.dash ? emailValue : emailLabel;
      effects.consume(code4);
      return next;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/blank-line.js
var blankLine = { partial: true, tokenize: tokenizeBlankLine };
function tokenizeBlankLine(effects, ok3, nok) {
  return start3;
  function start3(code4) {
    return markdownSpace(code4) ? factorySpace(effects, after, types.linePrefix)(code4) : after(code4);
  }
  function after(code4) {
    return code4 === codes.eof || markdownLineEnding(code4) ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/block-quote.js
var blockQuote = {
  continuation: { tokenize: tokenizeBlockQuoteContinuation },
  exit,
  name: "blockQuote",
  tokenize: tokenizeBlockQuoteStart
};
function tokenizeBlockQuoteStart(effects, ok3, nok) {
  const self2 = this;
  return start3;
  function start3(code4) {
    if (code4 === codes.greaterThan) {
      const state = self2.containerState;
      ok(state, "expected `containerState` to be defined in container");
      if (!state.open) {
        effects.enter(types.blockQuote, { _container: true });
        state.open = true;
      }
      effects.enter(types.blockQuotePrefix);
      effects.enter(types.blockQuoteMarker);
      effects.consume(code4);
      effects.exit(types.blockQuoteMarker);
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    if (markdownSpace(code4)) {
      effects.enter(types.blockQuotePrefixWhitespace);
      effects.consume(code4);
      effects.exit(types.blockQuotePrefixWhitespace);
      effects.exit(types.blockQuotePrefix);
      return ok3;
    }
    effects.exit(types.blockQuotePrefix);
    return ok3(code4);
  }
}
function tokenizeBlockQuoteContinuation(effects, ok3, nok) {
  const self2 = this;
  return contStart;
  function contStart(code4) {
    if (markdownSpace(code4)) {
      ok(
        self2.parser.constructs.disable.null,
        "expected `disable.null` to be populated"
      );
      return factorySpace(
        effects,
        contBefore,
        types.linePrefix,
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
      )(code4);
    }
    return contBefore(code4);
  }
  function contBefore(code4) {
    return effects.attempt(blockQuote, ok3, nok)(code4);
  }
}
function exit(effects) {
  effects.exit(types.blockQuote);
}

// node_modules/micromark-core-commonmark/dev/lib/character-escape.js
var characterEscape = {
  name: "characterEscape",
  tokenize: tokenizeCharacterEscape
};
function tokenizeCharacterEscape(effects, ok3, nok) {
  return start3;
  function start3(code4) {
    ok(code4 === codes.backslash, "expected `\\`");
    effects.enter(types.characterEscape);
    effects.enter(types.escapeMarker);
    effects.consume(code4);
    effects.exit(types.escapeMarker);
    return inside;
  }
  function inside(code4) {
    if (asciiPunctuation(code4)) {
      effects.enter(types.characterEscapeValue);
      effects.consume(code4);
      effects.exit(types.characterEscapeValue);
      effects.exit(types.characterEscape);
      return ok3;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/character-reference.js
var characterReference = {
  name: "characterReference",
  tokenize: tokenizeCharacterReference
};
function tokenizeCharacterReference(effects, ok3, nok) {
  const self2 = this;
  let size = 0;
  let max2;
  let test2;
  return start3;
  function start3(code4) {
    ok(code4 === codes.ampersand, "expected `&`");
    effects.enter(types.characterReference);
    effects.enter(types.characterReferenceMarker);
    effects.consume(code4);
    effects.exit(types.characterReferenceMarker);
    return open;
  }
  function open(code4) {
    if (code4 === codes.numberSign) {
      effects.enter(types.characterReferenceMarkerNumeric);
      effects.consume(code4);
      effects.exit(types.characterReferenceMarkerNumeric);
      return numeric2;
    }
    effects.enter(types.characterReferenceValue);
    max2 = constants.characterReferenceNamedSizeMax;
    test2 = asciiAlphanumeric;
    return value(code4);
  }
  function numeric2(code4) {
    if (code4 === codes.uppercaseX || code4 === codes.lowercaseX) {
      effects.enter(types.characterReferenceMarkerHexadecimal);
      effects.consume(code4);
      effects.exit(types.characterReferenceMarkerHexadecimal);
      effects.enter(types.characterReferenceValue);
      max2 = constants.characterReferenceHexadecimalSizeMax;
      test2 = asciiHexDigit;
      return value;
    }
    effects.enter(types.characterReferenceValue);
    max2 = constants.characterReferenceDecimalSizeMax;
    test2 = asciiDigit;
    return value(code4);
  }
  function value(code4) {
    if (code4 === codes.semicolon && size) {
      const token = effects.exit(types.characterReferenceValue);
      if (test2 === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token))) {
        return nok(code4);
      }
      effects.enter(types.characterReferenceMarker);
      effects.consume(code4);
      effects.exit(types.characterReferenceMarker);
      effects.exit(types.characterReference);
      return ok3;
    }
    if (test2(code4) && size++ < max2) {
      effects.consume(code4);
      return value;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/code-fenced.js
var nonLazyContinuation = {
  partial: true,
  tokenize: tokenizeNonLazyContinuation
};
var codeFenced = {
  concrete: true,
  name: "codeFenced",
  tokenize: tokenizeCodeFenced
};
function tokenizeCodeFenced(effects, ok3, nok) {
  const self2 = this;
  const closeStart = { partial: true, tokenize: tokenizeCloseStart };
  let initialPrefix = 0;
  let sizeOpen = 0;
  let marker;
  return start3;
  function start3(code4) {
    return beforeSequenceOpen(code4);
  }
  function beforeSequenceOpen(code4) {
    ok(
      code4 === codes.graveAccent || code4 === codes.tilde,
      "expected `` ` `` or `~`"
    );
    const tail = self2.events[self2.events.length - 1];
    initialPrefix = tail && tail[1].type === types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;
    marker = code4;
    effects.enter(types.codeFenced);
    effects.enter(types.codeFencedFence);
    effects.enter(types.codeFencedFenceSequence);
    return sequenceOpen(code4);
  }
  function sequenceOpen(code4) {
    if (code4 === marker) {
      sizeOpen++;
      effects.consume(code4);
      return sequenceOpen;
    }
    if (sizeOpen < constants.codeFencedSequenceSizeMin) {
      return nok(code4);
    }
    effects.exit(types.codeFencedFenceSequence);
    return markdownSpace(code4) ? factorySpace(effects, infoBefore, types.whitespace)(code4) : infoBefore(code4);
  }
  function infoBefore(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.codeFencedFence);
      return self2.interrupt ? ok3(code4) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code4);
    }
    effects.enter(types.codeFencedFenceInfo);
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return info(code4);
  }
  function info(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.chunkString);
      effects.exit(types.codeFencedFenceInfo);
      return infoBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.exit(types.chunkString);
      effects.exit(types.codeFencedFenceInfo);
      return factorySpace(effects, metaBefore, types.whitespace)(code4);
    }
    if (code4 === codes.graveAccent && code4 === marker) {
      return nok(code4);
    }
    effects.consume(code4);
    return info;
  }
  function metaBefore(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      return infoBefore(code4);
    }
    effects.enter(types.codeFencedFenceMeta);
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return meta(code4);
  }
  function meta(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.chunkString);
      effects.exit(types.codeFencedFenceMeta);
      return infoBefore(code4);
    }
    if (code4 === codes.graveAccent && code4 === marker) {
      return nok(code4);
    }
    effects.consume(code4);
    return meta;
  }
  function atNonLazyBreak(code4) {
    ok(markdownLineEnding(code4), "expected eol");
    return effects.attempt(closeStart, after, contentBefore)(code4);
  }
  function contentBefore(code4) {
    ok(markdownLineEnding(code4), "expected eol");
    effects.enter(types.lineEnding);
    effects.consume(code4);
    effects.exit(types.lineEnding);
    return contentStart;
  }
  function contentStart(code4) {
    return initialPrefix > 0 && markdownSpace(code4) ? factorySpace(
      effects,
      beforeContentChunk,
      types.linePrefix,
      initialPrefix + 1
    )(code4) : beforeContentChunk(code4);
  }
  function beforeContentChunk(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code4);
    }
    effects.enter(types.codeFlowValue);
    return contentChunk(code4);
  }
  function contentChunk(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.codeFlowValue);
      return beforeContentChunk(code4);
    }
    effects.consume(code4);
    return contentChunk;
  }
  function after(code4) {
    effects.exit(types.codeFenced);
    return ok3(code4);
  }
  function tokenizeCloseStart(effects2, ok4, nok2) {
    let size = 0;
    return startBefore;
    function startBefore(code4) {
      ok(markdownLineEnding(code4), "expected eol");
      effects2.enter(types.lineEnding);
      effects2.consume(code4);
      effects2.exit(types.lineEnding);
      return start4;
    }
    function start4(code4) {
      ok(
        self2.parser.constructs.disable.null,
        "expected `disable.null` to be populated"
      );
      effects2.enter(types.codeFencedFence);
      return markdownSpace(code4) ? factorySpace(
        effects2,
        beforeSequenceClose,
        types.linePrefix,
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
      )(code4) : beforeSequenceClose(code4);
    }
    function beforeSequenceClose(code4) {
      if (code4 === marker) {
        effects2.enter(types.codeFencedFenceSequence);
        return sequenceClose(code4);
      }
      return nok2(code4);
    }
    function sequenceClose(code4) {
      if (code4 === marker) {
        size++;
        effects2.consume(code4);
        return sequenceClose;
      }
      if (size >= sizeOpen) {
        effects2.exit(types.codeFencedFenceSequence);
        return markdownSpace(code4) ? factorySpace(effects2, sequenceCloseAfter, types.whitespace)(code4) : sequenceCloseAfter(code4);
      }
      return nok2(code4);
    }
    function sequenceCloseAfter(code4) {
      if (code4 === codes.eof || markdownLineEnding(code4)) {
        effects2.exit(types.codeFencedFence);
        return ok4(code4);
      }
      return nok2(code4);
    }
  }
}
function tokenizeNonLazyContinuation(effects, ok3, nok) {
  const self2 = this;
  return start3;
  function start3(code4) {
    if (code4 === codes.eof) {
      return nok(code4);
    }
    ok(markdownLineEnding(code4), "expected eol");
    effects.enter(types.lineEnding);
    effects.consume(code4);
    effects.exit(types.lineEnding);
    return lineStart;
  }
  function lineStart(code4) {
    return self2.parser.lazy[self2.now().line] ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/code-indented.js
var codeIndented = {
  name: "codeIndented",
  tokenize: tokenizeCodeIndented
};
var furtherStart = { partial: true, tokenize: tokenizeFurtherStart };
function tokenizeCodeIndented(effects, ok3, nok) {
  const self2 = this;
  return start3;
  function start3(code4) {
    ok(markdownSpace(code4));
    effects.enter(types.codeIndented);
    return factorySpace(
      effects,
      afterPrefix,
      types.linePrefix,
      constants.tabSize + 1
    )(code4);
  }
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? atBreak(code4) : nok(code4);
  }
  function atBreak(code4) {
    if (code4 === codes.eof) {
      return after(code4);
    }
    if (markdownLineEnding(code4)) {
      return effects.attempt(furtherStart, atBreak, after)(code4);
    }
    effects.enter(types.codeFlowValue);
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.codeFlowValue);
      return atBreak(code4);
    }
    effects.consume(code4);
    return inside;
  }
  function after(code4) {
    effects.exit(types.codeIndented);
    return ok3(code4);
  }
}
function tokenizeFurtherStart(effects, ok3, nok) {
  const self2 = this;
  return furtherStart2;
  function furtherStart2(code4) {
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      effects.enter(types.lineEnding);
      effects.consume(code4);
      effects.exit(types.lineEnding);
      return furtherStart2;
    }
    return factorySpace(
      effects,
      afterPrefix,
      types.linePrefix,
      constants.tabSize + 1
    )(code4);
  }
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? ok3(code4) : markdownLineEnding(code4) ? furtherStart2(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/code-text.js
var codeText = {
  name: "codeText",
  previous,
  resolve: resolveCodeText,
  tokenize: tokenizeCodeText
};
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4;
  let headEnterIndex = 3;
  let index4;
  let enter;
  if ((events[headEnterIndex][1].type === types.lineEnding || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === types.lineEnding || events[tailExitIndex][1].type === "space")) {
    index4 = headEnterIndex;
    while (++index4 < tailExitIndex) {
      if (events[index4][1].type === types.codeTextData) {
        events[headEnterIndex][1].type = types.codeTextPadding;
        events[tailExitIndex][1].type = types.codeTextPadding;
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }
  index4 = headEnterIndex - 1;
  tailExitIndex++;
  while (++index4 <= tailExitIndex) {
    if (enter === void 0) {
      if (index4 !== tailExitIndex && events[index4][1].type !== types.lineEnding) {
        enter = index4;
      }
    } else if (index4 === tailExitIndex || events[index4][1].type === types.lineEnding) {
      events[enter][1].type = types.codeTextData;
      if (index4 !== enter + 2) {
        events[enter][1].end = events[index4 - 1][1].end;
        events.splice(enter + 2, index4 - enter - 2);
        tailExitIndex -= index4 - enter - 2;
        index4 = enter + 2;
      }
      enter = void 0;
    }
  }
  return events;
}
function previous(code4) {
  return code4 !== codes.graveAccent || this.events[this.events.length - 1][1].type === types.characterEscape;
}
function tokenizeCodeText(effects, ok3, nok) {
  const self2 = this;
  let sizeOpen = 0;
  let size;
  let token;
  return start3;
  function start3(code4) {
    ok(code4 === codes.graveAccent, "expected `` ` ``");
    ok(previous.call(self2, self2.previous), "expected correct previous");
    effects.enter(types.codeText);
    effects.enter(types.codeTextSequence);
    return sequenceOpen(code4);
  }
  function sequenceOpen(code4) {
    if (code4 === codes.graveAccent) {
      effects.consume(code4);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit(types.codeTextSequence);
    return between(code4);
  }
  function between(code4) {
    if (code4 === codes.eof) {
      return nok(code4);
    }
    if (code4 === codes.space) {
      effects.enter("space");
      effects.consume(code4);
      effects.exit("space");
      return between;
    }
    if (code4 === codes.graveAccent) {
      token = effects.enter(types.codeTextSequence);
      size = 0;
      return sequenceClose(code4);
    }
    if (markdownLineEnding(code4)) {
      effects.enter(types.lineEnding);
      effects.consume(code4);
      effects.exit(types.lineEnding);
      return between;
    }
    effects.enter(types.codeTextData);
    return data(code4);
  }
  function data(code4) {
    if (code4 === codes.eof || code4 === codes.space || code4 === codes.graveAccent || markdownLineEnding(code4)) {
      effects.exit(types.codeTextData);
      return between(code4);
    }
    effects.consume(code4);
    return data;
  }
  function sequenceClose(code4) {
    if (code4 === codes.graveAccent) {
      effects.consume(code4);
      size++;
      return sequenceClose;
    }
    if (size === sizeOpen) {
      effects.exit(types.codeTextSequence);
      effects.exit(types.codeText);
      return ok3(code4);
    }
    token.type = types.codeTextData;
    return data(code4);
  }
}

// node_modules/micromark-util-subtokenize/dev/lib/splice-buffer.js
var SpliceBuffer = class {
  /**
   * @param {ReadonlyArray<T> | null | undefined} [initial]
   *   Initial items (optional).
   * @returns
   *   Splice buffer.
   */
  constructor(initial) {
    this.left = initial ? [...initial] : [];
    this.right = [];
  }
  /**
   * Array access;
   * does not move the cursor.
   *
   * @param {number} index
   *   Index.
   * @return {T}
   *   Item.
   */
  get(index4) {
    if (index4 < 0 || index4 >= this.left.length + this.right.length) {
      throw new RangeError(
        "Cannot access index `" + index4 + "` in a splice buffer of size `" + (this.left.length + this.right.length) + "`"
      );
    }
    if (index4 < this.left.length) return this.left[index4];
    return this.right[this.right.length - index4 + this.left.length - 1];
  }
  /**
   * The length of the splice buffer, one greater than the largest index in the
   * array.
   */
  get length() {
    return this.left.length + this.right.length;
  }
  /**
   * Remove and return `list[0]`;
   * moves the cursor to `0`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  shift() {
    this.setCursor(0);
    return this.right.pop();
  }
  /**
   * Slice the buffer to get an array;
   * does not move the cursor.
   *
   * @param {number} start
   *   Start.
   * @param {number | null | undefined} [end]
   *   End (optional).
   * @returns {Array<T>}
   *   Array of items.
   */
  slice(start3, end2) {
    const stop = end2 === null || end2 === void 0 ? Number.POSITIVE_INFINITY : end2;
    if (stop < this.left.length) {
      return this.left.slice(start3, stop);
    }
    if (start3 > this.left.length) {
      return this.right.slice(
        this.right.length - stop + this.left.length,
        this.right.length - start3 + this.left.length
      ).reverse();
    }
    return this.left.slice(start3).concat(
      this.right.slice(this.right.length - stop + this.left.length).reverse()
    );
  }
  /**
   * Mimics the behavior of Array.prototype.splice() except for the change of
   * interface necessary to avoid segfaults when patching in very large arrays.
   *
   * This operation moves cursor is moved to `start` and results in the cursor
   * placed after any inserted items.
   *
   * @param {number} start
   *   Start;
   *   zero-based index at which to start changing the array;
   *   negative numbers count backwards from the end of the array and values
   *   that are out-of bounds are clamped to the appropriate end of the array.
   * @param {number | null | undefined} [deleteCount=0]
   *   Delete count (default: `0`);
   *   maximum number of elements to delete, starting from start.
   * @param {Array<T> | null | undefined} [items=[]]
   *   Items to include in place of the deleted items (default: `[]`).
   * @return {Array<T>}
   *   Any removed items.
   */
  splice(start3, deleteCount, items) {
    const count = deleteCount || 0;
    this.setCursor(Math.trunc(start3));
    const removed = this.right.splice(
      this.right.length - count,
      Number.POSITIVE_INFINITY
    );
    if (items) chunkedPush(this.left, items);
    return removed.reverse();
  }
  /**
   * Remove and return the highest-numbered item in the array, so
   * `list[list.length - 1]`;
   * Moves the cursor to `length`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  pop() {
    this.setCursor(Number.POSITIVE_INFINITY);
    return this.left.pop();
  }
  /**
   * Inserts a single item to the high-numbered side of the array;
   * moves the cursor to `length`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  push(item) {
    this.setCursor(Number.POSITIVE_INFINITY);
    this.left.push(item);
  }
  /**
   * Inserts many items to the high-numbered side of the array.
   * Moves the cursor to `length`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  pushMany(items) {
    this.setCursor(Number.POSITIVE_INFINITY);
    chunkedPush(this.left, items);
  }
  /**
   * Inserts a single item to the low-numbered side of the array;
   * Moves the cursor to `0`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  unshift(item) {
    this.setCursor(0);
    this.right.push(item);
  }
  /**
   * Inserts many items to the low-numbered side of the array;
   * moves the cursor to `0`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  unshiftMany(items) {
    this.setCursor(0);
    chunkedPush(this.right, items.reverse());
  }
  /**
   * Move the cursor to a specific position in the array. Requires
   * time proportional to the distance moved.
   *
   * If `n < 0`, the cursor will end up at the beginning.
   * If `n > length`, the cursor will end up at the end.
   *
   * @param {number} n
   *   Position.
   * @return {undefined}
   *   Nothing.
   */
  setCursor(n2) {
    if (n2 === this.left.length || n2 > this.left.length && this.right.length === 0 || n2 < 0 && this.left.length === 0)
      return;
    if (n2 < this.left.length) {
      const removed = this.left.splice(n2, Number.POSITIVE_INFINITY);
      chunkedPush(this.right, removed.reverse());
    } else {
      const removed = this.right.splice(
        this.left.length + this.right.length - n2,
        Number.POSITIVE_INFINITY
      );
      chunkedPush(this.left, removed.reverse());
    }
  }
};
function chunkedPush(list4, right2) {
  let chunkStart = 0;
  if (right2.length < constants.v8MaxSafeChunkSize) {
    list4.push(...right2);
  } else {
    while (chunkStart < right2.length) {
      list4.push(
        ...right2.slice(chunkStart, chunkStart + constants.v8MaxSafeChunkSize)
      );
      chunkStart += constants.v8MaxSafeChunkSize;
    }
  }
}

// node_modules/micromark-util-subtokenize/dev/index.js
function subtokenize(eventsArray) {
  const jumps = {};
  let index4 = -1;
  let event;
  let lineIndex;
  let otherIndex;
  let otherEvent;
  let parameters;
  let subevents;
  let more;
  const events = new SpliceBuffer(eventsArray);
  while (++index4 < events.length) {
    while (index4 in jumps) {
      index4 = jumps[index4];
    }
    event = events.get(index4);
    if (index4 && event[1].type === types.chunkFlow && events.get(index4 - 1)[1].type === types.listItemPrefix) {
      ok(event[1]._tokenizer, "expected `_tokenizer` on subtokens");
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === types.lineEndingBlank) {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === types.content) {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === types.content) {
            break;
          }
          if (subevents[otherIndex][1].type === types.chunkText) {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }
    if (event[0] === "enter") {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index4));
        index4 = jumps[index4];
        more = true;
      }
    } else if (event[1]._container) {
      otherIndex = index4;
      lineIndex = void 0;
      while (otherIndex--) {
        otherEvent = events.get(otherIndex);
        if (otherEvent[1].type === types.lineEnding || otherEvent[1].type === types.lineEndingBlank) {
          if (otherEvent[0] === "enter") {
            if (lineIndex) {
              events.get(lineIndex)[1].type = types.lineEndingBlank;
            }
            otherEvent[1].type = types.lineEnding;
            lineIndex = otherIndex;
          }
        } else if (otherEvent[1].type === types.linePrefix || otherEvent[1].type === types.listItemIndent) {
        } else {
          break;
        }
      }
      if (lineIndex) {
        event[1].end = { ...events.get(lineIndex)[1].start };
        parameters = events.slice(lineIndex, index4);
        parameters.unshift(event);
        events.splice(lineIndex, index4 - lineIndex + 1, parameters);
      }
    }
  }
  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));
  return !more;
}
function subcontent(events, eventIndex) {
  const token = events.get(eventIndex)[1];
  const context = events.get(eventIndex)[2];
  let startPosition = eventIndex - 1;
  const startPositions = [];
  ok(token.contentType, "expected `contentType` on subtokens");
  let tokenizer = token._tokenizer;
  if (!tokenizer) {
    tokenizer = context.parser[token.contentType](token.start);
    if (token._contentTypeTextTrailing) {
      tokenizer._contentTypeTextTrailing = true;
    }
  }
  const childEvents = tokenizer.events;
  const jumps = [];
  const gaps = {};
  let stream2;
  let previous3;
  let index4 = -1;
  let current = token;
  let adjust = 0;
  let start3 = 0;
  const breaks = [start3];
  while (current) {
    while (events.get(++startPosition)[1] !== current) {
    }
    ok(
      !previous3 || current.previous === previous3,
      "expected previous to match"
    );
    ok(!previous3 || previous3.next === current, "expected next to match");
    startPositions.push(startPosition);
    if (!current._tokenizer) {
      stream2 = context.sliceStream(current);
      if (!current.next) {
        stream2.push(codes.eof);
      }
      if (previous3) {
        tokenizer.defineSkip(current.start);
      }
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer.write(stream2);
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = void 0;
      }
    }
    previous3 = current;
    current = current.next;
  }
  current = token;
  while (++index4 < childEvents.length) {
    if (
      // Find a void token that includes a break.
      childEvents[index4][0] === "exit" && childEvents[index4 - 1][0] === "enter" && childEvents[index4][1].type === childEvents[index4 - 1][1].type && childEvents[index4][1].start.line !== childEvents[index4][1].end.line
    ) {
      ok(current, "expected a current token");
      start3 = index4 + 1;
      breaks.push(start3);
      current._tokenizer = void 0;
      current.previous = void 0;
      current = current.next;
    }
  }
  tokenizer.events = [];
  if (current) {
    current._tokenizer = void 0;
    current.previous = void 0;
    ok(!current.next, "expected no next token");
  } else {
    breaks.pop();
  }
  index4 = breaks.length;
  while (index4--) {
    const slice = childEvents.slice(breaks[index4], breaks[index4 + 1]);
    const start4 = startPositions.pop();
    ok(start4 !== void 0, "expected a start position when splicing");
    jumps.push([start4, start4 + slice.length - 1]);
    events.splice(start4, 2, slice);
  }
  jumps.reverse();
  index4 = -1;
  while (++index4 < jumps.length) {
    gaps[adjust + jumps[index4][0]] = adjust + jumps[index4][1];
    adjust += jumps[index4][1] - jumps[index4][0] - 1;
  }
  return gaps;
}

// node_modules/micromark-core-commonmark/dev/lib/content.js
var content2 = { resolve: resolveContent, tokenize: tokenizeContent };
var continuationConstruct = { partial: true, tokenize: tokenizeContinuation };
function resolveContent(events) {
  subtokenize(events);
  return events;
}
function tokenizeContent(effects, ok3) {
  let previous3;
  return chunkStart;
  function chunkStart(code4) {
    ok(
      code4 !== codes.eof && !markdownLineEnding(code4),
      "expected no eof or eol"
    );
    effects.enter(types.content);
    previous3 = effects.enter(types.chunkContent, {
      contentType: constants.contentTypeContent
    });
    return chunkInside(code4);
  }
  function chunkInside(code4) {
    if (code4 === codes.eof) {
      return contentEnd(code4);
    }
    if (markdownLineEnding(code4)) {
      return effects.check(
        continuationConstruct,
        contentContinue,
        contentEnd
      )(code4);
    }
    effects.consume(code4);
    return chunkInside;
  }
  function contentEnd(code4) {
    effects.exit(types.chunkContent);
    effects.exit(types.content);
    return ok3(code4);
  }
  function contentContinue(code4) {
    ok(markdownLineEnding(code4), "expected eol");
    effects.consume(code4);
    effects.exit(types.chunkContent);
    ok(previous3, "expected previous token");
    previous3.next = effects.enter(types.chunkContent, {
      contentType: constants.contentTypeContent,
      previous: previous3
    });
    previous3 = previous3.next;
    return chunkInside;
  }
}
function tokenizeContinuation(effects, ok3, nok) {
  const self2 = this;
  return startLookahead;
  function startLookahead(code4) {
    ok(markdownLineEnding(code4), "expected a line ending");
    effects.exit(types.chunkContent);
    effects.enter(types.lineEnding);
    effects.consume(code4);
    effects.exit(types.lineEnding);
    return factorySpace(effects, prefixed, types.linePrefix);
  }
  function prefixed(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      return nok(code4);
    }
    ok(
      self2.parser.constructs.disable.null,
      "expected `disable.null` to be populated"
    );
    const tail = self2.events[self2.events.length - 1];
    if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize) {
      return ok3(code4);
    }
    return effects.interrupt(self2.parser.constructs.flow, nok, ok3)(code4);
  }
}

// node_modules/micromark-factory-destination/dev/index.js
function factoryDestination(effects, ok3, nok, type, literalType, literalMarkerType, rawType, stringType, max2) {
  const limit = max2 || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start3;
  function start3(code4) {
    if (code4 === codes.lessThan) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code4);
      effects.exit(literalMarkerType);
      return enclosedBefore;
    }
    if (code4 === codes.eof || code4 === codes.space || code4 === codes.rightParenthesis || asciiControl(code4)) {
      return nok(code4);
    }
    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return raw(code4);
  }
  function enclosedBefore(code4) {
    if (code4 === codes.greaterThan) {
      effects.enter(literalMarkerType);
      effects.consume(code4);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return enclosed(code4);
  }
  function enclosed(code4) {
    if (code4 === codes.greaterThan) {
      effects.exit(types.chunkString);
      effects.exit(stringType);
      return enclosedBefore(code4);
    }
    if (code4 === codes.eof || code4 === codes.lessThan || markdownLineEnding(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return code4 === codes.backslash ? enclosedEscape : enclosed;
  }
  function enclosedEscape(code4) {
    if (code4 === codes.lessThan || code4 === codes.greaterThan || code4 === codes.backslash) {
      effects.consume(code4);
      return enclosed;
    }
    return enclosed(code4);
  }
  function raw(code4) {
    if (!balance && (code4 === codes.eof || code4 === codes.rightParenthesis || markdownLineEndingOrSpace(code4))) {
      effects.exit(types.chunkString);
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok3(code4);
    }
    if (balance < limit && code4 === codes.leftParenthesis) {
      effects.consume(code4);
      balance++;
      return raw;
    }
    if (code4 === codes.rightParenthesis) {
      effects.consume(code4);
      balance--;
      return raw;
    }
    if (code4 === codes.eof || code4 === codes.space || code4 === codes.leftParenthesis || asciiControl(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return code4 === codes.backslash ? rawEscape : raw;
  }
  function rawEscape(code4) {
    if (code4 === codes.leftParenthesis || code4 === codes.rightParenthesis || code4 === codes.backslash) {
      effects.consume(code4);
      return raw;
    }
    return raw(code4);
  }
}

// node_modules/micromark-factory-label/dev/index.js
function factoryLabel(effects, ok3, nok, type, markerType, stringType) {
  const self2 = this;
  let size = 0;
  let seen;
  return start3;
  function start3(code4) {
    ok(code4 === codes.leftSquareBracket, "expected `[`");
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code4);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }
  function atBreak(code4) {
    if (size > constants.linkReferenceSizeMax || code4 === codes.eof || code4 === codes.leftSquareBracket || code4 === codes.rightSquareBracket && !seen || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    code4 === codes.caret && !size && "_hiddenFootnoteSupport" in self2.parser.constructs) {
      return nok(code4);
    }
    if (code4 === codes.rightSquareBracket) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code4);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    if (markdownLineEnding(code4)) {
      effects.enter(types.lineEnding);
      effects.consume(code4);
      effects.exit(types.lineEnding);
      return atBreak;
    }
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return labelInside(code4);
  }
  function labelInside(code4) {
    if (code4 === codes.eof || code4 === codes.leftSquareBracket || code4 === codes.rightSquareBracket || markdownLineEnding(code4) || size++ > constants.linkReferenceSizeMax) {
      effects.exit(types.chunkString);
      return atBreak(code4);
    }
    effects.consume(code4);
    if (!seen) seen = !markdownSpace(code4);
    return code4 === codes.backslash ? labelEscape : labelInside;
  }
  function labelEscape(code4) {
    if (code4 === codes.leftSquareBracket || code4 === codes.backslash || code4 === codes.rightSquareBracket) {
      effects.consume(code4);
      size++;
      return labelInside;
    }
    return labelInside(code4);
  }
}

// node_modules/micromark-factory-title/dev/index.js
function factoryTitle(effects, ok3, nok, type, markerType, stringType) {
  let marker;
  return start3;
  function start3(code4) {
    if (code4 === codes.quotationMark || code4 === codes.apostrophe || code4 === codes.leftParenthesis) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code4);
      effects.exit(markerType);
      marker = code4 === codes.leftParenthesis ? codes.rightParenthesis : code4;
      return begin;
    }
    return nok(code4);
  }
  function begin(code4) {
    if (code4 === marker) {
      effects.enter(markerType);
      effects.consume(code4);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    return atBreak(code4);
  }
  function atBreak(code4) {
    if (code4 === marker) {
      effects.exit(stringType);
      return begin(marker);
    }
    if (code4 === codes.eof) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      effects.enter(types.lineEnding);
      effects.consume(code4);
      effects.exit(types.lineEnding);
      return factorySpace(effects, atBreak, types.linePrefix);
    }
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === marker || code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.chunkString);
      return atBreak(code4);
    }
    effects.consume(code4);
    return code4 === codes.backslash ? escape2 : inside;
  }
  function escape2(code4) {
    if (code4 === marker || code4 === codes.backslash) {
      effects.consume(code4);
      return inside;
    }
    return inside(code4);
  }
}

// node_modules/micromark-factory-whitespace/dev/index.js
function factoryWhitespace(effects, ok3) {
  let seen;
  return start3;
  function start3(code4) {
    if (markdownLineEnding(code4)) {
      effects.enter(types.lineEnding);
      effects.consume(code4);
      effects.exit(types.lineEnding);
      seen = true;
      return start3;
    }
    if (markdownSpace(code4)) {
      return factorySpace(
        effects,
        start3,
        seen ? types.linePrefix : types.lineSuffix
      )(code4);
    }
    return ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/definition.js
var definition = { name: "definition", tokenize: tokenizeDefinition };
var titleBefore = { partial: true, tokenize: tokenizeTitleBefore };
function tokenizeDefinition(effects, ok3, nok) {
  const self2 = this;
  let identifier;
  return start3;
  function start3(code4) {
    effects.enter(types.definition);
    return before(code4);
  }
  function before(code4) {
    ok(code4 === codes.leftSquareBracket, "expected `[`");
    return factoryLabel.call(
      self2,
      effects,
      labelAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      types.definitionLabel,
      types.definitionLabelMarker,
      types.definitionLabelString
    )(code4);
  }
  function labelAfter(code4) {
    identifier = normalizeIdentifier(
      self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
    );
    if (code4 === codes.colon) {
      effects.enter(types.definitionMarker);
      effects.consume(code4);
      effects.exit(types.definitionMarker);
      return markerAfter;
    }
    return nok(code4);
  }
  function markerAfter(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, destinationBefore)(code4) : destinationBefore(code4);
  }
  function destinationBefore(code4) {
    return factoryDestination(
      effects,
      destinationAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      types.definitionDestination,
      types.definitionDestinationLiteral,
      types.definitionDestinationLiteralMarker,
      types.definitionDestinationRaw,
      types.definitionDestinationString
    )(code4);
  }
  function destinationAfter(code4) {
    return effects.attempt(titleBefore, after, after)(code4);
  }
  function after(code4) {
    return markdownSpace(code4) ? factorySpace(effects, afterWhitespace, types.whitespace)(code4) : afterWhitespace(code4);
  }
  function afterWhitespace(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.definition);
      self2.parser.defined.push(identifier);
      return ok3(code4);
    }
    return nok(code4);
  }
}
function tokenizeTitleBefore(effects, ok3, nok) {
  return titleBefore2;
  function titleBefore2(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, beforeMarker)(code4) : nok(code4);
  }
  function beforeMarker(code4) {
    return factoryTitle(
      effects,
      titleAfter,
      nok,
      types.definitionTitle,
      types.definitionTitleMarker,
      types.definitionTitleString
    )(code4);
  }
  function titleAfter(code4) {
    return markdownSpace(code4) ? factorySpace(
      effects,
      titleAfterOptionalWhitespace,
      types.whitespace
    )(code4) : titleAfterOptionalWhitespace(code4);
  }
  function titleAfterOptionalWhitespace(code4) {
    return code4 === codes.eof || markdownLineEnding(code4) ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js
var hardBreakEscape = {
  name: "hardBreakEscape",
  tokenize: tokenizeHardBreakEscape
};
function tokenizeHardBreakEscape(effects, ok3, nok) {
  return start3;
  function start3(code4) {
    ok(code4 === codes.backslash, "expected `\\`");
    effects.enter(types.hardBreakEscape);
    effects.consume(code4);
    return after;
  }
  function after(code4) {
    if (markdownLineEnding(code4)) {
      effects.exit(types.hardBreakEscape);
      return ok3(code4);
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/heading-atx.js
var headingAtx = {
  name: "headingAtx",
  resolve: resolveHeadingAtx,
  tokenize: tokenizeHeadingAtx
};
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2;
  let contentStart = 3;
  let content3;
  let text8;
  if (events[contentStart][1].type === types.whitespace) {
    contentStart += 2;
  }
  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === types.whitespace) {
    contentEnd -= 2;
  }
  if (events[contentEnd][1].type === types.atxHeadingSequence && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === types.whitespace)) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content3 = {
      type: types.atxHeadingText,
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text8 = {
      type: types.chunkText,
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      contentType: constants.contentTypeText
    };
    splice(events, contentStart, contentEnd - contentStart + 1, [
      ["enter", content3, context],
      ["enter", text8, context],
      ["exit", text8, context],
      ["exit", content3, context]
    ]);
  }
  return events;
}
function tokenizeHeadingAtx(effects, ok3, nok) {
  let size = 0;
  return start3;
  function start3(code4) {
    effects.enter(types.atxHeading);
    return before(code4);
  }
  function before(code4) {
    ok(code4 === codes.numberSign, "expected `#`");
    effects.enter(types.atxHeadingSequence);
    return sequenceOpen(code4);
  }
  function sequenceOpen(code4) {
    if (code4 === codes.numberSign && size++ < constants.atxHeadingOpeningFenceSizeMax) {
      effects.consume(code4);
      return sequenceOpen;
    }
    if (code4 === codes.eof || markdownLineEndingOrSpace(code4)) {
      effects.exit(types.atxHeadingSequence);
      return atBreak(code4);
    }
    return nok(code4);
  }
  function atBreak(code4) {
    if (code4 === codes.numberSign) {
      effects.enter(types.atxHeadingSequence);
      return sequenceFurther(code4);
    }
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.atxHeading);
      return ok3(code4);
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, atBreak, types.whitespace)(code4);
    }
    effects.enter(types.atxHeadingText);
    return data(code4);
  }
  function sequenceFurther(code4) {
    if (code4 === codes.numberSign) {
      effects.consume(code4);
      return sequenceFurther;
    }
    effects.exit(types.atxHeadingSequence);
    return atBreak(code4);
  }
  function data(code4) {
    if (code4 === codes.eof || code4 === codes.numberSign || markdownLineEndingOrSpace(code4)) {
      effects.exit(types.atxHeadingText);
      return atBreak(code4);
    }
    effects.consume(code4);
    return data;
  }
}

// node_modules/micromark-util-html-tag-name/index.js
var htmlBlockNames = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];
var htmlRawNames = ["pre", "script", "style", "textarea"];

// node_modules/micromark-core-commonmark/dev/lib/html-flow.js
var htmlFlow = {
  concrete: true,
  name: "htmlFlow",
  resolveTo: resolveToHtmlFlow,
  tokenize: tokenizeHtmlFlow
};
var blankLineBefore = { partial: true, tokenize: tokenizeBlankLineBefore };
var nonLazyContinuationStart = {
  partial: true,
  tokenize: tokenizeNonLazyContinuationStart
};
function resolveToHtmlFlow(events) {
  let index4 = events.length;
  while (index4--) {
    if (events[index4][0] === "enter" && events[index4][1].type === types.htmlFlow) {
      break;
    }
  }
  if (index4 > 1 && events[index4 - 2][1].type === types.linePrefix) {
    events[index4][1].start = events[index4 - 2][1].start;
    events[index4 + 1][1].start = events[index4 - 2][1].start;
    events.splice(index4 - 2, 2);
  }
  return events;
}
function tokenizeHtmlFlow(effects, ok3, nok) {
  const self2 = this;
  let marker;
  let closingTag;
  let buffer;
  let index4;
  let markerB;
  return start3;
  function start3(code4) {
    return before(code4);
  }
  function before(code4) {
    ok(code4 === codes.lessThan, "expected `<`");
    effects.enter(types.htmlFlow);
    effects.enter(types.htmlFlowData);
    effects.consume(code4);
    return open;
  }
  function open(code4) {
    if (code4 === codes.exclamationMark) {
      effects.consume(code4);
      return declarationOpen;
    }
    if (code4 === codes.slash) {
      effects.consume(code4);
      closingTag = true;
      return tagCloseStart;
    }
    if (code4 === codes.questionMark) {
      effects.consume(code4);
      marker = constants.htmlInstruction;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    if (asciiAlpha(code4)) {
      ok(code4 !== null);
      effects.consume(code4);
      buffer = String.fromCharCode(code4);
      return tagName;
    }
    return nok(code4);
  }
  function declarationOpen(code4) {
    if (code4 === codes.dash) {
      effects.consume(code4);
      marker = constants.htmlComment;
      return commentOpenInside;
    }
    if (code4 === codes.leftSquareBracket) {
      effects.consume(code4);
      marker = constants.htmlCdata;
      index4 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      marker = constants.htmlDeclaration;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code4);
  }
  function commentOpenInside(code4) {
    if (code4 === codes.dash) {
      effects.consume(code4);
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code4);
  }
  function cdataOpenInside(code4) {
    const value = constants.cdataOpeningString;
    if (code4 === value.charCodeAt(index4++)) {
      effects.consume(code4);
      if (index4 === value.length) {
        return self2.interrupt ? ok3 : continuation;
      }
      return cdataOpenInside;
    }
    return nok(code4);
  }
  function tagCloseStart(code4) {
    if (asciiAlpha(code4)) {
      ok(code4 !== null);
      effects.consume(code4);
      buffer = String.fromCharCode(code4);
      return tagName;
    }
    return nok(code4);
  }
  function tagName(code4) {
    if (code4 === codes.eof || code4 === codes.slash || code4 === codes.greaterThan || markdownLineEndingOrSpace(code4)) {
      const slash = code4 === codes.slash;
      const name2 = buffer.toLowerCase();
      if (!slash && !closingTag && htmlRawNames.includes(name2)) {
        marker = constants.htmlRaw;
        return self2.interrupt ? ok3(code4) : continuation(code4);
      }
      if (htmlBlockNames.includes(buffer.toLowerCase())) {
        marker = constants.htmlBasic;
        if (slash) {
          effects.consume(code4);
          return basicSelfClosing;
        }
        return self2.interrupt ? ok3(code4) : continuation(code4);
      }
      marker = constants.htmlComplete;
      return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code4) : closingTag ? completeClosingTagAfter(code4) : completeAttributeNameBefore(code4);
    }
    if (code4 === codes.dash || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      buffer += String.fromCharCode(code4);
      return tagName;
    }
    return nok(code4);
  }
  function basicSelfClosing(code4) {
    if (code4 === codes.greaterThan) {
      effects.consume(code4);
      return self2.interrupt ? ok3 : continuation;
    }
    return nok(code4);
  }
  function completeClosingTagAfter(code4) {
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeClosingTagAfter;
    }
    return completeEnd(code4);
  }
  function completeAttributeNameBefore(code4) {
    if (code4 === codes.slash) {
      effects.consume(code4);
      return completeEnd;
    }
    if (code4 === codes.colon || code4 === codes.underscore || asciiAlpha(code4)) {
      effects.consume(code4);
      return completeAttributeName;
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAttributeNameBefore;
    }
    return completeEnd(code4);
  }
  function completeAttributeName(code4) {
    if (code4 === codes.dash || code4 === codes.dot || code4 === codes.colon || code4 === codes.underscore || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code4);
  }
  function completeAttributeNameAfter(code4) {
    if (code4 === codes.equalsTo) {
      effects.consume(code4);
      return completeAttributeValueBefore;
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code4);
  }
  function completeAttributeValueBefore(code4) {
    if (code4 === codes.eof || code4 === codes.lessThan || code4 === codes.equalsTo || code4 === codes.greaterThan || code4 === codes.graveAccent) {
      return nok(code4);
    }
    if (code4 === codes.quotationMark || code4 === codes.apostrophe) {
      effects.consume(code4);
      markerB = code4;
      return completeAttributeValueQuoted;
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAttributeValueBefore;
    }
    return completeAttributeValueUnquoted(code4);
  }
  function completeAttributeValueQuoted(code4) {
    if (code4 === markerB) {
      effects.consume(code4);
      markerB = null;
      return completeAttributeValueQuotedAfter;
    }
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return completeAttributeValueQuoted;
  }
  function completeAttributeValueUnquoted(code4) {
    if (code4 === codes.eof || code4 === codes.quotationMark || code4 === codes.apostrophe || code4 === codes.slash || code4 === codes.lessThan || code4 === codes.equalsTo || code4 === codes.greaterThan || code4 === codes.graveAccent || markdownLineEndingOrSpace(code4)) {
      return completeAttributeNameAfter(code4);
    }
    effects.consume(code4);
    return completeAttributeValueUnquoted;
  }
  function completeAttributeValueQuotedAfter(code4) {
    if (code4 === codes.slash || code4 === codes.greaterThan || markdownSpace(code4)) {
      return completeAttributeNameBefore(code4);
    }
    return nok(code4);
  }
  function completeEnd(code4) {
    if (code4 === codes.greaterThan) {
      effects.consume(code4);
      return completeAfter;
    }
    return nok(code4);
  }
  function completeAfter(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      return continuation(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAfter;
    }
    return nok(code4);
  }
  function continuation(code4) {
    if (code4 === codes.dash && marker === constants.htmlComment) {
      effects.consume(code4);
      return continuationCommentInside;
    }
    if (code4 === codes.lessThan && marker === constants.htmlRaw) {
      effects.consume(code4);
      return continuationRawTagOpen;
    }
    if (code4 === codes.greaterThan && marker === constants.htmlDeclaration) {
      effects.consume(code4);
      return continuationClose;
    }
    if (code4 === codes.questionMark && marker === constants.htmlInstruction) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    if (code4 === codes.rightSquareBracket && marker === constants.htmlCdata) {
      effects.consume(code4);
      return continuationCdataInside;
    }
    if (markdownLineEnding(code4) && (marker === constants.htmlBasic || marker === constants.htmlComplete)) {
      effects.exit(types.htmlFlowData);
      return effects.check(
        blankLineBefore,
        continuationAfter,
        continuationStart
      )(code4);
    }
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.htmlFlowData);
      return continuationStart(code4);
    }
    effects.consume(code4);
    return continuation;
  }
  function continuationStart(code4) {
    return effects.check(
      nonLazyContinuationStart,
      continuationStartNonLazy,
      continuationAfter
    )(code4);
  }
  function continuationStartNonLazy(code4) {
    ok(markdownLineEnding(code4));
    effects.enter(types.lineEnding);
    effects.consume(code4);
    effects.exit(types.lineEnding);
    return continuationBefore;
  }
  function continuationBefore(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      return continuationStart(code4);
    }
    effects.enter(types.htmlFlowData);
    return continuation(code4);
  }
  function continuationCommentInside(code4) {
    if (code4 === codes.dash) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    return continuation(code4);
  }
  function continuationRawTagOpen(code4) {
    if (code4 === codes.slash) {
      effects.consume(code4);
      buffer = "";
      return continuationRawEndTag;
    }
    return continuation(code4);
  }
  function continuationRawEndTag(code4) {
    if (code4 === codes.greaterThan) {
      const name2 = buffer.toLowerCase();
      if (htmlRawNames.includes(name2)) {
        effects.consume(code4);
        return continuationClose;
      }
      return continuation(code4);
    }
    if (asciiAlpha(code4) && buffer.length < constants.htmlRawSizeMax) {
      ok(code4 !== null);
      effects.consume(code4);
      buffer += String.fromCharCode(code4);
      return continuationRawEndTag;
    }
    return continuation(code4);
  }
  function continuationCdataInside(code4) {
    if (code4 === codes.rightSquareBracket) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    return continuation(code4);
  }
  function continuationDeclarationInside(code4) {
    if (code4 === codes.greaterThan) {
      effects.consume(code4);
      return continuationClose;
    }
    if (code4 === codes.dash && marker === constants.htmlComment) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    return continuation(code4);
  }
  function continuationClose(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.htmlFlowData);
      return continuationAfter(code4);
    }
    effects.consume(code4);
    return continuationClose;
  }
  function continuationAfter(code4) {
    effects.exit(types.htmlFlow);
    return ok3(code4);
  }
}
function tokenizeNonLazyContinuationStart(effects, ok3, nok) {
  const self2 = this;
  return start3;
  function start3(code4) {
    if (markdownLineEnding(code4)) {
      effects.enter(types.lineEnding);
      effects.consume(code4);
      effects.exit(types.lineEnding);
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    return self2.parser.lazy[self2.now().line] ? nok(code4) : ok3(code4);
  }
}
function tokenizeBlankLineBefore(effects, ok3, nok) {
  return start3;
  function start3(code4) {
    ok(markdownLineEnding(code4), "expected a line ending");
    effects.enter(types.lineEnding);
    effects.consume(code4);
    effects.exit(types.lineEnding);
    return effects.attempt(blankLine, ok3, nok);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/html-text.js
var htmlText = { name: "htmlText", tokenize: tokenizeHtmlText };
function tokenizeHtmlText(effects, ok3, nok) {
  const self2 = this;
  let marker;
  let index4;
  let returnState;
  return start3;
  function start3(code4) {
    ok(code4 === codes.lessThan, "expected `<`");
    effects.enter(types.htmlText);
    effects.enter(types.htmlTextData);
    effects.consume(code4);
    return open;
  }
  function open(code4) {
    if (code4 === codes.exclamationMark) {
      effects.consume(code4);
      return declarationOpen;
    }
    if (code4 === codes.slash) {
      effects.consume(code4);
      return tagCloseStart;
    }
    if (code4 === codes.questionMark) {
      effects.consume(code4);
      return instruction;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return tagOpen;
    }
    return nok(code4);
  }
  function declarationOpen(code4) {
    if (code4 === codes.dash) {
      effects.consume(code4);
      return commentOpenInside;
    }
    if (code4 === codes.leftSquareBracket) {
      effects.consume(code4);
      index4 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return declaration;
    }
    return nok(code4);
  }
  function commentOpenInside(code4) {
    if (code4 === codes.dash) {
      effects.consume(code4);
      return commentEnd;
    }
    return nok(code4);
  }
  function comment(code4) {
    if (code4 === codes.eof) {
      return nok(code4);
    }
    if (code4 === codes.dash) {
      effects.consume(code4);
      return commentClose;
    }
    if (markdownLineEnding(code4)) {
      returnState = comment;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return comment;
  }
  function commentClose(code4) {
    if (code4 === codes.dash) {
      effects.consume(code4);
      return commentEnd;
    }
    return comment(code4);
  }
  function commentEnd(code4) {
    return code4 === codes.greaterThan ? end2(code4) : code4 === codes.dash ? commentClose(code4) : comment(code4);
  }
  function cdataOpenInside(code4) {
    const value = constants.cdataOpeningString;
    if (code4 === value.charCodeAt(index4++)) {
      effects.consume(code4);
      return index4 === value.length ? cdata : cdataOpenInside;
    }
    return nok(code4);
  }
  function cdata(code4) {
    if (code4 === codes.eof) {
      return nok(code4);
    }
    if (code4 === codes.rightSquareBracket) {
      effects.consume(code4);
      return cdataClose;
    }
    if (markdownLineEnding(code4)) {
      returnState = cdata;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return cdata;
  }
  function cdataClose(code4) {
    if (code4 === codes.rightSquareBracket) {
      effects.consume(code4);
      return cdataEnd;
    }
    return cdata(code4);
  }
  function cdataEnd(code4) {
    if (code4 === codes.greaterThan) {
      return end2(code4);
    }
    if (code4 === codes.rightSquareBracket) {
      effects.consume(code4);
      return cdataEnd;
    }
    return cdata(code4);
  }
  function declaration(code4) {
    if (code4 === codes.eof || code4 === codes.greaterThan) {
      return end2(code4);
    }
    if (markdownLineEnding(code4)) {
      returnState = declaration;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return declaration;
  }
  function instruction(code4) {
    if (code4 === codes.eof) {
      return nok(code4);
    }
    if (code4 === codes.questionMark) {
      effects.consume(code4);
      return instructionClose;
    }
    if (markdownLineEnding(code4)) {
      returnState = instruction;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return instruction;
  }
  function instructionClose(code4) {
    return code4 === codes.greaterThan ? end2(code4) : instruction(code4);
  }
  function tagCloseStart(code4) {
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return tagClose;
    }
    return nok(code4);
  }
  function tagClose(code4) {
    if (code4 === codes.dash || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return tagClose;
    }
    return tagCloseBetween(code4);
  }
  function tagCloseBetween(code4) {
    if (markdownLineEnding(code4)) {
      returnState = tagCloseBetween;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagCloseBetween;
    }
    return end2(code4);
  }
  function tagOpen(code4) {
    if (code4 === codes.dash || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return tagOpen;
    }
    if (code4 === codes.slash || code4 === codes.greaterThan || markdownLineEndingOrSpace(code4)) {
      return tagOpenBetween(code4);
    }
    return nok(code4);
  }
  function tagOpenBetween(code4) {
    if (code4 === codes.slash) {
      effects.consume(code4);
      return end2;
    }
    if (code4 === codes.colon || code4 === codes.underscore || asciiAlpha(code4)) {
      effects.consume(code4);
      return tagOpenAttributeName;
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenBetween;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagOpenBetween;
    }
    return end2(code4);
  }
  function tagOpenAttributeName(code4) {
    if (code4 === codes.dash || code4 === codes.dot || code4 === codes.colon || code4 === codes.underscore || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code4);
  }
  function tagOpenAttributeNameAfter(code4) {
    if (code4 === codes.equalsTo) {
      effects.consume(code4);
      return tagOpenAttributeValueBefore;
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenAttributeNameAfter;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code4);
  }
  function tagOpenAttributeValueBefore(code4) {
    if (code4 === codes.eof || code4 === codes.lessThan || code4 === codes.equalsTo || code4 === codes.greaterThan || code4 === codes.graveAccent) {
      return nok(code4);
    }
    if (code4 === codes.quotationMark || code4 === codes.apostrophe) {
      effects.consume(code4);
      marker = code4;
      return tagOpenAttributeValueQuoted;
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenAttributeValueBefore;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code4);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuoted(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      marker = void 0;
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code4 === codes.eof) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenAttributeValueQuoted;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return tagOpenAttributeValueQuoted;
  }
  function tagOpenAttributeValueUnquoted(code4) {
    if (code4 === codes.eof || code4 === codes.quotationMark || code4 === codes.apostrophe || code4 === codes.lessThan || code4 === codes.equalsTo || code4 === codes.graveAccent) {
      return nok(code4);
    }
    if (code4 === codes.slash || code4 === codes.greaterThan || markdownLineEndingOrSpace(code4)) {
      return tagOpenBetween(code4);
    }
    effects.consume(code4);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuotedAfter(code4) {
    if (code4 === codes.slash || code4 === codes.greaterThan || markdownLineEndingOrSpace(code4)) {
      return tagOpenBetween(code4);
    }
    return nok(code4);
  }
  function end2(code4) {
    if (code4 === codes.greaterThan) {
      effects.consume(code4);
      effects.exit(types.htmlTextData);
      effects.exit(types.htmlText);
      return ok3;
    }
    return nok(code4);
  }
  function lineEndingBefore(code4) {
    ok(returnState, "expected return state");
    ok(markdownLineEnding(code4), "expected eol");
    effects.exit(types.htmlTextData);
    effects.enter(types.lineEnding);
    effects.consume(code4);
    effects.exit(types.lineEnding);
    return lineEndingAfter;
  }
  function lineEndingAfter(code4) {
    ok(
      self2.parser.constructs.disable.null,
      "expected `disable.null` to be populated"
    );
    return markdownSpace(code4) ? factorySpace(
      effects,
      lineEndingAfterPrefix,
      types.linePrefix,
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
    )(code4) : lineEndingAfterPrefix(code4);
  }
  function lineEndingAfterPrefix(code4) {
    effects.enter(types.htmlTextData);
    return returnState(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/label-end.js
var labelEnd = {
  name: "labelEnd",
  resolveAll: resolveAllLabelEnd,
  resolveTo: resolveToLabelEnd,
  tokenize: tokenizeLabelEnd
};
var resourceConstruct = { tokenize: tokenizeResource };
var referenceFullConstruct = { tokenize: tokenizeReferenceFull };
var referenceCollapsedConstruct = { tokenize: tokenizeReferenceCollapsed };
function resolveAllLabelEnd(events) {
  let index4 = -1;
  const newEvents = [];
  while (++index4 < events.length) {
    const token = events[index4][1];
    newEvents.push(events[index4]);
    if (token.type === types.labelImage || token.type === types.labelLink || token.type === types.labelEnd) {
      const offset2 = token.type === types.labelImage ? 4 : 2;
      token.type = types.data;
      index4 += offset2;
    }
  }
  if (events.length !== newEvents.length) {
    splice(events, 0, events.length, newEvents);
  }
  return events;
}
function resolveToLabelEnd(events, context) {
  let index4 = events.length;
  let offset2 = 0;
  let token;
  let open;
  let close;
  let media;
  while (index4--) {
    token = events[index4][1];
    if (open) {
      if (token.type === types.link || token.type === types.labelLink && token._inactive) {
        break;
      }
      if (events[index4][0] === "enter" && token.type === types.labelLink) {
        token._inactive = true;
      }
    } else if (close) {
      if (events[index4][0] === "enter" && (token.type === types.labelImage || token.type === types.labelLink) && !token._balanced) {
        open = index4;
        if (token.type !== types.labelLink) {
          offset2 = 2;
          break;
        }
      }
    } else if (token.type === types.labelEnd) {
      close = index4;
    }
  }
  ok(open !== void 0, "`open` is supposed to be found");
  ok(close !== void 0, "`close` is supposed to be found");
  const group = {
    type: events[open][1].type === types.labelLink ? types.link : types.image,
    start: { ...events[open][1].start },
    end: { ...events[events.length - 1][1].end }
  };
  const label = {
    type: types.label,
    start: { ...events[open][1].start },
    end: { ...events[close][1].end }
  };
  const text8 = {
    type: types.labelText,
    start: { ...events[open + offset2 + 2][1].end },
    end: { ...events[close - 2][1].start }
  };
  media = [
    ["enter", group, context],
    ["enter", label, context]
  ];
  media = push(media, events.slice(open + 1, open + offset2 + 3));
  media = push(media, [["enter", text8, context]]);
  ok(
    context.parser.constructs.insideSpan.null,
    "expected `insideSpan.null` to be populated"
  );
  media = push(
    media,
    resolveAll(
      context.parser.constructs.insideSpan.null,
      events.slice(open + offset2 + 4, close - 3),
      context
    )
  );
  media = push(media, [
    ["exit", text8, context],
    events[close - 2],
    events[close - 1],
    ["exit", label, context]
  ]);
  media = push(media, events.slice(close + 1));
  media = push(media, [["exit", group, context]]);
  splice(events, open, events.length, media);
  return events;
}
function tokenizeLabelEnd(effects, ok3, nok) {
  const self2 = this;
  let index4 = self2.events.length;
  let labelStart;
  let defined;
  while (index4--) {
    if ((self2.events[index4][1].type === types.labelImage || self2.events[index4][1].type === types.labelLink) && !self2.events[index4][1]._balanced) {
      labelStart = self2.events[index4][1];
      break;
    }
  }
  return start3;
  function start3(code4) {
    ok(code4 === codes.rightSquareBracket, "expected `]`");
    if (!labelStart) {
      return nok(code4);
    }
    if (labelStart._inactive) {
      return labelEndNok(code4);
    }
    defined = self2.parser.defined.includes(
      normalizeIdentifier(
        self2.sliceSerialize({ start: labelStart.end, end: self2.now() })
      )
    );
    effects.enter(types.labelEnd);
    effects.enter(types.labelMarker);
    effects.consume(code4);
    effects.exit(types.labelMarker);
    effects.exit(types.labelEnd);
    return after;
  }
  function after(code4) {
    if (code4 === codes.leftParenthesis) {
      return effects.attempt(
        resourceConstruct,
        labelEndOk,
        defined ? labelEndOk : labelEndNok
      )(code4);
    }
    if (code4 === codes.leftSquareBracket) {
      return effects.attempt(
        referenceFullConstruct,
        labelEndOk,
        defined ? referenceNotFull : labelEndNok
      )(code4);
    }
    return defined ? labelEndOk(code4) : labelEndNok(code4);
  }
  function referenceNotFull(code4) {
    return effects.attempt(
      referenceCollapsedConstruct,
      labelEndOk,
      labelEndNok
    )(code4);
  }
  function labelEndOk(code4) {
    return ok3(code4);
  }
  function labelEndNok(code4) {
    labelStart._balanced = true;
    return nok(code4);
  }
}
function tokenizeResource(effects, ok3, nok) {
  return resourceStart;
  function resourceStart(code4) {
    ok(code4 === codes.leftParenthesis, "expected left paren");
    effects.enter(types.resource);
    effects.enter(types.resourceMarker);
    effects.consume(code4);
    effects.exit(types.resourceMarker);
    return resourceBefore;
  }
  function resourceBefore(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, resourceOpen)(code4) : resourceOpen(code4);
  }
  function resourceOpen(code4) {
    if (code4 === codes.rightParenthesis) {
      return resourceEnd(code4);
    }
    return factoryDestination(
      effects,
      resourceDestinationAfter,
      resourceDestinationMissing,
      types.resourceDestination,
      types.resourceDestinationLiteral,
      types.resourceDestinationLiteralMarker,
      types.resourceDestinationRaw,
      types.resourceDestinationString,
      constants.linkResourceDestinationBalanceMax
    )(code4);
  }
  function resourceDestinationAfter(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, resourceBetween)(code4) : resourceEnd(code4);
  }
  function resourceDestinationMissing(code4) {
    return nok(code4);
  }
  function resourceBetween(code4) {
    if (code4 === codes.quotationMark || code4 === codes.apostrophe || code4 === codes.leftParenthesis) {
      return factoryTitle(
        effects,
        resourceTitleAfter,
        nok,
        types.resourceTitle,
        types.resourceTitleMarker,
        types.resourceTitleString
      )(code4);
    }
    return resourceEnd(code4);
  }
  function resourceTitleAfter(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, resourceEnd)(code4) : resourceEnd(code4);
  }
  function resourceEnd(code4) {
    if (code4 === codes.rightParenthesis) {
      effects.enter(types.resourceMarker);
      effects.consume(code4);
      effects.exit(types.resourceMarker);
      effects.exit(types.resource);
      return ok3;
    }
    return nok(code4);
  }
}
function tokenizeReferenceFull(effects, ok3, nok) {
  const self2 = this;
  return referenceFull;
  function referenceFull(code4) {
    ok(code4 === codes.leftSquareBracket, "expected left bracket");
    return factoryLabel.call(
      self2,
      effects,
      referenceFullAfter,
      referenceFullMissing,
      types.reference,
      types.referenceMarker,
      types.referenceString
    )(code4);
  }
  function referenceFullAfter(code4) {
    return self2.parser.defined.includes(
      normalizeIdentifier(
        self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
      )
    ) ? ok3(code4) : nok(code4);
  }
  function referenceFullMissing(code4) {
    return nok(code4);
  }
}
function tokenizeReferenceCollapsed(effects, ok3, nok) {
  return referenceCollapsedStart;
  function referenceCollapsedStart(code4) {
    ok(code4 === codes.leftSquareBracket, "expected left bracket");
    effects.enter(types.reference);
    effects.enter(types.referenceMarker);
    effects.consume(code4);
    effects.exit(types.referenceMarker);
    return referenceCollapsedOpen;
  }
  function referenceCollapsedOpen(code4) {
    if (code4 === codes.rightSquareBracket) {
      effects.enter(types.referenceMarker);
      effects.consume(code4);
      effects.exit(types.referenceMarker);
      effects.exit(types.reference);
      return ok3;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/label-start-image.js
var labelStartImage = {
  name: "labelStartImage",
  resolveAll: labelEnd.resolveAll,
  tokenize: tokenizeLabelStartImage
};
function tokenizeLabelStartImage(effects, ok3, nok) {
  const self2 = this;
  return start3;
  function start3(code4) {
    ok(code4 === codes.exclamationMark, "expected `!`");
    effects.enter(types.labelImage);
    effects.enter(types.labelImageMarker);
    effects.consume(code4);
    effects.exit(types.labelImageMarker);
    return open;
  }
  function open(code4) {
    if (code4 === codes.leftSquareBracket) {
      effects.enter(types.labelMarker);
      effects.consume(code4);
      effects.exit(types.labelMarker);
      effects.exit(types.labelImage);
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    return code4 === codes.caret && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/label-start-link.js
var labelStartLink = {
  name: "labelStartLink",
  resolveAll: labelEnd.resolveAll,
  tokenize: tokenizeLabelStartLink
};
function tokenizeLabelStartLink(effects, ok3, nok) {
  const self2 = this;
  return start3;
  function start3(code4) {
    ok(code4 === codes.leftSquareBracket, "expected `[`");
    effects.enter(types.labelLink);
    effects.enter(types.labelMarker);
    effects.consume(code4);
    effects.exit(types.labelMarker);
    effects.exit(types.labelLink);
    return after;
  }
  function after(code4) {
    return code4 === codes.caret && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/line-ending.js
var lineEnding = { name: "lineEnding", tokenize: tokenizeLineEnding };
function tokenizeLineEnding(effects, ok3) {
  return start3;
  function start3(code4) {
    ok(markdownLineEnding(code4), "expected eol");
    effects.enter(types.lineEnding);
    effects.consume(code4);
    effects.exit(types.lineEnding);
    return factorySpace(effects, ok3, types.linePrefix);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/thematic-break.js
var thematicBreak = {
  name: "thematicBreak",
  tokenize: tokenizeThematicBreak
};
function tokenizeThematicBreak(effects, ok3, nok) {
  let size = 0;
  let marker;
  return start3;
  function start3(code4) {
    effects.enter(types.thematicBreak);
    return before(code4);
  }
  function before(code4) {
    ok(
      code4 === codes.asterisk || code4 === codes.dash || code4 === codes.underscore,
      "expected `*`, `-`, or `_`"
    );
    marker = code4;
    return atBreak(code4);
  }
  function atBreak(code4) {
    if (code4 === marker) {
      effects.enter(types.thematicBreakSequence);
      return sequence(code4);
    }
    if (size >= constants.thematicBreakMarkerCountMin && (code4 === codes.eof || markdownLineEnding(code4))) {
      effects.exit(types.thematicBreak);
      return ok3(code4);
    }
    return nok(code4);
  }
  function sequence(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      size++;
      return sequence;
    }
    effects.exit(types.thematicBreakSequence);
    return markdownSpace(code4) ? factorySpace(effects, atBreak, types.whitespace)(code4) : atBreak(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/list.js
var list = {
  continuation: { tokenize: tokenizeListContinuation },
  exit: tokenizeListEnd,
  name: "list",
  tokenize: tokenizeListStart
};
var listItemPrefixWhitespaceConstruct = {
  partial: true,
  tokenize: tokenizeListItemPrefixWhitespace
};
var indentConstruct = { partial: true, tokenize: tokenizeIndent };
function tokenizeListStart(effects, ok3, nok) {
  const self2 = this;
  const tail = self2.events[self2.events.length - 1];
  let initialSize = tail && tail[1].type === types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size = 0;
  return start3;
  function start3(code4) {
    ok(self2.containerState, "expected state");
    const kind = self2.containerState.type || (code4 === codes.asterisk || code4 === codes.plusSign || code4 === codes.dash ? types.listUnordered : types.listOrdered);
    if (kind === types.listUnordered ? !self2.containerState.marker || code4 === self2.containerState.marker : asciiDigit(code4)) {
      if (!self2.containerState.type) {
        self2.containerState.type = kind;
        effects.enter(kind, { _container: true });
      }
      if (kind === types.listUnordered) {
        effects.enter(types.listItemPrefix);
        return code4 === codes.asterisk || code4 === codes.dash ? effects.check(thematicBreak, nok, atMarker)(code4) : atMarker(code4);
      }
      if (!self2.interrupt || code4 === codes.digit1) {
        effects.enter(types.listItemPrefix);
        effects.enter(types.listItemValue);
        return inside(code4);
      }
    }
    return nok(code4);
  }
  function inside(code4) {
    ok(self2.containerState, "expected state");
    if (asciiDigit(code4) && ++size < constants.listItemValueSizeMax) {
      effects.consume(code4);
      return inside;
    }
    if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code4 === self2.containerState.marker : code4 === codes.rightParenthesis || code4 === codes.dot)) {
      effects.exit(types.listItemValue);
      return atMarker(code4);
    }
    return nok(code4);
  }
  function atMarker(code4) {
    ok(self2.containerState, "expected state");
    ok(code4 !== codes.eof, "eof (`null`) is not a marker");
    effects.enter(types.listItemMarker);
    effects.consume(code4);
    effects.exit(types.listItemMarker);
    self2.containerState.marker = self2.containerState.marker || code4;
    return effects.check(
      blankLine,
      // Can’t be empty when interrupting.
      self2.interrupt ? nok : onBlank,
      effects.attempt(
        listItemPrefixWhitespaceConstruct,
        endOfPrefix,
        otherPrefix
      )
    );
  }
  function onBlank(code4) {
    ok(self2.containerState, "expected state");
    self2.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code4);
  }
  function otherPrefix(code4) {
    if (markdownSpace(code4)) {
      effects.enter(types.listItemPrefixWhitespace);
      effects.consume(code4);
      effects.exit(types.listItemPrefixWhitespace);
      return endOfPrefix;
    }
    return nok(code4);
  }
  function endOfPrefix(code4) {
    ok(self2.containerState, "expected state");
    self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit(types.listItemPrefix), true).length;
    return ok3(code4);
  }
}
function tokenizeListContinuation(effects, ok3, nok) {
  const self2 = this;
  ok(self2.containerState, "expected state");
  self2.containerState._closeFlow = void 0;
  return effects.check(blankLine, onBlank, notBlank);
  function onBlank(code4) {
    ok(self2.containerState, "expected state");
    ok(typeof self2.containerState.size === "number", "expected size");
    self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
    return factorySpace(
      effects,
      ok3,
      types.listItemIndent,
      self2.containerState.size + 1
    )(code4);
  }
  function notBlank(code4) {
    ok(self2.containerState, "expected state");
    if (self2.containerState.furtherBlankLines || !markdownSpace(code4)) {
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return notInCurrentItem(code4);
    }
    self2.containerState.furtherBlankLines = void 0;
    self2.containerState.initialBlankLine = void 0;
    return effects.attempt(indentConstruct, ok3, notInCurrentItem)(code4);
  }
  function notInCurrentItem(code4) {
    ok(self2.containerState, "expected state");
    self2.containerState._closeFlow = true;
    self2.interrupt = void 0;
    ok(
      self2.parser.constructs.disable.null,
      "expected `disable.null` to be populated"
    );
    return factorySpace(
      effects,
      effects.attempt(list, ok3, nok),
      types.linePrefix,
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
    )(code4);
  }
}
function tokenizeIndent(effects, ok3, nok) {
  const self2 = this;
  ok(self2.containerState, "expected state");
  ok(typeof self2.containerState.size === "number", "expected size");
  return factorySpace(
    effects,
    afterPrefix,
    types.listItemIndent,
    self2.containerState.size + 1
  );
  function afterPrefix(code4) {
    ok(self2.containerState, "expected state");
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === types.listItemIndent && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok3(code4) : nok(code4);
  }
}
function tokenizeListEnd(effects) {
  ok(this.containerState, "expected state");
  ok(typeof this.containerState.type === "string", "expected type");
  effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok3, nok) {
  const self2 = this;
  ok(
    self2.parser.constructs.disable.null,
    "expected `disable.null` to be populated"
  );
  return factorySpace(
    effects,
    afterPrefix,
    types.listItemPrefixWhitespace,
    self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize + 1
  );
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return !markdownSpace(code4) && tail && tail[1].type === types.listItemPrefixWhitespace ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/setext-underline.js
var setextUnderline = {
  name: "setextUnderline",
  resolveTo: resolveToSetextUnderline,
  tokenize: tokenizeSetextUnderline
};
function resolveToSetextUnderline(events, context) {
  let index4 = events.length;
  let content3;
  let text8;
  let definition3;
  while (index4--) {
    if (events[index4][0] === "enter") {
      if (events[index4][1].type === types.content) {
        content3 = index4;
        break;
      }
      if (events[index4][1].type === types.paragraph) {
        text8 = index4;
      }
    } else {
      if (events[index4][1].type === types.content) {
        events.splice(index4, 1);
      }
      if (!definition3 && events[index4][1].type === types.definition) {
        definition3 = index4;
      }
    }
  }
  ok(text8 !== void 0, "expected a `text` index to be found");
  ok(content3 !== void 0, "expected a `text` index to be found");
  ok(events[content3][2] === context, "enter context should be same");
  ok(
    events[events.length - 1][2] === context,
    "enter context should be same"
  );
  const heading3 = {
    type: types.setextHeading,
    start: { ...events[content3][1].start },
    end: { ...events[events.length - 1][1].end }
  };
  events[text8][1].type = types.setextHeadingText;
  if (definition3) {
    events.splice(text8, 0, ["enter", heading3, context]);
    events.splice(definition3 + 1, 0, ["exit", events[content3][1], context]);
    events[content3][1].end = { ...events[definition3][1].end };
  } else {
    events[content3][1] = heading3;
  }
  events.push(["exit", heading3, context]);
  return events;
}
function tokenizeSetextUnderline(effects, ok3, nok) {
  const self2 = this;
  let marker;
  return start3;
  function start3(code4) {
    let index4 = self2.events.length;
    let paragraph3;
    ok(
      code4 === codes.dash || code4 === codes.equalsTo,
      "expected `=` or `-`"
    );
    while (index4--) {
      if (self2.events[index4][1].type !== types.lineEnding && self2.events[index4][1].type !== types.linePrefix && self2.events[index4][1].type !== types.content) {
        paragraph3 = self2.events[index4][1].type === types.paragraph;
        break;
      }
    }
    if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph3)) {
      effects.enter(types.setextHeadingLine);
      marker = code4;
      return before(code4);
    }
    return nok(code4);
  }
  function before(code4) {
    effects.enter(types.setextHeadingLineSequence);
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      return inside;
    }
    effects.exit(types.setextHeadingLineSequence);
    return markdownSpace(code4) ? factorySpace(effects, after, types.lineSuffix)(code4) : after(code4);
  }
  function after(code4) {
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit(types.setextHeadingLine);
      return ok3(code4);
    }
    return nok(code4);
  }
}

// node_modules/micromark/dev/lib/initialize/flow.js
var flow = { tokenize: initializeFlow };
function initializeFlow(effects) {
  const self2 = this;
  const initial = effects.attempt(
    // Try to parse a blank line.
    blankLine,
    atBlankEnding,
    // Try to parse initial flow (essentially, only code).
    effects.attempt(
      this.parser.constructs.flowInitial,
      afterConstruct,
      factorySpace(
        effects,
        effects.attempt(
          this.parser.constructs.flow,
          afterConstruct,
          effects.attempt(content2, afterConstruct)
        ),
        types.linePrefix
      )
    )
  );
  return initial;
  function atBlankEnding(code4) {
    ok(
      code4 === codes.eof || markdownLineEnding(code4),
      "expected eol or eof"
    );
    if (code4 === codes.eof) {
      effects.consume(code4);
      return;
    }
    effects.enter(types.lineEndingBlank);
    effects.consume(code4);
    effects.exit(types.lineEndingBlank);
    self2.currentConstruct = void 0;
    return initial;
  }
  function afterConstruct(code4) {
    ok(
      code4 === codes.eof || markdownLineEnding(code4),
      "expected eol or eof"
    );
    if (code4 === codes.eof) {
      effects.consume(code4);
      return;
    }
    effects.enter(types.lineEnding);
    effects.consume(code4);
    effects.exit(types.lineEnding);
    self2.currentConstruct = void 0;
    return initial;
  }
}

// node_modules/micromark/dev/lib/initialize/text.js
var resolver = { resolveAll: createResolver() };
var string = initializeFactory("string");
var text2 = initializeFactory("text");
function initializeFactory(field) {
  return {
    resolveAll: createResolver(
      field === "text" ? resolveAllLineSuffixes : void 0
    ),
    tokenize: initializeText
  };
  function initializeText(effects) {
    const self2 = this;
    const constructs2 = this.parser.constructs[field];
    const text8 = effects.attempt(constructs2, start3, notText);
    return start3;
    function start3(code4) {
      return atBreak(code4) ? text8(code4) : notText(code4);
    }
    function notText(code4) {
      if (code4 === codes.eof) {
        effects.consume(code4);
        return;
      }
      effects.enter(types.data);
      effects.consume(code4);
      return data;
    }
    function data(code4) {
      if (atBreak(code4)) {
        effects.exit(types.data);
        return text8(code4);
      }
      effects.consume(code4);
      return data;
    }
    function atBreak(code4) {
      if (code4 === codes.eof) {
        return true;
      }
      const list4 = constructs2[code4];
      let index4 = -1;
      if (list4) {
        ok(Array.isArray(list4), "expected `disable.null` to be populated");
        while (++index4 < list4.length) {
          const item = list4[index4];
          if (!item.previous || item.previous.call(self2, self2.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}
function createResolver(extraResolver) {
  return resolveAllText;
  function resolveAllText(events, context) {
    let index4 = -1;
    let enter;
    while (++index4 <= events.length) {
      if (enter === void 0) {
        if (events[index4] && events[index4][1].type === types.data) {
          enter = index4;
          index4++;
        }
      } else if (!events[index4] || events[index4][1].type !== types.data) {
        if (index4 !== enter + 2) {
          events[enter][1].end = events[index4 - 1][1].end;
          events.splice(enter + 2, index4 - enter - 2);
          index4 = enter + 2;
        }
        enter = void 0;
      }
    }
    return extraResolver ? extraResolver(events, context) : events;
  }
}
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0;
  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === types.lineEnding) && events[eventIndex - 1][1].type === types.data) {
      const data = events[eventIndex - 1][1];
      const chunks = context.sliceStream(data);
      let index4 = chunks.length;
      let bufferIndex = -1;
      let size = 0;
      let tabs;
      while (index4--) {
        const chunk = chunks[index4];
        if (typeof chunk === "string") {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {
            size++;
            bufferIndex--;
          }
          if (bufferIndex) break;
          bufferIndex = -1;
        } else if (chunk === codes.horizontalTab) {
          tabs = true;
          size++;
        } else if (chunk === codes.virtualSpace) {
        } else {
          index4++;
          break;
        }
      }
      if (context._contentTypeTextTrailing && eventIndex === events.length) {
        size = 0;
      }
      if (size) {
        const token = {
          type: eventIndex === events.length || tabs || size < constants.hardBreakPrefixSizeMin ? types.lineSuffix : types.hardBreakTrailing,
          start: {
            _bufferIndex: index4 ? bufferIndex : data.start._bufferIndex + bufferIndex,
            _index: data.start._index + index4,
            line: data.end.line,
            column: data.end.column - size,
            offset: data.end.offset - size
          },
          end: { ...data.end }
        };
        data.end = { ...token.start };
        if (data.start.offset === data.end.offset) {
          Object.assign(data, token);
        } else {
          events.splice(
            eventIndex,
            0,
            ["enter", token, context],
            ["exit", token, context]
          );
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events;
}

// node_modules/micromark/dev/lib/constructs.js
var constructs_exports = {};
__export(constructs_exports, {
  attentionMarkers: () => attentionMarkers,
  contentInitial: () => contentInitial,
  disable: () => disable,
  document: () => document3,
  flow: () => flow2,
  flowInitial: () => flowInitial,
  insideSpan: () => insideSpan,
  string: () => string2,
  text: () => text3
});
var document3 = {
  [codes.asterisk]: list,
  [codes.plusSign]: list,
  [codes.dash]: list,
  [codes.digit0]: list,
  [codes.digit1]: list,
  [codes.digit2]: list,
  [codes.digit3]: list,
  [codes.digit4]: list,
  [codes.digit5]: list,
  [codes.digit6]: list,
  [codes.digit7]: list,
  [codes.digit8]: list,
  [codes.digit9]: list,
  [codes.greaterThan]: blockQuote
};
var contentInitial = {
  [codes.leftSquareBracket]: definition
};
var flowInitial = {
  [codes.horizontalTab]: codeIndented,
  [codes.virtualSpace]: codeIndented,
  [codes.space]: codeIndented
};
var flow2 = {
  [codes.numberSign]: headingAtx,
  [codes.asterisk]: thematicBreak,
  [codes.dash]: [setextUnderline, thematicBreak],
  [codes.lessThan]: htmlFlow,
  [codes.equalsTo]: setextUnderline,
  [codes.underscore]: thematicBreak,
  [codes.graveAccent]: codeFenced,
  [codes.tilde]: codeFenced
};
var string2 = {
  [codes.ampersand]: characterReference,
  [codes.backslash]: characterEscape
};
var text3 = {
  [codes.carriageReturn]: lineEnding,
  [codes.lineFeed]: lineEnding,
  [codes.carriageReturnLineFeed]: lineEnding,
  [codes.exclamationMark]: labelStartImage,
  [codes.ampersand]: characterReference,
  [codes.asterisk]: attention,
  [codes.lessThan]: [autolink, htmlText],
  [codes.leftSquareBracket]: labelStartLink,
  [codes.backslash]: [hardBreakEscape, characterEscape],
  [codes.rightSquareBracket]: labelEnd,
  [codes.underscore]: attention,
  [codes.graveAccent]: codeText
};
var insideSpan = { null: [attention, resolver] };
var attentionMarkers = { null: [codes.asterisk, codes.underscore] };
var disable = { null: [] };

// node_modules/micromark/dev/lib/create-tokenizer.js
var import_debug = __toESM(require_browser(), 1);
var debug = (0, import_debug.default)("micromark");
function createTokenizer(parser, initialize, from) {
  let point4 = {
    _bufferIndex: -1,
    _index: 0,
    line: from && from.line || 1,
    column: from && from.column || 1,
    offset: from && from.offset || 0
  };
  const columnStart = {};
  const resolveAllConstructs = [];
  let chunks = [];
  let stack = [];
  let consumed = true;
  const effects = {
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    consume,
    enter,
    exit: exit3,
    interrupt: constructFactory(onsuccessfulcheck, { interrupt: true })
  };
  const context = {
    code: codes.eof,
    containerState: {},
    defineSkip,
    events: [],
    now,
    parser,
    previous: codes.eof,
    sliceSerialize,
    sliceStream,
    write: write2
  };
  let state = initialize.tokenize.call(context, effects);
  let expectedCode;
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context;
  function write2(slice) {
    chunks = push(chunks, slice);
    main2();
    if (chunks[chunks.length - 1] !== codes.eof) {
      return [];
    }
    addResult(initialize, 0);
    context.events = resolveAll(resolveAllConstructs, context.events, context);
    return context.events;
  }
  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }
  function now() {
    const { _bufferIndex, _index, line, column, offset: offset2 } = point4;
    return { _bufferIndex, _index, line, column, offset: offset2 };
  }
  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
    debug("position: define skip: `%j`", point4);
  }
  function main2() {
    let chunkIndex;
    while (point4._index < chunks.length) {
      const chunk = chunks[point4._index];
      if (typeof chunk === "string") {
        chunkIndex = point4._index;
        if (point4._bufferIndex < 0) {
          point4._bufferIndex = 0;
        }
        while (point4._index === chunkIndex && point4._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point4._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }
  function go(code4) {
    ok(consumed === true, "expected character to be consumed");
    consumed = void 0;
    debug("main: passing `%s` to %s", code4, state && state.name);
    expectedCode = code4;
    ok(typeof state === "function", "expected state");
    state = state(code4);
  }
  function consume(code4) {
    ok(code4 === expectedCode, "expected given code to equal expected code");
    debug("consume: `%s`", code4);
    ok(
      consumed === void 0,
      "expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used"
    );
    ok(
      code4 === null ? context.events.length === 0 || context.events[context.events.length - 1][0] === "exit" : context.events[context.events.length - 1][0] === "enter",
      "expected last token to be open"
    );
    if (markdownLineEnding(code4)) {
      point4.line++;
      point4.column = 1;
      point4.offset += code4 === codes.carriageReturnLineFeed ? 2 : 1;
      accountForPotentialSkip();
      debug("position: after eol: `%j`", point4);
    } else if (code4 !== codes.virtualSpace) {
      point4.column++;
      point4.offset++;
    }
    if (point4._bufferIndex < 0) {
      point4._index++;
    } else {
      point4._bufferIndex++;
      if (point4._bufferIndex === // Points w/ non-negative `_bufferIndex` reference
      // strings.
      /** @type {string} */
      chunks[point4._index].length) {
        point4._bufferIndex = -1;
        point4._index++;
      }
    }
    context.previous = code4;
    consumed = true;
  }
  function enter(type, fields) {
    const token = fields || {};
    token.type = type;
    token.start = now();
    ok(typeof type === "string", "expected string type");
    ok(type.length > 0, "expected non-empty string");
    debug("enter: `%s`", type);
    context.events.push(["enter", token, context]);
    stack.push(token);
    return token;
  }
  function exit3(type) {
    ok(typeof type === "string", "expected string type");
    ok(type.length > 0, "expected non-empty string");
    const token = stack.pop();
    ok(token, "cannot close w/o open tokens");
    token.end = now();
    ok(type === token.type, "expected exit token to match current token");
    ok(
      !(token.start._index === token.end._index && token.start._bufferIndex === token.end._bufferIndex),
      "expected non-empty token (`" + type + "`)"
    );
    debug("exit: `%s`", token.type);
    context.events.push(["exit", token, context]);
    return token;
  }
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }
  function onsuccessfulcheck(_2, info) {
    info.restore();
  }
  function constructFactory(onreturn, fields) {
    return hook;
    function hook(constructs2, returnState, bogusState) {
      let listOfConstructs;
      let constructIndex;
      let currentConstruct;
      let info;
      return Array.isArray(constructs2) ? (
        /* c8 ignore next 1 */
        handleListOfConstructs(constructs2)
      ) : "tokenize" in constructs2 ? (
        // Looks like a construct.
        handleListOfConstructs([
          /** @type {Construct} */
          constructs2
        ])
      ) : handleMapOfConstructs(constructs2);
      function handleMapOfConstructs(map4) {
        return start3;
        function start3(code4) {
          const left2 = code4 !== null && map4[code4];
          const all2 = code4 !== null && map4.null;
          const list4 = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(left2) ? left2 : left2 ? [left2] : [],
            ...Array.isArray(all2) ? all2 : all2 ? [all2] : []
          ];
          return handleListOfConstructs(list4)(code4);
        }
      }
      function handleListOfConstructs(list4) {
        listOfConstructs = list4;
        constructIndex = 0;
        if (list4.length === 0) {
          ok(bogusState, "expected `bogusState` to be given");
          return bogusState;
        }
        return handleConstruct(list4[constructIndex]);
      }
      function handleConstruct(construct) {
        return start3;
        function start3(code4) {
          info = store();
          currentConstruct = construct;
          if (!construct.partial) {
            context.currentConstruct = construct;
          }
          ok(
            context.parser.constructs.disable.null,
            "expected `disable.null` to be populated"
          );
          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
            return nok(code4);
          }
          return construct.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            fields ? Object.assign(Object.create(context), fields) : context,
            effects,
            ok3,
            nok
          )(code4);
        }
      }
      function ok3(code4) {
        ok(code4 === expectedCode, "expected code");
        consumed = true;
        onreturn(currentConstruct, info);
        return returnState;
      }
      function nok(code4) {
        ok(code4 === expectedCode, "expected code");
        consumed = true;
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }
  function addResult(construct, from2) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }
    if (construct.resolve) {
      splice(
        context.events,
        from2,
        context.events.length - from2,
        construct.resolve(context.events.slice(from2), context)
      );
    }
    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
    ok(
      construct.partial || context.events.length === 0 || context.events[context.events.length - 1][0] === "exit",
      "expected last token to end"
    );
  }
  function store() {
    const startPoint = now();
    const startPrevious = context.previous;
    const startCurrentConstruct = context.currentConstruct;
    const startEventsIndex = context.events.length;
    const startStack = Array.from(stack);
    return { from: startEventsIndex, restore };
    function restore() {
      point4 = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
      debug("position: restore: `%j`", point4);
    }
  }
  function accountForPotentialSkip() {
    if (point4.line in columnStart && point4.column < 2) {
      point4.column = columnStart[point4.line];
      point4.offset += columnStart[point4.line] - 1;
    }
  }
}
function sliceChunks(chunks, token) {
  const startIndex = token.start._index;
  const startBufferIndex = token.start._bufferIndex;
  const endIndex = token.end._index;
  const endBufferIndex = token.end._bufferIndex;
  let view;
  if (startIndex === endIndex) {
    ok(endBufferIndex > -1, "expected non-negative end buffer index");
    ok(startBufferIndex > -1, "expected non-negative start buffer index");
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      const head = view[0];
      if (typeof head === "string") {
        view[0] = head.slice(startBufferIndex);
      } else {
        ok(startBufferIndex === 0, "expected `startBufferIndex` to be `0`");
        view.shift();
      }
    }
    if (endBufferIndex > 0) {
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}
function serializeChunks(chunks, expandTabs) {
  let index4 = -1;
  const result = [];
  let atTab;
  while (++index4 < chunks.length) {
    const chunk = chunks[index4];
    let value;
    if (typeof chunk === "string") {
      value = chunk;
    } else
      switch (chunk) {
        case codes.carriageReturn: {
          value = values.cr;
          break;
        }
        case codes.lineFeed: {
          value = values.lf;
          break;
        }
        case codes.carriageReturnLineFeed: {
          value = values.cr + values.lf;
          break;
        }
        case codes.horizontalTab: {
          value = expandTabs ? values.space : values.ht;
          break;
        }
        case codes.virtualSpace: {
          if (!expandTabs && atTab) continue;
          value = values.space;
          break;
        }
        default: {
          ok(typeof chunk === "number", "expected number");
          value = String.fromCharCode(chunk);
        }
      }
    atTab = chunk === codes.horizontalTab;
    result.push(value);
  }
  return result.join("");
}

// node_modules/micromark/dev/lib/parse.js
function parse(options2) {
  const settings = options2 || {};
  const constructs2 = (
    /** @type {FullNormalizedExtension} */
    combineExtensions([constructs_exports, ...settings.extensions || []])
  );
  const parser = {
    constructs: constructs2,
    content: create2(content),
    defined: [],
    document: create2(document2),
    flow: create2(flow),
    lazy: {},
    string: create2(string),
    text: create2(text2)
  };
  return parser;
  function create2(initial) {
    return creator;
    function creator(from) {
      return createTokenizer(parser, initial, from);
    }
  }
}

// node_modules/micromark/dev/lib/postprocess.js
function postprocess(events) {
  while (!subtokenize(events)) {
  }
  return events;
}

// node_modules/micromark/dev/lib/preprocess.js
var search = /[\0\t\n\r]/g;
function preprocess() {
  let column = 1;
  let buffer = "";
  let start3 = true;
  let atCarriageReturn;
  return preprocessor;
  function preprocessor(value, encoding, end2) {
    const chunks = [];
    let match;
    let next;
    let startPosition;
    let endPosition;
    let code4;
    value = buffer + (typeof value === "string" ? value.toString() : new TextDecoder(encoding || void 0).decode(value));
    startPosition = 0;
    buffer = "";
    if (start3) {
      if (value.charCodeAt(0) === codes.byteOrderMarker) {
        startPosition++;
      }
      start3 = void 0;
    }
    while (startPosition < value.length) {
      search.lastIndex = startPosition;
      match = search.exec(value);
      endPosition = match && match.index !== void 0 ? match.index : value.length;
      code4 = value.charCodeAt(endPosition);
      if (!match) {
        buffer = value.slice(startPosition);
        break;
      }
      if (code4 === codes.lf && startPosition === endPosition && atCarriageReturn) {
        chunks.push(codes.carriageReturnLineFeed);
        atCarriageReturn = void 0;
      } else {
        if (atCarriageReturn) {
          chunks.push(codes.carriageReturn);
          atCarriageReturn = void 0;
        }
        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }
        switch (code4) {
          case codes.nul: {
            chunks.push(codes.replacementCharacter);
            column++;
            break;
          }
          case codes.ht: {
            next = Math.ceil(column / constants.tabSize) * constants.tabSize;
            chunks.push(codes.horizontalTab);
            while (column++ < next) chunks.push(codes.virtualSpace);
            break;
          }
          case codes.lf: {
            chunks.push(codes.lineFeed);
            column = 1;
            break;
          }
          default: {
            atCarriageReturn = true;
            column = 1;
          }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end2) {
      if (atCarriageReturn) chunks.push(codes.carriageReturn);
      if (buffer) chunks.push(buffer);
      chunks.push(codes.eof);
    }
    return chunks;
  }
}

// node_modules/micromark-util-decode-string/dev/index.js
var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}
function decode($0, $1, $2) {
  if ($1) {
    return $1;
  }
  const head = $2.charCodeAt(0);
  if (head === codes.numberSign) {
    const head2 = $2.charCodeAt(1);
    const hex = head2 === codes.lowercaseX || head2 === codes.uppercaseX;
    return decodeNumericCharacterReference(
      $2.slice(hex ? 2 : 1),
      hex ? constants.numericBaseHexadecimal : constants.numericBaseDecimal
    );
  }
  return decodeNamedCharacterReference($2) || $0;
}

// node_modules/mdast-util-from-markdown/dev/lib/index.js
var own2 = {}.hasOwnProperty;
function fromMarkdown(value, encoding, options2) {
  if (typeof encoding !== "string") {
    options2 = encoding;
    encoding = void 0;
  }
  return compiler(options2)(
    postprocess(
      parse(options2).document().write(preprocess()(value, encoding, true))
    )
  );
}
function compiler(options2) {
  const config = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: opener(link3),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading3),
      blockQuote: opener(blockQuote2),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer,
      codeFencedFenceMeta: buffer,
      codeIndented: opener(codeFlow, buffer),
      codeText: opener(codeText2, buffer),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition3),
      definitionDestinationString: buffer,
      definitionLabelString: buffer,
      definitionTitleString: buffer,
      emphasis: opener(emphasis3),
      hardBreakEscape: opener(hardBreak3),
      hardBreakTrailing: opener(hardBreak3),
      htmlFlow: opener(html5, buffer),
      htmlFlowData: onenterdata,
      htmlText: opener(html5, buffer),
      htmlTextData: onenterdata,
      image: opener(image3),
      label: buffer,
      link: opener(link3),
      listItem: opener(listItem3),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list4, onenterlistordered),
      listUnordered: opener(list4),
      paragraph: opener(paragraph3),
      reference: onenterreference,
      referenceString: buffer,
      resourceDestinationString: buffer,
      resourceTitleString: buffer,
      setextHeading: opener(heading3),
      strong: opener(strong3),
      thematicBreak: opener(thematicBreak4)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      characterReference: onexitcharacterreference,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config, (options2 || {}).mdastExtensions || []);
  const data = {};
  return compile2;
  function compile2(events) {
    let tree = { type: "root", children: [] };
    const context = {
      stack: [tree],
      tokenStack: [],
      config,
      enter,
      exit: exit3,
      buffer,
      resume,
      data
    };
    const listStack = [];
    let index4 = -1;
    while (++index4 < events.length) {
      if (events[index4][1].type === types.listOrdered || events[index4][1].type === types.listUnordered) {
        if (events[index4][0] === "enter") {
          listStack.push(index4);
        } else {
          const tail = listStack.pop();
          ok(typeof tail === "number", "expected list ot be open");
          index4 = prepareList(events, tail, index4);
        }
      }
    }
    index4 = -1;
    while (++index4 < events.length) {
      const handler = config[events[index4][0]];
      if (own2.call(handler, events[index4][1].type)) {
        handler[events[index4][1].type].call(
          Object.assign(
            { sliceSerialize: events[index4][2].sliceSerialize },
            context
          ),
          events[index4][1]
        );
      }
    }
    if (context.tokenStack.length > 0) {
      const tail = context.tokenStack[context.tokenStack.length - 1];
      const handler = tail[1] || defaultOnError;
      handler.call(context, void 0, tail[0]);
    }
    tree.position = {
      start: point3(
        events.length > 0 ? events[0][1].start : { line: 1, column: 1, offset: 0 }
      ),
      end: point3(
        events.length > 0 ? events[events.length - 2][1].end : { line: 1, column: 1, offset: 0 }
      )
    };
    index4 = -1;
    while (++index4 < config.transforms.length) {
      tree = config.transforms[index4](tree) || tree;
    }
    return tree;
  }
  function prepareList(events, start3, length) {
    let index4 = start3 - 1;
    let containerBalance = -1;
    let listSpread = false;
    let listItem4;
    let lineIndex;
    let firstBlankLineIndex;
    let atMarker;
    while (++index4 <= length) {
      const event = events[index4];
      switch (event[1].type) {
        case types.listUnordered:
        case types.listOrdered:
        case types.blockQuote: {
          if (event[0] === "enter") {
            containerBalance++;
          } else {
            containerBalance--;
          }
          atMarker = void 0;
          break;
        }
        case types.lineEndingBlank: {
          if (event[0] === "enter") {
            if (listItem4 && !atMarker && !containerBalance && !firstBlankLineIndex) {
              firstBlankLineIndex = index4;
            }
            atMarker = void 0;
          }
          break;
        }
        case types.linePrefix:
        case types.listItemValue:
        case types.listItemMarker:
        case types.listItemPrefix:
        case types.listItemPrefixWhitespace: {
          break;
        }
        default: {
          atMarker = void 0;
        }
      }
      if (!containerBalance && event[0] === "enter" && event[1].type === types.listItemPrefix || containerBalance === -1 && event[0] === "exit" && (event[1].type === types.listUnordered || event[1].type === types.listOrdered)) {
        if (listItem4) {
          let tailIndex = index4;
          lineIndex = void 0;
          while (tailIndex--) {
            const tailEvent = events[tailIndex];
            if (tailEvent[1].type === types.lineEnding || tailEvent[1].type === types.lineEndingBlank) {
              if (tailEvent[0] === "exit") continue;
              if (lineIndex) {
                events[lineIndex][1].type = types.lineEndingBlank;
                listSpread = true;
              }
              tailEvent[1].type = types.lineEnding;
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === types.linePrefix || tailEvent[1].type === types.blockQuotePrefix || tailEvent[1].type === types.blockQuotePrefixWhitespace || tailEvent[1].type === types.blockQuoteMarker || tailEvent[1].type === types.listItemIndent) {
            } else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            listItem4._spread = true;
          }
          listItem4.end = Object.assign(
            {},
            lineIndex ? events[lineIndex][1].start : event[1].end
          );
          events.splice(lineIndex || index4, 0, ["exit", listItem4, event[2]]);
          index4++;
          length++;
        }
        if (event[1].type === types.listItemPrefix) {
          const item = {
            type: "listItem",
            _spread: false,
            start: Object.assign({}, event[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          listItem4 = item;
          events.splice(index4, 0, ["enter", item, event[2]]);
          index4++;
          length++;
          firstBlankLineIndex = void 0;
          atMarker = true;
        }
      }
    }
    events[start3][1]._spread = listSpread;
    return length;
  }
  function opener(create2, and) {
    return open;
    function open(token) {
      enter.call(this, create2(token), token);
      if (and) and.call(this, token);
    }
  }
  function buffer() {
    this.stack.push({ type: "fragment", children: [] });
  }
  function enter(node2, token, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    ok(parent, "expected `parent`");
    ok("children" in parent, "expected `parent`");
    const siblings = parent.children;
    siblings.push(node2);
    this.stack.push(node2);
    this.tokenStack.push([token, errorHandler || void 0]);
    node2.position = {
      start: point3(token.start),
      // @ts-expect-error: `end` will be patched later.
      end: void 0
    };
  }
  function closer(and) {
    return close;
    function close(token) {
      if (and) and.call(this, token);
      exit3.call(this, token);
    }
  }
  function exit3(token, onExitError) {
    const node2 = this.stack.pop();
    ok(node2, "expected `node`");
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error(
        "Cannot close `" + token.type + "` (" + stringifyPosition({ start: token.start, end: token.end }) + "): it’s not open"
      );
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        const handler = open[1] || defaultOnError;
        handler.call(this, token, open[0]);
      }
    }
    ok(node2.type !== "fragment", "unexpected fragment `exit`ed");
    ok(node2.position, "expected `position` to be defined");
    node2.position.end = point3(token.end);
  }
  function resume() {
    return toString(this.stack.pop());
  }
  function onenterlistordered() {
    this.data.expectingFirstListItemValue = true;
  }
  function onenterlistitemvalue(token) {
    if (this.data.expectingFirstListItemValue) {
      const ancestor = this.stack[this.stack.length - 2];
      ok(ancestor, "expected nodes on stack");
      ok(ancestor.type === "list", "expected list on stack");
      ancestor.start = Number.parseInt(
        this.sliceSerialize(token),
        constants.numericBaseDecimal
      );
      this.data.expectingFirstListItemValue = void 0;
    }
  }
  function onexitcodefencedfenceinfo() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "code", "expected code on stack");
    node2.lang = data2;
  }
  function onexitcodefencedfencemeta() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "code", "expected code on stack");
    node2.meta = data2;
  }
  function onexitcodefencedfence() {
    if (this.data.flowCodeInside) return;
    this.buffer();
    this.data.flowCodeInside = true;
  }
  function onexitcodefenced() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "code", "expected code on stack");
    node2.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
    this.data.flowCodeInside = void 0;
  }
  function onexitcodeindented() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "code", "expected code on stack");
    node2.value = data2.replace(/(\r?\n|\r)$/g, "");
  }
  function onexitdefinitionlabelstring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "definition", "expected definition on stack");
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
  }
  function onexitdefinitiontitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "definition", "expected definition on stack");
    node2.title = data2;
  }
  function onexitdefinitiondestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "definition", "expected definition on stack");
    node2.url = data2;
  }
  function onexitatxheadingsequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "heading", "expected heading on stack");
    if (!node2.depth) {
      const depth = this.sliceSerialize(token).length;
      ok(
        depth === 1 || depth === 2 || depth === 3 || depth === 4 || depth === 5 || depth === 6,
        "expected `depth` between `1` and `6`"
      );
      node2.depth = depth;
    }
  }
  function onexitsetextheadingtext() {
    this.data.setextHeadingSlurpLineEnding = true;
  }
  function onexitsetextheadinglinesequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "heading", "expected heading on stack");
    node2.depth = this.sliceSerialize(token).codePointAt(0) === codes.equalsTo ? 1 : 2;
  }
  function onexitsetextheading() {
    this.data.setextHeadingSlurpLineEnding = void 0;
  }
  function onenterdata(token) {
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok("children" in node2, "expected parent on stack");
    const siblings = node2.children;
    let tail = siblings[siblings.length - 1];
    if (!tail || tail.type !== "text") {
      tail = text8();
      tail.position = {
        start: point3(token.start),
        // @ts-expect-error: we’ll add `end` later.
        end: void 0
      };
      siblings.push(tail);
    }
    this.stack.push(tail);
  }
  function onexitdata(token) {
    const tail = this.stack.pop();
    ok(tail, "expected a `node` to be on the stack");
    ok("value" in tail, "expected a `literal` to be on the stack");
    ok(tail.position, "expected `node` to have an open position");
    tail.value += this.sliceSerialize(token);
    tail.position.end = point3(token.end);
  }
  function onexitlineending(token) {
    const context = this.stack[this.stack.length - 1];
    ok(context, "expected `node`");
    if (this.data.atHardBreak) {
      ok("children" in context, "expected `parent`");
      const tail = context.children[context.children.length - 1];
      ok(tail.position, "expected tail to have a starting position");
      tail.position.end = point3(token.end);
      this.data.atHardBreak = void 0;
      return;
    }
    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }
  function onexithardbreak() {
    this.data.atHardBreak = true;
  }
  function onexithtmlflow() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "html", "expected html on stack");
    node2.value = data2;
  }
  function onexithtmltext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "html", "expected html on stack");
    node2.value = data2;
  }
  function onexitcodetext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "inlineCode", "expected inline code on stack");
    node2.value = data2;
  }
  function onexitlink() {
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "link", "expected link on stack");
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitimage() {
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "image", "expected image on stack");
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitlabeltext(token) {
    const string3 = this.sliceSerialize(token);
    const ancestor = this.stack[this.stack.length - 2];
    ok(ancestor, "expected ancestor on stack");
    ok(
      ancestor.type === "image" || ancestor.type === "link",
      "expected image or link on stack"
    );
    ancestor.label = decodeString(string3);
    ancestor.identifier = normalizeIdentifier(string3).toLowerCase();
  }
  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    ok(fragment, "expected node on stack");
    ok(fragment.type === "fragment", "expected fragment on stack");
    const value = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(
      node2.type === "image" || node2.type === "link",
      "expected image or link on stack"
    );
    this.data.inReference = true;
    if (node2.type === "link") {
      const children = fragment.children;
      node2.children = children;
    } else {
      node2.alt = value;
    }
  }
  function onexitresourcedestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(
      node2.type === "image" || node2.type === "link",
      "expected image or link on stack"
    );
    node2.url = data2;
  }
  function onexitresourcetitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(
      node2.type === "image" || node2.type === "link",
      "expected image or link on stack"
    );
    node2.title = data2;
  }
  function onexitresource() {
    this.data.inReference = void 0;
  }
  function onenterreference() {
    this.data.referenceType = "collapsed";
  }
  function onexitreferencestring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(
      node2.type === "image" || node2.type === "link",
      "expected image reference or link reference on stack"
    );
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
    this.data.referenceType = "full";
  }
  function onexitcharacterreferencemarker(token) {
    ok(
      token.type === "characterReferenceMarkerNumeric" || token.type === "characterReferenceMarkerHexadecimal"
    );
    this.data.characterReferenceType = token.type;
  }
  function onexitcharacterreferencevalue(token) {
    const data2 = this.sliceSerialize(token);
    const type = this.data.characterReferenceType;
    let value;
    if (type) {
      value = decodeNumericCharacterReference(
        data2,
        type === types.characterReferenceMarkerNumeric ? constants.numericBaseDecimal : constants.numericBaseHexadecimal
      );
      this.data.characterReferenceType = void 0;
    } else {
      const result = decodeNamedCharacterReference(data2);
      ok(result !== false, "expected reference to decode");
      value = result;
    }
    const tail = this.stack[this.stack.length - 1];
    ok(tail, "expected `node`");
    ok("value" in tail, "expected `node.value`");
    tail.value += value;
  }
  function onexitcharacterreference(token) {
    const tail = this.stack.pop();
    ok(tail, "expected `node`");
    ok(tail.position, "expected `node.position`");
    tail.position.end = point3(token.end);
  }
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "link", "expected link on stack");
    node2.url = this.sliceSerialize(token);
  }
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    ok(node2, "expected node on stack");
    ok(node2.type === "link", "expected link on stack");
    node2.url = "mailto:" + this.sliceSerialize(token);
  }
  function blockQuote2() {
    return { type: "blockquote", children: [] };
  }
  function codeFlow() {
    return { type: "code", lang: null, meta: null, value: "" };
  }
  function codeText2() {
    return { type: "inlineCode", value: "" };
  }
  function definition3() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function emphasis3() {
    return { type: "emphasis", children: [] };
  }
  function heading3() {
    return {
      type: "heading",
      // @ts-expect-error `depth` will be set later.
      depth: 0,
      children: []
    };
  }
  function hardBreak3() {
    return { type: "break" };
  }
  function html5() {
    return { type: "html", value: "" };
  }
  function image3() {
    return { type: "image", title: null, url: "", alt: null };
  }
  function link3() {
    return { type: "link", title: null, url: "", children: [] };
  }
  function list4(token) {
    return {
      type: "list",
      ordered: token.type === "listOrdered",
      start: null,
      spread: token._spread,
      children: []
    };
  }
  function listItem3(token) {
    return {
      type: "listItem",
      spread: token._spread,
      checked: null,
      children: []
    };
  }
  function paragraph3() {
    return { type: "paragraph", children: [] };
  }
  function strong3() {
    return { type: "strong", children: [] };
  }
  function text8() {
    return { type: "text", value: "" };
  }
  function thematicBreak4() {
    return { type: "thematicBreak" };
  }
}
function point3(d2) {
  return { line: d2.line, column: d2.column, offset: d2.offset };
}
function configure(combined, extensions) {
  let index4 = -1;
  while (++index4 < extensions.length) {
    const value = extensions[index4];
    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }
}
function extension(combined, extension2) {
  let key;
  for (key in extension2) {
    if (own2.call(extension2, key)) {
      switch (key) {
        case "canContainEols": {
          const right2 = extension2[key];
          if (right2) {
            combined[key].push(...right2);
          }
          break;
        }
        case "transforms": {
          const right2 = extension2[key];
          if (right2) {
            combined[key].push(...right2);
          }
          break;
        }
        case "enter":
        case "exit": {
          const right2 = extension2[key];
          if (right2) {
            Object.assign(combined[key], right2);
          }
          break;
        }
      }
    }
  }
}
function defaultOnError(left2, right2) {
  if (left2) {
    throw new Error(
      "Cannot close `" + left2.type + "` (" + stringifyPosition({ start: left2.start, end: left2.end }) + "): a different token (`" + right2.type + "`, " + stringifyPosition({ start: right2.start, end: right2.end }) + ") is open"
    );
  } else {
    throw new Error(
      "Cannot close document, a token (`" + right2.type + "`, " + stringifyPosition({ start: right2.start, end: right2.end }) + ") is still open"
    );
  }
}

// node_modules/remark-parse/lib/index.js
function remarkParse(options2) {
  const self2 = this;
  self2.parser = parser;
  function parser(doc) {
    return fromMarkdown(doc, {
      ...self2.data("settings"),
      ...options2,
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: self2.data("micromarkExtensions") || [],
      mdastExtensions: self2.data("fromMarkdownExtensions") || []
    });
  }
}

// node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
function blockquote(state, node2) {
  const result = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: state.wrap(state.all(node2), true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/break.js
function hardBreak(state, node2) {
  const result = { type: "element", tagName: "br", properties: {}, children: [] };
  state.patch(node2, result);
  return [state.applyData(node2, result), { type: "text", value: "\n" }];
}

// node_modules/mdast-util-to-hast/lib/handlers/code.js
function code(state, node2) {
  const value = node2.value ? node2.value + "\n" : "";
  const properties = {};
  if (node2.lang) {
    properties.className = ["language-" + node2.lang];
  }
  let result = {
    type: "element",
    tagName: "code",
    properties,
    children: [{ type: "text", value }]
  };
  if (node2.meta) {
    result.data = { meta: node2.meta };
  }
  state.patch(node2, result);
  result = state.applyData(node2, result);
  result = { type: "element", tagName: "pre", properties: {}, children: [result] };
  state.patch(node2, result);
  return result;
}

// node_modules/mdast-util-to-hast/lib/handlers/delete.js
function strikethrough(state, node2) {
  const result = {
    type: "element",
    tagName: "del",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
function emphasis(state, node2) {
  const result = {
    type: "element",
    tagName: "em",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
function footnoteReference(state, node2) {
  const clobberPrefix = typeof state.options.clobberPrefix === "string" ? state.options.clobberPrefix : "user-content-";
  const id3 = String(node2.identifier).toUpperCase();
  const safeId = normalizeUri(id3.toLowerCase());
  const index4 = state.footnoteOrder.indexOf(id3);
  let counter;
  let reuseCounter = state.footnoteCounts.get(id3);
  if (reuseCounter === void 0) {
    reuseCounter = 0;
    state.footnoteOrder.push(id3);
    counter = state.footnoteOrder.length;
  } else {
    counter = index4 + 1;
  }
  reuseCounter += 1;
  state.footnoteCounts.set(id3, reuseCounter);
  const link3 = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + clobberPrefix + "fn-" + safeId,
      id: clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
      dataFootnoteRef: true,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(counter) }]
  };
  state.patch(node2, link3);
  const sup = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [link3]
  };
  state.patch(node2, sup);
  return state.applyData(node2, sup);
}

// node_modules/mdast-util-to-hast/lib/handlers/heading.js
function heading(state, node2) {
  const result = {
    type: "element",
    tagName: "h" + node2.depth,
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/html.js
function html3(state, node2) {
  if (state.options.allowDangerousHtml) {
    const result = { type: "raw", value: node2.value };
    state.patch(node2, result);
    return state.applyData(node2, result);
  }
  return void 0;
}

// node_modules/mdast-util-to-hast/lib/revert.js
function revert(state, node2) {
  const subtype = node2.referenceType;
  let suffix = "]";
  if (subtype === "collapsed") {
    suffix += "[]";
  } else if (subtype === "full") {
    suffix += "[" + (node2.label || node2.identifier) + "]";
  }
  if (node2.type === "imageReference") {
    return [{ type: "text", value: "![" + node2.alt + suffix }];
  }
  const contents = state.all(node2);
  const head = contents[0];
  if (head && head.type === "text") {
    head.value = "[" + head.value;
  } else {
    contents.unshift({ type: "text", value: "[" });
  }
  const tail = contents[contents.length - 1];
  if (tail && tail.type === "text") {
    tail.value += suffix;
  } else {
    contents.push({ type: "text", value: suffix });
  }
  return contents;
}

// node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
function imageReference(state, node2) {
  const id3 = String(node2.identifier).toUpperCase();
  const definition3 = state.definitionById.get(id3);
  if (!definition3) {
    return revert(state, node2);
  }
  const properties = { src: normalizeUri(definition3.url || ""), alt: node2.alt };
  if (definition3.title !== null && definition3.title !== void 0) {
    properties.title = definition3.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/image.js
function image(state, node2) {
  const properties = { src: normalizeUri(node2.url) };
  if (node2.alt !== null && node2.alt !== void 0) {
    properties.alt = node2.alt;
  }
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
function inlineCode(state, node2) {
  const text8 = { type: "text", value: node2.value.replace(/\r?\n|\r/g, " ") };
  state.patch(node2, text8);
  const result = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [text8]
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
function linkReference(state, node2) {
  const id3 = String(node2.identifier).toUpperCase();
  const definition3 = state.definitionById.get(id3);
  if (!definition3) {
    return revert(state, node2);
  }
  const properties = { href: normalizeUri(definition3.url || "") };
  if (definition3.title !== null && definition3.title !== void 0) {
    properties.title = definition3.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link.js
function link(state, node2) {
  const properties = { href: normalizeUri(node2.url) };
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/list-item.js
function listItem(state, node2, parent) {
  const results = state.all(node2);
  const loose = parent ? listLoose(parent) : listItemLoose(node2);
  const properties = {};
  const children = [];
  if (typeof node2.checked === "boolean") {
    const head = results[0];
    let paragraph3;
    if (head && head.type === "element" && head.tagName === "p") {
      paragraph3 = head;
    } else {
      paragraph3 = { type: "element", tagName: "p", properties: {}, children: [] };
      results.unshift(paragraph3);
    }
    if (paragraph3.children.length > 0) {
      paragraph3.children.unshift({ type: "text", value: " " });
    }
    paragraph3.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: node2.checked, disabled: true },
      children: []
    });
    properties.className = ["task-list-item"];
  }
  let index4 = -1;
  while (++index4 < results.length) {
    const child = results[index4];
    if (loose || index4 !== 0 || child.type !== "element" || child.tagName !== "p") {
      children.push({ type: "text", value: "\n" });
    }
    if (child.type === "element" && child.tagName === "p" && !loose) {
      children.push(...child.children);
    } else {
      children.push(child);
    }
  }
  const tail = results[results.length - 1];
  if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
    children.push({ type: "text", value: "\n" });
  }
  const result = { type: "element", tagName: "li", properties, children };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function listLoose(node2) {
  let loose = false;
  if (node2.type === "list") {
    loose = node2.spread || false;
    const children = node2.children;
    let index4 = -1;
    while (!loose && ++index4 < children.length) {
      loose = listItemLoose(children[index4]);
    }
  }
  return loose;
}
function listItemLoose(node2) {
  const spread = node2.spread;
  return spread === null || spread === void 0 ? node2.children.length > 1 : spread;
}

// node_modules/mdast-util-to-hast/lib/handlers/list.js
function list2(state, node2) {
  const properties = {};
  const results = state.all(node2);
  let index4 = -1;
  if (typeof node2.start === "number" && node2.start !== 1) {
    properties.start = node2.start;
  }
  while (++index4 < results.length) {
    const child = results[index4];
    if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
      properties.className = ["contains-task-list"];
      break;
    }
  }
  const result = {
    type: "element",
    tagName: node2.ordered ? "ol" : "ul",
    properties,
    children: state.wrap(results, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
function paragraph(state, node2) {
  const result = {
    type: "element",
    tagName: "p",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/root.js
function root2(state, node2) {
  const result = { type: "root", children: state.wrap(state.all(node2)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/strong.js
function strong(state, node2) {
  const result = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table.js
function table(state, node2) {
  const rows = state.all(node2);
  const firstRow = rows.shift();
  const tableContent = [];
  if (firstRow) {
    const head = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: state.wrap([firstRow], true)
    };
    state.patch(node2.children[0], head);
    tableContent.push(head);
  }
  if (rows.length > 0) {
    const body = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: state.wrap(rows, true)
    };
    const start3 = pointStart(node2.children[1]);
    const end2 = pointEnd(node2.children[node2.children.length - 1]);
    if (start3 && end2) body.position = { start: start3, end: end2 };
    tableContent.push(body);
  }
  const result = {
    type: "element",
    tagName: "table",
    properties: {},
    children: state.wrap(tableContent, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-row.js
function tableRow(state, node2, parent) {
  const siblings = parent ? parent.children : void 0;
  const rowIndex = siblings ? siblings.indexOf(node2) : 1;
  const tagName = rowIndex === 0 ? "th" : "td";
  const align = parent && parent.type === "table" ? parent.align : void 0;
  const length = align ? align.length : node2.children.length;
  let cellIndex = -1;
  const cells = [];
  while (++cellIndex < length) {
    const cell = node2.children[cellIndex];
    const properties = {};
    const alignValue = align ? align[cellIndex] : void 0;
    if (alignValue) {
      properties.align = alignValue;
    }
    let result2 = { type: "element", tagName, properties, children: [] };
    if (cell) {
      result2.children = state.all(cell);
      state.patch(cell, result2);
      result2 = state.applyData(cell, result2);
    }
    cells.push(result2);
  }
  const result = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: state.wrap(cells, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
function tableCell(state, node2) {
  const result = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/trim-lines/index.js
var tab = 9;
var space = 32;
function trimLines(value) {
  const source = String(value);
  const search2 = /\r?\n|\r/g;
  let match = search2.exec(source);
  let last = 0;
  const lines = [];
  while (match) {
    lines.push(
      trimLine(source.slice(last, match.index), last > 0, true),
      match[0]
    );
    last = match.index + match[0].length;
    match = search2.exec(source);
  }
  lines.push(trimLine(source.slice(last), last > 0, false));
  return lines.join("");
}
function trimLine(value, start3, end2) {
  let startIndex = 0;
  let endIndex = value.length;
  if (start3) {
    let code4 = value.codePointAt(startIndex);
    while (code4 === tab || code4 === space) {
      startIndex++;
      code4 = value.codePointAt(startIndex);
    }
  }
  if (end2) {
    let code4 = value.codePointAt(endIndex - 1);
    while (code4 === tab || code4 === space) {
      endIndex--;
      code4 = value.codePointAt(endIndex - 1);
    }
  }
  return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
}

// node_modules/mdast-util-to-hast/lib/handlers/text.js
function text4(state, node2) {
  const result = { type: "text", value: trimLines(String(node2.value)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
function thematicBreak2(state, node2) {
  const result = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/index.js
var handlers = {
  blockquote,
  break: hardBreak,
  code,
  delete: strikethrough,
  emphasis,
  footnoteReference,
  heading,
  html: html3,
  imageReference,
  image,
  inlineCode,
  linkReference,
  link,
  listItem,
  list: list2,
  paragraph,
  // @ts-expect-error: root is different, but hard to type.
  root: root2,
  strong,
  table,
  tableCell,
  tableRow,
  text: text4,
  thematicBreak: thematicBreak2,
  toml: ignore,
  yaml: ignore,
  definition: ignore,
  footnoteDefinition: ignore
};
function ignore() {
  return void 0;
}

// node_modules/@ungap/structured-clone/esm/types.js
var VOID = -1;
var PRIMITIVE = 0;
var ARRAY = 1;
var OBJECT = 2;
var DATE = 3;
var REGEXP = 4;
var MAP = 5;
var SET = 6;
var ERROR = 7;
var BIGINT = 8;

// node_modules/@ungap/structured-clone/esm/deserialize.js
var env = typeof self === "object" ? self : globalThis;
var deserializer = ($2, _2) => {
  const as = (out, index4) => {
    $2.set(index4, out);
    return out;
  };
  const unpair = (index4) => {
    if ($2.has(index4))
      return $2.get(index4);
    const [type, value] = _2[index4];
    switch (type) {
      case PRIMITIVE:
      case VOID:
        return as(value, index4);
      case ARRAY: {
        const arr = as([], index4);
        for (const index5 of value)
          arr.push(unpair(index5));
        return arr;
      }
      case OBJECT: {
        const object = as({}, index4);
        for (const [key, index5] of value)
          object[unpair(key)] = unpair(index5);
        return object;
      }
      case DATE:
        return as(new Date(value), index4);
      case REGEXP: {
        const { source, flags } = value;
        return as(new RegExp(source, flags), index4);
      }
      case MAP: {
        const map4 = as(/* @__PURE__ */ new Map(), index4);
        for (const [key, index5] of value)
          map4.set(unpair(key), unpair(index5));
        return map4;
      }
      case SET: {
        const set = as(/* @__PURE__ */ new Set(), index4);
        for (const index5 of value)
          set.add(unpair(index5));
        return set;
      }
      case ERROR: {
        const { name: name2, message } = value;
        return as(new env[name2](message), index4);
      }
      case BIGINT:
        return as(BigInt(value), index4);
      case "BigInt":
        return as(Object(BigInt(value)), index4);
      case "ArrayBuffer":
        return as(new Uint8Array(value).buffer, value);
      case "DataView": {
        const { buffer } = new Uint8Array(value);
        return as(new DataView(buffer), value);
      }
    }
    return as(new env[type](value), index4);
  };
  return unpair;
};
var deserialize = (serialized) => deserializer(/* @__PURE__ */ new Map(), serialized)(0);

// node_modules/@ungap/structured-clone/esm/serialize.js
var EMPTY = "";
var { toString: toString2 } = {};
var { keys: keys2 } = Object;
var typeOf = (value) => {
  const type = typeof value;
  if (type !== "object" || !value)
    return [PRIMITIVE, type];
  const asString = toString2.call(value).slice(8, -1);
  switch (asString) {
    case "Array":
      return [ARRAY, EMPTY];
    case "Object":
      return [OBJECT, EMPTY];
    case "Date":
      return [DATE, EMPTY];
    case "RegExp":
      return [REGEXP, EMPTY];
    case "Map":
      return [MAP, EMPTY];
    case "Set":
      return [SET, EMPTY];
    case "DataView":
      return [ARRAY, asString];
  }
  if (asString.includes("Array"))
    return [ARRAY, asString];
  if (asString.includes("Error"))
    return [ERROR, asString];
  return [OBJECT, asString];
};
var shouldSkip = ([TYPE, type]) => TYPE === PRIMITIVE && (type === "function" || type === "symbol");
var serializer = (strict, json, $2, _2) => {
  const as = (out, value) => {
    const index4 = _2.push(out) - 1;
    $2.set(value, index4);
    return index4;
  };
  const pair = (value) => {
    if ($2.has(value))
      return $2.get(value);
    let [TYPE, type] = typeOf(value);
    switch (TYPE) {
      case PRIMITIVE: {
        let entry = value;
        switch (type) {
          case "bigint":
            TYPE = BIGINT;
            entry = value.toString();
            break;
          case "function":
          case "symbol":
            if (strict)
              throw new TypeError("unable to serialize " + type);
            entry = null;
            break;
          case "undefined":
            return as([VOID], value);
        }
        return as([TYPE, entry], value);
      }
      case ARRAY: {
        if (type) {
          let spread = value;
          if (type === "DataView") {
            spread = new Uint8Array(value.buffer);
          } else if (type === "ArrayBuffer") {
            spread = new Uint8Array(value);
          }
          return as([type, [...spread]], value);
        }
        const arr = [];
        const index4 = as([TYPE, arr], value);
        for (const entry of value)
          arr.push(pair(entry));
        return index4;
      }
      case OBJECT: {
        if (type) {
          switch (type) {
            case "BigInt":
              return as([type, value.toString()], value);
            case "Boolean":
            case "Number":
            case "String":
              return as([type, value.valueOf()], value);
          }
        }
        if (json && "toJSON" in value)
          return pair(value.toJSON());
        const entries = [];
        const index4 = as([TYPE, entries], value);
        for (const key of keys2(value)) {
          if (strict || !shouldSkip(typeOf(value[key])))
            entries.push([pair(key), pair(value[key])]);
        }
        return index4;
      }
      case DATE:
        return as([TYPE, value.toISOString()], value);
      case REGEXP: {
        const { source, flags } = value;
        return as([TYPE, { source, flags }], value);
      }
      case MAP: {
        const entries = [];
        const index4 = as([TYPE, entries], value);
        for (const [key, entry] of value) {
          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))
            entries.push([pair(key), pair(entry)]);
        }
        return index4;
      }
      case SET: {
        const entries = [];
        const index4 = as([TYPE, entries], value);
        for (const entry of value) {
          if (strict || !shouldSkip(typeOf(entry)))
            entries.push(pair(entry));
        }
        return index4;
      }
    }
    const { message } = value;
    return as([TYPE, { name: type, message }], value);
  };
  return pair;
};
var serialize = (value, { json, lossy } = {}) => {
  const _2 = [];
  return serializer(!(json || lossy), !!json, /* @__PURE__ */ new Map(), _2)(value), _2;
};

// node_modules/@ungap/structured-clone/esm/index.js
var esm_default = typeof structuredClone === "function" ? (
  /* c8 ignore start */
  (any, options2) => options2 && ("json" in options2 || "lossy" in options2) ? deserialize(serialize(any, options2)) : structuredClone(any)
) : (any, options2) => deserialize(serialize(any, options2));

// node_modules/mdast-util-to-hast/lib/footer.js
function defaultFootnoteBackContent(_2, rereferenceIndex) {
  const result = [{ type: "text", value: "↩" }];
  if (rereferenceIndex > 1) {
    result.push({
      type: "element",
      tagName: "sup",
      properties: {},
      children: [{ type: "text", value: String(rereferenceIndex) }]
    });
  }
  return result;
}
function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {
  return "Back to reference " + (referenceIndex + 1) + (rereferenceIndex > 1 ? "-" + rereferenceIndex : "");
}
function footer(state) {
  const clobberPrefix = typeof state.options.clobberPrefix === "string" ? state.options.clobberPrefix : "user-content-";
  const footnoteBackContent = state.options.footnoteBackContent || defaultFootnoteBackContent;
  const footnoteBackLabel = state.options.footnoteBackLabel || defaultFootnoteBackLabel;
  const footnoteLabel = state.options.footnoteLabel || "Footnotes";
  const footnoteLabelTagName = state.options.footnoteLabelTagName || "h2";
  const footnoteLabelProperties = state.options.footnoteLabelProperties || {
    className: ["sr-only"]
  };
  const listItems = [];
  let referenceIndex = -1;
  while (++referenceIndex < state.footnoteOrder.length) {
    const definition3 = state.footnoteById.get(
      state.footnoteOrder[referenceIndex]
    );
    if (!definition3) {
      continue;
    }
    const content3 = state.all(definition3);
    const id3 = String(definition3.identifier).toUpperCase();
    const safeId = normalizeUri(id3.toLowerCase());
    let rereferenceIndex = 0;
    const backReferences = [];
    const counts = state.footnoteCounts.get(id3);
    while (counts !== void 0 && ++rereferenceIndex <= counts) {
      if (backReferences.length > 0) {
        backReferences.push({ type: "text", value: " " });
      }
      let children = typeof footnoteBackContent === "string" ? footnoteBackContent : footnoteBackContent(referenceIndex, rereferenceIndex);
      if (typeof children === "string") {
        children = { type: "text", value: children };
      }
      backReferences.push({
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + clobberPrefix + "fnref-" + safeId + (rereferenceIndex > 1 ? "-" + rereferenceIndex : ""),
          dataFootnoteBackref: "",
          ariaLabel: typeof footnoteBackLabel === "string" ? footnoteBackLabel : footnoteBackLabel(referenceIndex, rereferenceIndex),
          className: ["data-footnote-backref"]
        },
        children: Array.isArray(children) ? children : [children]
      });
    }
    const tail = content3[content3.length - 1];
    if (tail && tail.type === "element" && tail.tagName === "p") {
      const tailTail = tail.children[tail.children.length - 1];
      if (tailTail && tailTail.type === "text") {
        tailTail.value += " ";
      } else {
        tail.children.push({ type: "text", value: " " });
      }
      tail.children.push(...backReferences);
    } else {
      content3.push(...backReferences);
    }
    const listItem3 = {
      type: "element",
      tagName: "li",
      properties: { id: clobberPrefix + "fn-" + safeId },
      children: state.wrap(content3, true)
    };
    state.patch(definition3, listItem3);
    listItems.push(listItem3);
  }
  if (listItems.length === 0) {
    return;
  }
  return {
    type: "element",
    tagName: "section",
    properties: { dataFootnotes: true, className: ["footnotes"] },
    children: [
      {
        type: "element",
        tagName: footnoteLabelTagName,
        properties: {
          ...esm_default(footnoteLabelProperties),
          id: "footnote-label"
        },
        children: [{ type: "text", value: footnoteLabel }]
      },
      { type: "text", value: "\n" },
      {
        type: "element",
        tagName: "ol",
        properties: {},
        children: state.wrap(listItems, true)
      },
      { type: "text", value: "\n" }
    ]
  };
}

// node_modules/unist-util-is/lib/index.js
var convert = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {Check}
   */
  function(test2) {
    if (test2 === null || test2 === void 0) {
      return ok2;
    }
    if (typeof test2 === "function") {
      return castFactory(test2);
    }
    if (typeof test2 === "object") {
      return Array.isArray(test2) ? anyFactory(test2) : propsFactory(test2);
    }
    if (typeof test2 === "string") {
      return typeFactory(test2);
    }
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory(tests) {
  const checks2 = [];
  let index4 = -1;
  while (++index4 < tests.length) {
    checks2[index4] = convert(tests[index4]);
  }
  return castFactory(any);
  function any(...parameters) {
    let index5 = -1;
    while (++index5 < checks2.length) {
      if (checks2[index5].apply(this, parameters)) return true;
    }
    return false;
  }
}
function propsFactory(check) {
  const checkAsRecord = (
    /** @type {Record<string, unknown>} */
    check
  );
  return castFactory(all2);
  function all2(node2) {
    const nodeAsRecord = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      node2
    );
    let key;
    for (key in check) {
      if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
    }
    return true;
  }
}
function typeFactory(check) {
  return castFactory(type);
  function type(node2) {
    return node2 && node2.type === check;
  }
}
function castFactory(testFunction) {
  return check;
  function check(value, index4, parent) {
    return Boolean(
      looksLikeANode(value) && testFunction.call(
        this,
        value,
        typeof index4 === "number" ? index4 : void 0,
        parent || void 0
      )
    );
  }
}
function ok2() {
  return true;
}
function looksLikeANode(value) {
  return value !== null && typeof value === "object" && "type" in value;
}

// node_modules/unist-util-visit-parents/lib/color.js
function color(d2) {
  return d2;
}

// node_modules/unist-util-visit-parents/lib/index.js
var empty2 = [];
var CONTINUE = true;
var EXIT = false;
var SKIP = "skip";
function visitParents(tree, test2, visitor3, reverse) {
  let check;
  if (typeof test2 === "function" && typeof visitor3 !== "function") {
    reverse = visitor3;
    visitor3 = test2;
  } else {
    check = test2;
  }
  const is2 = convert(check);
  const step = reverse ? -1 : 1;
  factory(tree, void 0, [])();
  function factory(node2, index4, parents) {
    const value = (
      /** @type {Record<string, unknown>} */
      node2 && typeof node2 === "object" ? node2 : {}
    );
    if (typeof value.type === "string") {
      const name2 = (
        // `hast`
        typeof value.tagName === "string" ? value.tagName : (
          // `xast`
          typeof value.name === "string" ? value.name : void 0
        )
      );
      Object.defineProperty(visit2, "name", {
        value: "node (" + color(node2.type + (name2 ? "<" + name2 + ">" : "")) + ")"
      });
    }
    return visit2;
    function visit2() {
      let result = empty2;
      let subresult;
      let offset2;
      let grandparents;
      if (!test2 || is2(node2, index4, parents[parents.length - 1] || void 0)) {
        result = toResult(visitor3(node2, parents));
        if (result[0] === EXIT) {
          return result;
        }
      }
      if ("children" in node2 && node2.children) {
        const nodeAsParent = (
          /** @type {UnistParent} */
          node2
        );
        if (nodeAsParent.children && result[0] !== SKIP) {
          offset2 = (reverse ? nodeAsParent.children.length : -1) + step;
          grandparents = parents.concat(nodeAsParent);
          while (offset2 > -1 && offset2 < nodeAsParent.children.length) {
            const child = nodeAsParent.children[offset2];
            subresult = factory(child, offset2, grandparents)();
            if (subresult[0] === EXIT) {
              return subresult;
            }
            offset2 = typeof subresult[1] === "number" ? subresult[1] : offset2 + step;
          }
        }
      }
      return result;
    }
  }
}
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE, value];
  }
  return value === null || value === void 0 ? empty2 : [value];
}

// node_modules/unist-util-visit/lib/index.js
function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
  let reverse;
  let test2;
  let visitor3;
  if (typeof testOrVisitor === "function" && typeof visitorOrReverse !== "function") {
    test2 = void 0;
    visitor3 = testOrVisitor;
    reverse = visitorOrReverse;
  } else {
    test2 = testOrVisitor;
    visitor3 = visitorOrReverse;
    reverse = maybeReverse;
  }
  visitParents(tree, test2, overload, reverse);
  function overload(node2, parents) {
    const parent = parents[parents.length - 1];
    const index4 = parent ? parent.children.indexOf(node2) : void 0;
    return visitor3(node2, index4, parent);
  }
}

// node_modules/mdast-util-to-hast/lib/state.js
var own3 = {}.hasOwnProperty;
var emptyOptions3 = {};
function createState(tree, options2) {
  const settings = options2 || emptyOptions3;
  const definitionById = /* @__PURE__ */ new Map();
  const footnoteById = /* @__PURE__ */ new Map();
  const footnoteCounts = /* @__PURE__ */ new Map();
  const handlers2 = { ...handlers, ...settings.handlers };
  const state = {
    all: all2,
    applyData,
    definitionById,
    footnoteById,
    footnoteCounts,
    footnoteOrder: [],
    handlers: handlers2,
    one: one3,
    options: settings,
    patch,
    wrap
  };
  visit(tree, function(node2) {
    if (node2.type === "definition" || node2.type === "footnoteDefinition") {
      const map4 = node2.type === "definition" ? definitionById : footnoteById;
      const id3 = String(node2.identifier).toUpperCase();
      if (!map4.has(id3)) {
        map4.set(id3, node2);
      }
    }
  });
  return state;
  function one3(node2, parent) {
    const type = node2.type;
    const handle2 = state.handlers[type];
    if (own3.call(state.handlers, type) && handle2) {
      return handle2(state, node2, parent);
    }
    if (state.options.passThrough && state.options.passThrough.includes(type)) {
      if ("children" in node2) {
        const { children, ...shallow } = node2;
        const result = esm_default(shallow);
        result.children = state.all(node2);
        return result;
      }
      return esm_default(node2);
    }
    const unknown = state.options.unknownHandler || defaultUnknownHandler;
    return unknown(state, node2, parent);
  }
  function all2(parent) {
    const values2 = [];
    if ("children" in parent) {
      const nodes = parent.children;
      let index4 = -1;
      while (++index4 < nodes.length) {
        const result = state.one(nodes[index4], parent);
        if (result) {
          if (index4 && nodes[index4 - 1].type === "break") {
            if (!Array.isArray(result) && result.type === "text") {
              result.value = trimMarkdownSpaceStart(result.value);
            }
            if (!Array.isArray(result) && result.type === "element") {
              const head = result.children[0];
              if (head && head.type === "text") {
                head.value = trimMarkdownSpaceStart(head.value);
              }
            }
          }
          if (Array.isArray(result)) {
            values2.push(...result);
          } else {
            values2.push(result);
          }
        }
      }
    }
    return values2;
  }
}
function patch(from, to) {
  if (from.position) to.position = position(from);
}
function applyData(from, to) {
  let result = to;
  if (from && from.data) {
    const hName = from.data.hName;
    const hChildren = from.data.hChildren;
    const hProperties = from.data.hProperties;
    if (typeof hName === "string") {
      if (result.type === "element") {
        result.tagName = hName;
      } else {
        const children = "children" in result ? result.children : [result];
        result = { type: "element", tagName: hName, properties: {}, children };
      }
    }
    if (result.type === "element" && hProperties) {
      Object.assign(result.properties, esm_default(hProperties));
    }
    if ("children" in result && result.children && hChildren !== null && hChildren !== void 0) {
      result.children = hChildren;
    }
  }
  return result;
}
function defaultUnknownHandler(state, node2) {
  const data = node2.data || {};
  const result = "value" in node2 && !(own3.call(data, "hProperties") || own3.call(data, "hChildren")) ? { type: "text", value: node2.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function wrap(nodes, loose) {
  const result = [];
  let index4 = -1;
  if (loose) {
    result.push({ type: "text", value: "\n" });
  }
  while (++index4 < nodes.length) {
    if (index4) result.push({ type: "text", value: "\n" });
    result.push(nodes[index4]);
  }
  if (loose && nodes.length > 0) {
    result.push({ type: "text", value: "\n" });
  }
  return result;
}
function trimMarkdownSpaceStart(value) {
  let index4 = 0;
  let code4 = value.charCodeAt(index4);
  while (code4 === 9 || code4 === 32) {
    index4++;
    code4 = value.charCodeAt(index4);
  }
  return value.slice(index4);
}

// node_modules/mdast-util-to-hast/lib/index.js
function toHast(tree, options2) {
  const state = createState(tree, options2);
  const node2 = state.one(tree, void 0);
  const foot = footer(state);
  const result = Array.isArray(node2) ? { type: "root", children: node2 } : node2 || { type: "root", children: [] };
  if (foot) {
    ok("children" in result);
    result.children.push({ type: "text", value: "\n" }, foot);
  }
  return result;
}

// node_modules/remark-rehype/lib/index.js
function remarkRehype(destination, options2) {
  if (destination && "run" in destination) {
    return async function(tree, file) {
      const hastTree = (
        /** @type {HastRoot} */
        toHast(tree, { file, ...options2 })
      );
      await destination.run(hastTree, file);
    };
  }
  return function(tree, file) {
    return (
      /** @type {HastRoot} */
      toHast(tree, { file, ...destination || options2 })
    );
  };
}

// node_modules/bail/index.js
function bail(error) {
  if (error) {
    throw error;
  }
}

// node_modules/unified/lib/index.js
var import_extend = __toESM(require_extend(), 1);

// node_modules/is-plain-obj/index.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

// node_modules/trough/lib/index.js
function trough() {
  const fns = [];
  const pipeline = { run: run2, use: use2 };
  return pipeline;
  function run2(...values2) {
    let middlewareIndex = -1;
    const callback = values2.pop();
    if (typeof callback !== "function") {
      throw new TypeError("Expected function as last argument, not " + callback);
    }
    next(null, ...values2);
    function next(error, ...output) {
      const fn2 = fns[++middlewareIndex];
      let index4 = -1;
      if (error) {
        callback(error);
        return;
      }
      while (++index4 < values2.length) {
        if (output[index4] === null || output[index4] === void 0) {
          output[index4] = values2[index4];
        }
      }
      values2 = output;
      if (fn2) {
        wrap2(fn2, next)(...output);
      } else {
        callback(null, ...output);
      }
    }
  }
  function use2(middelware) {
    if (typeof middelware !== "function") {
      throw new TypeError(
        "Expected `middelware` to be a function, not " + middelware
      );
    }
    fns.push(middelware);
    return pipeline;
  }
}
function wrap2(middleware, callback) {
  let called;
  return wrapped;
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware.length > parameters.length;
    let result;
    if (fnExpectsCallback) {
      parameters.push(done);
    }
    try {
      result = middleware.apply(this, parameters);
    } catch (error) {
      const exception = (
        /** @type {Error} */
        error
      );
      if (fnExpectsCallback && called) {
        throw exception;
      }
      return done(exception);
    }
    if (!fnExpectsCallback) {
      if (result && result.then && typeof result.then === "function") {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  function done(error, ...output) {
    if (!called) {
      called = true;
      callback(error, ...output);
    }
  }
  function then(value) {
    done(null, value);
  }
}

// node_modules/vfile/lib/minpath.browser.js
var minpath = { basename, dirname, extname, join, sep: "/" };
function basename(path2, extname2) {
  if (extname2 !== void 0 && typeof extname2 !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path2);
  let start3 = 0;
  let end2 = -1;
  let index4 = path2.length;
  let seenNonSlash;
  if (extname2 === void 0 || extname2.length === 0 || extname2.length > path2.length) {
    while (index4--) {
      if (path2.codePointAt(index4) === 47) {
        if (seenNonSlash) {
          start3 = index4 + 1;
          break;
        }
      } else if (end2 < 0) {
        seenNonSlash = true;
        end2 = index4 + 1;
      }
    }
    return end2 < 0 ? "" : path2.slice(start3, end2);
  }
  if (extname2 === path2) {
    return "";
  }
  let firstNonSlashEnd = -1;
  let extnameIndex = extname2.length - 1;
  while (index4--) {
    if (path2.codePointAt(index4) === 47) {
      if (seenNonSlash) {
        start3 = index4 + 1;
        break;
      }
    } else {
      if (firstNonSlashEnd < 0) {
        seenNonSlash = true;
        firstNonSlashEnd = index4 + 1;
      }
      if (extnameIndex > -1) {
        if (path2.codePointAt(index4) === extname2.codePointAt(extnameIndex--)) {
          if (extnameIndex < 0) {
            end2 = index4;
          }
        } else {
          extnameIndex = -1;
          end2 = firstNonSlashEnd;
        }
      }
    }
  }
  if (start3 === end2) {
    end2 = firstNonSlashEnd;
  } else if (end2 < 0) {
    end2 = path2.length;
  }
  return path2.slice(start3, end2);
}
function dirname(path2) {
  assertPath(path2);
  if (path2.length === 0) {
    return ".";
  }
  let end2 = -1;
  let index4 = path2.length;
  let unmatchedSlash;
  while (--index4) {
    if (path2.codePointAt(index4) === 47) {
      if (unmatchedSlash) {
        end2 = index4;
        break;
      }
    } else if (!unmatchedSlash) {
      unmatchedSlash = true;
    }
  }
  return end2 < 0 ? path2.codePointAt(0) === 47 ? "/" : "." : end2 === 1 && path2.codePointAt(0) === 47 ? "//" : path2.slice(0, end2);
}
function extname(path2) {
  assertPath(path2);
  let index4 = path2.length;
  let end2 = -1;
  let startPart = 0;
  let startDot = -1;
  let preDotState = 0;
  let unmatchedSlash;
  while (index4--) {
    const code4 = path2.codePointAt(index4);
    if (code4 === 47) {
      if (unmatchedSlash) {
        startPart = index4 + 1;
        break;
      }
      continue;
    }
    if (end2 < 0) {
      unmatchedSlash = true;
      end2 = index4 + 1;
    }
    if (code4 === 46) {
      if (startDot < 0) {
        startDot = index4;
      } else if (preDotState !== 1) {
        preDotState = 1;
      }
    } else if (startDot > -1) {
      preDotState = -1;
    }
  }
  if (startDot < 0 || end2 < 0 || // We saw a non-dot character immediately before the dot.
  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
  preDotState === 1 && startDot === end2 - 1 && startDot === startPart + 1) {
    return "";
  }
  return path2.slice(startDot, end2);
}
function join(...segments) {
  let index4 = -1;
  let joined;
  while (++index4 < segments.length) {
    assertPath(segments[index4]);
    if (segments[index4]) {
      joined = joined === void 0 ? segments[index4] : joined + "/" + segments[index4];
    }
  }
  return joined === void 0 ? "." : normalize2(joined);
}
function normalize2(path2) {
  assertPath(path2);
  const absolute = path2.codePointAt(0) === 47;
  let value = normalizeString(path2, !absolute);
  if (value.length === 0 && !absolute) {
    value = ".";
  }
  if (value.length > 0 && path2.codePointAt(path2.length - 1) === 47) {
    value += "/";
  }
  return absolute ? "/" + value : value;
}
function normalizeString(path2, allowAboveRoot) {
  let result = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let index4 = -1;
  let code4;
  let lastSlashIndex;
  while (++index4 <= path2.length) {
    if (index4 < path2.length) {
      code4 = path2.codePointAt(index4);
    } else if (code4 === 47) {
      break;
    } else {
      code4 = 47;
    }
    if (code4 === 47) {
      if (lastSlash === index4 - 1 || dots === 1) {
      } else if (lastSlash !== index4 - 1 && dots === 2) {
        if (result.length < 2 || lastSegmentLength !== 2 || result.codePointAt(result.length - 1) !== 46 || result.codePointAt(result.length - 2) !== 46) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf("/");
            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = "";
                lastSegmentLength = 0;
              } else {
                result = result.slice(0, lastSlashIndex);
                lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
              }
              lastSlash = index4;
              dots = 0;
              continue;
            }
          } else if (result.length > 0) {
            result = "";
            lastSegmentLength = 0;
            lastSlash = index4;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          result = result.length > 0 ? result + "/.." : "..";
          lastSegmentLength = 2;
        }
      } else {
        if (result.length > 0) {
          result += "/" + path2.slice(lastSlash + 1, index4);
        } else {
          result = path2.slice(lastSlash + 1, index4);
        }
        lastSegmentLength = index4 - lastSlash - 1;
      }
      lastSlash = index4;
      dots = 0;
    } else if (code4 === 46 && dots > -1) {
      dots++;
    } else {
      dots = -1;
    }
  }
  return result;
}
function assertPath(path2) {
  if (typeof path2 !== "string") {
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(path2)
    );
  }
}

// node_modules/vfile/lib/minproc.browser.js
var minproc = { cwd };
function cwd() {
  return "/";
}

// node_modules/vfile/lib/minurl.shared.js
function isUrl(fileUrlOrPath) {
  return Boolean(
    fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && "href" in fileUrlOrPath && fileUrlOrPath.href && "protocol" in fileUrlOrPath && fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.
    fileUrlOrPath.auth === void 0
  );
}

// node_modules/vfile/lib/minurl.browser.js
function urlToPath(path2) {
  if (typeof path2 === "string") {
    path2 = new URL(path2);
  } else if (!isUrl(path2)) {
    const error = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + path2 + "`"
    );
    error.code = "ERR_INVALID_ARG_TYPE";
    throw error;
  }
  if (path2.protocol !== "file:") {
    const error = new TypeError("The URL must be of scheme file");
    error.code = "ERR_INVALID_URL_SCHEME";
    throw error;
  }
  return getPathFromURLPosix(path2);
}
function getPathFromURLPosix(url) {
  if (url.hostname !== "") {
    const error = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    error.code = "ERR_INVALID_FILE_URL_HOST";
    throw error;
  }
  const pathname = url.pathname;
  let index4 = -1;
  while (++index4 < pathname.length) {
    if (pathname.codePointAt(index4) === 37 && pathname.codePointAt(index4 + 1) === 50) {
      const third = pathname.codePointAt(index4 + 2);
      if (third === 70 || third === 102) {
        const error = new TypeError(
          "File URL path must not include encoded / characters"
        );
        error.code = "ERR_INVALID_FILE_URL_PATH";
        throw error;
      }
    }
  }
  return decodeURIComponent(pathname);
}

// node_modules/vfile/lib/index.js
var order = (
  /** @type {const} */
  [
    "history",
    "path",
    "basename",
    "stem",
    "extname",
    "dirname"
  ]
);
var VFile = class {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(value) {
    let options2;
    if (!value) {
      options2 = {};
    } else if (isUrl(value)) {
      options2 = { path: value };
    } else if (typeof value === "string" || isUint8Array(value)) {
      options2 = { value };
    } else {
      options2 = value;
    }
    this.cwd = "cwd" in options2 ? "" : minproc.cwd();
    this.data = {};
    this.history = [];
    this.messages = [];
    this.value;
    this.map;
    this.result;
    this.stored;
    let index4 = -1;
    while (++index4 < order.length) {
      const field2 = order[index4];
      if (field2 in options2 && options2[field2] !== void 0 && options2[field2] !== null) {
        this[field2] = field2 === "history" ? [...options2[field2]] : options2[field2];
      }
    }
    let field;
    for (field in options2) {
      if (!order.includes(field)) {
        this[field] = options2[field];
      }
    }
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */
  get basename() {
    return typeof this.path === "string" ? minpath.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */
  set basename(basename2) {
    assertNonEmpty(basename2, "basename");
    assertPart(basename2, "basename");
    this.path = minpath.join(this.dirname || "", basename2);
  }
  /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */
  get dirname() {
    return typeof this.path === "string" ? minpath.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */
  set dirname(dirname2) {
    assertPath2(this.basename, "dirname");
    this.path = minpath.join(dirname2 || "", this.basename);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */
  get extname() {
    return typeof this.path === "string" ? minpath.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */
  set extname(extname2) {
    assertPart(extname2, "extname");
    assertPath2(this.dirname, "extname");
    if (extname2) {
      if (extname2.codePointAt(0) !== 46) {
        throw new Error("`extname` must start with `.`");
      }
      if (extname2.includes(".", 1)) {
        throw new Error("`extname` cannot contain multiple dots");
      }
    }
    this.path = minpath.join(this.dirname, this.stem + (extname2 || ""));
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */
  set path(path2) {
    if (isUrl(path2)) {
      path2 = urlToPath(path2);
    }
    assertNonEmpty(path2, "path");
    if (this.path !== path2) {
      this.history.push(path2);
    }
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */
  get stem() {
    return typeof this.path === "string" ? minpath.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */
  set stem(stem) {
    assertNonEmpty(stem, "stem");
    assertPart(stem, "stem");
    this.path = minpath.join(this.dirname || "", stem + (this.extname || ""));
  }
  // Normal prototypal methods.
  /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
    message.fatal = true;
    throw message;
  }
  /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
    message.fatal = void 0;
    return message;
  }
  /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = new VFileMessage(
      // @ts-expect-error: the overloads are fine.
      causeOrReason,
      optionsOrParentOrPlace,
      origin
    );
    if (this.path) {
      message.name = this.path + ":" + message.name;
      message.file = this.path;
    }
    message.fatal = false;
    this.messages.push(message);
    return message;
  }
  /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(encoding) {
    if (this.value === void 0) {
      return "";
    }
    if (typeof this.value === "string") {
      return this.value;
    }
    const decoder = new TextDecoder(encoding || void 0);
    return decoder.decode(this.value);
  }
};
function assertPart(part, name2) {
  if (part && part.includes(minpath.sep)) {
    throw new Error(
      "`" + name2 + "` cannot be a path: did not expect `" + minpath.sep + "`"
    );
  }
}
function assertNonEmpty(part, name2) {
  if (!part) {
    throw new Error("`" + name2 + "` cannot be empty");
  }
}
function assertPath2(path2, name2) {
  if (!path2) {
    throw new Error("Setting `" + name2 + "` requires `path` to be set too");
  }
}
function isUint8Array(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}

// node_modules/unified/lib/callable-instance.js
var CallableInstance = (
  /**
   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
   */
  /** @type {unknown} */
  /**
   * @this {Function}
   * @param {string | symbol} property
   * @returns {(...parameters: Array<unknown>) => unknown}
   */
  function(property) {
    const self2 = this;
    const constr = self2.constructor;
    const proto = (
      /** @type {Record<string | symbol, Function>} */
      // Prototypes do exist.
      // type-coverage:ignore-next-line
      constr.prototype
    );
    const value = proto[property];
    const apply = function() {
      return value.apply(apply, arguments);
    };
    Object.setPrototypeOf(apply, proto);
    return apply;
  }
);

// node_modules/unified/lib/index.js
var own4 = {}.hasOwnProperty;
var Processor = class _Processor extends CallableInstance {
  /**
   * Create a processor.
   */
  constructor() {
    super("copy");
    this.Compiler = void 0;
    this.Parser = void 0;
    this.attachers = [];
    this.compiler = void 0;
    this.freezeIndex = -1;
    this.frozen = void 0;
    this.namespace = {};
    this.parser = void 0;
    this.transformers = trough();
  }
  /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@linkcode Processor}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */
  copy() {
    const destination = (
      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
      new _Processor()
    );
    let index4 = -1;
    while (++index4 < this.attachers.length) {
      const attacher = this.attachers[index4];
      destination.use(...attacher);
    }
    destination.data((0, import_extend.default)(true, {}, this.namespace));
    return destination;
  }
  /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > **Note**: to register custom data in TypeScript, augment the
   * > {@linkcode Data} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */
  data(key, value) {
    if (typeof key === "string") {
      if (arguments.length === 2) {
        assertUnfrozen("data", this.frozen);
        this.namespace[key] = value;
        return this;
      }
      return own4.call(this.namespace, key) && this.namespace[key] || void 0;
    }
    if (key) {
      assertUnfrozen("data", this.frozen);
      this.namespace = key;
      return this;
    }
    return this.namespace;
  }
  /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */
  freeze() {
    if (this.frozen) {
      return this;
    }
    const self2 = (
      /** @type {Processor} */
      /** @type {unknown} */
      this
    );
    while (++this.freezeIndex < this.attachers.length) {
      const [attacher, ...options2] = this.attachers[this.freezeIndex];
      if (options2[0] === false) {
        continue;
      }
      if (options2[0] === true) {
        options2[0] = void 0;
      }
      const transformer = attacher.call(self2, ...options2);
      if (typeof transformer === "function") {
        this.transformers.use(transformer);
      }
    }
    this.frozen = true;
    this.freezeIndex = Number.POSITIVE_INFINITY;
    return this;
  }
  /**
   * Parse text to a syntax tree.
   *
   * > **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */
  parse(file) {
    this.freeze();
    const realFile = vfile(file);
    const parser = this.parser || this.Parser;
    assertParser("parse", parser);
    return parser(String(realFile), realFile);
  }
  /**
   * Process the given file as configured on the processor.
   *
   * > **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  process(file, done) {
    const self2 = this;
    this.freeze();
    assertParser("process", this.parser || this.Parser);
    assertCompiler("process", this.compiler || this.Compiler);
    return done ? executor(void 0, done) : new Promise(executor);
    function executor(resolve, reject) {
      const realFile = vfile(file);
      const parseTree = (
        /** @type {HeadTree extends undefined ? Node : HeadTree} */
        /** @type {unknown} */
        self2.parse(realFile)
      );
      self2.run(parseTree, realFile, function(error, tree, file2) {
        if (error || !tree || !file2) {
          return realDone(error);
        }
        const compileTree = (
          /** @type {CompileTree extends undefined ? Node : CompileTree} */
          /** @type {unknown} */
          tree
        );
        const compileResult = self2.stringify(compileTree, file2);
        if (looksLikeAValue(compileResult)) {
          file2.value = compileResult;
        } else {
          file2.result = compileResult;
        }
        realDone(
          error,
          /** @type {VFileWithOutput<CompileResult>} */
          file2
        );
      });
      function realDone(error, file2) {
        if (error || !file2) {
          reject(error);
        } else if (resolve) {
          resolve(file2);
        } else {
          ok(done, "`done` is defined if `resolve` is not");
          done(void 0, file2);
        }
      }
    }
  }
  /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  processSync(file) {
    let complete = false;
    let result;
    this.freeze();
    assertParser("processSync", this.parser || this.Parser);
    assertCompiler("processSync", this.compiler || this.Compiler);
    this.process(file, realDone);
    assertDone("processSync", "process", complete);
    ok(result, "we either bailed on an error or have a tree");
    return result;
    function realDone(error, file2) {
      complete = true;
      bail(error);
      result = file2;
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * > **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */
  run(tree, file, done) {
    assertNode(tree);
    this.freeze();
    const transformers = this.transformers;
    if (!done && typeof file === "function") {
      done = file;
      file = void 0;
    }
    return done ? executor(void 0, done) : new Promise(executor);
    function executor(resolve, reject) {
      ok(
        typeof file !== "function",
        "`file` can’t be a `done` anymore, we checked"
      );
      const realFile = vfile(file);
      transformers.run(tree, realFile, realDone);
      function realDone(error, outputTree, file2) {
        const resultingTree = (
          /** @type {TailTree extends undefined ? Node : TailTree} */
          outputTree || tree
        );
        if (error) {
          reject(error);
        } else if (resolve) {
          resolve(resultingTree);
        } else {
          ok(done, "`done` is defined if `resolve` is not");
          done(void 0, resultingTree, file2);
        }
      }
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */
  runSync(tree, file) {
    let complete = false;
    let result;
    this.run(tree, file, realDone);
    assertDone("runSync", "run", complete);
    ok(result, "we either bailed on an error or have a tree");
    return result;
    function realDone(error, tree2) {
      bail(error);
      result = tree2;
      complete = true;
    }
  }
  /**
   * Compile a syntax tree.
   *
   * > **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  stringify(tree, file) {
    this.freeze();
    const realFile = vfile(file);
    const compiler2 = this.compiler || this.Compiler;
    assertCompiler("stringify", compiler2);
    assertNode(tree);
    return compiler2(tree, realFile);
  }
  /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */
  use(value, ...parameters) {
    const attachers = this.attachers;
    const namespace = this.namespace;
    assertUnfrozen("use", this.frozen);
    if (value === null || value === void 0) {
    } else if (typeof value === "function") {
      addPlugin(value, parameters);
    } else if (typeof value === "object") {
      if (Array.isArray(value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new TypeError("Expected usable value, not `" + value + "`");
    }
    return this;
    function add(value2) {
      if (typeof value2 === "function") {
        addPlugin(value2, []);
      } else if (typeof value2 === "object") {
        if (Array.isArray(value2)) {
          const [plugin, ...parameters2] = (
            /** @type {PluginTuple<Array<unknown>>} */
            value2
          );
          addPlugin(plugin, parameters2);
        } else {
          addPreset(value2);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value2 + "`");
      }
    }
    function addPreset(result) {
      if (!("plugins" in result) && !("settings" in result)) {
        throw new Error(
          "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither"
        );
      }
      addList(result.plugins);
      if (result.settings) {
        namespace.settings = (0, import_extend.default)(true, namespace.settings, result.settings);
      }
    }
    function addList(plugins) {
      let index4 = -1;
      if (plugins === null || plugins === void 0) {
      } else if (Array.isArray(plugins)) {
        while (++index4 < plugins.length) {
          const thing = plugins[index4];
          add(thing);
        }
      } else {
        throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
      }
    }
    function addPlugin(plugin, parameters2) {
      let index4 = -1;
      let entryIndex = -1;
      while (++index4 < attachers.length) {
        if (attachers[index4][0] === plugin) {
          entryIndex = index4;
          break;
        }
      }
      if (entryIndex === -1) {
        attachers.push([plugin, ...parameters2]);
      } else if (parameters2.length > 0) {
        let [primary, ...rest] = parameters2;
        const currentPrimary = attachers[entryIndex][1];
        if (isPlainObject(currentPrimary) && isPlainObject(primary)) {
          primary = (0, import_extend.default)(true, currentPrimary, primary);
        }
        attachers[entryIndex] = [plugin, primary, ...rest];
      }
    }
  }
};
var unified = new Processor().freeze();
function assertParser(name2, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name2 + "` without `parser`");
  }
}
function assertCompiler(name2, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name2 + "` without `compiler`");
  }
}
function assertUnfrozen(name2, frozen) {
  if (frozen) {
    throw new Error(
      "Cannot call `" + name2 + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
  }
}
function assertNode(node2) {
  if (!isPlainObject(node2) || typeof node2.type !== "string") {
    throw new TypeError("Expected node, got `" + node2 + "`");
  }
}
function assertDone(name2, asyncName, complete) {
  if (!complete) {
    throw new Error(
      "`" + name2 + "` finished async. Use `" + asyncName + "` instead"
    );
  }
}
function vfile(value) {
  return looksLikeAVFile(value) ? value : new VFile(value);
}
function looksLikeAVFile(value) {
  return Boolean(
    value && typeof value === "object" && "message" in value && "messages" in value
  );
}
function looksLikeAValue(value) {
  return typeof value === "string" || isUint8Array2(value);
}
function isUint8Array2(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}

// node_modules/react-markdown/lib/index.js
var changelog = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
var emptyPlugins = [];
var emptyRemarkRehypeOptions = { allowDangerousHtml: true };
var safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i;
var deprecations = [
  { from: "astPlugins", id: "remove-buggy-html-in-markdown-parser" },
  { from: "allowDangerousHtml", id: "remove-buggy-html-in-markdown-parser" },
  {
    from: "allowNode",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowElement"
  },
  {
    from: "allowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowedElements"
  },
  {
    from: "disallowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "disallowedElements"
  },
  { from: "escapeHtml", id: "remove-buggy-html-in-markdown-parser" },
  { from: "includeElementIndex", id: "#remove-includeelementindex" },
  {
    from: "includeNodeIndex",
    id: "change-includenodeindex-to-includeelementindex"
  },
  { from: "linkTarget", id: "remove-linktarget" },
  { from: "plugins", id: "change-plugins-to-remarkplugins", to: "remarkPlugins" },
  { from: "rawSourcePos", id: "#remove-rawsourcepos" },
  { from: "renderers", id: "change-renderers-to-components", to: "components" },
  { from: "source", id: "change-source-to-children", to: "children" },
  { from: "sourcePos", id: "#remove-sourcepos" },
  { from: "transformImageUri", id: "#add-urltransform", to: "urlTransform" },
  { from: "transformLinkUri", id: "#add-urltransform", to: "urlTransform" }
];
function Markdown(options2) {
  const processor = createProcessor(options2);
  const file = createFile(options2);
  return post(processor.runSync(processor.parse(file), file), options2);
}
function createProcessor(options2) {
  const rehypePlugins = options2.rehypePlugins || emptyPlugins;
  const remarkPlugins2 = options2.remarkPlugins || emptyPlugins;
  const remarkRehypeOptions = options2.remarkRehypeOptions ? { ...options2.remarkRehypeOptions, ...emptyRemarkRehypeOptions } : emptyRemarkRehypeOptions;
  const processor = unified().use(remarkParse).use(remarkPlugins2).use(remarkRehype, remarkRehypeOptions).use(rehypePlugins);
  return processor;
}
function createFile(options2) {
  const children = options2.children || "";
  const file = new VFile();
  if (typeof children === "string") {
    file.value = children;
  } else {
    unreachable(
      "Unexpected value `" + children + "` for `children` prop, expected `string`"
    );
  }
  return file;
}
function post(tree, options2) {
  const allowedElements = options2.allowedElements;
  const allowElement = options2.allowElement;
  const components = options2.components;
  const disallowedElements = options2.disallowedElements;
  const skipHtml = options2.skipHtml;
  const unwrapDisallowed = options2.unwrapDisallowed;
  const urlTransform2 = options2.urlTransform || defaultUrlTransform;
  for (const deprecation of deprecations) {
    if (Object.hasOwn(options2, deprecation.from)) {
      unreachable(
        "Unexpected `" + deprecation.from + "` prop, " + (deprecation.to ? "use `" + deprecation.to + "` instead" : "remove it") + " (see <" + changelog + "#" + deprecation.id + "> for more info)"
      );
    }
  }
  if (allowedElements && disallowedElements) {
    unreachable(
      "Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other"
    );
  }
  if (options2.className) {
    tree = {
      type: "element",
      tagName: "div",
      properties: { className: options2.className },
      // Assume no doctypes.
      children: (
        /** @type {Array<ElementContent>} */
        tree.type === "root" ? tree.children : [tree]
      )
    };
  }
  visit(tree, transform3);
  return toJsxRuntime(tree, {
    Fragment: import_jsx_runtime.Fragment,
    // @ts-expect-error
    // React components are allowed to return numbers,
    // but not according to the types in hast-util-to-jsx-runtime
    components,
    ignoreInvalidStyle: true,
    jsx: import_jsx_runtime.jsx,
    jsxs: import_jsx_runtime.jsxs,
    passKeys: true,
    passNode: true
  });
  function transform3(node2, index4, parent) {
    if (node2.type === "raw" && parent && typeof index4 === "number") {
      if (skipHtml) {
        parent.children.splice(index4, 1);
      } else {
        parent.children[index4] = { type: "text", value: node2.value };
      }
      return index4;
    }
    if (node2.type === "element") {
      let key;
      for (key in urlAttributes) {
        if (Object.hasOwn(urlAttributes, key) && Object.hasOwn(node2.properties, key)) {
          const value = node2.properties[key];
          const test2 = urlAttributes[key];
          if (test2 === null || test2.includes(node2.tagName)) {
            node2.properties[key] = urlTransform2(String(value || ""), key, node2);
          }
        }
      }
    }
    if (node2.type === "element") {
      let remove = allowedElements ? !allowedElements.includes(node2.tagName) : disallowedElements ? disallowedElements.includes(node2.tagName) : false;
      if (!remove && allowElement && typeof index4 === "number") {
        remove = !allowElement(node2, index4, parent);
      }
      if (remove && parent && typeof index4 === "number") {
        if (unwrapDisallowed && node2.children) {
          parent.children.splice(index4, 1, ...node2.children);
        } else {
          parent.children.splice(index4, 1);
        }
        return index4;
      }
    }
  }
}
function defaultUrlTransform(value) {
  const colon = value.indexOf(":");
  const questionMark = value.indexOf("?");
  const numberSign = value.indexOf("#");
  const slash = value.indexOf("/");
  if (
    // If there is no protocol, it’s relative.
    colon === -1 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
    slash !== -1 && colon > slash || questionMark !== -1 && colon > questionMark || numberSign !== -1 && colon > numberSign || // It is a protocol, it should be allowed.
    safeProtocol.test(value.slice(0, colon))
  ) {
    return value;
  }
  return "";
}

// node_modules/stream-chat-react/dist/components/Message/FixedHeightMessage.js
var import_react147 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/hooks/useActionHandler.js
var handleActionWarning = `Action handler was called, but it is missing one of its required arguments. 
Make sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.`;
function useActionHandler(message) {
  const { removeMessage, updateMessage } = useChannelActionContext("useActionHandler");
  const { channel } = useChannelStateContext("useActionHandler");
  return async (dataOrName, value, event) => {
    if (event)
      event.preventDefault();
    if (!message || !updateMessage || !removeMessage || !channel) {
      console.warn(handleActionWarning);
      return;
    }
    const messageID = message.id;
    let formData = {};
    if (typeof dataOrName === "string") {
      formData[dataOrName] = value;
    } else {
      formData = { ...dataOrName };
    }
    if (messageID) {
      const data = await channel.sendAction(messageID, formData);
      if (data == null ? void 0 : data.message) {
        updateMessage(data.message);
      } else {
        removeMessage(message);
      }
    }
  };
}

// node_modules/stream-chat-react/dist/components/Message/utils.js
var import_react_fast_compare = __toESM(require_react_fast_compare());
var import_emoji_regex = __toESM(require_emoji_regex());
var validateAndGetMessage = (func, args) => {
  if (!func || typeof func !== "function")
    return null;
  if (!Array.isArray(args)) {
    args = [args];
  }
  const returnValue = func(...args);
  if (typeof returnValue !== "string")
    return null;
  return returnValue;
};
var isUserMuted = (message, mutes) => {
  if (!mutes || !message)
    return false;
  const userMuted = mutes.filter((el) => {
    var _a;
    return el.target.id === ((_a = message.user) == null ? void 0 : _a.id);
  });
  return !!userMuted.length;
};
var MESSAGE_ACTIONS = {
  delete: "delete",
  edit: "edit",
  flag: "flag",
  markUnread: "markUnread",
  mute: "mute",
  pin: "pin",
  quote: "quote",
  react: "react",
  remindMe: "remindMe",
  reply: "reply",
  saveForLater: "saveForLater"
};
var defaultPinPermissions = {
  commerce: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: true,
    user: false
  },
  gaming: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: false,
    user: false
  },
  livestream: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: true,
    user: false
  },
  messaging: {
    admin: true,
    anonymous: false,
    channel_member: true,
    channel_moderator: true,
    guest: false,
    member: true,
    moderator: true,
    owner: true,
    user: false
  },
  team: {
    admin: true,
    anonymous: false,
    channel_member: true,
    channel_moderator: true,
    guest: false,
    member: true,
    moderator: true,
    owner: true,
    user: false
  }
};
var getMessageActions = (actions, { canDelete, canEdit, canFlag, canMarkUnread, canMute, canPin, canQuote, canReact, canReply }, channelConfig) => {
  const messageActionsAfterPermission = [];
  let messageActions = [];
  if (actions && typeof actions === "boolean") {
    messageActions = Object.keys(MESSAGE_ACTIONS);
  } else if (actions && actions.length > 0) {
    messageActions = [...actions];
  } else {
    return [];
  }
  if (canDelete && messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.delete);
  }
  if (canEdit && messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.edit);
  }
  if (canFlag && messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.flag);
  }
  if (canMarkUnread && messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.markUnread);
  }
  if (canMute && messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.mute);
  }
  if (canPin && messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.pin);
  }
  if (canQuote && messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.quote);
  }
  if (canReact && messageActions.indexOf(MESSAGE_ACTIONS.react) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.react);
  }
  if ((channelConfig == null ? void 0 : channelConfig["user_message_reminders"]) && messageActions.indexOf(MESSAGE_ACTIONS.remindMe) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.remindMe);
  }
  if (canReply && messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.reply);
  }
  if ((channelConfig == null ? void 0 : channelConfig["user_message_reminders"]) && messageActions.indexOf(MESSAGE_ACTIONS.saveForLater) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.saveForLater);
  }
  return messageActionsAfterPermission;
};
var ACTIONS_NOT_WORKING_IN_THREAD = [
  MESSAGE_ACTIONS.pin,
  MESSAGE_ACTIONS.reply,
  MESSAGE_ACTIONS.markUnread
];
var showMessageActionsBox = (actions, inThread) => shouldRenderMessageActions({ inThread, messageActions: actions });
var shouldRenderMessageActions = ({ customMessageActions, CustomMessageActionsList: CustomMessageActionsList2, inThread, messageActions }) => {
  if (typeof CustomMessageActionsList2 !== "undefined" || typeof customMessageActions !== "undefined")
    return true;
  if (!messageActions.length)
    return false;
  if (inThread && messageActions.filter((action) => !ACTIONS_NOT_WORKING_IN_THREAD.includes(action)).length === 0) {
    return false;
  }
  if (messageActions.length === 1 && (messageActions.includes(MESSAGE_ACTIONS.react) || messageActions.includes(MESSAGE_ACTIONS.reply))) {
    return false;
  }
  if (messageActions.length === 2 && messageActions.includes(MESSAGE_ACTIONS.react) && messageActions.includes(MESSAGE_ACTIONS.reply)) {
    return false;
  }
  return true;
};
function areMessagesEqual(prevMessage, nextMessage) {
  const areBaseMessagesEqual = (prevMessage2, nextMessage2) => {
    var _a, _b, _c, _d, _e2, _f;
    return prevMessage2.deleted_at === nextMessage2.deleted_at && ((_a = prevMessage2.latest_reactions) == null ? void 0 : _a.length) === ((_b = nextMessage2.latest_reactions) == null ? void 0 : _b.length) && ((_c = prevMessage2.own_reactions) == null ? void 0 : _c.length) === ((_d = nextMessage2.own_reactions) == null ? void 0 : _d.length) && prevMessage2.pinned === nextMessage2.pinned && prevMessage2.reply_count === nextMessage2.reply_count && prevMessage2.status === nextMessage2.status && prevMessage2.text === nextMessage2.text && prevMessage2.type === nextMessage2.type && prevMessage2.updated_at === nextMessage2.updated_at && ((_e2 = prevMessage2.user) == null ? void 0 : _e2.updated_at) === ((_f = nextMessage2.user) == null ? void 0 : _f.updated_at);
  };
  return areBaseMessagesEqual(prevMessage, nextMessage) && Boolean(prevMessage.quoted_message) === Boolean(nextMessage.quoted_message) && (!prevMessage.quoted_message && !nextMessage.quoted_message || areBaseMessagesEqual(prevMessage.quoted_message, nextMessage.quoted_message));
}
var areMessagePropsEqual = (prevProps, nextProps) => {
  const { message: prevMessage, Message: prevMessageUI } = prevProps;
  const { message: nextMessage, Message: nextMessageUI } = nextProps;
  if (prevMessageUI !== nextMessageUI)
    return false;
  if (prevProps.endOfGroup !== nextProps.endOfGroup)
    return false;
  if (nextProps.showDetailedReactions !== prevProps.showDetailedReactions) {
    return false;
  }
  if (nextProps.closeReactionSelectorOnClick !== prevProps.closeReactionSelectorOnClick) {
    return false;
  }
  const messagesAreEqual = areMessagesEqual(prevMessage, nextMessage);
  if (!messagesAreEqual)
    return false;
  const deepEqualProps = (0, import_react_fast_compare.default)(nextProps.messageActions, prevProps.messageActions) && (0, import_react_fast_compare.default)(nextProps.readBy, prevProps.readBy) && (0, import_react_fast_compare.default)(nextProps.highlighted, prevProps.highlighted) && (0, import_react_fast_compare.default)(nextProps.groupStyles, prevProps.groupStyles) && // last 3 messages can have different group styles
  (0, import_react_fast_compare.default)(nextProps.mutes, prevProps.mutes) && (0, import_react_fast_compare.default)(nextProps.lastReceivedId, prevProps.lastReceivedId);
  if (!deepEqualProps)
    return false;
  return prevProps.messageListRect === nextProps.messageListRect;
};
var areMessageUIPropsEqual = (prevProps, nextProps) => {
  var _a, _b, _c, _d;
  const { lastReceivedId: prevLastReceivedId, message: prevMessage } = prevProps;
  const { lastReceivedId: nextLastReceivedId, message: nextMessage } = nextProps;
  if (prevProps.editing !== nextProps.editing)
    return false;
  if (prevProps.highlighted !== nextProps.highlighted)
    return false;
  if (prevProps.endOfGroup !== nextProps.endOfGroup)
    return false;
  if (((_a = prevProps.mutes) == null ? void 0 : _a.length) !== ((_b = nextProps.mutes) == null ? void 0 : _b.length))
    return false;
  if (((_c = prevProps.readBy) == null ? void 0 : _c.length) !== ((_d = nextProps.readBy) == null ? void 0 : _d.length))
    return false;
  if (prevProps.groupStyles !== nextProps.groupStyles)
    return false;
  if (prevProps.showDetailedReactions !== nextProps.showDetailedReactions) {
    return false;
  }
  if ((prevMessage.id === prevLastReceivedId || prevMessage.id === nextLastReceivedId) && prevLastReceivedId !== nextLastReceivedId) {
    return false;
  }
  return areMessagesEqual(prevMessage, nextMessage);
};
var messageHasReactions = (message) => Object.values((message == null ? void 0 : message.reaction_groups) ?? {}).some(({ count }) => count > 0);
var messageHasAttachments = (message) => !!(message == null ? void 0 : message.attachments) && !!message.attachments.length;
var getImages = (message) => {
  if (!(message == null ? void 0 : message.attachments)) {
    return [];
  }
  return message.attachments.filter((item) => item.type === "image");
};
var getNonImageAttachments = (message) => {
  if (!(message == null ? void 0 : message.attachments)) {
    return [];
  }
  return message.attachments.filter((item) => item.type !== "image");
};
var mapToUserNameOrId = (user) => user.name || user.id;
var getReadByTooltipText = (users, t2, client, tooltipUserNameMapper) => {
  let outStr = "";
  if (!t2) {
    throw new Error("getReadByTooltipText was called, but translation function is not available");
  }
  if (!tooltipUserNameMapper) {
    throw new Error("getReadByTooltipText was called, but tooltipUserNameMapper function is not available");
  }
  const otherUsers = users.filter((item) => item && (client == null ? void 0 : client.user) && item.id !== client.user.id).map(tooltipUserNameMapper);
  const slicedArr = otherUsers.slice(0, 5);
  const restLength = otherUsers.length - slicedArr.length;
  if (slicedArr.length === 1) {
    outStr = `${slicedArr[0]} `;
  } else if (slicedArr.length === 2) {
    outStr = t2("{{ firstUser }} and {{ secondUser }}", {
      firstUser: slicedArr[0],
      secondUser: slicedArr[1]
    });
  } else if (slicedArr.length > 2) {
    if (restLength === 0) {
      const lastUser = slicedArr.splice(slicedArr.length - 1, 1);
      outStr = t2("{{ commaSeparatedUsers }}, and {{ lastUser }}", {
        commaSeparatedUsers: slicedArr.join(", "),
        lastUser
      });
    } else {
      outStr = t2("{{ commaSeparatedUsers }} and {{ moreCount }} more", {
        commaSeparatedUsers: slicedArr.join(", "),
        moreCount: restLength
      });
    }
  }
  return outStr;
};
var isOnlyEmojis = (text8) => {
  if (!text8)
    return false;
  const noEmojis = text8.replace((0, import_emoji_regex.default)(), "");
  const noSpace = noEmojis.replace(/[\s\n]/gm, "");
  return !noSpace;
};
var isMessageBounced = (message) => {
  var _a, _b;
  return message.type === "error" && (((_a = message.moderation_details) == null ? void 0 : _a.action) === "MESSAGE_RESPONSE_ACTION_BOUNCE" || ((_b = message.moderation) == null ? void 0 : _b.action) === "bounce");
};
var isMessageBlocked = (message) => {
  var _a, _b;
  return message.type === "error" && (((_a = message.moderation_details) == null ? void 0 : _a.action) === "MESSAGE_RESPONSE_ACTION_REMOVE" || ((_b = message.moderation) == null ? void 0 : _b.action) === "remove");
};
var isMessageEdited = (message) => !!message.message_text_updated_at;

// node_modules/stream-chat-react/dist/components/Message/hooks/useDeleteHandler.js
var useDeleteHandler = (message, notifications = {}) => {
  const { getErrorNotification, notify } = notifications;
  const { deleteMessage, updateMessage } = useChannelActionContext("useDeleteHandler");
  const { client } = useChatContext("useDeleteHandler");
  const { t: t2 } = useTranslationContext("useDeleteHandler");
  return async (event) => {
    event.preventDefault();
    if (!(message == null ? void 0 : message.id) || !client || !updateMessage) {
      return;
    }
    try {
      const deletedMessage = await deleteMessage(message);
      updateMessage(deletedMessage);
    } catch (e) {
      const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
      if (notify)
        notify(errorMessage || t2("Error deleting message"), "error");
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useEditHandler.js
var import_react81 = __toESM(require_react());
var useEditHandler = (customInitialState = false, customSetEditing, customClearEditingHandler) => {
  const [editing, setEditing] = (0, import_react81.useState)(customInitialState);
  const setEdit = customSetEditing || ((event) => {
    if (event == null ? void 0 : event.preventDefault) {
      event.preventDefault();
    }
    setEditing(true);
  });
  const clearEdit = customClearEditingHandler || ((event) => {
    if (event == null ? void 0 : event.preventDefault) {
      event.preventDefault();
    }
    setEditing(false);
  });
  return { clearEdit, editing, setEdit };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useFlagHandler.js
var missingUseFlagHandlerParameterWarning = "useFlagHandler was called but it is missing one or more necessary parameters.";
var useFlagHandler = (message, notifications = {}) => {
  const { client } = useChatContext("useFlagHandler");
  const { t: t2 } = useTranslationContext("useFlagHandler");
  return async (event) => {
    var _a;
    event.preventDefault();
    const { getErrorNotification, getSuccessNotification, notify } = notifications;
    if (!client || !t2 || !notify || !(message == null ? void 0 : message.id)) {
      console.warn(missingUseFlagHandlerParameterWarning);
      return;
    }
    if ((_a = client.user) == null ? void 0 : _a.banned) {
      return notify(t2("Error adding flag"), "error");
    }
    try {
      await client.flagMessage(message.id);
      const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
      notify(successMessage || t2("Message has been successfully flagged"), "success");
    } catch (e) {
      const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
      notify(errorMessage || t2("Error adding flag"), "error");
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMentionsHandler.js
function createEventHandler(fn2, message) {
  return (event) => {
    var _a;
    if (typeof fn2 !== "function" || !((_a = message == null ? void 0 : message.mentioned_users) == null ? void 0 : _a.length)) {
      return;
    }
    fn2(event, message.mentioned_users);
  };
}
var useMentionsHandler = (message, customMentionHandler) => {
  const { onMentionsClick: contextOnMentionsClick, onMentionsHover: contextOnMentionsHover } = useChannelActionContext("useMentionsHandler");
  const onMentionsClick = (customMentionHandler == null ? void 0 : customMentionHandler.onMentionsClick) || contextOnMentionsClick || (() => null);
  const onMentionsHover = (customMentionHandler == null ? void 0 : customMentionHandler.onMentionsHover) || contextOnMentionsHover || (() => null);
  return {
    onMentionsClick: createEventHandler(onMentionsClick, message),
    onMentionsHover: createEventHandler(onMentionsHover, message)
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMarkUnreadHandler.js
var useMarkUnreadHandler = (message, notifications = {}) => {
  const { getErrorNotification, getSuccessNotification, notify } = notifications;
  const { channel } = useChannelStateContext("useMarkUnreadHandler");
  const { t: t2 } = useTranslationContext("useMarkUnreadHandler");
  return async (event) => {
    event.preventDefault();
    if (!(message == null ? void 0 : message.id)) {
      console.warn("Mark unread handler does not have access to message id");
      return;
    }
    try {
      await channel.markUnread({ message_id: message.id });
      if (!notify)
        return;
      const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
      if (successMessage)
        notify(successMessage, "success");
    } catch (e) {
      if (!notify)
        return;
      const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
      if (getErrorNotification && !errorMessage)
        return;
      notify(errorMessage || t2("Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages."), "error");
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMuteHandler.js
var missingUseMuteHandlerParamsWarning = "useMuteHandler was called but it is missing one or more necessary parameter.";
var useMuteHandler = (message, notifications = {}) => {
  const { mutes } = useChannelStateContext("useMuteHandler");
  const { client } = useChatContext("useMuteHandler");
  const { t: t2 } = useTranslationContext("useMuteHandler");
  return async (event) => {
    event.preventDefault();
    const { getErrorNotification, getSuccessNotification, notify } = notifications;
    if (!t2 || !(message == null ? void 0 : message.user) || !notify || !client) {
      console.warn(missingUseMuteHandlerParamsWarning);
      return;
    }
    if (!isUserMuted(message, mutes)) {
      try {
        await client.muteUser(message.user.id);
        const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]);
        notify(successMessage || t2(`{{ user }} has been muted`, {
          user: message.user.name || message.user.id
        }), "success");
      } catch (e) {
        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]);
        notify(errorMessage || t2("Error muting a user ..."), "error");
      }
    } else {
      try {
        await client.unmuteUser(message.user.id);
        const fallbackMessage = t2(`{{ user }} has been unmuted`, {
          user: message.user.name || message.user.id
        });
        const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]) || fallbackMessage;
        if (typeof successMessage === "string") {
          notify(successMessage, "success");
        }
      } catch (e) {
        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]) || t2("Error unmuting a user ...");
        if (typeof errorMessage === "string") {
          notify(errorMessage, "error");
        }
      }
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useOpenThreadHandler.js
var useOpenThreadHandler = (message, customOpenThread) => {
  const { openThread: channelOpenThread } = useChannelActionContext("useOpenThreadHandler");
  const openThread = customOpenThread || channelOpenThread;
  return (event) => {
    if (!openThread || !message) {
      console.warn("Open thread handler was called but it is missing one of its parameters");
      return;
    }
    openThread(message, event);
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/usePinHandler.js
var usePinHandler = (message, _permissions = defaultPinPermissions, notifications = {}) => {
  const { getErrorNotification, notify } = notifications;
  const { updateMessage } = useChannelActionContext("usePinHandler");
  const { channelCapabilities = {} } = useChannelStateContext("usePinHandler");
  const { client } = useChatContext("usePinHandler");
  const { t: t2 } = useTranslationContext("usePinHandler");
  const canPin = !!channelCapabilities["pin-message"];
  const handlePin = async (event) => {
    event.preventDefault();
    if (!message)
      return;
    if (!message.pinned) {
      try {
        const optimisticMessage = {
          ...message,
          pinned: true,
          pinned_at: /* @__PURE__ */ new Date(),
          pinned_by: client.user
        };
        updateMessage(optimisticMessage);
        await client.pinMessage(message);
      } catch (e) {
        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
        if (notify)
          notify(errorMessage || t2("Error pinning message"), "error");
        updateMessage(message);
      }
    } else {
      try {
        const optimisticMessage = {
          ...message,
          pin_expires: null,
          pinned: false,
          pinned_at: null,
          pinned_by: null
        };
        updateMessage(optimisticMessage);
        await client.unpinMessage(message);
      } catch (e) {
        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
        if (notify)
          notify(errorMessage || t2("Error removing message pin"), "error");
        updateMessage(message);
      }
    }
  };
  return { canPin, handlePin };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useReactionHandler.js
var import_react82 = __toESM(require_react());
var import_lodash11 = __toESM(require_lodash());
var reactionHandlerWarning = `Reaction handler was called, but it is missing one of its required arguments.
Make sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.`;
var useReactionHandler = (message) => {
  const thread = useThreadContext();
  const { updateMessage } = useChannelActionContext("useReactionHandler");
  const { channel, channelCapabilities } = useChannelStateContext("useReactionHandler");
  const { client } = useChatContext("useReactionHandler");
  const createMessagePreview = (0, import_react82.useCallback)(
    (add, reaction, message2) => {
      var _a, _b;
      const newReactionGroups = (message2 == null ? void 0 : message2.reaction_groups) || {};
      const reactionType = reaction.type;
      const hasReaction = !!newReactionGroups[reactionType];
      if (add) {
        const timestamp = (/* @__PURE__ */ new Date()).toISOString();
        newReactionGroups[reactionType] = hasReaction ? {
          ...newReactionGroups[reactionType],
          count: newReactionGroups[reactionType].count + 1
        } : {
          count: 1,
          first_reaction_at: timestamp,
          last_reaction_at: timestamp,
          sum_scores: 1
        };
      } else {
        if (hasReaction && newReactionGroups[reactionType].count > 1) {
          newReactionGroups[reactionType] = {
            ...newReactionGroups[reactionType],
            count: newReactionGroups[reactionType].count - 1
          };
        } else {
          delete newReactionGroups[reactionType];
        }
      }
      const newReactions = add ? [reaction, ...(message2 == null ? void 0 : message2.latest_reactions) || []] : (_a = message2.latest_reactions) == null ? void 0 : _a.filter((item) => !(item.type === reaction.type && item.user_id === reaction.user_id));
      const newOwnReactions = add ? [reaction, ...(message2 == null ? void 0 : message2.own_reactions) || []] : (_b = message2 == null ? void 0 : message2.own_reactions) == null ? void 0 : _b.filter((item) => item.type !== reaction.type);
      return {
        ...message2,
        latest_reactions: newReactions || message2.latest_reactions,
        own_reactions: newOwnReactions,
        reaction_groups: newReactionGroups
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [client.user, client.userID]
  );
  const createReactionPreview = (type) => {
    var _a;
    return {
      message_id: message == null ? void 0 : message.id,
      score: 1,
      type,
      user: client.user,
      user_id: (_a = client.user) == null ? void 0 : _a.id
    };
  };
  const toggleReaction = (0, import_lodash11.default)(async (id3, type, add) => {
    if (!message || !channelCapabilities["send-reaction"])
      return;
    const newReaction = createReactionPreview(type);
    const tempMessage = createMessagePreview(add, newReaction, message);
    try {
      updateMessage(tempMessage);
      thread == null ? void 0 : thread.upsertReplyLocally({ message: tempMessage });
      const messageResponse = add ? await channel.sendReaction(id3, { type }) : await channel.deleteReaction(id3, type);
      updateMessage(messageResponse.message);
    } catch (error) {
      updateMessage(message);
      thread == null ? void 0 : thread.upsertReplyLocally({ message });
    }
  }, 1e3);
  return async (reactionType, event) => {
    if (event == null ? void 0 : event.preventDefault) {
      event.preventDefault();
    }
    if (!message) {
      return console.warn(reactionHandlerWarning);
    }
    let userExistingReaction = null;
    if (message.own_reactions) {
      message.own_reactions.forEach((reaction) => {
        if (reaction.user && client.userID === reaction.user.id && reaction.type === reactionType) {
          userExistingReaction = reaction;
        } else if (reaction.user && client.userID !== reaction.user.id) {
          console.warn(`message.own_reactions contained reactions from a different user, this indicates a bug`);
        }
      });
    }
    try {
      if (userExistingReaction) {
        await toggleReaction(message.id, userExistingReaction.type, false);
      } else {
        await toggleReaction(message.id, reactionType, true);
      }
    } catch (error) {
      console.log({ error });
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useRetryHandler.js
var useRetryHandler = (customRetrySendMessage) => {
  const { retrySendMessage: contextRetrySendMessage } = useChannelActionContext("useRetryHandler");
  const retrySendMessage = customRetrySendMessage || contextRetrySendMessage;
  return async (message) => {
    if (message) {
      await retrySendMessage(message);
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useUserHandler.js
var useUserHandler = (message, eventHandlers) => ({
  onUserClick: (event) => {
    if (typeof (eventHandlers == null ? void 0 : eventHandlers.onUserClickHandler) !== "function" || !(message == null ? void 0 : message.user)) {
      return;
    }
    eventHandlers.onUserClickHandler(event, message.user);
  },
  onUserHover: (event) => {
    if (typeof (eventHandlers == null ? void 0 : eventHandlers.onUserHoverHandler) !== "function" || !(message == null ? void 0 : message.user)) {
      return;
    }
    eventHandlers.onUserHoverHandler(event, message.user);
  }
});

// node_modules/stream-chat-react/dist/components/Message/hooks/useUserRole.js
var useUserRole = (message, onlySenderCanEdit, disableQuotedMessages) => {
  var _a, _b, _c;
  const { channel, channelCapabilities = {} } = useChannelStateContext("useUserRole");
  const { client } = useChatContext("useUserRole");
  const isAdmin = ((_a = client.user) == null ? void 0 : _a.role) === "admin" || channel.state.membership.role === "admin";
  const isOwner = channel.state.membership.role === "owner";
  const isModerator = ((_b = client.user) == null ? void 0 : _b.role) === "channel_moderator" || channel.state.membership.role === "channel_moderator" || channel.state.membership.role === "moderator" || channel.state.membership.is_moderator === true || channel.state.membership.channel_role === "channel_moderator";
  const isMyMessage = client.userID === ((_c = message.user) == null ? void 0 : _c.id);
  const canEdit = !message.poll && (!onlySenderCanEdit && channelCapabilities["update-any-message"] || isMyMessage && channelCapabilities["update-own-message"]);
  const canDelete = channelCapabilities["delete-any-message"] || isMyMessage && channelCapabilities["delete-own-message"];
  const canFlag = !isMyMessage && channelCapabilities["flag-message"];
  const canMarkUnread = channelCapabilities["read-events"];
  const canMute = !isMyMessage && channelCapabilities["mute-channel"];
  const canQuote = !disableQuotedMessages && channelCapabilities["quote-message"];
  const canReact = channelCapabilities["send-reaction"];
  const canReply = channelCapabilities["send-reply"];
  return {
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canQuote,
    canReact,
    canReply,
    isAdmin,
    isModerator,
    isMyMessage,
    isOwner
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useReactionsFetcher.js
var MAX_MESSAGE_REACTIONS_TO_FETCH = 1e3;
function useReactionsFetcher(message, notifications = {}) {
  const { client } = useChatContext("useRectionsFetcher");
  const { t: t2 } = useTranslationContext("useReactionFetcher");
  const { getErrorNotification, notify } = notifications;
  return async (reactionType, sort) => {
    try {
      return await fetchMessageReactions(client, message.id, reactionType, sort);
    } catch (e) {
      const errorMessage = getErrorNotification == null ? void 0 : getErrorNotification(message);
      notify == null ? void 0 : notify(errorMessage || t2("Error fetching reactions"), "error");
      throw e;
    }
  };
}
async function fetchMessageReactions(client, messageId, reactionType, sort) {
  const reactions = [];
  const limit = 25;
  let next;
  let hasNext = true;
  while (hasNext && reactions.length < MAX_MESSAGE_REACTIONS_TO_FETCH) {
    const response = await client.queryReactions(messageId, reactionType ? { type: reactionType } : {}, sort, { limit, next });
    reactions.push(...response.reactions);
    next = response.next;
    hasNext = Boolean(next);
  }
  return reactions;
}

// node_modules/stream-chat-react/dist/components/Message/hooks/useMessageTextStreaming.js
var import_react83 = __toESM(require_react());
var DEFAULT_LETTER_INTERVAL = 30;
var DEFAULT_RENDERING_LETTER_COUNT = 2;
var useMessageTextStreaming = ({ renderingLetterCount = DEFAULT_RENDERING_LETTER_COUNT, streamingLetterIntervalMs = DEFAULT_LETTER_INTERVAL, text: text8 }) => {
  const [streamedMessageText, setStreamedMessageText] = (0, import_react83.useState)(text8);
  const textCursor = (0, import_react83.useRef)(text8.length);
  (0, import_react83.useEffect)(() => {
    const textLength = text8.length;
    const interval = setInterval(() => {
      if (!text8 || textCursor.current >= textLength) {
        clearInterval(interval);
      }
      const newCursorValue = textCursor.current + renderingLetterCount;
      const newText = text8.substring(0, newCursorValue);
      textCursor.current += newText.length - textCursor.current;
      setStreamedMessageText(newText);
    }, streamingLetterIntervalMs);
    return () => {
      clearInterval(interval);
    };
  }, [streamingLetterIntervalMs, renderingLetterCount, text8]);
  return { streamedMessageText };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMessageReminder.js
var import_react84 = __toESM(require_react());
var useMessageReminder = (messageId) => {
  const { client } = useChatContext();
  const reminderSelector = (0, import_react84.useCallback)((state) => ({
    reminder: state.reminders.get(messageId)
  }), [messageId]);
  const { reminder } = useStateStore(client.reminders.state, reminderSelector);
  return reminder;
};

// node_modules/stream-chat-react/dist/components/Message/MessageDeleted.js
var import_react85 = __toESM(require_react());
var MessageDeleted = (props) => {
  const { message } = props;
  const { t: t2 } = useTranslationContext("MessageDeleted");
  const { isMyMessage } = useUserRole(message);
  const messageClasses = isMyMessage ? "str-chat__message str-chat__message--me str-chat__message-simple str-chat__message-simple--me" : "str-chat__message str-chat__message-simple str-chat__message--other";
  return import_react85.default.createElement(
    "div",
    { className: `${messageClasses} str-chat__message--deleted ${message.type} `, "data-testid": "message-deleted-component", key: message.id },
    import_react85.default.createElement("div", { className: "str-chat__message--deleted-inner" }, t2("This message was deleted..."))
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageTimestamp.js
var import_react86 = __toESM(require_react());
var UnMemoizedMessageTimestamp = (props) => {
  const { message: propMessage, ...timestampProps } = props;
  const { message: contextMessage } = useMessageContext("MessageTimestamp");
  const { Timestamp: Timestamp2 = Timestamp } = useComponentContext("MessageTimestamp");
  const message = propMessage || contextMessage;
  return import_react86.default.createElement(Timestamp2, { timestamp: message.created_at, ...timestampProps });
};
var MessageTimestamp = import_react86.default.memo(UnMemoizedMessageTimestamp);

// node_modules/stream-chat-react/dist/components/Gallery/BaseImage.js
var import_react87 = __toESM(require_react());
var BaseImage = (0, import_react87.forwardRef)(function BaseImage2({ ...props }, ref) {
  const { className: propsClassName, onError: propsOnError } = props;
  const [error, setError] = (0, import_react87.useState)(false);
  (0, import_react87.useEffect)(() => () => {
    setError(false);
  }, [props.src]);
  return import_react87.default.createElement(
    import_react87.default.Fragment,
    null,
    import_react87.default.createElement("img", { "data-testid": "str-chat__base-image", ...props, className: clsx_default(propsClassName, "str-chat__base-image", {
      "str-chat__base-image--load-failed": error
    }), onError: (e) => {
      setError(true);
      propsOnError == null ? void 0 : propsOnError(e);
    }, ref }),
    error && import_react87.default.createElement(DownloadButton, { assetUrl: props.src })
  );
});

// node_modules/stream-chat-react/dist/components/Gallery/Gallery.js
var import_react135 = __toESM(require_react());
var import_sanitize_url2 = __toESM(require_dist());

// node_modules/stream-chat-react/dist/components/Modal/GlobalModal.js
var import_react130 = __toESM(require_react());
var import_react131 = __toESM(require_react());

// node_modules/@react-aria/utils/dist/useLayoutEffect.mjs
var import_react88 = __toESM(require_react(), 1);
var $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== "undefined" ? (0, import_react88.default).useLayoutEffect : () => {
};

// node_modules/@react-aria/utils/dist/useEffectEvent.mjs
var import_react89 = __toESM(require_react(), 1);
function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn2) {
  const ref = (0, import_react89.useRef)(null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    ref.current = fn2;
  }, [
    fn2
  ]);
  return (0, import_react89.useCallback)((...args) => {
    const f2 = ref.current;
    return f2 === null || f2 === void 0 ? void 0 : f2(...args);
  }, []);
}

// node_modules/@react-aria/utils/dist/useValueEffect.mjs
var import_react90 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useId.mjs
var import_react92 = __toESM(require_react(), 1);

// node_modules/@react-aria/ssr/dist/SSRProvider.mjs
var import_react91 = __toESM(require_react(), 1);
var $b5e257d569688ac6$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0
};
var $b5e257d569688ac6$var$SSRContext = (0, import_react91.default).createContext($b5e257d569688ac6$var$defaultContext);
var $b5e257d569688ac6$var$IsSSRContext = (0, import_react91.default).createContext(false);
var $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
var $b5e257d569688ac6$var$componentIds = /* @__PURE__ */ new WeakMap();
function $b5e257d569688ac6$var$useCounter(isDisabled = false) {
  let ctx = (0, import_react91.useContext)($b5e257d569688ac6$var$SSRContext);
  let ref = (0, import_react91.useRef)(null);
  if (ref.current === null && !isDisabled) {
    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, import_react91.default).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
    if (currentOwner) {
      let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
      if (prevComponentValue == null)
        $b5e257d569688ac6$var$componentIds.set(currentOwner, {
          id: ctx.current,
          state: currentOwner.memoizedState
        });
      else if (currentOwner.memoizedState !== prevComponentValue.state) {
        ctx.current = prevComponentValue.id;
        $b5e257d569688ac6$var$componentIds.delete(currentOwner);
      }
    }
    ref.current = ++ctx.current;
  }
  return ref.current;
}
function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
  let ctx = (0, import_react91.useContext)($b5e257d569688ac6$var$SSRContext);
  if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM && true) console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);
  let prefix = ctx === $b5e257d569688ac6$var$defaultContext && false ? "react-aria" : `react-aria${ctx.prefix}`;
  return defaultId || `${prefix}-${counter}`;
}
function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
  let id3 = (0, import_react91.default).useId();
  let [didSSR] = (0, import_react91.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());
  let prefix = didSSR || false ? "react-aria" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
  return defaultId || `${prefix}-${id3}`;
}
var $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, import_react91.default)["useId"] === "function" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
function $b5e257d569688ac6$var$getSnapshot() {
  return false;
}
function $b5e257d569688ac6$var$getServerSnapshot() {
  return true;
}
function $b5e257d569688ac6$var$subscribe(onStoreChange) {
  return () => {
  };
}
function $b5e257d569688ac6$export$535bd6ca7f90a273() {
  if (typeof (0, import_react91.default)["useSyncExternalStore"] === "function") return (0, import_react91.default)["useSyncExternalStore"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
  return (0, import_react91.useContext)($b5e257d569688ac6$var$IsSSRContext);
}

// node_modules/@react-aria/utils/dist/useId.mjs
var $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
var $bdb11010cef70236$export$d41a04c74483c6ef = /* @__PURE__ */ new Map();
var $bdb11010cef70236$var$registry;
if (typeof FinalizationRegistry !== "undefined") $bdb11010cef70236$var$registry = new FinalizationRegistry((heldValue) => {
  $bdb11010cef70236$export$d41a04c74483c6ef.delete(heldValue);
});
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdsA = $bdb11010cef70236$export$d41a04c74483c6ef.get(idA);
  if (setIdsA) {
    setIdsA.forEach((ref) => ref.current = idB);
    return idB;
  }
  let setIdsB = $bdb11010cef70236$export$d41a04c74483c6ef.get(idB);
  if (setIdsB) {
    setIdsB.forEach((ref) => ref.current = idA);
    return idA;
  }
  return idB;
}

// node_modules/@react-aria/utils/dist/chain.mjs
function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}

// node_modules/@react-aria/utils/dist/domHelpers.mjs
var $431fbd86ca7dc216$export$b204af158042fbac = (el) => {
  var _el_ownerDocument;
  return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
};
var $431fbd86ca7dc216$export$f21a1ffae260145a = (el) => {
  if (el && "window" in el && el.window === el) return el;
  const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);
  return doc.defaultView || window;
};
function $431fbd86ca7dc216$var$isNode(value) {
  return value !== null && typeof value === "object" && "nodeType" in value && typeof value.nodeType === "number";
}
function $431fbd86ca7dc216$export$af51f0f06c0f328a(node2) {
  return $431fbd86ca7dc216$var$isNode(node2) && node2.nodeType === Node.DOCUMENT_FRAGMENT_NODE && "host" in node2;
}

// node_modules/@react-stately/flags/dist/import.mjs
var $f4e2df6bd15f8569$var$_shadowDOM = false;
function $f4e2df6bd15f8569$export$98658e8c59125e6a() {
  return $f4e2df6bd15f8569$var$_shadowDOM;
}

// node_modules/@react-aria/utils/dist/DOMFunctions.mjs
function $d4ee10de306f2510$export$4282f70798064fe0(node2, otherNode) {
  if (!(0, $f4e2df6bd15f8569$export$98658e8c59125e6a)()) return otherNode && node2 ? node2.contains(otherNode) : false;
  if (!node2 || !otherNode) return false;
  let currentNode = otherNode;
  while (currentNode !== null) {
    if (currentNode === node2) return true;
    if (currentNode.tagName === "SLOT" && currentNode.assignedSlot)
      currentNode = currentNode.assignedSlot.parentNode;
    else if ((0, $431fbd86ca7dc216$export$af51f0f06c0f328a)(currentNode))
      currentNode = currentNode.host;
    else currentNode = currentNode.parentNode;
  }
  return false;
}
var $d4ee10de306f2510$export$cd4e5573fbe2b576 = (doc = document) => {
  var _activeElement_shadowRoot;
  if (!(0, $f4e2df6bd15f8569$export$98658e8c59125e6a)()) return doc.activeElement;
  let activeElement = doc.activeElement;
  while (activeElement && "shadowRoot" in activeElement && ((_activeElement_shadowRoot = activeElement.shadowRoot) === null || _activeElement_shadowRoot === void 0 ? void 0 : _activeElement_shadowRoot.activeElement)) activeElement = activeElement.shadowRoot.activeElement;
  return activeElement;
};
function $d4ee10de306f2510$export$e58f029f0fbfdb29(event) {
  if ((0, $f4e2df6bd15f8569$export$98658e8c59125e6a)() && event.target.shadowRoot) {
    if (event.composedPath) return event.composedPath()[0];
  }
  return event.target;
}

// node_modules/@react-aria/utils/dist/ShadowTreeWalker.mjs
var $dfc540311bf7f109$export$63eb3ababa9c55c4 = class {
  get currentNode() {
    return this._currentNode;
  }
  set currentNode(node2) {
    if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(this.root, node2)) throw new Error("Cannot set currentNode to a node that is not contained by the root node.");
    const walkers = [];
    let curNode = node2;
    let currentWalkerCurrentNode = node2;
    this._currentNode = node2;
    while (curNode && curNode !== this.root) if (curNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      const shadowRoot = curNode;
      const walker2 = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {
        acceptNode: this._acceptNode
      });
      walkers.push(walker2);
      walker2.currentNode = currentWalkerCurrentNode;
      this._currentSetFor.add(walker2);
      curNode = currentWalkerCurrentNode = shadowRoot.host;
    } else curNode = curNode.parentNode;
    const walker = this._doc.createTreeWalker(this.root, this.whatToShow, {
      acceptNode: this._acceptNode
    });
    walkers.push(walker);
    walker.currentNode = currentWalkerCurrentNode;
    this._currentSetFor.add(walker);
    this._walkerStack = walkers;
  }
  get doc() {
    return this._doc;
  }
  firstChild() {
    let currentNode = this.currentNode;
    let newNode = this.nextNode();
    if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(currentNode, newNode)) {
      this.currentNode = currentNode;
      return null;
    }
    if (newNode) this.currentNode = newNode;
    return newNode;
  }
  lastChild() {
    let walker = this._walkerStack[0];
    let newNode = walker.lastChild();
    if (newNode) this.currentNode = newNode;
    return newNode;
  }
  nextNode() {
    const nextNode = this._walkerStack[0].nextNode();
    if (nextNode) {
      const shadowRoot = nextNode.shadowRoot;
      if (shadowRoot) {
        var _this_filter;
        let nodeResult;
        if (typeof this.filter === "function") nodeResult = this.filter(nextNode);
        else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(nextNode);
        if (nodeResult === NodeFilter.FILTER_ACCEPT) {
          this.currentNode = nextNode;
          return nextNode;
        }
        let newNode = this.nextNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      }
      if (nextNode) this.currentNode = nextNode;
      return nextNode;
    } else {
      if (this._walkerStack.length > 1) {
        this._walkerStack.shift();
        let newNode = this.nextNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      } else return null;
    }
  }
  previousNode() {
    const currentWalker = this._walkerStack[0];
    if (currentWalker.currentNode === currentWalker.root) {
      if (this._currentSetFor.has(currentWalker)) {
        this._currentSetFor.delete(currentWalker);
        if (this._walkerStack.length > 1) {
          this._walkerStack.shift();
          let newNode = this.previousNode();
          if (newNode) this.currentNode = newNode;
          return newNode;
        } else return null;
      }
      return null;
    }
    const previousNode = currentWalker.previousNode();
    if (previousNode) {
      const shadowRoot = previousNode.shadowRoot;
      if (shadowRoot) {
        var _this_filter;
        let nodeResult;
        if (typeof this.filter === "function") nodeResult = this.filter(previousNode);
        else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(previousNode);
        if (nodeResult === NodeFilter.FILTER_ACCEPT) {
          if (previousNode) this.currentNode = previousNode;
          return previousNode;
        }
        let newNode = this.lastChild();
        if (newNode) this.currentNode = newNode;
        return newNode;
      }
      if (previousNode) this.currentNode = previousNode;
      return previousNode;
    } else {
      if (this._walkerStack.length > 1) {
        this._walkerStack.shift();
        let newNode = this.previousNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      } else return null;
    }
  }
  /**
   * @deprecated
   */
  nextSibling() {
    return null;
  }
  /**
   * @deprecated
   */
  previousSibling() {
    return null;
  }
  /**
   * @deprecated
   */
  parentNode() {
    return null;
  }
  constructor(doc, root4, whatToShow, filter2) {
    this._walkerStack = [];
    this._currentSetFor = /* @__PURE__ */ new Set();
    this._acceptNode = (node2) => {
      if (node2.nodeType === Node.ELEMENT_NODE) {
        const shadowRoot2 = node2.shadowRoot;
        if (shadowRoot2) {
          const walker = this._doc.createTreeWalker(shadowRoot2, this.whatToShow, {
            acceptNode: this._acceptNode
          });
          this._walkerStack.unshift(walker);
          return NodeFilter.FILTER_ACCEPT;
        } else {
          var _this_filter;
          if (typeof this.filter === "function") return this.filter(node2);
          else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) return this.filter.acceptNode(node2);
          else if (this.filter === null) return NodeFilter.FILTER_ACCEPT;
        }
      }
      return NodeFilter.FILTER_SKIP;
    };
    this._doc = doc;
    this.root = root4;
    this.filter = filter2 !== null && filter2 !== void 0 ? filter2 : null;
    this.whatToShow = whatToShow !== null && whatToShow !== void 0 ? whatToShow : NodeFilter.SHOW_ALL;
    this._currentNode = root4;
    this._walkerStack.unshift(doc.createTreeWalker(root4, whatToShow, this._acceptNode));
    const shadowRoot = root4.shadowRoot;
    if (shadowRoot) {
      const walker = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {
        acceptNode: this._acceptNode
      });
      this._walkerStack.unshift(walker);
    }
  }
};
function $dfc540311bf7f109$export$4d0f8be8b12a7ef6(doc, root4, whatToShow, filter2) {
  if ((0, $f4e2df6bd15f8569$export$98658e8c59125e6a)()) return new $dfc540311bf7f109$export$63eb3ababa9c55c4(doc, root4, whatToShow, filter2);
  return doc.createTreeWalker(root4, whatToShow, filter2);
}

// node_modules/@react-aria/utils/dist/mergeProps.mjs
function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  let result = {
    ...args[0]
  };
  for (let i2 = 1; i2 < args.length; i2++) {
    let props = args[i2];
    for (let key in props) {
      let a2 = result[key];
      let b2 = props[key];
      if (typeof a2 === "function" && typeof b2 === "function" && // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */
      65 && key.charCodeAt(2) <= /* 'Z' */
      90) result[key] = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(a2, b2);
      else if ((key === "className" || key === "UNSAFE_className") && typeof a2 === "string" && typeof b2 === "string") result[key] = (0, clsx_default)(a2, b2);
      else if (key === "id" && a2 && b2) result.id = (0, $bdb11010cef70236$export$cd8c9cb68f842629)(a2, b2);
      else result[key] = b2 !== void 0 ? b2 : a2;
    }
  }
  return result;
}

// node_modules/@react-aria/utils/dist/mergeRefs.mjs
function $5dc95899b306f630$export$c9058316764c140e(...refs) {
  if (refs.length === 1 && refs[0]) return refs[0];
  return (value) => {
    for (let ref of refs) {
      if (typeof ref === "function") ref(value);
      else if (ref != null) ref.current = value;
    }
  };
}

// node_modules/@react-aria/utils/dist/focusWithoutScrolling.mjs
function $7215afc6de606d6b$export$de79e2c695e052f3(element4) {
  if ($7215afc6de606d6b$var$supportsPreventScroll()) element4.focus({
    preventScroll: true
  });
  else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element4);
    element4.focus();
    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
var $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      let focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          $7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch {
    }
  }
  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element4) {
  let parent = element4.parentNode;
  let scrollableElements = [];
  let rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let { element: element4, scrollTop, scrollLeft } of scrollableElements) {
    element4.scrollTop = scrollTop;
    element4.scrollLeft = scrollLeft;
  }
}

// node_modules/@react-aria/utils/dist/platform.mjs
function $c87311424ea30a05$var$testUserAgent(re3) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re3.test(brand.brand))) || re3.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re3) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re3.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function $c87311424ea30a05$var$cached(fn2) {
  if (false) return fn2;
  let res = null;
  return () => {
    if (res == null) res = fn2();
    return res;
  };
}
var $c87311424ea30a05$export$9ac100e40613ea10 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
});
var $c87311424ea30a05$export$186c6964ca17d99 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
});
var $c87311424ea30a05$export$7bef049ce92e4224 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
});
var $c87311424ea30a05$export$fedb369cb70207f1 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
});
var $c87311424ea30a05$export$e1865c3bedcd822b = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
});
var $c87311424ea30a05$export$78551043582a6a98 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
});
var $c87311424ea30a05$export$6446a186d09e379e = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
});
var $c87311424ea30a05$export$a11b0059900ceec8 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
});
var $c87311424ea30a05$export$b7d78993b74f766d = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Firefox/i);
});

// node_modules/@react-aria/utils/dist/openLink.mjs
var import_react93 = __toESM(require_react(), 1);
var $ea8dcbcb9ea1b556$var$RouterContext = (0, import_react93.createContext)({
  isNative: true,
  open: $ea8dcbcb9ea1b556$var$openSyntheticLink,
  useHref: (href) => href
});
function $ea8dcbcb9ea1b556$export$95185d699e05d4d7(target, modifiers, setOpening = true) {
  var _window_event_type, _window_event;
  let { metaKey, ctrlKey, altKey, shiftKey } = modifiers;
  if ((0, $c87311424ea30a05$export$b7d78993b74f766d)() && ((_window_event = window.event) === null || _window_event === void 0 ? void 0 : (_window_event_type = _window_event.type) === null || _window_event_type === void 0 ? void 0 : _window_event_type.startsWith("key")) && target.target === "_blank") {
    if ((0, $c87311424ea30a05$export$9ac100e40613ea10)()) metaKey = true;
    else ctrlKey = true;
  }
  let event = (0, $c87311424ea30a05$export$78551043582a6a98)() && (0, $c87311424ea30a05$export$9ac100e40613ea10)() && !(0, $c87311424ea30a05$export$7bef049ce92e4224)() && true ? new KeyboardEvent("keydown", {
    keyIdentifier: "Enter",
    metaKey,
    ctrlKey,
    altKey,
    shiftKey
  }) : new MouseEvent("click", {
    metaKey,
    ctrlKey,
    altKey,
    shiftKey,
    bubbles: true,
    cancelable: true
  });
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = setOpening;
  (0, $7215afc6de606d6b$export$de79e2c695e052f3)(target);
  target.dispatchEvent(event);
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
}
$ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
function $ea8dcbcb9ea1b556$var$getSyntheticLink(target, open) {
  if (target instanceof HTMLAnchorElement) open(target);
  else if (target.hasAttribute("data-href")) {
    let link3 = document.createElement("a");
    link3.href = target.getAttribute("data-href");
    if (target.hasAttribute("data-target")) link3.target = target.getAttribute("data-target");
    if (target.hasAttribute("data-rel")) link3.rel = target.getAttribute("data-rel");
    if (target.hasAttribute("data-download")) link3.download = target.getAttribute("data-download");
    if (target.hasAttribute("data-ping")) link3.ping = target.getAttribute("data-ping");
    if (target.hasAttribute("data-referrer-policy")) link3.referrerPolicy = target.getAttribute("data-referrer-policy");
    target.appendChild(link3);
    open(link3);
    target.removeChild(link3);
  }
}
function $ea8dcbcb9ea1b556$var$openSyntheticLink(target, modifiers) {
  $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link3) => $ea8dcbcb9ea1b556$export$95185d699e05d4d7(link3, modifiers));
}

// node_modules/@react-aria/utils/dist/runAfterTransition.mjs
var $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map();
var $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  function isTransitionEvent(event) {
    return "propertyName" in event;
  }
  let onTransitionStart = (e) => {
    if (!isTransitionEvent(e) || !e.target) return;
    let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = /* @__PURE__ */ new Set();
      $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      e.target.addEventListener("transitioncancel", onTransitionEnd, {
        once: true
      });
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = (e) => {
    if (!isTransitionEvent(e) || !e.target) return;
    let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks) cb();
      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") $bbed8b41f857bcc0$var$setupGlobalEvents();
  else document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
}
function $bbed8b41f857bcc0$export$24490316f764c430(fn2) {
  requestAnimationFrame(() => {
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn2();
    else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn2);
  });
}

// node_modules/@react-aria/utils/dist/useDrag1D.mjs
var import_react94 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useGlobalListeners.mjs
var import_react95 = __toESM(require_react(), 1);
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, import_react95.useRef)(/* @__PURE__ */ new Map());
  let addGlobalListener = (0, import_react95.useCallback)((eventTarget, type, listener, options2) => {
    let fn2 = (options2 === null || options2 === void 0 ? void 0 : options2.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type,
      eventTarget,
      fn: fn2,
      options: options2
    });
    eventTarget.addEventListener(type, fn2, options2);
  }, []);
  let removeGlobalListener = (0, import_react95.useCallback)((eventTarget, type, listener, options2) => {
    var _globalListeners_current_get;
    let fn2 = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn2, options2);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, import_react95.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [
    removeGlobalListener
  ]);
  (0, import_react95.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [
    removeAllGlobalListeners
  ]);
  return {
    addGlobalListener,
    removeGlobalListener,
    removeAllGlobalListeners
  };
}

// node_modules/@react-aria/utils/dist/useObjectRef.mjs
var import_react96 = __toESM(require_react(), 1);
function $df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0, import_react96.useRef)(null);
  return (0, import_react96.useMemo)(() => ({
    get current() {
      return objRef.current;
    },
    set current(value) {
      objRef.current = value;
      if (typeof forwardedRef === "function") forwardedRef(value);
      else if (forwardedRef) forwardedRef.current = value;
    }
  }), [
    forwardedRef
  ]);
}

// node_modules/@react-aria/utils/dist/useUpdateEffect.mjs
var import_react97 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useUpdateLayoutEffect.mjs
var import_react98 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useResizeObserver.mjs
var import_react99 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useSyncRef.mjs
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        if (context.ref) context.ref.current = null;
      };
    }
  });
}

// node_modules/@react-aria/utils/dist/useViewportSize.mjs
var import_react100 = __toESM(require_react(), 1);
var $5df64b3807dc15ee$var$visualViewport = typeof document !== "undefined" && window.visualViewport;

// node_modules/@react-aria/utils/dist/useDescription.mjs
var import_react101 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useEvent.mjs
var import_react102 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/isVirtualEvent.mjs
function $6a7db85432448f7f$export$60278871457622de(event) {
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  if ((0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  return !(0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

// node_modules/@react-aria/utils/dist/useDeepMemo.mjs
var import_react103 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useFormReset.mjs
var import_react104 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useLoadMore.mjs
var import_react105 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/inertValue.mjs
var import_react106 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/animation.mjs
var import_react_dom3 = __toESM(require_react_dom(), 1);
var import_react107 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/isFocusable.mjs
var $b4b717babfbb907b$var$focusableElements = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  '[contenteditable]:not([contenteditable^="false"])'
];
var $b4b717babfbb907b$var$FOCUSABLE_ELEMENT_SELECTOR = $b4b717babfbb907b$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
$b4b717babfbb907b$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
var $b4b717babfbb907b$var$TABBABLE_ELEMENT_SELECTOR = $b4b717babfbb907b$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $b4b717babfbb907b$export$4c063cf1350e6fed(element4) {
  return element4.matches($b4b717babfbb907b$var$FOCUSABLE_ELEMENT_SELECTOR);
}
function $b4b717babfbb907b$export$bebd5a1431fec25d(element4) {
  return element4.matches($b4b717babfbb907b$var$TABBABLE_ELEMENT_SELECTOR);
}

// node_modules/@react-stately/utils/dist/useControlledState.mjs
var import_react108 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/isElementVisible.mjs
function $645f2e67b85a24c9$var$isStyleVisible(element4) {
  const windowObject = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element4);
  if (!(element4 instanceof windowObject.HTMLElement) && !(element4 instanceof windowObject.SVGElement)) return false;
  let { display, visibility } = element4.style;
  let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible) {
    const { getComputedStyle: getComputedStyle3 } = element4.ownerDocument.defaultView;
    let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle3(element4);
    isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible;
}
function $645f2e67b85a24c9$var$isAttributeVisible(element4, childElement) {
  return !element4.hasAttribute("hidden") && // Ignore HiddenSelect when tree walking.
  !element4.hasAttribute("data-react-aria-prevent-focus") && (element4.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element4.hasAttribute("open") : true);
}
function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element4, childElement) {
  return element4.nodeName !== "#comment" && $645f2e67b85a24c9$var$isStyleVisible(element4) && $645f2e67b85a24c9$var$isAttributeVisible(element4, childElement) && (!element4.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element4.parentElement, element4));
}

// node_modules/@react-aria/interactions/dist/utils.mjs
var import_react109 = __toESM(require_react(), 1);
function $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent) {
  let event = nativeEvent;
  event.nativeEvent = nativeEvent;
  event.isDefaultPrevented = () => event.defaultPrevented;
  event.isPropagationStopped = () => event.cancelBubble;
  event.persist = () => {
  };
  return event;
}
function $8a9cb279dc87e130$export$c2b7abe5d61ec696(event, target) {
  Object.defineProperty(event, "target", {
    value: target
  });
  Object.defineProperty(event, "currentTarget", {
    value: target
  });
}
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, import_react109.useRef)({
    isFocused: false,
    observer: null
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  let dispatchBlur = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
  });
  return (0, import_react109.useCallback)((e) => {
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = (e2) => {
        stateRef.current.isFocused = false;
        if (target.disabled) {
          let event = $8a9cb279dc87e130$export$525bc4921d56d4a(e2);
          dispatchBlur(event);
        }
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          var _stateRef_current_observer;
          (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();
          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
          target.dispatchEvent(new FocusEvent("blur", {
            relatedTarget: relatedTargetEl
          }));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true,
            relatedTarget: relatedTargetEl
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: [
          "disabled"
        ]
      });
    }
  }, [
    dispatchBlur
  ]);
}
var $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;
function $8a9cb279dc87e130$export$cabe61c495ee3649(target) {
  while (target && !(0, $b4b717babfbb907b$export$4c063cf1350e6fed)(target)) target = target.parentElement;
  let window2 = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(target);
  let activeElement = window2.document.activeElement;
  if (!activeElement || activeElement === target) return;
  $8a9cb279dc87e130$export$fda7da73ab5d4c48 = true;
  let isRefocusing = false;
  let onBlur = (e) => {
    if (e.target === activeElement || isRefocusing) e.stopImmediatePropagation();
  };
  let onFocusOut = (e) => {
    if (e.target === activeElement || isRefocusing) {
      e.stopImmediatePropagation();
      if (!target && !isRefocusing) {
        isRefocusing = true;
        (0, $7215afc6de606d6b$export$de79e2c695e052f3)(activeElement);
        cleanup();
      }
    }
  };
  let onFocus = (e) => {
    if (e.target === target || isRefocusing) e.stopImmediatePropagation();
  };
  let onFocusIn = (e) => {
    if (e.target === target || isRefocusing) {
      e.stopImmediatePropagation();
      if (!isRefocusing) {
        isRefocusing = true;
        (0, $7215afc6de606d6b$export$de79e2c695e052f3)(activeElement);
        cleanup();
      }
    }
  };
  window2.addEventListener("blur", onBlur, true);
  window2.addEventListener("focusout", onFocusOut, true);
  window2.addEventListener("focusin", onFocusIn, true);
  window2.addEventListener("focus", onFocus, true);
  let cleanup = () => {
    cancelAnimationFrame(raf);
    window2.removeEventListener("blur", onBlur, true);
    window2.removeEventListener("focusout", onFocusOut, true);
    window2.removeEventListener("focusin", onFocusIn, true);
    window2.removeEventListener("focus", onFocus, true);
    $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;
    isRefocusing = false;
  };
  let raf = requestAnimationFrame(cleanup);
  return cleanup;
}

// node_modules/@react-aria/interactions/dist/textSelection.mjs
var $14c0b72509d70225$var$state = "default";
var $14c0b72509d70225$var$savedUserSelect = "";
var $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state === "default") {
      const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(target);
      $14c0b72509d70225$var$savedUserSelect = documentObject.documentElement.style.webkitUserSelect;
      documentObject.documentElement.style.webkitUserSelect = "none";
    }
    $14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    let property = "userSelect" in target.style ? "userSelect" : "webkitUserSelect";
    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style[property]);
    target.style[property] = "none";
  }
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state !== "disabled") return;
    $14c0b72509d70225$var$state = "restoring";
    setTimeout(() => {
      (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
        if ($14c0b72509d70225$var$state === "restoring") {
          const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(target);
          if (documentObject.documentElement.style.webkitUserSelect === "none") documentObject.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
          $14c0b72509d70225$var$savedUserSelect = "";
          $14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
      let property = "userSelect" in target.style ? "userSelect" : "webkitUserSelect";
      if (target.style[property] === "none") target.style[property] = targetOldUserSelect;
      if (target.getAttribute("style") === "") target.removeAttribute("style");
      $14c0b72509d70225$var$modifiedElementMap.delete(target);
    }
  }
}

// node_modules/@react-aria/interactions/dist/context.mjs
var import_react110 = __toESM(require_react(), 1);
var $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, import_react110.default).createContext({
  register: () => {
  }
});
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";

// node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js
function _class_apply_descriptor_get(receiver, descriptor) {
  if (descriptor.get) return descriptor.get.call(receiver);
  return descriptor.value;
}

// node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js
function _class_extract_field_descriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) throw new TypeError("attempted to " + action + " private field on non-instance");
  return privateMap.get(receiver);
}

// node_modules/@swc/helpers/esm/_class_private_field_get.js
function _class_private_field_get(receiver, privateMap) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
  return _class_apply_descriptor_get(receiver, descriptor);
}

// node_modules/@swc/helpers/esm/_check_private_redeclaration.js
function _check_private_redeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}

// node_modules/@swc/helpers/esm/_class_private_field_init.js
function _class_private_field_init(obj, privateMap, value) {
  _check_private_redeclaration(obj, privateMap);
  privateMap.set(obj, value);
}

// node_modules/@swc/helpers/esm/_class_apply_descriptor_set.js
function _class_apply_descriptor_set(receiver, descriptor, value) {
  if (descriptor.set) descriptor.set.call(receiver, value);
  else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}

// node_modules/@swc/helpers/esm/_class_private_field_set.js
function _class_private_field_set(receiver, privateMap, value) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
  _class_apply_descriptor_set(receiver, descriptor, value);
  return value;
}

// node_modules/@react-aria/interactions/dist/usePress.mjs
var import_react_dom4 = __toESM(require_react_dom(), 1);
var import_react111 = __toESM(require_react(), 1);
function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  let context = (0, import_react111.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  if (context) {
    let { register, ...contextProps } = context;
    props = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(contextProps, props);
    register();
  }
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, props.ref);
  return props;
}
var $f6c31cce2adf654f$var$_shouldStopPropagation = /* @__PURE__ */ new WeakMap();
var $f6c31cce2adf654f$var$PressEvent = class {
  continuePropagation() {
    (0, _class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);
  }
  get shouldStopPropagation() {
    return (0, _class_private_field_get)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);
  }
  constructor(type, pointerType, originalEvent, state) {
    (0, _class_private_field_init)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {
      writable: true,
      value: void 0
    });
    (0, _class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);
    var _state_target;
    let currentTarget = (_state_target = state === null || state === void 0 ? void 0 : state.target) !== null && _state_target !== void 0 ? _state_target : originalEvent.currentTarget;
    const rect = currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.getBoundingClientRect();
    let x2, y2 = 0;
    let clientX, clientY = null;
    if (originalEvent.clientX != null && originalEvent.clientY != null) {
      clientX = originalEvent.clientX;
      clientY = originalEvent.clientY;
    }
    if (rect) {
      if (clientX != null && clientY != null) {
        x2 = clientX - rect.left;
        y2 = clientY - rect.top;
      } else {
        x2 = rect.width / 2;
        y2 = rect.height / 2;
      }
    }
    this.type = type;
    this.pointerType = pointerType;
    this.target = originalEvent.currentTarget;
    this.shiftKey = originalEvent.shiftKey;
    this.metaKey = originalEvent.metaKey;
    this.ctrlKey = originalEvent.ctrlKey;
    this.altKey = originalEvent.altKey;
    this.x = x2;
    this.y = y2;
  }
};
var $f6c31cce2adf654f$var$LINK_CLICKED = Symbol("linkClicked");
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let { onPress, onPressChange, onPressStart, onPressEnd, onPressUp, onClick, isDisabled, isPressed: isPressedProp, preventFocusOnPress, shouldCancelOnPointerExit, allowTextSelectionOnPress, ref: domRef, ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);
  let [isPressed, setPressed] = (0, import_react111.useState)(false);
  let ref = (0, import_react111.useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    didFirePressStart: false,
    isTriggeringEvent: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null,
    disposables: []
  });
  let { addGlobalListener, removeAllGlobalListeners } = (0, $03deb23ff14920c4$export$4eaf04e54aa8eed6)();
  let triggerPressStart = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    let state = ref.current;
    if (isDisabled || state.didFirePressStart) return false;
    let shouldStopPropagation = true;
    state.isTriggeringEvent = true;
    if (onPressStart) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressstart", pointerType, originalEvent);
      onPressStart(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange) onPressChange(true);
    state.isTriggeringEvent = false;
    state.didFirePressStart = true;
    setPressed(true);
    return shouldStopPropagation;
  });
  let triggerPressEnd = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType, wasPressed = true) => {
    let state = ref.current;
    if (!state.didFirePressStart) return false;
    state.didFirePressStart = false;
    state.isTriggeringEvent = true;
    let shouldStopPropagation = true;
    if (onPressEnd) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressend", pointerType, originalEvent);
      onPressEnd(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange) onPressChange(false);
    setPressed(false);
    if (onPress && wasPressed && !isDisabled) {
      let event = new $f6c31cce2adf654f$var$PressEvent("press", pointerType, originalEvent);
      onPress(event);
      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);
    }
    state.isTriggeringEvent = false;
    return shouldStopPropagation;
  });
  let triggerPressUp = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    let state = ref.current;
    if (isDisabled) return false;
    if (onPressUp) {
      state.isTriggeringEvent = true;
      let event = new $f6c31cce2adf654f$var$PressEvent("pressup", pointerType, originalEvent);
      onPressUp(event);
      state.isTriggeringEvent = false;
      return event.shouldStopPropagation;
    }
    return true;
  });
  let cancel = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    let state = ref.current;
    if (state.isPressed && state.target) {
      if (state.didFirePressStart && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
      state.isPressed = false;
      state.isOverTarget = false;
      state.activePointerId = null;
      state.pointerType = null;
      removeAllGlobalListeners();
      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
      for (let dispose of state.disposables) dispose();
      state.disposables = [];
    }
  });
  let cancelOnPointerExit = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    if (shouldCancelOnPointerExit) cancel(e);
  });
  let triggerClick = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    onClick === null || onClick === void 0 ? void 0 : onClick(e);
  });
  let triggerSyntheticClick = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e, target) => {
    if (onClick) {
      let event = new MouseEvent("click", e);
      (0, $8a9cb279dc87e130$export$c2b7abe5d61ec696)(event, target);
      onClick((0, $8a9cb279dc87e130$export$525bc4921d56d4a)(event));
    }
  });
  let pressProps = (0, import_react111.useMemo)(() => {
    let state = ref.current;
    let pressProps2 = {
      onKeyDown(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && (0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) {
          var _state_metaKeyEvents;
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent), e.key)) e.preventDefault();
          let shouldStopPropagation = true;
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            state.pointerType = "keyboard";
            shouldStopPropagation = triggerPressStart(e, "keyboard");
            let originalTarget = e.currentTarget;
            let pressUp = (e2) => {
              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e2, originalTarget) && !e2.repeat && (0, $d4ee10de306f2510$export$4282f70798064fe0)(originalTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e2)) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e2), "keyboard");
            };
            addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "keyup", (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(pressUp, onKeyUp), true);
          }
          if (shouldStopPropagation) e.stopPropagation();
          if (e.metaKey && (0, $c87311424ea30a05$export$9ac100e40613ea10)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);
        } else if (e.key === "Meta") state.metaKeyEvents = /* @__PURE__ */ new Map();
      },
      onClick(e) {
        if (e && !(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $ea8dcbcb9ea1b556$export$95185d699e05d4d7).isOpening) {
          let shouldStopPropagation = true;
          if (isDisabled) e.preventDefault();
          if (!state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === "virtual" || (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent))) {
            let stopPressStart = triggerPressStart(e, "virtual");
            let stopPressUp = triggerPressUp(e, "virtual");
            let stopPressEnd = triggerPressEnd(e, "virtual");
            triggerClick(e);
            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;
          } else if (state.isPressed && state.pointerType !== "keyboard") {
            let pointerType = state.pointerType || e.nativeEvent.pointerType || "virtual";
            shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createEvent(e.currentTarget, e), pointerType, true);
            state.isOverTarget = false;
            triggerClick(e);
            cancel(e);
          }
          state.ignoreEmulatedMouseEvents = false;
          if (shouldStopPropagation) e.stopPropagation();
        }
      }
    };
    let onKeyUp = (e) => {
      var _state_metaKeyEvents;
      if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        var _state_metaKeyEvents1;
        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), e.key)) e.preventDefault();
        let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
        let wasPressed = (0, $d4ee10de306f2510$export$4282f70798064fe0)(state.target, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e));
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard", wasPressed);
        if (wasPressed) triggerSyntheticClick(e, state.target);
        removeAllGlobalListeners();
        if (e.key !== "Enter" && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && (0, $d4ee10de306f2510$export$4282f70798064fe0)(state.target, target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {
          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;
          (0, $ea8dcbcb9ea1b556$export$95185d699e05d4d7)(state.target, e, false);
        }
        state.isPressed = false;
        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);
      } else if (e.key === "Meta" && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {
        var _state_target;
        let events = state.metaKeyEvents;
        state.metaKeyEvents = void 0;
        for (let event of events.values()) (_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent("keyup", event));
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps2.onPointerDown = (e) => {
        if (e.button !== 0 || !(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if ((0, $6a7db85432448f7f$export$29bf1b5f2c56cf63)(e.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        state.pointerType = e.pointerType;
        let shouldStopPropagation = true;
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
          shouldStopPropagation = triggerPressStart(e, state.pointerType);
          let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent);
          if ("releasePointerCapture" in target) target.releasePointerCapture(e.pointerId);
          addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "pointerup", onPointerUp, false);
          addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "pointercancel", onPointerCancel, false);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseDown = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (e.button === 0) {
          if (preventFocusOnPress) {
            let dispose = (0, $8a9cb279dc87e130$export$cabe61c495ee3649)(e.target);
            if (dispose) state.disposables.push(dispose);
          }
          e.stopPropagation();
        }
      };
      pressProps2.onPointerUp = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent)) || state.pointerType === "virtual") return;
        if (e.button === 0) triggerPressUp(e, state.pointerType || e.pointerType);
      };
      pressProps2.onPointerEnter = (e) => {
        if (e.pointerId === state.activePointerId && state.target && !state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = true;
          triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
        }
      };
      pressProps2.onPointerLeave = (e) => {
        if (e.pointerId === state.activePointerId && state.target && state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = false;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          cancelOnPointerExit(e);
        }
      };
      let onPointerUp = (e) => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {
          if ((0, $d4ee10de306f2510$export$4282f70798064fe0)(state.target, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e)) && state.pointerType != null) {
            let clicked = false;
            let timeout = setTimeout(() => {
              if (state.isPressed && state.target instanceof HTMLElement) {
                if (clicked) cancel(e);
                else {
                  (0, $7215afc6de606d6b$export$de79e2c695e052f3)(state.target);
                  state.target.click();
                }
              }
            }, 80);
            addGlobalListener(e.currentTarget, "click", () => clicked = true, true);
            state.disposables.push(() => clearTimeout(timeout));
          } else cancel(e);
          state.isOverTarget = false;
        }
      };
      let onPointerCancel = (e) => {
        cancel(e);
      };
      pressProps2.onDragStart = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        cancel(e);
      };
    } else if (false) {
      pressProps2.onMouseDown = (e) => {
        if (e.button !== 0 || !(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (state.ignoreEmulatedMouseEvents) {
          e.stopPropagation();
          return;
        }
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent) ? "virtual" : "mouse";
        let shouldStopPropagation = (0, import_react_dom4.flushSync)(() => triggerPressStart(e, state.pointerType));
        if (shouldStopPropagation) e.stopPropagation();
        if (preventFocusOnPress) {
          let dispose = (0, $8a9cb279dc87e130$export$cabe61c495ee3649)(e.target);
          if (dispose) state.disposables.push(dispose);
        }
        addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "mouseup", onMouseUp, false);
      };
      pressProps2.onMouseEnter = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        let shouldStopPropagation = true;
        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
          state.isOverTarget = true;
          shouldStopPropagation = triggerPressStart(e, state.pointerType);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseLeave = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        let shouldStopPropagation = true;
        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
          state.isOverTarget = false;
          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
          cancelOnPointerExit(e);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseUp = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || "mouse");
      };
      let onMouseUp = (e) => {
        if (e.button !== 0) return;
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if (state.target && state.target.contains(e.target) && state.pointerType != null) ;
        else cancel(e);
        state.isOverTarget = false;
      };
      pressProps2.onTouchStart = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = "touch";
        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
        let shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
        if (shouldStopPropagation) e.stopPropagation();
        addGlobalListener((0, $431fbd86ca7dc216$export$f21a1ffae260145a)(e.currentTarget), "scroll", onScroll, true);
      };
      pressProps2.onTouchMove = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (!state.isPressed) {
          e.stopPropagation();
          return;
        }
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        let shouldStopPropagation = true;
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget && state.pointerType != null) {
            state.isOverTarget = true;
            shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = false;
          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);
          cancelOnPointerExit($f6c31cce2adf654f$var$createTouchEvent(state.target, e));
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onTouchEnd = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (!state.isPressed) {
          e.stopPropagation();
          return;
        }
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        let shouldStopPropagation = true;
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {
          triggerPressUp($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
          triggerSyntheticClick(e.nativeEvent, state.target);
        } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);
        if (shouldStopPropagation) e.stopPropagation();
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (state.target && !allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        removeAllGlobalListeners();
      };
      pressProps2.onTouchCancel = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        e.stopPropagation();
        if (state.isPressed) cancel($f6c31cce2adf654f$var$createTouchEvent(state.target, e));
      };
      let onScroll = (e) => {
        if (state.isPressed && (0, $d4ee10de306f2510$export$4282f70798064fe0)((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };
      pressProps2.onDragStart = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        cancel(e);
      };
    }
    return pressProps2;
  }, [
    addGlobalListener,
    isDisabled,
    preventFocusOnPress,
    removeAllGlobalListeners,
    allowTextSelectionOnPress,
    cancel,
    cancelOnPointerExit,
    triggerPressEnd,
    triggerPressStart,
    triggerPressUp,
    triggerClick,
    triggerSyntheticClick
  ]);
  (0, import_react111.useEffect)(() => {
    let element4 = domRef === null || domRef === void 0 ? void 0 : domRef.current;
    if (element4 && element4 instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element4).Element) {
      let style = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element4).getComputedStyle(element4);
      if (style.touchAction === "auto")
        element4.style.touchAction = "pan-x pan-y pinch-zoom";
    }
  }, [
    domRef
  ]);
  (0, import_react111.useEffect)(() => {
    let state = ref.current;
    return () => {
      var _state_target;
      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_state_target = state.target) !== null && _state_target !== void 0 ? _state_target : void 0);
      for (let dispose of state.disposables) dispose();
      state.disposables = [];
    };
  }, [
    allowTextSelectionOnPress
  ]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, pressProps)
  };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const { key, code: code4 } = event;
  const element4 = currentTarget;
  const role = element4.getAttribute("role");
  return (key === "Enter" || key === " " || key === "Spacebar" || code4 === "Space") && !(element4 instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element4).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element4, key) || element4 instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element4).HTMLTextAreaElement || element4.isContentEditable) && // Links should only trigger with Enter key
  !((role === "link" || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element4)) && key !== "Enter");
}
function $f6c31cce2adf654f$var$createEvent(target, e) {
  let clientX = e.clientX;
  let clientY = e.clientY;
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey,
    clientX,
    clientY
  };
}
function $f6c31cce2adf654f$var$shouldPreventDefaultUp(target) {
  if (target instanceof HTMLInputElement) return false;
  if (target instanceof HTMLButtonElement) return target.type !== "submit" && target.type !== "reset";
  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;
  return true;
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);
  return $f6c31cce2adf654f$var$shouldPreventDefaultUp(target);
}
var $f6c31cce2adf654f$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $f6c31cce2adf654f$var$isValidInputKey(target, key) {
  return target.type === "checkbox" || target.type === "radio" ? key === " " : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}

// node_modules/@react-aria/interactions/dist/useFocusVisible.mjs
var import_react112 = __toESM(require_react(), 1);
var $507fabe10e71c6fb$var$currentModality = null;
var $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
var $507fabe10e71c6fb$export$d90243b58daecda7 = /* @__PURE__ */ new Map();
var $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
var $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
function $507fabe10e71c6fb$var$isValidKey(e) {
  return !(e.metaKey || !(0, $c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if ($507fabe10e71c6fb$var$isValidKey(e)) {
    $507fabe10e71c6fb$var$currentModality = "keyboard";
    $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e) {
  $507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function $507fabe10e71c6fb$var$handleClickEvent(e) {
  if ((0, $6a7db85432448f7f$export$60278871457622de)(e)) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e) {
  if (e.target === window || e.target === document || (0, $8a9cb279dc87e130$export$fda7da73ab5d4c48) || !e.isTrusted) return;
  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    $507fabe10e71c6fb$var$currentModality = "virtual";
    $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
  if (0, $8a9cb279dc87e130$export$fda7da73ab5d4c48) return;
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
function $507fabe10e71c6fb$var$setupGlobalFocusEvents(element4) {
  if (typeof window === "undefined" || $507fabe10e71c6fb$export$d90243b58daecda7.get((0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element4))) return;
  const windowObject = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element4);
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element4);
  let focus = windowObject.HTMLElement.prototype.focus;
  windowObject.HTMLElement.prototype.focus = function() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  documentObject.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else if (false) {
    documentObject.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  windowObject.addEventListener("beforeunload", () => {
    $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element4);
  }, {
    once: true
  });
  $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {
    focus
  });
}
var $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element4, loadListener) => {
  const windowObject = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element4);
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element4);
  if (loadListener) documentObject.removeEventListener("DOMContentLoaded", loadListener);
  if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject)) return;
  windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus;
  documentObject.removeEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject.removeEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject.removeEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.removeEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else if (false) {
    documentObject.removeEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject);
};
function $507fabe10e71c6fb$export$2f1888112f558a7d(element4) {
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element4);
  let loadListener;
  if (documentObject.readyState !== "loading") $507fabe10e71c6fb$var$setupGlobalFocusEvents(element4);
  else {
    loadListener = () => {
      $507fabe10e71c6fb$var$setupGlobalFocusEvents(element4);
    };
    documentObject.addEventListener("DOMContentLoaded", loadListener);
  }
  return () => $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element4, loadListener);
}
if (typeof document !== "undefined") $507fabe10e71c6fb$export$2f1888112f558a7d();
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}

// node_modules/@react-aria/interactions/dist/focusSafely.mjs
function $3ad3f6e1647bc98d$export$80f3e147d781571c(element4) {
  const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element4);
  const activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
  if ((0, $507fabe10e71c6fb$export$630ff653c5ada6a9)() === "virtual") {
    let lastFocusedElement = activeElement;
    (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
      if ((0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument) === lastFocusedElement && element4.isConnected) (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element4);
    });
  } else (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element4);
}

// node_modules/@react-aria/interactions/dist/useFocus.mjs
var import_react113 = __toESM(require_react(), 1);
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
  const onBlur = (0, import_react113.useCallback)((e) => {
    if (e.target === e.currentTarget) {
      if (onBlurProp) onBlurProp(e);
      if (onFocusChange) onFocusChange(false);
      return true;
    }
  }, [
    onBlurProp,
    onFocusChange
  ]);
  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  const onFocus = (0, import_react113.useCallback)((e) => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(e.target);
    const activeElement = ownerDocument ? (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument) : (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)();
    if (e.target === e.currentTarget && activeElement === (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent)) {
      if (onFocusProp) onFocusProp(e);
      if (onFocusChange) onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [
    onFocusChange,
    onFocusProp,
    onSyntheticFocus
  ]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0
    }
  };
}

// node_modules/@react-aria/interactions/dist/createEventHandler.mjs
function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return void 0;
  let shouldStopPropagation = true;
  return (e) => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        if (shouldStopPropagation && true) console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
        else shouldStopPropagation = true;
      },
      continuePropagation() {
        shouldStopPropagation = false;
      },
      isPropagationStopped() {
        return shouldStopPropagation;
      }
    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}

// node_modules/@react-aria/interactions/dist/useKeyboard.mjs
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
    }
  };
}

// node_modules/@react-aria/interactions/dist/useFocusable.mjs
var import_react114 = __toESM(require_react(), 1);
var $f645667febf57a63$export$f9762fab77588ecb = (0, import_react114.default).createContext(null);
function $f645667febf57a63$var$useFocusableContext(ref) {
  let context = (0, import_react114.useContext)($f645667febf57a63$export$f9762fab77588ecb) || {};
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, ref);
  let { ref: _2, ...otherProps } = context;
  return otherProps;
}
var $f645667febf57a63$export$13f3202a3e5ddd5 = (0, import_react114.default).forwardRef(function FocusableProvider(props, ref) {
  let { children, ...otherProps } = props;
  let objRef = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let context = {
    ...otherProps,
    ref: objRef
  };
  return (0, import_react114.default).createElement($f645667febf57a63$export$f9762fab77588ecb.Provider, {
    value: context
  }, children);
});
function $f645667febf57a63$export$4c014de7c8940b4c(props, domRef) {
  let { focusProps } = (0, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6)(props);
  let { keyboardProps } = (0, $46d819fcbaf35654$export$8f71654801c2f7cd)(props);
  let interactions = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusProps, keyboardProps);
  let domProps = $f645667febf57a63$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0, import_react114.useRef)(props.autoFocus);
  (0, import_react114.useEffect)(() => {
    if (autoFocusRef.current && domRef.current) (0, $3ad3f6e1647bc98d$export$80f3e147d781571c)(domRef.current);
    autoFocusRef.current = false;
  }, [
    domRef
  ]);
  let tabIndex = props.excludeFromTabOrder ? -1 : 0;
  if (props.isDisabled) tabIndex = void 0;
  return {
    focusableProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)({
      ...interactions,
      tabIndex
    }, interactionProps)
  };
}
var $f645667febf57a63$export$35a3bebf7ef2d934 = (0, import_react114.forwardRef)(({ children, ...props }, ref) => {
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let { focusableProps } = $f645667febf57a63$export$4c014de7c8940b4c(props, ref);
  let child = (0, import_react114.default).Children.only(children);
  (0, import_react114.useEffect)(() => {
    if (false) return;
    let el = ref.current;
    if (!el || !(el instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(el).Element)) {
      console.error("<Focusable> child must forward its ref to a DOM element.");
      return;
    }
    if (!props.isDisabled && !(0, $b4b717babfbb907b$export$4c063cf1350e6fed)(el)) {
      console.warn("<Focusable> child must be focusable. Please ensure the tabIndex prop is passed through.");
      return;
    }
    if (el.localName !== "button" && el.localName !== "input" && el.localName !== "select" && el.localName !== "textarea" && el.localName !== "a" && el.localName !== "area" && el.localName !== "summary" && el.localName !== "img" && el.localName !== "svg") {
      let role = el.getAttribute("role");
      if (!role) console.warn("<Focusable> child must have an interactive ARIA role.");
      else if (
        // https://w3c.github.io/aria/#widget_roles
        role !== "application" && role !== "button" && role !== "checkbox" && role !== "combobox" && role !== "gridcell" && role !== "link" && role !== "menuitem" && role !== "menuitemcheckbox" && role !== "menuitemradio" && role !== "option" && role !== "radio" && role !== "searchbox" && role !== "separator" && role !== "slider" && role !== "spinbutton" && role !== "switch" && role !== "tab" && role !== "tabpanel" && role !== "textbox" && role !== "treeitem" && // aria-describedby is also announced on these roles
        role !== "img" && role !== "meter" && role !== "progressbar"
      ) console.warn(`<Focusable> child must have an interactive ARIA role. Got "${role}".`);
    }
  }, [
    ref,
    props.isDisabled
  ]);
  let childRef = parseInt((0, import_react114.default).version, 10) < 19 ? child.ref : child.props.ref;
  return (0, import_react114.default).cloneElement(child, {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, child.props),
    // @ts-ignore
    ref: (0, $5dc95899b306f630$export$c9058316764c140e)(childRef, ref)
  });
});

// node_modules/@react-aria/interactions/dist/Pressable.mjs
var import_react115 = __toESM(require_react(), 1);
var $3b117e43dc0ca95d$export$27c701ed9e449e99 = (0, import_react115.default).forwardRef(({ children, ...props }, ref) => {
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let { pressProps } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    ...props,
    ref
  });
  let { focusableProps } = (0, $f645667febf57a63$export$4c014de7c8940b4c)(props, ref);
  let child = (0, import_react115.default).Children.only(children);
  (0, import_react115.useEffect)(() => {
    if (false) return;
    let el = ref.current;
    if (!el || !(el instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(el).Element)) {
      console.error("<Pressable> child must forward its ref to a DOM element.");
      return;
    }
    if (!(0, $b4b717babfbb907b$export$4c063cf1350e6fed)(el)) {
      console.warn("<Pressable> child must be focusable. Please ensure the tabIndex prop is passed through.");
      return;
    }
    if (el.localName !== "button" && el.localName !== "input" && el.localName !== "select" && el.localName !== "textarea" && el.localName !== "a" && el.localName !== "area" && el.localName !== "summary") {
      let role = el.getAttribute("role");
      if (!role) console.warn("<Pressable> child must have an interactive ARIA role.");
      else if (
        // https://w3c.github.io/aria/#widget_roles
        role !== "application" && role !== "button" && role !== "checkbox" && role !== "combobox" && role !== "gridcell" && role !== "link" && role !== "menuitem" && role !== "menuitemcheckbox" && role !== "menuitemradio" && role !== "option" && role !== "radio" && role !== "searchbox" && role !== "separator" && role !== "slider" && role !== "spinbutton" && role !== "switch" && role !== "tab" && role !== "textbox" && role !== "treeitem"
      ) console.warn(`<Pressable> child must have an interactive ARIA role. Got "${role}".`);
    }
  }, [
    ref
  ]);
  let childRef = parseInt((0, import_react115.default).version, 10) < 19 ? child.ref : child.props.ref;
  return (0, import_react115.default).cloneElement(child, {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps, child.props),
    // @ts-ignore
    ref: (0, $5dc95899b306f630$export$c9058316764c140e)(childRef, ref)
  });
});

// node_modules/@react-aria/interactions/dist/PressResponder.mjs
var import_react116 = __toESM(require_react(), 1);
var $f1ab8c75478c6f73$export$3351871ee4b288b8 = (0, import_react116.default).forwardRef(({ children, ...props }, ref) => {
  let isRegistered = (0, import_react116.useRef)(false);
  let prevContext = (0, import_react116.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref));
  let context = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(prevContext || {}, {
    ...props,
    ref,
    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }
  });
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(prevContext, ref);
  (0, import_react116.useEffect)(() => {
    if (!isRegistered.current) {
      if (true) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
      isRegistered.current = true;
    }
  }, []);
  return (0, import_react116.default).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
    value: context
  }, children);
});

// node_modules/@react-aria/interactions/dist/useFocusWithin.mjs
var import_react117 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useHover.mjs
var import_react118 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useInteractOutside.mjs
var import_react119 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useMove.mjs
var import_react120 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useScrollWheel.mjs
var import_react121 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useLongPress.mjs
var import_react122 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/FocusScope.mjs
var import_react123 = __toESM(require_react(), 1);
var $9bf71ea28793e738$var$FocusContext = (0, import_react123.default).createContext(null);
var $9bf71ea28793e738$var$RESTORE_FOCUS_EVENT = "react-aria-focus-scope-restore";
var $9bf71ea28793e738$var$activeScope = null;
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let { children, contain, restoreFocus, autoFocus } = props;
  let startRef = (0, import_react123.useRef)(null);
  let endRef = (0, import_react123.useRef)(null);
  let scopeRef = (0, import_react123.useRef)([]);
  let { parentNode } = (0, import_react123.useContext)($9bf71ea28793e738$var$FocusContext) || {};
  let node2 = (0, import_react123.useMemo)(() => new $9bf71ea28793e738$var$TreeNode({
    scopeRef
  }), [
    scopeRef
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;
    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {
      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
      if (activeNode) parent = activeNode;
    }
    parent.addChild(node2);
    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node2);
  }, [
    node2,
    parentNode
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let node3 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (node3) node3.contain = !!contain;
  }, [
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    var _startRef_current;
    let node3 = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;
    let nodes = [];
    let stopPropagation = (e) => e.stopPropagation();
    while (node3 && node3 !== endRef.current) {
      nodes.push(node3);
      node3.addEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
      node3 = node3.nextSibling;
    }
    scopeRef.current = nodes;
    return () => {
      for (let node4 of nodes) node4.removeEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
    };
  }, [
    children
  ]);
  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  (0, import_react123.useEffect)(() => {
    const activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0));
    let scope = null;
    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {
      for (let node3 of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if (node3.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node3.scopeRef.current)) scope = node3;
      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;
    }
  }, [
    scopeRef
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;
      var _focusScopeTree_getTreeNode_parent_scopeRef;
      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;
      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;
      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
    };
  }, [
    scopeRef
  ]);
  let focusManager = (0, import_react123.useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);
  let value = (0, import_react123.useMemo)(() => ({
    focusManager,
    parentNode: node2
  }), [
    node2,
    focusManager
  ]);
  return (0, import_react123.default).createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value
  }, (0, import_react123.default).createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, (0, import_react123.default).createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap: wrap3, accept } = opts;
      var _scope_;
      let node2 = from || (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : void 0));
      let sentinel = scope[0].previousElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node2, scope) ? node2 : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap3) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap: wrap3, accept } = opts;
      var _scope_;
      let node2 = from || (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : void 0));
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node2, scope) ? node2 : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap3) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.contain) return false;
    scope = scope.parent;
  }
  return true;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0, import_react123.useRef)(void 0);
  let raf = (0, import_react123.useRef)(void 0);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    if (!contain) {
      if (raf.current) {
        cancelAnimationFrame(raf.current);
        raf.current = void 0;
      }
      return;
    }
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
      let focusedElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
      let scope2 = scopeRef.current;
      if (!scope2 || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope2)) return;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope2);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable: true
      }, scope2);
      if (!focusedElement) return;
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope2[scope2.length - 1].nextElementSibling : scope2[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e.preventDefault();
      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus = (e) => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), scopeRef.current)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), scopeRef)) {
        if (focusedNode.current) focusedNode.current.focus();
        else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
    };
    let onBlur = (e) => {
      if (raf.current) cancelAnimationFrame(raf.current);
      raf.current = requestAnimationFrame(() => {
        let modality = (0, $507fabe10e71c6fb$export$630ff653c5ada6a9)();
        let shouldSkipFocusRestore = (modality === "virtual" || modality === null) && (0, $c87311424ea30a05$export$a11b0059900ceec8)() && (0, $c87311424ea30a05$export$6446a186d09e379e)();
        let activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
        if (!shouldSkipFocusRestore && activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
          if (target && target.isConnected) {
            var _focusedNode_current;
            focusedNode.current = target;
            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();
          } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
        }
      });
    };
    ownerDocument.addEventListener("keydown", onKeyDown, false);
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element4) => element4.addEventListener("focusin", onFocus, false));
    scope === null || scope === void 0 ? void 0 : scope.forEach((element4) => element4.addEventListener("focusout", onBlur, false));
    return () => {
      ownerDocument.removeEventListener("keydown", onKeyDown, false);
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element4) => element4.removeEventListener("focusin", onFocus, false));
      scope === null || scope === void 0 ? void 0 : scope.forEach((element4) => element4.removeEventListener("focusout", onBlur, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      if (raf.current) cancelAnimationFrame(raf.current);
    };
  }, [
    raf
  ]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element4) {
  return $9bf71ea28793e738$var$isElementInChildScope(element4);
}
function $9bf71ea28793e738$var$isElementInScope(element4, scope) {
  if (!element4) return false;
  if (!scope) return false;
  return scope.some((node2) => node2.contains(element4));
}
function $9bf71ea28793e738$var$isElementInChildScope(element4, scope = null) {
  if (element4 instanceof Element && element4.closest("[data-react-aria-top-layer]")) return true;
  for (let { scopeRef: s2 } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {
    if (s2 && $9bf71ea28793e738$var$isElementInScope(element4, s2.current)) return true;
  }
  return false;
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  var _focusScopeTree_getTreeNode;
  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
  while (parent) {
    if (parent.scopeRef === ancestor) return true;
    parent = parent.parent;
  }
  return false;
}
function $9bf71ea28793e738$var$focusElement(element4, scroll = false) {
  if (element4 != null && !scroll) try {
    (0, $3ad3f6e1647bc98d$export$80f3e147d781571c)(element4);
  } catch {
  }
  else if (element4 != null) try {
    element4.focus();
  } catch {
  }
}
function $9bf71ea28793e738$var$getFirstInScope(scope, tabbable = true) {
  let sentinel = scope[0].previousElementSibling;
  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
    tabbable
  }, scope);
  walker.currentNode = sentinel;
  let nextNode = walker.nextNode();
  if (tabbable && !nextNode) {
    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
      tabbable: false
    }, scope);
    walker.currentNode = sentinel;
    nextNode = walker.nextNode();
  }
  return nextNode;
}
function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
  $9bf71ea28793e738$var$focusElement($9bf71ea28793e738$var$getFirstInScope(scope, tabbable));
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = (0, import_react123.default).useRef(autoFocus);
  (0, import_react123.useEffect)(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
      if (!$9bf71ea28793e738$var$isElementInScope((0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument), $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, [
    scopeRef
  ]);
}
function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (restore || contain) return;
    let scope = scopeRef.current;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    let onFocus = (e) => {
      let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
      else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;
    };
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element4) => element4.addEventListener("focusin", onFocus, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element4) => element4.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    restore,
    contain
  ]);
}
function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.nodeToRestore) return false;
    scope = scope.parent;
  }
  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  const nodeToRestoreRef = (0, import_react123.useRef)(typeof document !== "undefined" ? (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0)) : null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    if (!restoreFocus || contain) return;
    let onFocus = () => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument), scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
    };
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element4) => element4.addEventListener("focusin", onFocus, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element4) => element4.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus) return;
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
      let focusedElement = ownerDocument.activeElement;
      if (!$9bf71ea28793e738$var$isElementInChildScope(focusedElement, scopeRef) || !$9bf71ea28793e738$var$shouldRestoreFocus(scopeRef)) return;
      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode) return;
      let nodeToRestore = treeNode.nodeToRestore;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {
        tabbable: true
      });
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nodeToRestore || !nodeToRestore.isConnected || nodeToRestore === ownerDocument.body) {
        nodeToRestore = void 0;
        treeNode.nodeToRestore = void 0;
      }
      if ((!nextElement || !$9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        do
          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
        while ($9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef));
        e.preventDefault();
        e.stopPropagation();
        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
        else if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();
        else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain) ownerDocument.addEventListener("keydown", onKeyDown, true);
    return () => {
      if (!contain) ownerDocument.removeEventListener("keydown", onKeyDown, true);
    };
  }, [
    scopeRef,
    restoreFocus,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus) return;
    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (!treeNode) return;
    var _nodeToRestoreRef_current;
    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : void 0;
    return () => {
      let treeNode2 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode2) return;
      let nodeToRestore = treeNode2.nodeToRestore;
      let activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
      if (restoreFocus && nodeToRestore && (activeElement && $9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef) || activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
        requestAnimationFrame(() => {
          if (ownerDocument.activeElement === ownerDocument.body) {
            let treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.nodeToRestore && treeNode3.nodeToRestore.isConnected) {
                $9bf71ea28793e738$var$restoreFocusToElement(treeNode3.nodeToRestore);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
            treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.scopeRef && treeNode3.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode3.scopeRef)) {
                let node2 = $9bf71ea28793e738$var$getFirstInScope(treeNode3.scopeRef.current, true);
                $9bf71ea28793e738$var$restoreFocusToElement(node2);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
          }
        });
      }
    };
  }, [
    scopeRef,
    restoreFocus
  ]);
}
function $9bf71ea28793e738$var$restoreFocusToElement(node2) {
  if (node2.dispatchEvent(new CustomEvent($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, {
    bubbles: true,
    cancelable: true
  }))) $9bf71ea28793e738$var$focusElement(node2);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root4, opts, scope) {
  let filter2 = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? (0, $b4b717babfbb907b$export$bebd5a1431fec25d) : (0, $b4b717babfbb907b$export$4c063cf1350e6fed);
  let rootElement = (root4 === null || root4 === void 0 ? void 0 : root4.nodeType) === Node.ELEMENT_NODE ? root4 : null;
  let doc = (0, $431fbd86ca7dc216$export$b204af158042fbac)(rootElement);
  let walker = (0, $dfc540311bf7f109$export$4d0f8be8b12a7ef6)(doc, root4 || doc, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node2) {
      var _opts_from;
      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node2)) return NodeFilter.FILTER_REJECT;
      if (filter2(node2) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node2) && (!scope || $9bf71ea28793e738$var$isElementInScope(node2, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node2))) return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
  return walker;
}
var $9bf71ea28793e738$var$Tree = class _$9bf71ea28793e738$var$Tree {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(data) {
    return this.fastMap.get(data);
  }
  addTreeNode(scopeRef, parent, nodeToRestore) {
    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
    if (!parentNode) return;
    let node2 = new $9bf71ea28793e738$var$TreeNode({
      scopeRef
    });
    parentNode.addChild(node2);
    node2.parent = parentNode;
    this.fastMap.set(scopeRef, node2);
    if (nodeToRestore) node2.nodeToRestore = nodeToRestore;
  }
  addNode(node2) {
    this.fastMap.set(node2.scopeRef, node2);
  }
  removeTreeNode(scopeRef) {
    if (scopeRef === null) return;
    let node2 = this.fastMap.get(scopeRef);
    if (!node2) return;
    let parentNode = node2.parent;
    for (let current of this.traverse()) if (current !== node2 && node2.nodeToRestore && current.nodeToRestore && node2.scopeRef && node2.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node2.scopeRef.current)) current.nodeToRestore = node2.nodeToRestore;
    let children = node2.children;
    if (parentNode) {
      parentNode.removeChild(node2);
      if (children.size > 0) children.forEach((child) => parentNode && parentNode.addChild(child));
    }
    this.fastMap.delete(node2.scopeRef);
  }
  // Pre Order Depth First
  *traverse(node2 = this.root) {
    if (node2.scopeRef != null) yield node2;
    if (node2.children.size > 0) for (let child of node2.children) yield* this.traverse(child);
  }
  clone() {
    var _node_parent;
    let newTree = new _$9bf71ea28793e738$var$Tree();
    var _node_parent_scopeRef;
    for (let node2 of this.traverse()) newTree.addTreeNode(node2.scopeRef, (_node_parent_scopeRef = (_node_parent = node2.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node2.nodeToRestore);
    return newTree;
  }
  constructor() {
    this.fastMap = /* @__PURE__ */ new Map();
    this.root = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: null
    });
    this.fastMap.set(null, this.root);
  }
};
var $9bf71ea28793e738$var$TreeNode = class {
  addChild(node2) {
    this.children.add(node2);
    node2.parent = this;
  }
  removeChild(node2) {
    this.children.delete(node2);
    node2.parent = void 0;
  }
  constructor(props) {
    this.children = /* @__PURE__ */ new Set();
    this.contain = false;
    this.scopeRef = props.scopeRef;
  }
};
var $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();

// node_modules/@react-aria/focus/dist/useFocusRing.mjs
var import_react124 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/FocusRing.mjs
var import_react125 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/useHasTabbableChild.mjs
var import_react126 = __toESM(require_react(), 1);

// node_modules/stream-chat-react/dist/components/Modal/icons.js
var import_react127 = __toESM(require_react());
var CloseIconRound = () => import_react127.default.createElement(
  "svg",
  { "data-testid": "close-icon-round", fill: "none", height: "28", viewBox: "0 0 28 28", width: "28", xmlns: "http://www.w3.org/2000/svg" },
  import_react127.default.createElement("rect", { fill: "#72767E", height: "28", rx: "14", width: "28" }),
  import_react127.default.createElement("circle", { cx: "14", cy: "14", fill: "#72767E", r: "12" }),
  import_react127.default.createElement("path", { clipRule: "evenodd", d: "M28 14C28 21.732 21.732 28 14 28C6.26801 28 0 21.732 0 14C0 6.26801 6.26801 0 14 0C21.732 0 28 6.26801 28 14ZM26 14C26 20.6274 20.6274 26 14 26C7.37258 26 2 20.6274 2 14C2 7.37258 7.37258 2 14 2C20.6274 2 26 7.37258 26 14ZM19.59 7L21 8.41L15.41 14L21 19.59L19.59 21L14 15.41L8.41 21L7 19.59L12.59 14L7 8.41L8.41 7L14 12.59L19.59 7Z", fill: "white", fillRule: "evenodd" })
);

// node_modules/stream-chat-react/dist/components/Dialog/ButtonWithSubmenu.js
var import_react129 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Dialog/DialogAnchor.js
var import_react128 = __toESM(require_react());

// node_modules/stream-chat-react/node_modules/react-popper/lib/esm/Popper.js
var React62 = __toESM(require_react());

// node_modules/stream-chat-react/node_modules/react-popper/lib/esm/Manager.js
var React59 = __toESM(require_react());
var ManagerReferenceNodeContext = React59.createContext();
var ManagerReferenceNodeSetterContext = React59.createContext();

// node_modules/stream-chat-react/node_modules/react-popper/lib/esm/utils.js
var React60 = __toESM(require_react());
var fromEntries = function fromEntries2(entries) {
  return entries.reduce(function(acc, _ref) {
    var key = _ref[0], value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
var useIsomorphicLayoutEffect2 = typeof window !== "undefined" && window.document && window.document.createElement ? React60.useLayoutEffect : React60.useEffect;

// node_modules/stream-chat-react/node_modules/react-popper/lib/esm/usePopper.js
var React61 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start2 = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start2, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start2, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element4) {
  return element4 ? (element4.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node2) {
  if (node2 == null) {
    return window;
  }
  if (node2.toString() !== "[object Window]") {
    var ownerDocument = node2.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node2;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node2) {
  var OwnElement = getWindow(node2).Element;
  return node2 instanceof OwnElement || node2 instanceof Element;
}
function isHTMLElement(node2) {
  var OwnElement = getWindow(node2).HTMLElement;
  return node2 instanceof OwnElement || node2 instanceof HTMLElement;
}
function isShadowRoot(node2) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node2).ShadowRoot;
  return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name2) {
    var style = state.styles[name2] || {};
    var attributes = state.attributes[name2] || {};
    var element4 = state.elements[name2];
    if (!isHTMLElement(element4) || !getNodeName(element4)) {
      return;
    }
    Object.assign(element4.style, style);
    Object.keys(attributes).forEach(function(name3) {
      var value = attributes[name3];
      if (value === false) {
        element4.removeAttribute(name3);
      } else {
        element4.setAttribute(name3, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name2) {
      var element4 = state.elements[name2];
      var attributes = state.attributes[name2] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name2) ? state.styles[name2] : initialStyles[name2]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element4) || !getNodeName(element4)) {
        return;
      }
      Object.assign(element4.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element4.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element4, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element4.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element4)) {
    scaleX = element4.offsetWidth > 0 ? round(clientRect.width) / element4.offsetWidth || 1 : 1;
    scaleY = element4.offsetHeight > 0 ? round(clientRect.height) / element4.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element4) ? getWindow(element4) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x2 = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y2 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y2,
    right: x2 + width,
    bottom: y2 + height,
    left: x2,
    x: x2,
    y: y2
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element4) {
  var clientRect = getBoundingClientRect(element4);
  var width = element4.offsetWidth;
  var height = element4.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element4.offsetLeft,
    y: element4.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element4) {
  return getWindow(element4).getComputedStyle(element4);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element4) {
  return ["table", "td", "th"].indexOf(getNodeName(element4)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element4) {
  return ((isElement(element4) ? element4.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element4.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element4) {
  if (getNodeName(element4) === "html") {
    return element4;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element4.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element4.parentNode || // DOM Element detected
    (isShadowRoot(element4) ? element4.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element4)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element4) {
  if (!isHTMLElement(element4) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle2(element4).position === "fixed") {
    return null;
  }
  return element4.offsetParent;
}
function getContainingBlock(element4) {
  var isFirefox2 = /firefox/i.test(getUAString());
  var isIE2 = /Trident/i.test(getUAString());
  if (isIE2 && isHTMLElement(element4)) {
    var elementCss = getComputedStyle2(element4);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element4);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox2 && css.willChange === "filter" || isFirefox2 && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element4) {
  var window2 = getWindow(element4);
  var offsetParent = getTrueOffsetParent(element4);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element4) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v2 = within(min2, value, max2);
  return v2 > max2 ? max2 : v2;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys3) {
  return keys3.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name2 = _ref.name, options2 = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options2.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name2] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options2 = _ref2.options;
  var _options$element = options2.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x2 = _ref.x, y2 = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x2 * dpr) / dpr || 0,
    y: round(y2 * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position3 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x2 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x: x2,
    y: y2
  }) : {
    x: x2,
    y: y2
  };
  x2 = _ref3.x;
  y2 = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position3 === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y2 -= offsetY - popperRect.height;
      y2 *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x2 -= offsetX - popperRect.width;
      x2 *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position: position3
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x2,
    y: y2
  }, getWindow(popper2)) : {
    x: x2,
    y: y2
  };
  x2 = _ref4.x;
  y2 = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x2 + "px, " + y2 + "px)" : "translate3d(" + x2 + "px, " + y2 + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x2 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options2 = _ref5.options;
  var _options$gpuAccelerat = options2.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options2.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options2.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance2 = _ref.instance, options2 = _ref.options;
  var _options$scroll = options2.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options2.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance2.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance2.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance2.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance2.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node2) {
  var win = getWindow(node2);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element4) {
  return getBoundingClientRect(getDocumentElement(element4)).left + getWindowScroll(element4).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element4, strategy) {
  var win = getWindow(element4);
  var html5 = getDocumentElement(element4);
  var visualViewport = win.visualViewport;
  var width = html5.clientWidth;
  var height = html5.clientHeight;
  var x2 = 0;
  var y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2 + getWindowScrollBarX(element4),
    y: y2
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element4) {
  var _element$ownerDocumen;
  var html5 = getDocumentElement(element4);
  var winScroll = getWindowScroll(element4);
  var body = (_element$ownerDocumen = element4.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html5.scrollWidth, html5.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html5.scrollHeight, html5.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x2 = -winScroll.scrollLeft + getWindowScrollBarX(element4);
  var y2 = -winScroll.scrollTop;
  if (getComputedStyle2(body || html5).direction === "rtl") {
    x2 += max(html5.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element4) {
  var _getComputedStyle = getComputedStyle2(element4), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node2) {
  if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
    return node2.ownerDocument.body;
  }
  if (isHTMLElement(node2) && isScrollParent(node2)) {
    return node2;
  }
  return getScrollParent(getParentNode(node2));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element4, list4) {
  var _element$ownerDocumen;
  if (list4 === void 0) {
    list4 = [];
  }
  var scrollParent = getScrollParent(element4);
  var isBody = scrollParent === ((_element$ownerDocumen = element4.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list4.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element4, strategy) {
  var rect = getBoundingClientRect(element4, false, strategy === "fixed");
  rect.top = rect.top + element4.clientTop;
  rect.left = rect.left + element4.clientLeft;
  rect.bottom = rect.top + element4.clientHeight;
  rect.right = rect.left + element4.clientWidth;
  rect.width = element4.clientWidth;
  rect.height = element4.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element4, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element4, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element4)));
}
function getClippingParents(element4) {
  var clippingParents2 = listScrollParents(getParentNode(element4));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element4).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element4) ? getOffsetParent(element4) : element4;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element4, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element4) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element4, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element4, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element4 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element4.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element4.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element4.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element4.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start2:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element4[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element4[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element4 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element4) ? element4 : element4.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a2, b2) {
    return overflows[a2] - overflows[b2];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options2 = _ref.options, name2 = _ref.name;
  if (state.modifiersData[name2]._skip) {
    return;
  }
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options2.fallbackPlacements, padding = options2.padding, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, _options$flipVariatio = options2.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options2.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i2 = 0; i2 < placements2.length; i2++) {
    var placement = placements2[i2];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start2;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks2 = [];
    if (checkMainAxis) {
      checks2.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks2.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks2.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks2);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks3 = checksMap.get(placement2);
        if (checks3) {
          return checks3.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break") break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name2]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name2 = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name2] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options2 = _ref2.options, name2 = _ref2.name;
  var _options$offset = options2.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x2 = _data$state$placement.x, y2 = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x2;
    state.modifiersData.popperOffsets.y += y2;
  }
  state.modifiersData[name2] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name2 = _ref.name;
  state.modifiersData[name2] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options2 = _ref.options, name2 = _ref.name;
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, padding = options2.padding, _options$tether = options2.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options2.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start2 ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start2 ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name2] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element4) {
  return {
    scrollLeft: element4.scrollLeft,
    scrollTop: element4.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node2) {
  if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
    return getWindowScroll(node2);
  } else {
    return getHTMLElementScroll(node2);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element4) {
  var rect = element4.getBoundingClientRect();
  var scaleX = round(rect.width) / element4.offsetWidth || 1;
  var scaleY = round(rect.height) / element4.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order2(modifiers) {
  var map4 = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map4.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map4.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order2(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce2(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS2 = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element4) {
    return !(element4 && typeof element4.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS2 : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options2) {
    if (options2 === void 0) {
      options2 = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS2, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance2 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options3 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options3);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m2) {
          return m2.enabled;
        });
        runModifierEffects();
        return instance2.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index4 = 0; index4 < state.orderedModifiers.length; index4++) {
          if (state.reset === true) {
            state.reset = false;
            index4 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index4], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name2 = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name: name2,
              instance: instance2
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce2(function() {
        return new Promise(function(resolve) {
          instance2.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance2;
    }
    instance2.setOptions(options2).then(function(state2) {
      if (!isDestroyed && options2.onFirstUpdate) {
        options2.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name2 = _ref.name, _ref$options = _ref.options, options3 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name: name2,
            instance: instance2,
            options: options3
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance2;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/stream-chat-react/node_modules/react-popper/lib/esm/usePopper.js
var import_react_fast_compare2 = __toESM(require_react_fast_compare());
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper2(referenceElement, popperElement, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var prevOptions = React61.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options2.onFirstUpdate,
    placement: options2.placement || "bottom",
    strategy: options2.strategy || "absolute",
    modifiers: options2.modifiers || EMPTY_MODIFIERS
  };
  var _React$useState = React61.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), state = _React$useState[0], setState = _React$useState[1];
  var updateStateModifier = React61.useMemo(function() {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn2(_ref) {
        var state2 = _ref.state;
        var elements = Object.keys(state2.elements);
        ReactDOM.flushSync(function() {
          setState({
            styles: fromEntries(elements.map(function(element4) {
              return [element4, state2.styles[element4] || {}];
            })),
            attributes: fromEntries(elements.map(function(element4) {
              return [element4, state2.attributes[element4]];
            }))
          });
        });
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = React61.useMemo(function() {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };
    if ((0, import_react_fast_compare2.default)(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React61.useRef();
  useIsomorphicLayoutEffect2(function() {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect2(function() {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    var createPopper4 = options2.createPopper || createPopper3;
    var popperInstance = createPopper4(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function() {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options2.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

// node_modules/stream-chat-react/node_modules/react-popper/lib/esm/Reference.js
var React63 = __toESM(require_react());
var import_warning = __toESM(require_warning());

// node_modules/stream-chat-react/dist/components/Dialog/DialogAnchor.js
function useDialogAnchor({ allowFlip, open, placement, referenceElement }) {
  const [popperElement, setPopperElement] = (0, import_react128.useState)(null);
  const { attributes, styles, update } = usePopper(referenceElement, popperElement, {
    modifiers: [
      {
        enabled: !!allowFlip,
        // Prevent flipping
        name: "flip"
      },
      {
        name: "eventListeners",
        options: {
          // It's not safe to update popper position on resize and scroll, since popper's
          // reference element might not be visible at the time.
          resize: false,
          scroll: false
        }
      }
    ],
    placement
  });
  (0, import_react128.useEffect)(() => {
    if (open && popperElement) {
      update == null ? void 0 : update();
    }
  }, [open, popperElement, update]);
  if (popperElement && !open) {
    setPopperElement(null);
  }
  return {
    attributes,
    setPopperElement,
    styles
  };
}
var DialogAnchor = ({ allowFlip = true, children, className, focus = true, id: id3, placement = "auto", referenceElement = null, tabIndex, trapFocus, ...restDivProps }) => {
  const dialog = useDialog({ id: id3 });
  const open = useDialogIsOpen(id3);
  const { attributes, setPopperElement, styles } = useDialogAnchor({
    allowFlip,
    open,
    placement,
    referenceElement
  });
  (0, import_react128.useEffect)(() => {
    if (!open)
      return;
    const hideOnEscape = (event) => {
      if (event.key !== "Escape")
        return;
      dialog == null ? void 0 : dialog.close();
    };
    document.addEventListener("keyup", hideOnEscape);
    return () => {
      document.removeEventListener("keyup", hideOnEscape);
    };
  }, [dialog, open]);
  if (!open) {
    return null;
  }
  return import_react128.default.createElement(
    DialogPortalEntry,
    { dialogId: id3 },
    import_react128.default.createElement(
      $9bf71ea28793e738$export$20e40289641fbbb6,
      { autoFocus: focus, contain: trapFocus, restoreFocus: true },
      import_react128.default.createElement("div", { ...restDivProps, ...attributes.popper, className: clsx_default("str-chat__dialog-contents", className), "data-testid": "str-chat__dialog-contents", ref: setPopperElement, style: styles.popper, tabIndex: typeof tabIndex !== "undefined" ? tabIndex : 0 }, children)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Dialog/ButtonWithSubmenu.js
var ButtonWithSubmenu = ({ children, className, placement, Submenu, submenuContainerProps, ...buttonProps }) => {
  const buttonRef = (0, import_react129.useRef)(null);
  const [dialogContainer, setDialogContainer] = (0, import_react129.useState)(null);
  const keepSubmenuOpen = (0, import_react129.useRef)(false);
  const dialogCloseTimeout = (0, import_react129.useRef)(null);
  const dialogId = (0, import_react129.useMemo)(() => `submenu-${Math.random().toString(36).slice(2)}`, []);
  const dialog = useDialog({ id: dialogId });
  const dialogIsOpen = useDialogIsOpen(dialogId);
  const { attributes, setPopperElement, styles } = useDialogAnchor({
    open: dialogIsOpen,
    placement,
    referenceElement: buttonRef.current
  });
  const closeDialogLazily = (0, import_react129.useCallback)(() => {
    if (dialogCloseTimeout.current)
      clearTimeout(dialogCloseTimeout.current);
    dialogCloseTimeout.current = setTimeout(() => {
      if (keepSubmenuOpen.current)
        return;
      dialog.close();
    }, 100);
  }, [dialog]);
  const handleClose = (0, import_react129.useCallback)((event) => {
    const parentButton = buttonRef.current;
    if (!dialogIsOpen || !parentButton)
      return;
    event.stopPropagation();
    closeDialogLazily();
    parentButton.focus();
  }, [closeDialogLazily, dialogIsOpen, buttonRef]);
  const handleFocusParentButton = () => {
    if (dialogIsOpen)
      return;
    dialog.open();
    keepSubmenuOpen.current = true;
  };
  (0, import_react129.useEffect)(() => {
    const parentButton = buttonRef.current;
    if (!dialogIsOpen || !parentButton)
      return;
    const hideOnEscape = (event) => {
      if (event.key !== "Escape")
        return;
      handleClose(event);
      keepSubmenuOpen.current = false;
    };
    document.addEventListener("keyup", hideOnEscape, { capture: true });
    return () => {
      document.removeEventListener("keyup", hideOnEscape, { capture: true });
    };
  }, [dialogIsOpen, handleClose]);
  return import_react129.default.createElement(
    import_react129.default.Fragment,
    null,
    import_react129.default.createElement("button", { "aria-selected": "false", className: clsx_default(className, "str_chat__button-with-submenu", {
      "str_chat__button-with-submenu--submenu-open": dialogIsOpen
    }), onBlur: () => {
      keepSubmenuOpen.current = false;
      closeDialogLazily();
    }, onClick: (event) => {
      event.stopPropagation();
      dialog.toggle();
    }, onFocus: handleFocusParentButton, onMouseEnter: handleFocusParentButton, onMouseLeave: () => {
      keepSubmenuOpen.current = false;
      closeDialogLazily();
    }, ref: buttonRef, role: "option", ...buttonProps }, children),
    dialogIsOpen && import_react129.default.createElement(
      "div",
      { ...attributes.popper, onBlur: (event) => {
        const isBlurredDescendant = event.relatedTarget instanceof Node && (dialogContainer == null ? void 0 : dialogContainer.contains(event.relatedTarget));
        if (isBlurredDescendant)
          return;
        keepSubmenuOpen.current = false;
        closeDialogLazily();
      }, onFocus: () => {
        keepSubmenuOpen.current = true;
      }, onMouseEnter: () => {
        keepSubmenuOpen.current = true;
      }, onMouseLeave: () => {
        keepSubmenuOpen.current = false;
        closeDialogLazily();
      }, ref: (element4) => {
        setPopperElement(element4);
        setDialogContainer(element4);
      }, style: styles.popper, tabIndex: -1, ...submenuContainerProps },
      import_react129.default.createElement(Submenu, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Modal/GlobalModal.js
var GlobalModal = ({ children, className, onClose, onCloseAttempt, open }) => {
  const { t: t2 } = useTranslationContext("Modal");
  const dialog = useModalDialog();
  const isOpen = useModalDialogIsOpen();
  const innerRef = (0, import_react131.useRef)(null);
  const closeButtonRef = (0, import_react131.useRef)(null);
  const maybeClose = (0, import_react130.useCallback)((source, event) => {
    const allow = onCloseAttempt == null ? void 0 : onCloseAttempt(source, event);
    if (allow !== false) {
      onClose == null ? void 0 : onClose(event);
      dialog.close();
    }
  }, [dialog, onClose, onCloseAttempt]);
  const handleClick = (event) => {
    var _a;
    const target = event.target;
    if (!innerRef.current || !closeButtonRef.current)
      return;
    if ((_a = innerRef.current) == null ? void 0 : _a.contains(target))
      return;
    if (closeButtonRef.current.contains(target)) {
      maybeClose("button", event);
    } else if (!innerRef.current.contains(target)) {
      maybeClose("overlay", event);
    }
  };
  (0, import_react131.useEffect)(() => {
    if (!isOpen)
      return;
    const handleKeyDown = (event) => {
      if (event.key === "Escape")
        maybeClose("escape", event);
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [isOpen, maybeClose]);
  (0, import_react131.useEffect)(() => {
    if (open && !dialog.isOpen) {
      dialog.open();
    }
  }, [dialog, open]);
  if (!open || !isOpen)
    return null;
  return import_react131.default.createElement(
    DialogPortalEntry,
    { dialogId: modalDialogId },
    import_react131.default.createElement(
      "div",
      { className: clsx_default("str-chat str-chat__modal str-chat-react__modal str-chat__modal--open", className), onClick: handleClick },
      import_react131.default.createElement(
        $9bf71ea28793e738$export$20e40289641fbbb6,
        { autoFocus: true, contain: true },
        import_react131.default.createElement(
          "button",
          { className: "str-chat__modal__close-button", ref: closeButtonRef, title: t2("Close"), type: "button" },
          import_react131.default.createElement(CloseIconRound, null)
        ),
        import_react131.default.createElement("div", { className: "str-chat__modal__inner str-chat-react__modal__inner", ref: innerRef }, children)
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/Modal/Modal.js
var import_react132 = __toESM(require_react());
var import_react133 = __toESM(require_react());
var Modal = ({ children, className, onClose, onCloseAttempt, open }) => {
  const { t: t2 } = useTranslationContext("Modal");
  const innerRef = (0, import_react133.useRef)(null);
  const closeButtonRef = (0, import_react133.useRef)(null);
  const maybeClose = (0, import_react132.useCallback)((source, event) => {
    const allow = onCloseAttempt == null ? void 0 : onCloseAttempt(source, event);
    if (allow !== false) {
      onClose == null ? void 0 : onClose(event);
    }
  }, [onClose, onCloseAttempt]);
  const handleClick = (event) => {
    const target = event.target;
    if (!innerRef.current || !closeButtonRef.current)
      return;
    if (closeButtonRef.current.contains(target)) {
      maybeClose("button", event);
    } else if (!innerRef.current.contains(target)) {
      maybeClose("overlay", event);
    }
  };
  (0, import_react133.useEffect)(() => {
    if (!open)
      return;
    const handleKeyDown = (event) => {
      if (event.key === "Escape")
        maybeClose("escape", event);
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [maybeClose, open]);
  if (!open)
    return null;
  return import_react133.default.createElement(
    "div",
    { className: clsx_default("str-chat__modal str-chat__modal--open", className), onClick: handleClick },
    import_react133.default.createElement(
      $9bf71ea28793e738$export$20e40289641fbbb6,
      { autoFocus: true, contain: true },
      import_react133.default.createElement(
        "button",
        { className: "str-chat__modal__close-button", ref: closeButtonRef, title: t2("Close") },
        import_react133.default.createElement(CloseIconRound, null)
      ),
      import_react133.default.createElement("div", { className: "str-chat__modal__inner str-chat-react__modal__inner", ref: innerRef }, children)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Gallery/ModalGallery.js
var import_react134 = __toESM(require_react());
var import_react_image_gallery = __toESM(require_image_gallery());
var onError = (e) => {
  e.target.alt = "";
};
var renderItem = ({ original, originalAlt }) => import_react134.default.createElement(BaseImage, { alt: originalAlt, className: "image-gallery-image", onError, src: original });
var ModalGallery = (props) => {
  const { images, index: index4 } = props;
  const { t: t2 } = useTranslationContext("ModalGallery");
  const formattedArray = (0, import_react134.useMemo)(() => images.map((image3) => {
    const imageSrc = image3.image_url || image3.thumb_url || "";
    return {
      original: imageSrc,
      originalAlt: t2("User uploaded content"),
      source: imageSrc
    };
  }), [images, t2]);
  return (
    // @ts-expect-error ignore the TS error as react-image-gallery was on @types/react@18 while stream-chat-react being upgraded to React 19 (https://github.com/xiaolin/react-image-gallery/issues/809)
    import_react134.default.createElement(import_react_image_gallery.default, { items: formattedArray, renderItem, showIndex: true, showPlayButton: false, showThumbnails: false, startIndex: index4 })
  );
};

// node_modules/stream-chat-react/dist/components/Gallery/Gallery.js
var UnMemoizedGallery = (props) => {
  const { images, innerRefs } = props;
  const [index4, setIndex] = (0, import_react135.useState)(0);
  const [modalOpen, setModalOpen] = (0, import_react135.useState)(false);
  const { BaseImage: BaseImage3 = BaseImage, Modal: Modal2 = Modal, ModalGallery: ModalGallery2 = ModalGallery } = useComponentContext("Gallery");
  const { t: t2 } = useTranslationContext("Gallery");
  const imageFallbackTitle = t2("User uploaded content");
  const countImagesDisplayedInPreview = 4;
  const lastImageIndexInPreview = countImagesDisplayedInPreview - 1;
  const toggleModal = (selectedIndex) => {
    if (modalOpen) {
      setModalOpen(false);
    } else {
      setIndex(selectedIndex);
      setModalOpen(true);
    }
  };
  const renderImages = images.slice(0, countImagesDisplayedInPreview).map((image3, i2) => i2 === lastImageIndexInPreview && images.length > countImagesDisplayedInPreview ? import_react135.default.createElement(
    "button",
    { className: "str-chat__gallery-placeholder", "data-testid": "gallery-image-last", key: `gallery-image-${i2}`, onClick: () => toggleModal(i2), style: {
      backgroundImage: `url(${images[lastImageIndexInPreview].previewUrl || images[lastImageIndexInPreview].image_url || images[lastImageIndexInPreview].thumb_url})`,
      ...image3.style
    }, ...(innerRefs == null ? void 0 : innerRefs.current) && {
      ref: (r2) => {
        innerRefs.current[i2] = r2;
      }
    } },
    import_react135.default.createElement("p", null, t2("{{ imageCount }} more", {
      imageCount: images.length - countImagesDisplayedInPreview
    }))
  ) : import_react135.default.createElement(
    "button",
    { className: "str-chat__gallery-image", "data-testid": "gallery-image", key: `gallery-image-${i2}`, onClick: () => toggleModal(i2) },
    import_react135.default.createElement(BaseImage3, { alt: (image3 == null ? void 0 : image3.fallback) || imageFallbackTitle, src: (0, import_sanitize_url2.sanitizeUrl)(image3.previewUrl || image3.image_url || image3.thumb_url), style: image3.style, title: (image3 == null ? void 0 : image3.fallback) || imageFallbackTitle, ...(innerRefs == null ? void 0 : innerRefs.current) && {
      ref: (r2) => {
        innerRefs.current[i2] = r2;
      }
    } })
  ));
  const className = clsx_default("str-chat__gallery", {
    "str-chat__gallery--square": images.length > lastImageIndexInPreview,
    "str-chat__gallery-two-rows": images.length > 2
  });
  return import_react135.default.createElement(
    "div",
    { className },
    renderImages,
    import_react135.default.createElement(
      Modal2,
      { className: "str-chat__gallery-modal", onClose: () => setModalOpen((modalOpen2) => !modalOpen2), open: modalOpen },
      import_react135.default.createElement(ModalGallery2, { images, index: index4 })
    )
  );
};
var Gallery = import_react135.default.memo(UnMemoizedGallery);

// node_modules/stream-chat-react/dist/components/Gallery/Image.js
var import_react136 = __toESM(require_react());
var import_react137 = __toESM(require_react());
var import_sanitize_url3 = __toESM(require_dist());
var ImageComponent = (props) => {
  const { dimensions = {}, fallback, image_url, innerRef, previewUrl, style, thumb_url } = props;
  const [modalIsOpen, setModalIsOpen] = (0, import_react137.useState)(false);
  const { BaseImage: BaseImage3 = BaseImage, Modal: Modal2 = Modal, ModalGallery: ModalGallery2 = ModalGallery } = useComponentContext("ImageComponent");
  const imageSrc = (0, import_sanitize_url3.sanitizeUrl)(previewUrl || image_url || thumb_url);
  const closeModal = (0, import_react136.useCallback)(() => {
    setModalIsOpen(false);
  }, []);
  const openModal = (0, import_react136.useCallback)(() => {
    setModalIsOpen(true);
  }, []);
  return import_react137.default.createElement(
    import_react137.default.Fragment,
    null,
    import_react137.default.createElement(BaseImage3, { alt: fallback, className: "str-chat__message-attachment--img", "data-testid": "image-test", onClick: openModal, src: imageSrc, style, tabIndex: 0, title: fallback, ...dimensions, ...innerRef && { ref: innerRef } }),
    import_react137.default.createElement(
      Modal2,
      { className: "str-chat__image-modal", onClose: closeModal, open: modalIsOpen },
      import_react137.default.createElement(ModalGallery2, { images: [props], index: 0 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActions.js
var import_react142 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js
var import_react140 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageActions/CustomMessageActionsList.js
var import_react138 = __toESM(require_react());
var CustomMessageActionsList = (props) => {
  const { customMessageActions, message } = props;
  if (!customMessageActions)
    return null;
  const customActionsArray = Object.keys(customMessageActions);
  return import_react138.default.createElement(import_react138.default.Fragment, null, customActionsArray.map((customAction) => {
    const customHandler = customMessageActions[customAction];
    return import_react138.default.createElement("button", { "aria-selected": "false", className: "str-chat__message-actions-list-item str-chat__message-actions-list-item-button", key: customAction, onClick: (event) => customHandler(message, event), role: "option" }, customAction);
  }));
};

// node_modules/stream-chat-react/dist/components/MessageActions/RemindMeSubmenu.js
var import_react139 = __toESM(require_react());
var RemindMeActionButton = ({ className, isMine }) => {
  const { t: t2 } = useTranslationContext();
  return import_react139.default.createElement(ButtonWithSubmenu, { "aria-selected": "false", className, placement: isMine ? "left-start" : "right-start", Submenu: RemindMeSubmenu }, t2("Remind Me"));
};
var RemindMeSubmenu = () => {
  const { t: t2 } = useTranslationContext();
  const { client } = useChatContext();
  const { message } = useMessageContext();
  return import_react139.default.createElement("div", { "aria-label": t2("aria/Remind Me Options"), className: "str-chat__message-actions-box__submenu", role: "listbox" }, client.reminders.scheduledOffsetsMs.map((offsetMs) => import_react139.default.createElement("button", { className: "str-chat__message-actions-list-item-button", key: `reminder-offset-option--${offsetMs}`, onClick: () => {
    client.reminders.upsertReminder({
      messageId: message.id,
      remind_at: new Date((/* @__PURE__ */ new Date()).getTime() + offsetMs).toISOString()
    });
  } }, t2("duration/Remind Me", { milliseconds: offsetMs }))));
};

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js
var UnMemoizedMessageActionsBox = (props) => {
  const { className, getMessageActions: getMessageActions2, handleDelete: handleDelete2, handleEdit, handleFlag, handleMarkUnread, handleMute, handlePin, isUserMuted: isUserMuted2, mine, open, ...restDivProps } = props;
  const { client } = useChatContext();
  const { CustomMessageActionsList: CustomMessageActionsList2 = CustomMessageActionsList } = useComponentContext("MessageActionsBox");
  const { customMessageActions, message, threadList } = useMessageContext("MessageActionsBox");
  const { t: t2 } = useTranslationContext("MessageActionsBox");
  const messageComposer = useMessageComposer();
  const reminder = useMessageReminder(message.id);
  const messageActions = getMessageActions2();
  const handleQuote = () => {
    messageComposer.setQuotedMessage(message);
    const elements = message.parent_id ? document.querySelectorAll(".str-chat__thread .str-chat__textarea__textarea") : document.getElementsByClassName("str-chat__textarea__textarea");
    const textarea = elements.item(0);
    if (textarea instanceof HTMLTextAreaElement) {
      textarea.focus();
    }
  };
  const rootClassName2 = clsx_default("str-chat__message-actions-box", className, {
    "str-chat__message-actions-box--open": open
  });
  const buttonClassName = "str-chat__message-actions-list-item str-chat__message-actions-list-item-button";
  return import_react140.default.createElement(
    "div",
    { ...restDivProps, className: rootClassName2, "data-testid": "message-actions-box" },
    import_react140.default.createElement(
      "div",
      { "aria-label": t2("aria/Message Options"), className: "str-chat__message-actions-list", role: "listbox" },
      import_react140.default.createElement(CustomMessageActionsList2, { customMessageActions, message }),
      messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && import_react140.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleQuote, role: "option" }, t2("Reply")),
      messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && import_react140.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handlePin, role: "option" }, !message.pinned ? t2("Pin") : t2("Unpin")),
      messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 && !threadList && !!message.id && import_react140.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleMarkUnread, role: "option" }, t2("Mark as unread")),
      messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && import_react140.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleFlag, role: "option" }, t2("Flag")),
      messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && import_react140.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleMute, role: "option" }, isUserMuted2() ? t2("Unmute") : t2("Mute")),
      messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && import_react140.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleEdit, role: "option" }, t2("Edit Message")),
      messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && import_react140.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleDelete2, role: "option" }, t2("Delete")),
      messageActions.indexOf(MESSAGE_ACTIONS.remindMe) > -1 && import_react140.default.createElement(RemindMeActionButton, { className: buttonClassName, isMine: mine }),
      messageActions.indexOf(MESSAGE_ACTIONS.saveForLater) > -1 && import_react140.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: () => reminder ? client.reminders.deleteReminder(reminder.id) : client.reminders.createReminder({ messageId: message.id }), role: "option" }, reminder ? t2("Remove reminder") : t2("Save for later"))
    )
  );
};
var MessageActionsBox = import_react140.default.memo(UnMemoizedMessageActionsBox);

// node_modules/stream-chat-react/dist/components/Message/icons.js
var import_react141 = __toESM(require_react());
var ActionsIcon = ({ className = "" }) => import_react141.default.createElement(
  "svg",
  { className, height: "4", viewBox: "0 0 11 4", width: "11", xmlns: "http://www.w3.org/2000/svg" },
  import_react141.default.createElement("path", { d: "M1.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z", fillRule: "nonzero" })
);
var ReactionIcon = ({ className = "" }) => import_react141.default.createElement(
  "svg",
  { className, height: "12", viewBox: "0 0 12 12", width: "12", xmlns: "http://www.w3.org/2000/svg" },
  import_react141.default.createElement(
    "g",
    { clipRule: "evenodd", fillRule: "evenodd" },
    import_react141.default.createElement("path", { d: "M6 1.2C3.3 1.2 1.2 3.3 1.2 6c0 2.7 2.1 4.8 4.8 4.8 2.7 0 4.8-2.1 4.8-4.8 0-2.7-2.1-4.8-4.8-4.8zM0 6c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z" }),
    import_react141.default.createElement("path", { d: "M5.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM8.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM3.3 6.7c.3-.2.6-.1.8.1.3.4.8.9 1.5 1 .6.2 1.4.1 2.4-1 .2-.2.6-.3.8 0 .2.2.3.6 0 .8-1.1 1.3-2.4 1.7-3.5 1.5-1-.2-1.8-.9-2.2-1.5-.2-.3-.1-.7.2-.9z" })
  )
);
var ThreadIcon = ({ className = "" }) => import_react141.default.createElement(
  "svg",
  { className, height: "10", width: "14", xmlns: "http://www.w3.org/2000/svg" },
  import_react141.default.createElement("path", { d: "M8.516 3c4.78 0 4.972 6.5 4.972 6.5-1.6-2.906-2.847-3.184-4.972-3.184v2.872L3.772 4.994 8.516.5V3zM.484 5l4.5-4.237v1.78L2.416 5l2.568 2.125v1.828L.484 5z", fillRule: "evenodd" })
);
var PinIcon = () => import_react141.default.createElement(
  "svg",
  { height: "13", viewBox: "0 0 14 13", width: "14", xmlns: "http://www.w3.org/2000/svg" },
  import_react141.default.createElement("path", { d: "M13.3518 6.686L6.75251 0.0866699L5.80984 1.02867L6.75318 1.972V1.97334L3.45318 5.272L3.45251 5.27334L2.50984 4.32934L1.56718 5.27267L4.39584 8.10067L0.624512 11.8713L1.56718 12.814L5.33851 9.04334L8.16718 11.8713L9.10984 10.9293L8.16718 9.986L11.4672 6.686L12.4098 7.62867L13.3518 6.686ZM7.22451 9.04267L7.22385 9.04334L4.39584 6.21467L7.69518 2.91467L10.5232 5.74267L7.22451 9.04267Z", fillRule: "evenodd" })
);
var PinIndicator = ({ message, t: t2 }) => {
  var _a, _b;
  if (!message || !t2)
    return null;
  return import_react141.default.createElement(
    "div",
    { style: { alignItems: "center", display: "flex" } },
    import_react141.default.createElement(PinIcon, null),
    import_react141.default.createElement("div", { style: {
      fontSize: "14px",
      marginBottom: "0",
      marginLeft: "8px",
      marginTop: "0"
    } }, message.pinned_by ? `${t2("Pinned by")} ${((_a = message.pinned_by) == null ? void 0 : _a.name) || ((_b = message.pinned_by) == null ? void 0 : _b.id)}` : t2("Message pinned"))
  );
};
var MessageDeliveredIcon = () => import_react141.default.createElement(
  "svg",
  { "data-testid": "delivered-icon", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react141.default.createElement("path", { clipRule: "evenodd", d: "M8.9999 16.2L4.7999 12L3.3999 13.4L8.9999 19L20.9999 6.99998L19.5999 5.59998L8.9999 16.2Z", fill: "black", fillRule: "evenodd" })
);
var MessageErrorIcon = () => import_react141.default.createElement(
  "div",
  { className: "str-chat__message-error-icon" },
  import_react141.default.createElement(
    "svg",
    { "data-testid": "error", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react141.default.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z", fill: "black", id: "background" }),
    import_react141.default.createElement("path", { d: "M13 17H11V15H13V17ZM13 13H11V7H13V13Z", fill: "white" })
  )
);

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActions.js
var MessageActions = (props) => {
  const { ActionsIcon: ActionsIcon2 = ActionsIcon, customWrapperClass = "", getMessageActions: propGetMessageActions, handleDelete: propHandleDelete, handleFlag: propHandleFlag, handleMarkUnread: propHandleMarkUnread, handleMute: propHandleMute, handlePin: propHandlePin, inline, message: propMessage, mine } = props;
  const { mutes } = useChatContext("MessageActions");
  const { customMessageActions, getMessageActions: contextGetMessageActions, handleDelete: contextHandleDelete, handleFlag: contextHandleFlag, handleMarkUnread: contextHandleMarkUnread, handleMute: contextHandleMute, handlePin: contextHandlePin, isMyMessage, message: contextMessage, setEditingState, threadList } = useMessageContext("MessageActions");
  const { CustomMessageActionsList: CustomMessageActionsList2 } = useComponentContext("MessageActions");
  const { t: t2 } = useTranslationContext("MessageActions");
  const getMessageActions2 = propGetMessageActions || contextGetMessageActions;
  const handleDelete2 = propHandleDelete || contextHandleDelete;
  const handleFlag = propHandleFlag || contextHandleFlag;
  const handleMarkUnread = propHandleMarkUnread || contextHandleMarkUnread;
  const handleMute = propHandleMute || contextHandleMute;
  const handlePin = propHandlePin || contextHandlePin;
  const message = propMessage || contextMessage;
  const isMine = mine ? mine() : isMyMessage();
  const isMuted = (0, import_react142.useCallback)(() => isUserMuted(message, mutes), [message, mutes]);
  const dialogIdNamespace = threadList ? "-thread-" : "";
  const dialogId = `message-actions${dialogIdNamespace}--${message.id}`;
  const dialog = useDialog({ id: dialogId });
  const dialogIsOpen = useDialogIsOpen(dialogId);
  const messageActions = getMessageActions2();
  const renderMessageActions = shouldRenderMessageActions({
    customMessageActions,
    CustomMessageActionsList: CustomMessageActionsList2,
    inThread: threadList,
    messageActions
  });
  const actionsBoxButtonRef = (0, import_react142.useRef)(null);
  if (!renderMessageActions)
    return null;
  return import_react142.default.createElement(
    MessageActionsWrapper,
    { customWrapperClass, inline, toggleOpen: dialog == null ? void 0 : dialog.toggle },
    import_react142.default.createElement(
      DialogAnchor,
      { id: dialogId, placement: isMine ? "top-end" : "top-start", referenceElement: actionsBoxButtonRef.current, tabIndex: -1, trapFocus: true },
      import_react142.default.createElement(MessageActionsBox, { getMessageActions: getMessageActions2, handleDelete: handleDelete2, handleEdit: setEditingState, handleFlag, handleMarkUnread, handleMute, handlePin, isUserMuted: isMuted, mine: isMine, open: dialogIsOpen })
    ),
    import_react142.default.createElement(
      "button",
      { "aria-expanded": dialogIsOpen, "aria-haspopup": "true", "aria-label": t2("aria/Open Message Actions Menu"), className: "str-chat__message-actions-box-button", "data-testid": "message-actions-toggle-button", ref: actionsBoxButtonRef },
      import_react142.default.createElement(ActionsIcon2, { className: "str-chat__message-action-icon" })
    )
  );
};
var MessageActionsWrapper = (props) => {
  const { children, customWrapperClass, inline, toggleOpen } = props;
  const defaultWrapperClass = clsx_default("str-chat__message-simple__actions__action", "str-chat__message-simple__actions__action--options", "str-chat__message-actions-container");
  const wrapperProps = {
    className: customWrapperClass || defaultWrapperClass,
    "data-testid": "message-actions",
    onClick: toggleOpen
  };
  if (inline)
    return import_react142.default.createElement("span", { ...wrapperProps }, children);
  return import_react142.default.createElement("div", { ...wrapperProps }, children);
};

// node_modules/stream-chat-react/dist/components/Message/renderText/regex.js
function escapeRegExp(text8) {
  return text8.replace(/[-[\]{}()*+?.,/\\^$|#]/g, "\\$&");
}
var detectHttp = /(http(s?):\/\/)?(www\.)?/;
var messageCodeBlocks = (message) => {
  const codeRegex = /```[a-z]*\n[\s\S]*?\n```|`[a-z]*[\s\S]*?`/gm;
  const matches = message.match(codeRegex);
  return matches || [];
};
var matchMarkdownLinks = (message) => {
  const regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
  const matches = message.match(regexMdLinks);
  const singleMatch = /\[([^[]+)\]\((.*)\)/;
  const links = matches ? matches.map((match) => {
    const i2 = singleMatch.exec(match);
    return i2 && [i2[1], i2[2]];
  }) : [];
  return links.flat();
};

// node_modules/hast-util-is-element/lib/index.js
var convertElement = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test | null | undefined} [test]
   * @returns {Check}
   */
  function(test2) {
    if (test2 === null || test2 === void 0) {
      return element3;
    }
    if (typeof test2 === "string") {
      return tagNameFactory(test2);
    }
    if (typeof test2 === "object") {
      return anyFactory2(test2);
    }
    if (typeof test2 === "function") {
      return castFactory2(test2);
    }
    throw new Error("Expected function, string, or array as `test`");
  }
);
function anyFactory2(tests) {
  const checks2 = [];
  let index4 = -1;
  while (++index4 < tests.length) {
    checks2[index4] = convertElement(tests[index4]);
  }
  return castFactory2(any);
  function any(...parameters) {
    let index5 = -1;
    while (++index5 < checks2.length) {
      if (checks2[index5].apply(this, parameters)) return true;
    }
    return false;
  }
}
function tagNameFactory(check) {
  return castFactory2(tagName);
  function tagName(element4) {
    return element4.tagName === check;
  }
}
function castFactory2(testFunction) {
  return check;
  function check(value, index4, parent) {
    return Boolean(
      looksLikeAnElement(value) && testFunction.call(
        this,
        value,
        typeof index4 === "number" ? index4 : void 0,
        parent || void 0
      )
    );
  }
}
function element3(element4) {
  return Boolean(
    element4 && typeof element4 === "object" && "type" in element4 && element4.type === "element" && "tagName" in element4 && typeof element4.tagName === "string"
  );
}
function looksLikeAnElement(value) {
  return value !== null && typeof value === "object" && "type" in value && "tagName" in value;
}

// node_modules/hast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string3) {
  if (typeof string3 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/hast-util-find-and-replace/lib/index.js
var emptyOptions4 = {};
var defaultIgnore = ["math", "script", "style", "svg", "title"];
function findAndReplace(tree, list4, options2) {
  const settings = options2 || emptyOptions4;
  const ignored = convertElement(settings.ignore || defaultIgnore);
  const pairs = toPairs(list4);
  let pairIndex = -1;
  while (++pairIndex < pairs.length) {
    visitParents(tree, "text", visitor3);
  }
  function visitor3(node2, parents) {
    let index4 = -1;
    let grandparent;
    while (++index4 < parents.length) {
      const parent = parents[index4];
      const siblings = grandparent ? grandparent.children : void 0;
      if (ignored(
        parent,
        siblings ? siblings.indexOf(parent) : void 0,
        grandparent
      )) {
        return;
      }
      grandparent = parent;
    }
    if (grandparent) {
      return handler(node2, parents);
    }
  }
  function handler(node2, parents) {
    const parent = parents[parents.length - 1];
    const find3 = pairs[pairIndex][0];
    const replace2 = pairs[pairIndex][1];
    let start3 = 0;
    const siblings = parent.children;
    const index4 = siblings.indexOf(node2);
    let change = false;
    let nodes = [];
    find3.lastIndex = 0;
    let match = find3.exec(node2.value);
    while (match) {
      const position3 = match.index;
      const matchObject = {
        index: match.index,
        input: match.input,
        stack: [...parents, node2]
      };
      let value = replace2(...match, matchObject);
      if (typeof value === "string") {
        value = value.length > 0 ? { type: "text", value } : void 0;
      }
      if (value === false) {
        find3.lastIndex = position3 + 1;
      } else {
        if (start3 !== position3) {
          nodes.push({ type: "text", value: node2.value.slice(start3, position3) });
        }
        if (Array.isArray(value)) {
          nodes.push(...value);
        } else if (value) {
          nodes.push(value);
        }
        start3 = position3 + match[0].length;
        change = true;
      }
      if (!find3.global) {
        break;
      }
      match = find3.exec(node2.value);
    }
    if (change) {
      if (start3 < node2.value.length) {
        nodes.push({ type: "text", value: node2.value.slice(start3) });
      }
      parent.children.splice(index4, 1, ...nodes);
    } else {
      nodes = [node2];
    }
    return index4 + nodes.length;
  }
}
function toPairs(tupleOrList) {
  const result = [];
  if (!Array.isArray(tupleOrList)) {
    throw new TypeError("Expected find and replace tuple or list of tuples");
  }
  const list4 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];
  let index4 = -1;
  while (++index4 < list4.length) {
    const tuple = list4[index4];
    result.push([toExpression(tuple[0]), toFunction(tuple[1])]);
  }
  return result;
}
function toExpression(find3) {
  return typeof find3 === "string" ? new RegExp(escapeStringRegexp(find3), "g") : find3;
}
function toFunction(replace2) {
  return typeof replace2 === "function" ? replace2 : function() {
    return replace2;
  };
}

// node_modules/unist-builder/lib/index.js
function u2(type, props, value) {
  const node2 = { type: String(type) };
  if ((value === void 0 || value === null) && (typeof props === "string" || Array.isArray(props))) {
    value = props;
  } else {
    Object.assign(node2, props);
  }
  if (Array.isArray(value)) {
    node2.children = value;
  } else if (value !== void 0 && value !== null) {
    node2.value = String(value);
  }
  return node2;
}

// node_modules/stream-chat-react/dist/components/Message/renderText/rehypePlugins/emojiMarkdownPlugin.js
var import_emoji_regex2 = __toESM(require_emoji_regex());
var emojiMarkdownPlugin = () => {
  const replace2 = (match) => u2("element", { properties: {}, tagName: "emoji" }, [u2("text", match)]);
  const transform3 = (node2) => findAndReplace(node2, [(0, import_emoji_regex2.default)(), replace2]);
  return transform3;
};

// node_modules/stream-chat-react/dist/components/Message/renderText/rehypePlugins/mentionsMarkdownPlugin.js
var mentionsMarkdownPlugin = (mentioned_users) => () => {
  const mentioned_usernames = mentioned_users.map((user) => user.name || user.id).filter(Boolean).map(escapeRegExp);
  const mentionedUsersRegex = new RegExp(mentioned_usernames.map((username) => `@${username}`).join("|"), "g");
  const replace2 = (match) => {
    const usernameOrId = match.replace("@", "");
    const user = mentioned_users.find(({ id: id3, name: name2 }) => name2 === usernameOrId || id3 === usernameOrId);
    return u2("element", { mentionedUser: user, properties: {}, tagName: "mention" }, [
      u2("text", match)
    ]);
  };
  const transform3 = (tree) => {
    if (!mentioned_usernames.length)
      return;
    visit(tree, (node2, index4, parent) => {
      var _a;
      if (typeof index4 === "undefined")
        return;
      if (!parent)
        return;
      const nextChild = parent.children.at(index4 + 1);
      const nextChildHref = (_a = nextChild == null ? void 0 : nextChild.properties) == null ? void 0 : _a.href;
      if (node2.type === "text" && // text value has to have @ sign at the end of the string
      // and no other characters except whitespace can precede it
      // valid cases:   "text @", "@", " @"
      // invalid cases: "text@", "@text",
      /.?\s?@$|^@$/.test(node2.value) && (nextChildHref == null ? void 0 : nextChildHref.startsWith("mailto:"))) {
        const newTextValue = node2.value.replace(/@$/, "");
        const username = nextChildHref.replace("mailto:", "");
        parent.children[index4] = u2("text", newTextValue);
        parent.children[index4 + 1] = u2("text", `@${username}`);
      }
    });
    findAndReplace(tree, [mentionedUsersRegex, replace2]);
  };
  return transform3;
};

// node_modules/stream-chat-react/dist/components/Message/renderText/remarkPlugins/htmlToTextPlugin.js
var visitor = (node2) => {
  if (node2.type !== "html")
    return;
  node2.type = "text";
};
var transform = (tree) => {
  visit(tree, visitor);
};
var htmlToTextPlugin = () => transform;

// node_modules/stream-chat-react/dist/components/Message/renderText/remarkPlugins/imageToLink.js
var text5 = (value) => ({ type: "text", value });
function imageToLink({ getTextLabelFrom = "url" } = {}) {
  return (tree) => {
    const visitor3 = (node2, index4, parent) => {
      if (parent == null || index4 == null)
        return;
      const label = node2[getTextLabelFrom] ?? node2.url;
      const link3 = {
        children: [text5(label)],
        title: node2.title ?? node2.alt ?? node2.url,
        type: "link",
        url: node2.url
      };
      parent.children.splice(index4, 1, link3);
      return [SKIP, index4 + 1];
    };
    visit(tree, "image", visitor3);
  };
}

// node_modules/stream-chat-react/dist/components/Message/renderText/remarkPlugins/keepLineBreaksPlugin.js
var visitor2 = (node2, index4, parent) => {
  if (!(index4 && parent && node2.position))
    return;
  const prevSibling = parent.children.at(index4 - 1);
  if (!(prevSibling == null ? void 0 : prevSibling.position))
    return;
  if (node2.position.start.line === prevSibling.position.start.line)
    return;
  const ownStartLine = node2.position.start.line;
  const prevEndLine = prevSibling.position.end.line;
  const countTruncatedLineBreaks = ownStartLine - prevEndLine - 1;
  if (countTruncatedLineBreaks < 1)
    return;
  const lineBreaks = Array.from({ length: countTruncatedLineBreaks }, () => u2("break", { tagName: "br" }));
  parent.children = [
    ...parent.children.slice(0, index4),
    ...lineBreaks,
    ...parent.children.slice(index4)
  ];
  return;
};
var transform2 = (tree) => {
  visit(tree, visitor2);
};
var keepLineBreaksPlugin = () => transform2;

// node_modules/stream-chat-react/dist/components/Message/renderText/remarkPlugins/plusPlusToEmphasis.js
var INS_REGEX = /\+\+(\S(?:[\s\S]*?\S)?)\+\+/g;
var IGNORE_NODE_TYPES = /* @__PURE__ */ new Set([
  "code",
  "inlineCode",
  "link",
  "linkReference",
  "definition",
  "math",
  "inlineMath"
]);
var plusPlusToEmphasis = () => {
  const visitor3 = (node2, index4, parent) => {
    if (IGNORE_NODE_TYPES.has(node2.type))
      return SKIP;
    if (node2.type !== "text" || parent == null || typeof index4 !== "number")
      return;
    const value = node2.value;
    INS_REGEX.lastIndex = 0;
    let match;
    let last = 0;
    const out = [];
    while (match = INS_REGEX.exec(value)) {
      const [full, inner] = match;
      const start3 = match.index;
      if (start3 > last)
        out.push({ type: "text", value: value.slice(last, start3) });
      out.push({
        children: [{ type: "text", value: inner }],
        data: { hName: "ins" },
        type: "emphasis"
      });
      last = start3 + full.length;
    }
    if (out.length === 0)
      return;
    if (last < value.length)
      out.push({ type: "text", value: value.slice(last) });
    parent.children.splice(index4, 1, ...out);
    return [SKIP, index4 + out.length];
  };
  return (tree) => visit(tree, visitor3);
};

// node_modules/stream-chat-react/dist/components/Message/renderText/renderText.js
var import_react146 = __toESM(require_react());

// node_modules/ccount/index.js
function ccount(value, character) {
  const source = String(value);
  if (typeof character !== "string") {
    throw new TypeError("Expected character");
  }
  let count = 0;
  let index4 = source.indexOf(character);
  while (index4 !== -1) {
    count++;
    index4 = source.indexOf(character, index4 + character.length);
  }
  return count;
}

// node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp2(string3) {
  if (typeof string3 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/mdast-util-find-and-replace/lib/index.js
function findAndReplace2(tree, list4, options2) {
  const settings = options2 || {};
  const ignored = convert(settings.ignore || []);
  const pairs = toPairs2(list4);
  let pairIndex = -1;
  while (++pairIndex < pairs.length) {
    visitParents(tree, "text", visitor3);
  }
  function visitor3(node2, parents) {
    let index4 = -1;
    let grandparent;
    while (++index4 < parents.length) {
      const parent = parents[index4];
      const siblings = grandparent ? grandparent.children : void 0;
      if (ignored(
        parent,
        siblings ? siblings.indexOf(parent) : void 0,
        grandparent
      )) {
        return;
      }
      grandparent = parent;
    }
    if (grandparent) {
      return handler(node2, parents);
    }
  }
  function handler(node2, parents) {
    const parent = parents[parents.length - 1];
    const find3 = pairs[pairIndex][0];
    const replace2 = pairs[pairIndex][1];
    let start3 = 0;
    const siblings = parent.children;
    const index4 = siblings.indexOf(node2);
    let change = false;
    let nodes = [];
    find3.lastIndex = 0;
    let match = find3.exec(node2.value);
    while (match) {
      const position3 = match.index;
      const matchObject = {
        index: match.index,
        input: match.input,
        stack: [...parents, node2]
      };
      let value = replace2(...match, matchObject);
      if (typeof value === "string") {
        value = value.length > 0 ? { type: "text", value } : void 0;
      }
      if (value === false) {
        find3.lastIndex = position3 + 1;
      } else {
        if (start3 !== position3) {
          nodes.push({
            type: "text",
            value: node2.value.slice(start3, position3)
          });
        }
        if (Array.isArray(value)) {
          nodes.push(...value);
        } else if (value) {
          nodes.push(value);
        }
        start3 = position3 + match[0].length;
        change = true;
      }
      if (!find3.global) {
        break;
      }
      match = find3.exec(node2.value);
    }
    if (change) {
      if (start3 < node2.value.length) {
        nodes.push({ type: "text", value: node2.value.slice(start3) });
      }
      parent.children.splice(index4, 1, ...nodes);
    } else {
      nodes = [node2];
    }
    return index4 + nodes.length;
  }
}
function toPairs2(tupleOrList) {
  const result = [];
  if (!Array.isArray(tupleOrList)) {
    throw new TypeError("Expected find and replace tuple or list of tuples");
  }
  const list4 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];
  let index4 = -1;
  while (++index4 < list4.length) {
    const tuple = list4[index4];
    result.push([toExpression2(tuple[0]), toFunction2(tuple[1])]);
  }
  return result;
}
function toExpression2(find3) {
  return typeof find3 === "string" ? new RegExp(escapeStringRegexp2(find3), "g") : find3;
}
function toFunction2(replace2) {
  return typeof replace2 === "function" ? replace2 : function() {
    return replace2;
  };
}

// node_modules/mdast-util-gfm-autolink-literal/lib/index.js
var inConstruct = "phrasing";
var notInConstruct = ["autolink", "link", "image", "label"];
function gfmAutolinkLiteralFromMarkdown() {
  return {
    transforms: [transformGfmAutolinkLiterals],
    enter: {
      literalAutolink: enterLiteralAutolink,
      literalAutolinkEmail: enterLiteralAutolinkValue,
      literalAutolinkHttp: enterLiteralAutolinkValue,
      literalAutolinkWww: enterLiteralAutolinkValue
    },
    exit: {
      literalAutolink: exitLiteralAutolink,
      literalAutolinkEmail: exitLiteralAutolinkEmail,
      literalAutolinkHttp: exitLiteralAutolinkHttp,
      literalAutolinkWww: exitLiteralAutolinkWww
    }
  };
}
function gfmAutolinkLiteralToMarkdown() {
  return {
    unsafe: [
      {
        character: "@",
        before: "[+\\-.\\w]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      {
        character: ".",
        before: "[Ww]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      {
        character: ":",
        before: "[ps]",
        after: "\\/",
        inConstruct,
        notInConstruct
      }
    ]
  };
}
function enterLiteralAutolink(token) {
  this.enter({ type: "link", title: null, url: "", children: [] }, token);
}
function enterLiteralAutolinkValue(token) {
  this.config.enter.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkHttp(token) {
  this.config.exit.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkWww(token) {
  this.config.exit.data.call(this, token);
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "link");
  node2.url = "http://" + this.sliceSerialize(token);
}
function exitLiteralAutolinkEmail(token) {
  this.config.exit.autolinkEmail.call(this, token);
}
function exitLiteralAutolink(token) {
  this.exit(token);
}
function transformGfmAutolinkLiterals(tree) {
  findAndReplace2(
    tree,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
      [new RegExp("(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)", "gu"), findEmail]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function findUrl(_2, protocol, domain3, path2, match) {
  let prefix = "";
  if (!previous2(match)) {
    return false;
  }
  if (/^w/i.test(protocol)) {
    domain3 = protocol + domain3;
    protocol = "";
    prefix = "http://";
  }
  if (!isCorrectDomain(domain3)) {
    return false;
  }
  const parts = splitUrl(domain3 + path2);
  if (!parts[0]) return false;
  const result = {
    type: "link",
    title: null,
    url: prefix + protocol + parts[0],
    children: [{ type: "text", value: protocol + parts[0] }]
  };
  if (parts[1]) {
    return [result, { type: "text", value: parts[1] }];
  }
  return result;
}
function findEmail(_2, atext, label, match) {
  if (
    // Not an expected previous character.
    !previous2(match, true) || // Label ends in not allowed character.
    /[-\d_]$/.test(label)
  ) {
    return false;
  }
  return {
    type: "link",
    title: null,
    url: "mailto:" + atext + "@" + label,
    children: [{ type: "text", value: atext + "@" + label }]
  };
}
function isCorrectDomain(domain3) {
  const parts = domain3.split(".");
  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
    return false;
  }
  return true;
}
function splitUrl(url) {
  const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
  if (!trailExec) {
    return [url, void 0];
  }
  url = url.slice(0, trailExec.index);
  let trail2 = trailExec[0];
  let closingParenIndex = trail2.indexOf(")");
  const openingParens = ccount(url, "(");
  let closingParens = ccount(url, ")");
  while (closingParenIndex !== -1 && openingParens > closingParens) {
    url += trail2.slice(0, closingParenIndex + 1);
    trail2 = trail2.slice(closingParenIndex + 1);
    closingParenIndex = trail2.indexOf(")");
    closingParens++;
  }
  return [url, trail2];
}
function previous2(match, email) {
  const code4 = match.input.charCodeAt(match.index - 1);
  return (match.index === 0 || unicodeWhitespace(code4) || unicodePunctuation(code4)) && // If it’s an email, the previous character should not be a slash.
  (!email || code4 !== 47);
}

// node_modules/mdast-util-gfm-footnote/lib/index.js
footnoteReference2.peek = footnoteReferencePeek;
function enterFootnoteCallString() {
  this.buffer();
}
function enterFootnoteCall(token) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, token);
}
function enterFootnoteDefinitionLabelString() {
  this.buffer();
}
function enterFootnoteDefinition(token) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    token
  );
}
function exitFootnoteCallString(token) {
  const label = this.resume();
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "footnoteReference");
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
  node2.label = label;
}
function exitFootnoteCall(token) {
  this.exit(token);
}
function exitFootnoteDefinitionLabelString(token) {
  const label = this.resume();
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "footnoteDefinition");
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
  node2.label = label;
}
function exitFootnoteDefinition(token) {
  this.exit(token);
}
function footnoteReferencePeek() {
  return "[";
}
function footnoteReference2(node2, _2, state, info) {
  const tracker = state.createTracker(info);
  let value = tracker.move("[^");
  const exit3 = state.enter("footnoteReference");
  const subexit = state.enter("reference");
  value += tracker.move(
    state.safe(state.associationId(node2), { after: "]", before: value })
  );
  subexit();
  exit3();
  value += tracker.move("]");
  return value;
}
function gfmFootnoteFromMarkdown() {
  return {
    enter: {
      gfmFootnoteCallString: enterFootnoteCallString,
      gfmFootnoteCall: enterFootnoteCall,
      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
      gfmFootnoteDefinition: enterFootnoteDefinition
    },
    exit: {
      gfmFootnoteCallString: exitFootnoteCallString,
      gfmFootnoteCall: exitFootnoteCall,
      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
      gfmFootnoteDefinition: exitFootnoteDefinition
    }
  };
}
function gfmFootnoteToMarkdown(options2) {
  let firstLineBlank = false;
  if (options2 && options2.firstLineBlank) {
    firstLineBlank = true;
  }
  return {
    handlers: { footnoteDefinition, footnoteReference: footnoteReference2 },
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["label", "phrasing", "reference"] }]
  };
  function footnoteDefinition(node2, _2, state, info) {
    const tracker = state.createTracker(info);
    let value = tracker.move("[^");
    const exit3 = state.enter("footnoteDefinition");
    const subexit = state.enter("label");
    value += tracker.move(
      state.safe(state.associationId(node2), { before: value, after: "]" })
    );
    subexit();
    value += tracker.move("]:");
    if (node2.children && node2.children.length > 0) {
      tracker.shift(4);
      value += tracker.move(
        (firstLineBlank ? "\n" : " ") + state.indentLines(
          state.containerFlow(node2, tracker.current()),
          firstLineBlank ? mapAll : mapExceptFirst
        )
      );
    }
    exit3();
    return value;
  }
}
function mapExceptFirst(line, index4, blank) {
  return index4 === 0 ? line : mapAll(line, index4, blank);
}
function mapAll(line, index4, blank) {
  return (blank ? "" : "    ") + line;
}

// node_modules/mdast-util-gfm-strikethrough/lib/index.js
var constructsWithoutStrikethrough = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
handleDelete.peek = peekDelete;
function gfmStrikethroughFromMarkdown() {
  return {
    canContainEols: ["delete"],
    enter: { strikethrough: enterStrikethrough },
    exit: { strikethrough: exitStrikethrough }
  };
}
function gfmStrikethroughToMarkdown() {
  return {
    unsafe: [
      {
        character: "~",
        inConstruct: "phrasing",
        notInConstruct: constructsWithoutStrikethrough
      }
    ],
    handlers: { delete: handleDelete }
  };
}
function enterStrikethrough(token) {
  this.enter({ type: "delete", children: [] }, token);
}
function exitStrikethrough(token) {
  this.exit(token);
}
function handleDelete(node2, _2, state, info) {
  const tracker = state.createTracker(info);
  const exit3 = state.enter("strikethrough");
  let value = tracker.move("~~");
  value += state.containerPhrasing(node2, {
    ...tracker.current(),
    before: value,
    after: "~"
  });
  value += tracker.move("~~");
  exit3();
  return value;
}
function peekDelete() {
  return "~";
}

// node_modules/markdown-table/index.js
function defaultStringLength(value) {
  return value.length;
}
function markdownTable(table2, options2) {
  const settings = options2 || {};
  const align = (settings.align || []).concat();
  const stringLength = settings.stringLength || defaultStringLength;
  const alignments = [];
  const cellMatrix = [];
  const sizeMatrix = [];
  const longestCellByColumn = [];
  let mostCellsPerRow = 0;
  let rowIndex = -1;
  while (++rowIndex < table2.length) {
    const row2 = [];
    const sizes2 = [];
    let columnIndex2 = -1;
    if (table2[rowIndex].length > mostCellsPerRow) {
      mostCellsPerRow = table2[rowIndex].length;
    }
    while (++columnIndex2 < table2[rowIndex].length) {
      const cell = serialize2(table2[rowIndex][columnIndex2]);
      if (settings.alignDelimiters !== false) {
        const size = stringLength(cell);
        sizes2[columnIndex2] = size;
        if (longestCellByColumn[columnIndex2] === void 0 || size > longestCellByColumn[columnIndex2]) {
          longestCellByColumn[columnIndex2] = size;
        }
      }
      row2.push(cell);
    }
    cellMatrix[rowIndex] = row2;
    sizeMatrix[rowIndex] = sizes2;
  }
  let columnIndex = -1;
  if (typeof align === "object" && "length" in align) {
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = toAlignment(align[columnIndex]);
    }
  } else {
    const code4 = toAlignment(align);
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = code4;
    }
  }
  columnIndex = -1;
  const row = [];
  const sizes = [];
  while (++columnIndex < mostCellsPerRow) {
    const code4 = alignments[columnIndex];
    let before = "";
    let after = "";
    if (code4 === 99) {
      before = ":";
      after = ":";
    } else if (code4 === 108) {
      before = ":";
    } else if (code4 === 114) {
      after = ":";
    }
    let size = settings.alignDelimiters === false ? 1 : Math.max(
      1,
      longestCellByColumn[columnIndex] - before.length - after.length
    );
    const cell = before + "-".repeat(size) + after;
    if (settings.alignDelimiters !== false) {
      size = before.length + size + after.length;
      if (size > longestCellByColumn[columnIndex]) {
        longestCellByColumn[columnIndex] = size;
      }
      sizes[columnIndex] = size;
    }
    row[columnIndex] = cell;
  }
  cellMatrix.splice(1, 0, row);
  sizeMatrix.splice(1, 0, sizes);
  rowIndex = -1;
  const lines = [];
  while (++rowIndex < cellMatrix.length) {
    const row2 = cellMatrix[rowIndex];
    const sizes2 = sizeMatrix[rowIndex];
    columnIndex = -1;
    const line = [];
    while (++columnIndex < mostCellsPerRow) {
      const cell = row2[columnIndex] || "";
      let before = "";
      let after = "";
      if (settings.alignDelimiters !== false) {
        const size = longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0);
        const code4 = alignments[columnIndex];
        if (code4 === 114) {
          before = " ".repeat(size);
        } else if (code4 === 99) {
          if (size % 2) {
            before = " ".repeat(size / 2 + 0.5);
            after = " ".repeat(size / 2 - 0.5);
          } else {
            before = " ".repeat(size / 2);
            after = before;
          }
        } else {
          after = " ".repeat(size);
        }
      }
      if (settings.delimiterStart !== false && !columnIndex) {
        line.push("|");
      }
      if (settings.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(settings.alignDelimiters === false && cell === "") && (settings.delimiterStart !== false || columnIndex)) {
        line.push(" ");
      }
      if (settings.alignDelimiters !== false) {
        line.push(before);
      }
      line.push(cell);
      if (settings.alignDelimiters !== false) {
        line.push(after);
      }
      if (settings.padding !== false) {
        line.push(" ");
      }
      if (settings.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
        line.push("|");
      }
    }
    lines.push(
      settings.delimiterEnd === false ? line.join("").replace(/ +$/, "") : line.join("")
    );
  }
  return lines.join("\n");
}
function serialize2(value) {
  return value === null || value === void 0 ? "" : String(value);
}
function toAlignment(value) {
  const code4 = typeof value === "string" ? value.codePointAt(0) : 0;
  return code4 === 67 || code4 === 99 ? 99 : code4 === 76 || code4 === 108 ? 108 : code4 === 82 || code4 === 114 ? 114 : 0;
}

// node_modules/zwitch/index.js
var own5 = {}.hasOwnProperty;

// node_modules/mdast-util-to-markdown/lib/configure.js
var own6 = {}.hasOwnProperty;

// node_modules/mdast-util-to-markdown/lib/handle/blockquote.js
function blockquote2(node2, _2, state, info) {
  const exit3 = state.enter("blockquote");
  const tracker = state.createTracker(info);
  tracker.move("> ");
  tracker.shift(2);
  const value = state.indentLines(
    state.containerFlow(node2, tracker.current()),
    map2
  );
  exit3();
  return value;
}
function map2(line, _2, blank) {
  return ">" + (blank ? "" : " ") + line;
}

// node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
function patternInScope(stack, pattern) {
  return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
}
function listInScope(stack, list4, none) {
  if (typeof list4 === "string") {
    list4 = [list4];
  }
  if (!list4 || list4.length === 0) {
    return none;
  }
  let index4 = -1;
  while (++index4 < list4.length) {
    if (stack.includes(list4[index4])) {
      return true;
    }
  }
  return false;
}

// node_modules/mdast-util-to-markdown/lib/handle/break.js
function hardBreak2(_2, _1, state, info) {
  let index4 = -1;
  while (++index4 < state.unsafe.length) {
    if (state.unsafe[index4].character === "\n" && patternInScope(state.stack, state.unsafe[index4])) {
      return /[ \t]/.test(info.before) ? "" : " ";
    }
  }
  return "\\\n";
}

// node_modules/longest-streak/index.js
function longestStreak(value, substring) {
  const source = String(value);
  let index4 = source.indexOf(substring);
  let expected = index4;
  let count = 0;
  let max2 = 0;
  if (typeof substring !== "string") {
    throw new TypeError("Expected substring");
  }
  while (index4 !== -1) {
    if (index4 === expected) {
      if (++count > max2) {
        max2 = count;
      }
    } else {
      count = 1;
    }
    expected = index4 + substring.length;
    index4 = source.indexOf(substring, expected);
  }
  return max2;
}

// node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js
function formatCodeAsIndented(node2, state) {
  return Boolean(
    state.options.fences === false && node2.value && // If there’s no info…
    !node2.lang && // And there’s a non-whitespace character…
    /[^ \r\n]/.test(node2.value) && // And the value doesn’t start or end in a blank…
    !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node2.value)
  );
}

// node_modules/mdast-util-to-markdown/lib/util/check-fence.js
function checkFence(state) {
  const marker = state.options.fence || "`";
  if (marker !== "`" && marker !== "~") {
    throw new Error(
      "Cannot serialize code with `" + marker + "` for `options.fence`, expected `` ` `` or `~`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/code.js
function code2(node2, _2, state, info) {
  const marker = checkFence(state);
  const raw = node2.value || "";
  const suffix = marker === "`" ? "GraveAccent" : "Tilde";
  if (formatCodeAsIndented(node2, state)) {
    const exit4 = state.enter("codeIndented");
    const value2 = state.indentLines(raw, map3);
    exit4();
    return value2;
  }
  const tracker = state.createTracker(info);
  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
  const exit3 = state.enter("codeFenced");
  let value = tracker.move(sequence);
  if (node2.lang) {
    const subexit = state.enter(`codeFencedLang${suffix}`);
    value += tracker.move(
      state.safe(node2.lang, {
        before: value,
        after: " ",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  if (node2.lang && node2.meta) {
    const subexit = state.enter(`codeFencedMeta${suffix}`);
    value += tracker.move(" ");
    value += tracker.move(
      state.safe(node2.meta, {
        before: value,
        after: "\n",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  value += tracker.move("\n");
  if (raw) {
    value += tracker.move(raw + "\n");
  }
  value += tracker.move(sequence);
  exit3();
  return value;
}
function map3(line, _2, blank) {
  return (blank ? "" : "    ") + line;
}

// node_modules/mdast-util-to-markdown/lib/util/check-quote.js
function checkQuote(state) {
  const marker = state.options.quote || '"';
  if (marker !== '"' && marker !== "'") {
    throw new Error(
      "Cannot serialize title with `" + marker + "` for `options.quote`, expected `\"`, or `'`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/definition.js
function definition2(node2, _2, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit3 = state.enter("definition");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  value += tracker.move(
    state.safe(state.associationId(node2), {
      before: value,
      after: "]",
      ...tracker.current()
    })
  );
  value += tracker.move("]: ");
  subexit();
  if (
    // If there’s no url, or…
    !node2.url || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node2.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node2.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node2.url, {
        before: value,
        after: node2.title ? " " : "\n",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node2.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node2.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js
function checkEmphasis(state) {
  const marker = state.options.emphasis || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize emphasis with `" + marker + "` for `options.emphasis`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js
function encodeCharacterReference(code4) {
  return "&#x" + code4.toString(16).toUpperCase() + ";";
}

// node_modules/mdast-util-to-markdown/lib/util/encode-info.js
function encodeInfo(outside, inside, marker) {
  const outsideKind = classifyCharacter(outside);
  const insideKind = classifyCharacter(inside);
  if (outsideKind === void 0) {
    return insideKind === void 0 ? (
      // Letter inside:
      // we have to encode *both* letters for `_` as it is looser.
      // it already forms for `*` (and GFMs `~`).
      marker === "_" ? { inside: true, outside: true } : { inside: false, outside: false }
    ) : insideKind === 1 ? (
      // Whitespace inside: encode both (letter, whitespace).
      { inside: true, outside: true }
    ) : (
      // Punctuation inside: encode outer (letter)
      { inside: false, outside: true }
    );
  }
  if (outsideKind === 1) {
    return insideKind === void 0 ? (
      // Letter inside: already forms.
      { inside: false, outside: false }
    ) : insideKind === 1 ? (
      // Whitespace inside: encode both (whitespace).
      { inside: true, outside: true }
    ) : (
      // Punctuation inside: already forms.
      { inside: false, outside: false }
    );
  }
  return insideKind === void 0 ? (
    // Letter inside: already forms.
    { inside: false, outside: false }
  ) : insideKind === 1 ? (
    // Whitespace inside: encode inner (whitespace).
    { inside: true, outside: false }
  ) : (
    // Punctuation inside: already forms.
    { inside: false, outside: false }
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/emphasis.js
emphasis2.peek = emphasisPeek;
function emphasis2(node2, _2, state, info) {
  const marker = checkEmphasis(state);
  const exit3 = state.enter("emphasis");
  const tracker = state.createTracker(info);
  const before = tracker.move(marker);
  let between = tracker.move(
    state.containerPhrasing(node2, {
      after: marker,
      before,
      ...tracker.current()
    })
  );
  const betweenHead = between.charCodeAt(0);
  const open = encodeInfo(
    info.before.charCodeAt(info.before.length - 1),
    betweenHead,
    marker
  );
  if (open.inside) {
    between = encodeCharacterReference(betweenHead) + between.slice(1);
  }
  const betweenTail = between.charCodeAt(between.length - 1);
  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker);
  if (close.inside) {
    between = between.slice(0, -1) + encodeCharacterReference(betweenTail);
  }
  const after = tracker.move(marker);
  exit3();
  state.attentionEncodeSurroundingInfo = {
    after: close.outside,
    before: open.outside
  };
  return before + between + after;
}
function emphasisPeek(_2, _1, state) {
  return state.options.emphasis || "*";
}

// node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js
function formatHeadingAsSetext(node2, state) {
  let literalWithBreak = false;
  visit(node2, function(node3) {
    if ("value" in node3 && /\r?\n|\r/.test(node3.value) || node3.type === "break") {
      literalWithBreak = true;
      return EXIT;
    }
  });
  return Boolean(
    (!node2.depth || node2.depth < 3) && toString(node2) && (state.options.setext || literalWithBreak)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/heading.js
function heading2(node2, _2, state, info) {
  const rank = Math.max(Math.min(6, node2.depth || 1), 1);
  const tracker = state.createTracker(info);
  if (formatHeadingAsSetext(node2, state)) {
    const exit4 = state.enter("headingSetext");
    const subexit2 = state.enter("phrasing");
    const value2 = state.containerPhrasing(node2, {
      ...tracker.current(),
      before: "\n",
      after: "\n"
    });
    subexit2();
    exit4();
    return value2 + "\n" + (rank === 1 ? "=" : "-").repeat(
      // The whole size…
      value2.length - // Minus the position of the character after the last EOL (or
      // 0 if there is none)…
      (Math.max(value2.lastIndexOf("\r"), value2.lastIndexOf("\n")) + 1)
    );
  }
  const sequence = "#".repeat(rank);
  const exit3 = state.enter("headingAtx");
  const subexit = state.enter("phrasing");
  tracker.move(sequence + " ");
  let value = state.containerPhrasing(node2, {
    before: "# ",
    after: "\n",
    ...tracker.current()
  });
  if (/^[\t ]/.test(value)) {
    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1);
  }
  value = value ? sequence + " " + value : sequence;
  if (state.options.closeAtx) {
    value += " " + sequence;
  }
  subexit();
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/handle/html.js
html4.peek = htmlPeek;
function html4(node2) {
  return node2.value || "";
}
function htmlPeek() {
  return "<";
}

// node_modules/mdast-util-to-markdown/lib/handle/image.js
image2.peek = imagePeek;
function image2(node2, _2, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit3 = state.enter("image");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  value += tracker.move(
    state.safe(node2.alt, { before: value, after: "]", ...tracker.current() })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node2.url && node2.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node2.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node2.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node2.url, {
        before: value,
        after: node2.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node2.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node2.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit3();
  return value;
}
function imagePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/handle/image-reference.js
imageReference2.peek = imageReferencePeek;
function imageReference2(node2, _2, state, info) {
  const type = node2.referenceType;
  const exit3 = state.enter("imageReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  const alt = state.safe(node2.alt, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(alt + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference2 = state.safe(state.associationId(node2), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit3();
  if (type === "full" || !alt || alt !== reference2) {
    value += tracker.move(reference2 + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function imageReferencePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
inlineCode2.peek = inlineCodePeek;
function inlineCode2(node2, _2, state) {
  let value = node2.value || "";
  let sequence = "`";
  let index4 = -1;
  while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
    sequence += "`";
  }
  if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
    value = " " + value + " ";
  }
  while (++index4 < state.unsafe.length) {
    const pattern = state.unsafe[index4];
    const expression = state.compilePattern(pattern);
    let match;
    if (!pattern.atBreak) continue;
    while (match = expression.exec(value)) {
      let position3 = match.index;
      if (value.charCodeAt(position3) === 10 && value.charCodeAt(position3 - 1) === 13) {
        position3--;
      }
      value = value.slice(0, position3) + " " + value.slice(match.index + 1);
    }
  }
  return sequence + value + sequence;
}
function inlineCodePeek() {
  return "`";
}

// node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js
function formatLinkAsAutolink(node2, state) {
  const raw = toString(node2);
  return Boolean(
    !state.options.resourceLink && // If there’s a url…
    node2.url && // And there’s a no title…
    !node2.title && // And the content of `node` is a single text node…
    node2.children && node2.children.length === 1 && node2.children[0].type === "text" && // And if the url is the same as the content…
    (raw === node2.url || "mailto:" + raw === node2.url) && // And that starts w/ a protocol…
    /^[a-z][a-z+.-]+:/i.test(node2.url) && // And that doesn’t contain ASCII control codes (character escapes and
    // references don’t work), space, or angle brackets…
    !/[\0- <>\u007F]/.test(node2.url)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/link.js
link2.peek = linkPeek;
function link2(node2, _2, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const tracker = state.createTracker(info);
  let exit3;
  let subexit;
  if (formatLinkAsAutolink(node2, state)) {
    const stack = state.stack;
    state.stack = [];
    exit3 = state.enter("autolink");
    let value2 = tracker.move("<");
    value2 += tracker.move(
      state.containerPhrasing(node2, {
        before: value2,
        after: ">",
        ...tracker.current()
      })
    );
    value2 += tracker.move(">");
    exit3();
    state.stack = stack;
    return value2;
  }
  exit3 = state.enter("link");
  subexit = state.enter("label");
  let value = tracker.move("[");
  value += tracker.move(
    state.containerPhrasing(node2, {
      before: value,
      after: "](",
      ...tracker.current()
    })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node2.url && node2.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node2.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node2.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node2.url, {
        before: value,
        after: node2.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node2.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node2.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit3();
  return value;
}
function linkPeek(node2, _2, state) {
  return formatLinkAsAutolink(node2, state) ? "<" : "[";
}

// node_modules/mdast-util-to-markdown/lib/handle/link-reference.js
linkReference2.peek = linkReferencePeek;
function linkReference2(node2, _2, state, info) {
  const type = node2.referenceType;
  const exit3 = state.enter("linkReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  const text8 = state.containerPhrasing(node2, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(text8 + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference2 = state.safe(state.associationId(node2), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit3();
  if (type === "full" || !text8 || text8 !== reference2) {
    value += tracker.move(reference2 + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function linkReferencePeek() {
  return "[";
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
function checkBullet(state) {
  const marker = state.options.bullet || "*";
  if (marker !== "*" && marker !== "+" && marker !== "-") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js
function checkBulletOther(state) {
  const bullet = checkBullet(state);
  const bulletOther = state.options.bulletOther;
  if (!bulletOther) {
    return bullet === "*" ? "-" : "*";
  }
  if (bulletOther !== "*" && bulletOther !== "+" && bulletOther !== "-") {
    throw new Error(
      "Cannot serialize items with `" + bulletOther + "` for `options.bulletOther`, expected `*`, `+`, or `-`"
    );
  }
  if (bulletOther === bullet) {
    throw new Error(
      "Expected `bullet` (`" + bullet + "`) and `bulletOther` (`" + bulletOther + "`) to be different"
    );
  }
  return bulletOther;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js
function checkBulletOrdered(state) {
  const marker = state.options.bulletOrdered || ".";
  if (marker !== "." && marker !== ")") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bulletOrdered`, expected `.` or `)`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule.js
function checkRule(state) {
  const marker = state.options.rule || "*";
  if (marker !== "*" && marker !== "-" && marker !== "_") {
    throw new Error(
      "Cannot serialize rules with `" + marker + "` for `options.rule`, expected `*`, `-`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/list.js
function list3(node2, parent, state, info) {
  const exit3 = state.enter("list");
  const bulletCurrent = state.bulletCurrent;
  let bullet = node2.ordered ? checkBulletOrdered(state) : checkBullet(state);
  const bulletOther = node2.ordered ? bullet === "." ? ")" : "." : checkBulletOther(state);
  let useDifferentMarker = parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;
  if (!node2.ordered) {
    const firstListItem = node2.children ? node2.children[0] : void 0;
    if (
      // Bullet could be used as a thematic break marker:
      (bullet === "*" || bullet === "-") && // Empty first list item:
      firstListItem && (!firstListItem.children || !firstListItem.children[0]) && // Directly in two other list items:
      state.stack[state.stack.length - 1] === "list" && state.stack[state.stack.length - 2] === "listItem" && state.stack[state.stack.length - 3] === "list" && state.stack[state.stack.length - 4] === "listItem" && // That are each the first child.
      state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0
    ) {
      useDifferentMarker = true;
    }
    if (checkRule(state) === bullet && firstListItem) {
      let index4 = -1;
      while (++index4 < node2.children.length) {
        const item = node2.children[index4];
        if (item && item.type === "listItem" && item.children && item.children[0] && item.children[0].type === "thematicBreak") {
          useDifferentMarker = true;
          break;
        }
      }
    }
  }
  if (useDifferentMarker) {
    bullet = bulletOther;
  }
  state.bulletCurrent = bullet;
  const value = state.containerFlow(node2, info);
  state.bulletLastUsed = bullet;
  state.bulletCurrent = bulletCurrent;
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
function checkListItemIndent(state) {
  const style = state.options.listItemIndent || "one";
  if (style !== "tab" && style !== "one" && style !== "mixed") {
    throw new Error(
      "Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  }
  return style;
}

// node_modules/mdast-util-to-markdown/lib/handle/list-item.js
function listItem2(node2, parent, state, info) {
  const listItemIndent = checkListItemIndent(state);
  let bullet = state.bulletCurrent || checkBullet(state);
  if (parent && parent.type === "list" && parent.ordered) {
    bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node2)) + bullet;
  }
  let size = bullet.length + 1;
  if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node2.spread)) {
    size = Math.ceil(size / 4) * 4;
  }
  const tracker = state.createTracker(info);
  tracker.move(bullet + " ".repeat(size - bullet.length));
  tracker.shift(size);
  const exit3 = state.enter("listItem");
  const value = state.indentLines(
    state.containerFlow(node2, tracker.current()),
    map4
  );
  exit3();
  return value;
  function map4(line, index4, blank) {
    if (index4) {
      return (blank ? "" : " ".repeat(size)) + line;
    }
    return (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line;
  }
}

// node_modules/mdast-util-to-markdown/lib/handle/paragraph.js
function paragraph2(node2, _2, state, info) {
  const exit3 = state.enter("paragraph");
  const subexit = state.enter("phrasing");
  const value = state.containerPhrasing(node2, info);
  subexit();
  exit3();
  return value;
}

// node_modules/mdast-util-phrasing/lib/index.js
var phrasing = (
  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */
  convert([
    "break",
    "delete",
    "emphasis",
    // To do: next major: removed since footnotes were added to GFM.
    "footnote",
    "footnoteReference",
    "image",
    "imageReference",
    "inlineCode",
    // Enabled by `mdast-util-math`:
    "inlineMath",
    "link",
    "linkReference",
    // Enabled by `mdast-util-mdx`:
    "mdxJsxTextElement",
    // Enabled by `mdast-util-mdx`:
    "mdxTextExpression",
    "strong",
    "text",
    // Enabled by `mdast-util-directive`:
    "textDirective"
  ])
);

// node_modules/mdast-util-to-markdown/lib/handle/root.js
function root3(node2, _2, state, info) {
  const hasPhrasing = node2.children.some(function(d2) {
    return phrasing(d2);
  });
  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow;
  return container.call(state, node2, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-strong.js
function checkStrong(state) {
  const marker = state.options.strong || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize strong with `" + marker + "` for `options.strong`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/strong.js
strong2.peek = strongPeek;
function strong2(node2, _2, state, info) {
  const marker = checkStrong(state);
  const exit3 = state.enter("strong");
  const tracker = state.createTracker(info);
  const before = tracker.move(marker + marker);
  let between = tracker.move(
    state.containerPhrasing(node2, {
      after: marker,
      before,
      ...tracker.current()
    })
  );
  const betweenHead = between.charCodeAt(0);
  const open = encodeInfo(
    info.before.charCodeAt(info.before.length - 1),
    betweenHead,
    marker
  );
  if (open.inside) {
    between = encodeCharacterReference(betweenHead) + between.slice(1);
  }
  const betweenTail = between.charCodeAt(between.length - 1);
  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker);
  if (close.inside) {
    between = between.slice(0, -1) + encodeCharacterReference(betweenTail);
  }
  const after = tracker.move(marker + marker);
  exit3();
  state.attentionEncodeSurroundingInfo = {
    after: close.outside,
    before: open.outside
  };
  return before + between + after;
}
function strongPeek(_2, _1, state) {
  return state.options.strong || "*";
}

// node_modules/mdast-util-to-markdown/lib/handle/text.js
function text6(node2, _2, state, info) {
  return state.safe(node2.value, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js
function checkRuleRepetition(state) {
  const repetition = state.options.ruleRepetition || 3;
  if (repetition < 3) {
    throw new Error(
      "Cannot serialize rules with repetition `" + repetition + "` for `options.ruleRepetition`, expected `3` or more"
    );
  }
  return repetition;
}

// node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js
function thematicBreak3(_2, _1, state) {
  const value = (checkRule(state) + (state.options.ruleSpaces ? " " : "")).repeat(checkRuleRepetition(state));
  return state.options.ruleSpaces ? value.slice(0, -1) : value;
}

// node_modules/mdast-util-to-markdown/lib/handle/index.js
var handle = {
  blockquote: blockquote2,
  break: hardBreak2,
  code: code2,
  definition: definition2,
  emphasis: emphasis2,
  hardBreak: hardBreak2,
  heading: heading2,
  html: html4,
  image: image2,
  imageReference: imageReference2,
  inlineCode: inlineCode2,
  link: link2,
  linkReference: linkReference2,
  list: list3,
  listItem: listItem2,
  paragraph: paragraph2,
  root: root3,
  strong: strong2,
  text: text6,
  thematicBreak: thematicBreak3
};

// node_modules/mdast-util-gfm-table/lib/index.js
function gfmTableFromMarkdown() {
  return {
    enter: {
      table: enterTable,
      tableData: enterCell,
      tableHeader: enterCell,
      tableRow: enterRow
    },
    exit: {
      codeText: exitCodeText,
      table: exitTable,
      tableData: exit2,
      tableHeader: exit2,
      tableRow: exit2
    }
  };
}
function enterTable(token) {
  const align = token._align;
  ok(align, "expected `_align` on table");
  this.enter(
    {
      type: "table",
      align: align.map(function(d2) {
        return d2 === "none" ? null : d2;
      }),
      children: []
    },
    token
  );
  this.data.inTable = true;
}
function exitTable(token) {
  this.exit(token);
  this.data.inTable = void 0;
}
function enterRow(token) {
  this.enter({ type: "tableRow", children: [] }, token);
}
function exit2(token) {
  this.exit(token);
}
function enterCell(token) {
  this.enter({ type: "tableCell", children: [] }, token);
}
function exitCodeText(token) {
  let value = this.resume();
  if (this.data.inTable) {
    value = value.replace(/\\([\\|])/g, replace);
  }
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "inlineCode");
  node2.value = value;
  this.exit(token);
}
function replace($0, $1) {
  return $1 === "|" ? $1 : $0;
}
function gfmTableToMarkdown(options2) {
  const settings = options2 || {};
  const padding = settings.tableCellPadding;
  const alignDelimiters = settings.tablePipeAlign;
  const stringLength = settings.stringLength;
  const around = padding ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: "\n", inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: true, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: true, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: true, character: "-", after: "[:|-]" }
    ],
    handlers: {
      inlineCode: inlineCodeWithTable,
      table: handleTable,
      tableCell: handleTableCell,
      tableRow: handleTableRow
    }
  };
  function handleTable(node2, _2, state, info) {
    return serializeData(handleTableAsData(node2, state, info), node2.align);
  }
  function handleTableRow(node2, _2, state, info) {
    const row = handleTableRowAsData(node2, state, info);
    const value = serializeData([row]);
    return value.slice(0, value.indexOf("\n"));
  }
  function handleTableCell(node2, _2, state, info) {
    const exit3 = state.enter("tableCell");
    const subexit = state.enter("phrasing");
    const value = state.containerPhrasing(node2, {
      ...info,
      before: around,
      after: around
    });
    subexit();
    exit3();
    return value;
  }
  function serializeData(matrix, align) {
    return markdownTable(matrix, {
      align,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength
    });
  }
  function handleTableAsData(node2, state, info) {
    const children = node2.children;
    let index4 = -1;
    const result = [];
    const subexit = state.enter("table");
    while (++index4 < children.length) {
      result[index4] = handleTableRowAsData(children[index4], state, info);
    }
    subexit();
    return result;
  }
  function handleTableRowAsData(node2, state, info) {
    const children = node2.children;
    let index4 = -1;
    const result = [];
    const subexit = state.enter("tableRow");
    while (++index4 < children.length) {
      result[index4] = handleTableCell(children[index4], node2, state, info);
    }
    subexit();
    return result;
  }
  function inlineCodeWithTable(node2, parent, state) {
    let value = handle.inlineCode(node2, parent, state);
    if (state.stack.includes("tableCell")) {
      value = value.replace(/\|/g, "\\$&");
    }
    return value;
  }
}

// node_modules/mdast-util-gfm-task-list-item/lib/index.js
function gfmTaskListItemFromMarkdown() {
  return {
    exit: {
      taskListCheckValueChecked: exitCheck,
      taskListCheckValueUnchecked: exitCheck,
      paragraph: exitParagraphWithTaskListItem
    }
  };
}
function gfmTaskListItemToMarkdown() {
  return {
    unsafe: [{ atBreak: true, character: "-", after: "[:|-]" }],
    handlers: { listItem: listItemWithTaskListItem }
  };
}
function exitCheck(token) {
  const node2 = this.stack[this.stack.length - 2];
  ok(node2.type === "listItem");
  node2.checked = token.type === "taskListCheckValueChecked";
}
function exitParagraphWithTaskListItem(token) {
  const parent = this.stack[this.stack.length - 2];
  if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
    const node2 = this.stack[this.stack.length - 1];
    ok(node2.type === "paragraph");
    const head = node2.children[0];
    if (head && head.type === "text") {
      const siblings = parent.children;
      let index4 = -1;
      let firstParaghraph;
      while (++index4 < siblings.length) {
        const sibling = siblings[index4];
        if (sibling.type === "paragraph") {
          firstParaghraph = sibling;
          break;
        }
      }
      if (firstParaghraph === node2) {
        head.value = head.value.slice(1);
        if (head.value.length === 0) {
          node2.children.shift();
        } else if (node2.position && head.position && typeof head.position.start.offset === "number") {
          head.position.start.column++;
          head.position.start.offset++;
          node2.position.start = Object.assign({}, head.position.start);
        }
      }
    }
  }
  this.exit(token);
}
function listItemWithTaskListItem(node2, parent, state, info) {
  const head = node2.children[0];
  const checkable = typeof node2.checked === "boolean" && head && head.type === "paragraph";
  const checkbox = "[" + (node2.checked ? "x" : " ") + "] ";
  const tracker = state.createTracker(info);
  if (checkable) {
    tracker.move(checkbox);
  }
  let value = handle.listItem(node2, parent, state, {
    ...info,
    ...tracker.current()
  });
  if (checkable) {
    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
  }
  return value;
  function check($0) {
    return $0 + checkbox;
  }
}

// node_modules/mdast-util-gfm/lib/index.js
function gfmFromMarkdown() {
  return [
    gfmAutolinkLiteralFromMarkdown(),
    gfmFootnoteFromMarkdown(),
    gfmStrikethroughFromMarkdown(),
    gfmTableFromMarkdown(),
    gfmTaskListItemFromMarkdown()
  ];
}
function gfmToMarkdown(options2) {
  return {
    extensions: [
      gfmAutolinkLiteralToMarkdown(),
      gfmFootnoteToMarkdown(options2),
      gfmStrikethroughToMarkdown(),
      gfmTableToMarkdown(options2),
      gfmTaskListItemToMarkdown()
    ]
  };
}

// node_modules/micromark-extension-gfm-autolink-literal/dev/lib/syntax.js
var wwwPrefix = { tokenize: tokenizeWwwPrefix, partial: true };
var domain2 = { tokenize: tokenizeDomain, partial: true };
var path = { tokenize: tokenizePath, partial: true };
var trail = { tokenize: tokenizeTrail, partial: true };
var emailDomainDotTrail = {
  tokenize: tokenizeEmailDomainDotTrail,
  partial: true
};
var wwwAutolink = {
  name: "wwwAutolink",
  tokenize: tokenizeWwwAutolink,
  previous: previousWww
};
var protocolAutolink = {
  name: "protocolAutolink",
  tokenize: tokenizeProtocolAutolink,
  previous: previousProtocol
};
var emailAutolink = {
  name: "emailAutolink",
  tokenize: tokenizeEmailAutolink,
  previous: previousEmail
};
var text7 = {};
function gfmAutolinkLiteral() {
  return { text: text7 };
}
var code3 = codes.digit0;
while (code3 < codes.leftCurlyBrace) {
  text7[code3] = emailAutolink;
  code3++;
  if (code3 === codes.colon) code3 = codes.uppercaseA;
  else if (code3 === codes.leftSquareBracket) code3 = codes.lowercaseA;
}
text7[codes.plusSign] = emailAutolink;
text7[codes.dash] = emailAutolink;
text7[codes.dot] = emailAutolink;
text7[codes.underscore] = emailAutolink;
text7[codes.uppercaseH] = [emailAutolink, protocolAutolink];
text7[codes.lowercaseH] = [emailAutolink, protocolAutolink];
text7[codes.uppercaseW] = [emailAutolink, wwwAutolink];
text7[codes.lowercaseW] = [emailAutolink, wwwAutolink];
function tokenizeEmailAutolink(effects, ok3, nok) {
  const self2 = this;
  let dot;
  let data;
  return start3;
  function start3(code4) {
    if (!gfmAtext(code4) || !previousEmail.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code4);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkEmail");
    return atext(code4);
  }
  function atext(code4) {
    if (gfmAtext(code4)) {
      effects.consume(code4);
      return atext;
    }
    if (code4 === codes.atSign) {
      effects.consume(code4);
      return emailDomain;
    }
    return nok(code4);
  }
  function emailDomain(code4) {
    if (code4 === codes.dot) {
      return effects.check(
        emailDomainDotTrail,
        emailDomainAfter,
        emailDomainDot
      )(code4);
    }
    if (code4 === codes.dash || code4 === codes.underscore || asciiAlphanumeric(code4)) {
      data = true;
      effects.consume(code4);
      return emailDomain;
    }
    return emailDomainAfter(code4);
  }
  function emailDomainDot(code4) {
    effects.consume(code4);
    dot = true;
    return emailDomain;
  }
  function emailDomainAfter(code4) {
    if (data && dot && asciiAlpha(self2.previous)) {
      effects.exit("literalAutolinkEmail");
      effects.exit("literalAutolink");
      return ok3(code4);
    }
    return nok(code4);
  }
}
function tokenizeWwwAutolink(effects, ok3, nok) {
  const self2 = this;
  return wwwStart;
  function wwwStart(code4) {
    if (code4 !== codes.uppercaseW && code4 !== codes.lowercaseW || !previousWww.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code4);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkWww");
    return effects.check(
      wwwPrefix,
      effects.attempt(domain2, effects.attempt(path, wwwAfter), nok),
      nok
    )(code4);
  }
  function wwwAfter(code4) {
    effects.exit("literalAutolinkWww");
    effects.exit("literalAutolink");
    return ok3(code4);
  }
}
function tokenizeProtocolAutolink(effects, ok3, nok) {
  const self2 = this;
  let buffer = "";
  let seen = false;
  return protocolStart;
  function protocolStart(code4) {
    if ((code4 === codes.uppercaseH || code4 === codes.lowercaseH) && previousProtocol.call(self2, self2.previous) && !previousUnbalanced(self2.events)) {
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkHttp");
      buffer += String.fromCodePoint(code4);
      effects.consume(code4);
      return protocolPrefixInside;
    }
    return nok(code4);
  }
  function protocolPrefixInside(code4) {
    if (asciiAlpha(code4) && buffer.length < 5) {
      buffer += String.fromCodePoint(code4);
      effects.consume(code4);
      return protocolPrefixInside;
    }
    if (code4 === codes.colon) {
      const protocol = buffer.toLowerCase();
      if (protocol === "http" || protocol === "https") {
        effects.consume(code4);
        return protocolSlashesInside;
      }
    }
    return nok(code4);
  }
  function protocolSlashesInside(code4) {
    if (code4 === codes.slash) {
      effects.consume(code4);
      if (seen) {
        return afterProtocol;
      }
      seen = true;
      return protocolSlashesInside;
    }
    return nok(code4);
  }
  function afterProtocol(code4) {
    return code4 === codes.eof || asciiControl(code4) || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4) || unicodePunctuation(code4) ? nok(code4) : effects.attempt(domain2, effects.attempt(path, protocolAfter), nok)(code4);
  }
  function protocolAfter(code4) {
    effects.exit("literalAutolinkHttp");
    effects.exit("literalAutolink");
    return ok3(code4);
  }
}
function tokenizeWwwPrefix(effects, ok3, nok) {
  let size = 0;
  return wwwPrefixInside;
  function wwwPrefixInside(code4) {
    if ((code4 === codes.uppercaseW || code4 === codes.lowercaseW) && size < 3) {
      size++;
      effects.consume(code4);
      return wwwPrefixInside;
    }
    if (code4 === codes.dot && size === 3) {
      effects.consume(code4);
      return wwwPrefixAfter;
    }
    return nok(code4);
  }
  function wwwPrefixAfter(code4) {
    return code4 === codes.eof ? nok(code4) : ok3(code4);
  }
}
function tokenizeDomain(effects, ok3, nok) {
  let underscoreInLastSegment;
  let underscoreInLastLastSegment;
  let seen;
  return domainInside;
  function domainInside(code4) {
    if (code4 === codes.dot || code4 === codes.underscore) {
      return effects.check(trail, domainAfter, domainAtPunctuation)(code4);
    }
    if (code4 === codes.eof || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4) || code4 !== codes.dash && unicodePunctuation(code4)) {
      return domainAfter(code4);
    }
    seen = true;
    effects.consume(code4);
    return domainInside;
  }
  function domainAtPunctuation(code4) {
    if (code4 === codes.underscore) {
      underscoreInLastSegment = true;
    } else {
      underscoreInLastLastSegment = underscoreInLastSegment;
      underscoreInLastSegment = void 0;
    }
    effects.consume(code4);
    return domainInside;
  }
  function domainAfter(code4) {
    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
      return nok(code4);
    }
    return ok3(code4);
  }
}
function tokenizePath(effects, ok3) {
  let sizeOpen = 0;
  let sizeClose = 0;
  return pathInside;
  function pathInside(code4) {
    if (code4 === codes.leftParenthesis) {
      sizeOpen++;
      effects.consume(code4);
      return pathInside;
    }
    if (code4 === codes.rightParenthesis && sizeClose < sizeOpen) {
      return pathAtPunctuation(code4);
    }
    if (code4 === codes.exclamationMark || code4 === codes.quotationMark || code4 === codes.ampersand || code4 === codes.apostrophe || code4 === codes.rightParenthesis || code4 === codes.asterisk || code4 === codes.comma || code4 === codes.dot || code4 === codes.colon || code4 === codes.semicolon || code4 === codes.lessThan || code4 === codes.questionMark || code4 === codes.rightSquareBracket || code4 === codes.underscore || code4 === codes.tilde) {
      return effects.check(trail, ok3, pathAtPunctuation)(code4);
    }
    if (code4 === codes.eof || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      return ok3(code4);
    }
    effects.consume(code4);
    return pathInside;
  }
  function pathAtPunctuation(code4) {
    if (code4 === codes.rightParenthesis) {
      sizeClose++;
    }
    effects.consume(code4);
    return pathInside;
  }
}
function tokenizeTrail(effects, ok3, nok) {
  return trail2;
  function trail2(code4) {
    if (code4 === codes.exclamationMark || code4 === codes.quotationMark || code4 === codes.apostrophe || code4 === codes.rightParenthesis || code4 === codes.asterisk || code4 === codes.comma || code4 === codes.dot || code4 === codes.colon || code4 === codes.semicolon || code4 === codes.questionMark || code4 === codes.underscore || code4 === codes.tilde) {
      effects.consume(code4);
      return trail2;
    }
    if (code4 === codes.ampersand) {
      effects.consume(code4);
      return trailCharacterReferenceStart;
    }
    if (code4 === codes.rightSquareBracket) {
      effects.consume(code4);
      return trailBracketAfter;
    }
    if (
      // `<` is an end.
      code4 === codes.lessThan || // So is whitespace.
      code4 === codes.eof || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)
    ) {
      return ok3(code4);
    }
    return nok(code4);
  }
  function trailBracketAfter(code4) {
    if (code4 === codes.eof || code4 === codes.leftParenthesis || code4 === codes.leftSquareBracket || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      return ok3(code4);
    }
    return trail2(code4);
  }
  function trailCharacterReferenceStart(code4) {
    return asciiAlpha(code4) ? trailCharacterReferenceInside(code4) : nok(code4);
  }
  function trailCharacterReferenceInside(code4) {
    if (code4 === codes.semicolon) {
      effects.consume(code4);
      return trail2;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return trailCharacterReferenceInside;
    }
    return nok(code4);
  }
}
function tokenizeEmailDomainDotTrail(effects, ok3, nok) {
  return start3;
  function start3(code4) {
    effects.consume(code4);
    return after;
  }
  function after(code4) {
    return asciiAlphanumeric(code4) ? nok(code4) : ok3(code4);
  }
}
function previousWww(code4) {
  return code4 === codes.eof || code4 === codes.leftParenthesis || code4 === codes.asterisk || code4 === codes.underscore || code4 === codes.leftSquareBracket || code4 === codes.rightSquareBracket || code4 === codes.tilde || markdownLineEndingOrSpace(code4);
}
function previousProtocol(code4) {
  return !asciiAlpha(code4);
}
function previousEmail(code4) {
  return !(code4 === codes.slash || gfmAtext(code4));
}
function gfmAtext(code4) {
  return code4 === codes.plusSign || code4 === codes.dash || code4 === codes.dot || code4 === codes.underscore || asciiAlphanumeric(code4);
}
function previousUnbalanced(events) {
  let index4 = events.length;
  let result = false;
  while (index4--) {
    const token = events[index4][1];
    if ((token.type === "labelLink" || token.type === "labelImage") && !token._balanced) {
      result = true;
      break;
    }
    if (token._gfmAutolinkLiteralWalkedInto) {
      result = false;
      break;
    }
  }
  if (events.length > 0 && !result) {
    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
  }
  return result;
}

// node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js
var indent = { tokenize: tokenizeIndent2, partial: true };
function gfmFootnote() {
  return {
    document: {
      [codes.leftSquareBracket]: {
        name: "gfmFootnoteDefinition",
        tokenize: tokenizeDefinitionStart,
        continuation: { tokenize: tokenizeDefinitionContinuation },
        exit: gfmFootnoteDefinitionEnd
      }
    },
    text: {
      [codes.leftSquareBracket]: {
        name: "gfmFootnoteCall",
        tokenize: tokenizeGfmFootnoteCall
      },
      [codes.rightSquareBracket]: {
        name: "gfmPotentialFootnoteCall",
        add: "after",
        tokenize: tokenizePotentialGfmFootnoteCall,
        resolveTo: resolveToPotentialGfmFootnoteCall
      }
    }
  };
}
function tokenizePotentialGfmFootnoteCall(effects, ok3, nok) {
  const self2 = this;
  let index4 = self2.events.length;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let labelStart;
  while (index4--) {
    const token = self2.events[index4][1];
    if (token.type === types.labelImage) {
      labelStart = token;
      break;
    }
    if (token.type === "gfmFootnoteCall" || token.type === types.labelLink || token.type === types.label || token.type === types.image || token.type === types.link) {
      break;
    }
  }
  return start3;
  function start3(code4) {
    ok(code4 === codes.rightSquareBracket, "expected `]`");
    if (!labelStart || !labelStart._balanced) {
      return nok(code4);
    }
    const id3 = normalizeIdentifier(
      self2.sliceSerialize({ start: labelStart.end, end: self2.now() })
    );
    if (id3.codePointAt(0) !== codes.caret || !defined.includes(id3.slice(1))) {
      return nok(code4);
    }
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteCallLabelMarker");
    return ok3(code4);
  }
}
function resolveToPotentialGfmFootnoteCall(events, context) {
  let index4 = events.length;
  let labelStart;
  while (index4--) {
    if (events[index4][1].type === types.labelImage && events[index4][0] === "enter") {
      labelStart = events[index4][1];
      break;
    }
  }
  ok(labelStart, "expected `labelStart` to resolve");
  events[index4 + 1][1].type = types.data;
  events[index4 + 3][1].type = "gfmFootnoteCallLabelMarker";
  const call2 = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, events[index4 + 3][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const marker = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, events[index4 + 3][1].end),
    end: Object.assign({}, events[index4 + 3][1].end)
  };
  marker.end.column++;
  marker.end.offset++;
  marker.end._bufferIndex++;
  const string3 = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, marker.end),
    end: Object.assign({}, events[events.length - 1][1].start)
  };
  const chunk = {
    type: types.chunkString,
    contentType: "string",
    start: Object.assign({}, string3.start),
    end: Object.assign({}, string3.end)
  };
  const replacement = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    events[index4 + 1],
    events[index4 + 2],
    ["enter", call2, context],
    // The `[`
    events[index4 + 3],
    events[index4 + 4],
    // The `^`.
    ["enter", marker, context],
    ["exit", marker, context],
    // Everything in between.
    ["enter", string3, context],
    ["enter", chunk, context],
    ["exit", chunk, context],
    ["exit", string3, context],
    // The ending (`]`, properly parsed and labelled).
    events[events.length - 2],
    events[events.length - 1],
    ["exit", call2, context]
  ];
  events.splice(index4, events.length - index4 + 1, ...replacement);
  return events;
}
function tokenizeGfmFootnoteCall(effects, ok3, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let size = 0;
  let data;
  return start3;
  function start3(code4) {
    ok(code4 === codes.leftSquareBracket, "expected `[`");
    effects.enter("gfmFootnoteCall");
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteCallLabelMarker");
    return callStart;
  }
  function callStart(code4) {
    if (code4 !== codes.caret) return nok(code4);
    effects.enter("gfmFootnoteCallMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteCallMarker");
    effects.enter("gfmFootnoteCallString");
    effects.enter("chunkString").contentType = "string";
    return callData;
  }
  function callData(code4) {
    if (
      // Too long.
      size > constants.linkReferenceSizeMax || // Closing brace with nothing.
      code4 === codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code4 === codes.eof || code4 === codes.leftSquareBracket || markdownLineEndingOrSpace(code4)
    ) {
      return nok(code4);
    }
    if (code4 === codes.rightSquareBracket) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteCallString");
      if (!defined.includes(normalizeIdentifier(self2.sliceSerialize(token)))) {
        return nok(code4);
      }
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code4);
      effects.exit("gfmFootnoteCallLabelMarker");
      effects.exit("gfmFootnoteCall");
      return ok3;
    }
    if (!markdownLineEndingOrSpace(code4)) {
      data = true;
    }
    size++;
    effects.consume(code4);
    return code4 === codes.backslash ? callEscape : callData;
  }
  function callEscape(code4) {
    if (code4 === codes.leftSquareBracket || code4 === codes.backslash || code4 === codes.rightSquareBracket) {
      effects.consume(code4);
      size++;
      return callData;
    }
    return callData(code4);
  }
}
function tokenizeDefinitionStart(effects, ok3, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let identifier;
  let size = 0;
  let data;
  return start3;
  function start3(code4) {
    ok(code4 === codes.leftSquareBracket, "expected `[`");
    effects.enter("gfmFootnoteDefinition")._container = true;
    effects.enter("gfmFootnoteDefinitionLabel");
    effects.enter("gfmFootnoteDefinitionLabelMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteDefinitionLabelMarker");
    return labelAtMarker;
  }
  function labelAtMarker(code4) {
    if (code4 === codes.caret) {
      effects.enter("gfmFootnoteDefinitionMarker");
      effects.consume(code4);
      effects.exit("gfmFootnoteDefinitionMarker");
      effects.enter("gfmFootnoteDefinitionLabelString");
      effects.enter("chunkString").contentType = "string";
      return labelInside;
    }
    return nok(code4);
  }
  function labelInside(code4) {
    if (
      // Too long.
      size > constants.linkReferenceSizeMax || // Closing brace with nothing.
      code4 === codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code4 === codes.eof || code4 === codes.leftSquareBracket || markdownLineEndingOrSpace(code4)
    ) {
      return nok(code4);
    }
    if (code4 === codes.rightSquareBracket) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteDefinitionLabelString");
      identifier = normalizeIdentifier(self2.sliceSerialize(token));
      effects.enter("gfmFootnoteDefinitionLabelMarker");
      effects.consume(code4);
      effects.exit("gfmFootnoteDefinitionLabelMarker");
      effects.exit("gfmFootnoteDefinitionLabel");
      return labelAfter;
    }
    if (!markdownLineEndingOrSpace(code4)) {
      data = true;
    }
    size++;
    effects.consume(code4);
    return code4 === codes.backslash ? labelEscape : labelInside;
  }
  function labelEscape(code4) {
    if (code4 === codes.leftSquareBracket || code4 === codes.backslash || code4 === codes.rightSquareBracket) {
      effects.consume(code4);
      size++;
      return labelInside;
    }
    return labelInside(code4);
  }
  function labelAfter(code4) {
    if (code4 === codes.colon) {
      effects.enter("definitionMarker");
      effects.consume(code4);
      effects.exit("definitionMarker");
      if (!defined.includes(identifier)) {
        defined.push(identifier);
      }
      return factorySpace(
        effects,
        whitespaceAfter,
        "gfmFootnoteDefinitionWhitespace"
      );
    }
    return nok(code4);
  }
  function whitespaceAfter(code4) {
    return ok3(code4);
  }
}
function tokenizeDefinitionContinuation(effects, ok3, nok) {
  return effects.check(blankLine, ok3, effects.attempt(indent, ok3, nok));
}
function gfmFootnoteDefinitionEnd(effects) {
  effects.exit("gfmFootnoteDefinition");
}
function tokenizeIndent2(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(
    effects,
    afterPrefix,
    "gfmFootnoteDefinitionIndent",
    constants.tabSize + 1
  );
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === constants.tabSize ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-extension-gfm-footnote/dev/lib/html.js
var own7 = {}.hasOwnProperty;

// node_modules/micromark-extension-gfm-strikethrough/dev/lib/syntax.js
function gfmStrikethrough(options2) {
  const options_ = options2 || {};
  let single = options_.singleTilde;
  const tokenizer = {
    name: "strikethrough",
    tokenize: tokenizeStrikethrough,
    resolveAll: resolveAllStrikethrough
  };
  if (single === null || single === void 0) {
    single = true;
  }
  return {
    text: { [codes.tilde]: tokenizer },
    insideSpan: { null: [tokenizer] },
    attentionMarkers: { null: [codes.tilde] }
  };
  function resolveAllStrikethrough(events, context) {
    let index4 = -1;
    while (++index4 < events.length) {
      if (events[index4][0] === "enter" && events[index4][1].type === "strikethroughSequenceTemporary" && events[index4][1]._close) {
        let open = index4;
        while (open--) {
          if (events[open][0] === "exit" && events[open][1].type === "strikethroughSequenceTemporary" && events[open][1]._open && // If the sizes are the same:
          events[index4][1].end.offset - events[index4][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
            events[index4][1].type = "strikethroughSequence";
            events[open][1].type = "strikethroughSequence";
            const strikethrough2 = {
              type: "strikethrough",
              start: Object.assign({}, events[open][1].start),
              end: Object.assign({}, events[index4][1].end)
            };
            const text8 = {
              type: "strikethroughText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index4][1].start)
            };
            const nextEvents = [
              ["enter", strikethrough2, context],
              ["enter", events[open][1], context],
              ["exit", events[open][1], context],
              ["enter", text8, context]
            ];
            const insideSpan2 = context.parser.constructs.insideSpan.null;
            if (insideSpan2) {
              splice(
                nextEvents,
                nextEvents.length,
                0,
                resolveAll(insideSpan2, events.slice(open + 1, index4), context)
              );
            }
            splice(nextEvents, nextEvents.length, 0, [
              ["exit", text8, context],
              ["enter", events[index4][1], context],
              ["exit", events[index4][1], context],
              ["exit", strikethrough2, context]
            ]);
            splice(events, open - 1, index4 - open + 3, nextEvents);
            index4 = open + nextEvents.length - 2;
            break;
          }
        }
      }
    }
    index4 = -1;
    while (++index4 < events.length) {
      if (events[index4][1].type === "strikethroughSequenceTemporary") {
        events[index4][1].type = types.data;
      }
    }
    return events;
  }
  function tokenizeStrikethrough(effects, ok3, nok) {
    const previous3 = this.previous;
    const events = this.events;
    let size = 0;
    return start3;
    function start3(code4) {
      ok(code4 === codes.tilde, "expected `~`");
      if (previous3 === codes.tilde && events[events.length - 1][1].type !== types.characterEscape) {
        return nok(code4);
      }
      effects.enter("strikethroughSequenceTemporary");
      return more(code4);
    }
    function more(code4) {
      const before = classifyCharacter(previous3);
      if (code4 === codes.tilde) {
        if (size > 1) return nok(code4);
        effects.consume(code4);
        size++;
        return more;
      }
      if (size < 2 && !single) return nok(code4);
      const token = effects.exit("strikethroughSequenceTemporary");
      const after = classifyCharacter(code4);
      token._open = !after || after === constants.attentionSideAfter && Boolean(before);
      token._close = !before || before === constants.attentionSideAfter && Boolean(after);
      return ok3(code4);
    }
  }
}

// node_modules/micromark-extension-gfm-table/dev/lib/edit-map.js
var EditMap = class {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {undefined}
   */
  add(index4, remove, add) {
    addImplementation(this, index4, remove, add);
  }
  // To do: add this when moving to `micromark`.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {undefined}
  //  */
  // addBefore(index, remove, add) {
  //   addImplementation(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {undefined}
   */
  consume(events) {
    this.map.sort(function(a2, b2) {
      return a2[0] - b2[0];
    });
    if (this.map.length === 0) {
      return;
    }
    let index4 = this.map.length;
    const vecs = [];
    while (index4 > 0) {
      index4 -= 1;
      vecs.push(
        events.slice(this.map[index4][0] + this.map[index4][1]),
        this.map[index4][2]
      );
      events.length = this.map[index4][0];
    }
    vecs.push(events.slice());
    events.length = 0;
    let slice = vecs.pop();
    while (slice) {
      for (const element4 of slice) {
        events.push(element4);
      }
      slice = vecs.pop();
    }
    this.map.length = 0;
  }
};
function addImplementation(editMap, at2, remove, add) {
  let index4 = 0;
  if (remove === 0 && add.length === 0) {
    return;
  }
  while (index4 < editMap.map.length) {
    if (editMap.map[index4][0] === at2) {
      editMap.map[index4][1] += remove;
      editMap.map[index4][2].push(...add);
      return;
    }
    index4 += 1;
  }
  editMap.map.push([at2, remove, add]);
}

// node_modules/micromark-extension-gfm-table/dev/lib/infer.js
function gfmTableAlign(events, index4) {
  ok(events[index4][1].type === "table", "expected table");
  let inDelimiterRow = false;
  const align = [];
  while (index4 < events.length) {
    const event = events[index4];
    if (inDelimiterRow) {
      if (event[0] === "enter") {
        if (event[1].type === "tableContent") {
          align.push(
            events[index4 + 1][1].type === "tableDelimiterMarker" ? "left" : "none"
          );
        }
      } else if (event[1].type === "tableContent") {
        if (events[index4 - 1][1].type === "tableDelimiterMarker") {
          const alignIndex = align.length - 1;
          align[alignIndex] = align[alignIndex] === "left" ? "center" : "right";
        }
      } else if (event[1].type === "tableDelimiterRow") {
        break;
      }
    } else if (event[0] === "enter" && event[1].type === "tableDelimiterRow") {
      inDelimiterRow = true;
    }
    index4 += 1;
  }
  return align;
}

// node_modules/micromark-extension-gfm-table/dev/lib/syntax.js
function gfmTable() {
  return {
    flow: {
      null: { name: "table", tokenize: tokenizeTable, resolveAll: resolveTable }
    }
  };
}
function tokenizeTable(effects, ok3, nok) {
  const self2 = this;
  let size = 0;
  let sizeB = 0;
  let seen;
  return start3;
  function start3(code4) {
    let index4 = self2.events.length - 1;
    while (index4 > -1) {
      const type = self2.events[index4][1].type;
      if (type === types.lineEnding || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      type === types.linePrefix)
        index4--;
      else break;
    }
    const tail = index4 > -1 ? self2.events[index4][1].type : null;
    const next = tail === "tableHead" || tail === "tableRow" ? bodyRowStart : headRowBefore;
    if (next === bodyRowStart && self2.parser.lazy[self2.now().line]) {
      return nok(code4);
    }
    return next(code4);
  }
  function headRowBefore(code4) {
    effects.enter("tableHead");
    effects.enter("tableRow");
    return headRowStart(code4);
  }
  function headRowStart(code4) {
    if (code4 === codes.verticalBar) {
      return headRowBreak(code4);
    }
    seen = true;
    sizeB += 1;
    return headRowBreak(code4);
  }
  function headRowBreak(code4) {
    if (code4 === codes.eof) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      if (sizeB > 1) {
        sizeB = 0;
        self2.interrupt = true;
        effects.exit("tableRow");
        effects.enter(types.lineEnding);
        effects.consume(code4);
        effects.exit(types.lineEnding);
        return headDelimiterStart;
      }
      return nok(code4);
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, headRowBreak, types.whitespace)(code4);
    }
    sizeB += 1;
    if (seen) {
      seen = false;
      size += 1;
    }
    if (code4 === codes.verticalBar) {
      effects.enter("tableCellDivider");
      effects.consume(code4);
      effects.exit("tableCellDivider");
      seen = true;
      return headRowBreak;
    }
    effects.enter(types.data);
    return headRowData(code4);
  }
  function headRowData(code4) {
    if (code4 === codes.eof || code4 === codes.verticalBar || markdownLineEndingOrSpace(code4)) {
      effects.exit(types.data);
      return headRowBreak(code4);
    }
    effects.consume(code4);
    return code4 === codes.backslash ? headRowEscape : headRowData;
  }
  function headRowEscape(code4) {
    if (code4 === codes.backslash || code4 === codes.verticalBar) {
      effects.consume(code4);
      return headRowData;
    }
    return headRowData(code4);
  }
  function headDelimiterStart(code4) {
    self2.interrupt = false;
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code4);
    }
    effects.enter("tableDelimiterRow");
    seen = false;
    if (markdownSpace(code4)) {
      ok(self2.parser.constructs.disable.null, "expected `disabled.null`");
      return factorySpace(
        effects,
        headDelimiterBefore,
        types.linePrefix,
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
      )(code4);
    }
    return headDelimiterBefore(code4);
  }
  function headDelimiterBefore(code4) {
    if (code4 === codes.dash || code4 === codes.colon) {
      return headDelimiterValueBefore(code4);
    }
    if (code4 === codes.verticalBar) {
      seen = true;
      effects.enter("tableCellDivider");
      effects.consume(code4);
      effects.exit("tableCellDivider");
      return headDelimiterCellBefore;
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterCellBefore(code4) {
    if (markdownSpace(code4)) {
      return factorySpace(
        effects,
        headDelimiterValueBefore,
        types.whitespace
      )(code4);
    }
    return headDelimiterValueBefore(code4);
  }
  function headDelimiterValueBefore(code4) {
    if (code4 === codes.colon) {
      sizeB += 1;
      seen = true;
      effects.enter("tableDelimiterMarker");
      effects.consume(code4);
      effects.exit("tableDelimiterMarker");
      return headDelimiterLeftAlignmentAfter;
    }
    if (code4 === codes.dash) {
      sizeB += 1;
      return headDelimiterLeftAlignmentAfter(code4);
    }
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      return headDelimiterCellAfter(code4);
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterLeftAlignmentAfter(code4) {
    if (code4 === codes.dash) {
      effects.enter("tableDelimiterFiller");
      return headDelimiterFiller(code4);
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterFiller(code4) {
    if (code4 === codes.dash) {
      effects.consume(code4);
      return headDelimiterFiller;
    }
    if (code4 === codes.colon) {
      seen = true;
      effects.exit("tableDelimiterFiller");
      effects.enter("tableDelimiterMarker");
      effects.consume(code4);
      effects.exit("tableDelimiterMarker");
      return headDelimiterRightAlignmentAfter;
    }
    effects.exit("tableDelimiterFiller");
    return headDelimiterRightAlignmentAfter(code4);
  }
  function headDelimiterRightAlignmentAfter(code4) {
    if (markdownSpace(code4)) {
      return factorySpace(
        effects,
        headDelimiterCellAfter,
        types.whitespace
      )(code4);
    }
    return headDelimiterCellAfter(code4);
  }
  function headDelimiterCellAfter(code4) {
    if (code4 === codes.verticalBar) {
      return headDelimiterBefore(code4);
    }
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      if (!seen || size !== sizeB) {
        return headDelimiterNok(code4);
      }
      effects.exit("tableDelimiterRow");
      effects.exit("tableHead");
      return ok3(code4);
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterNok(code4) {
    return nok(code4);
  }
  function bodyRowStart(code4) {
    effects.enter("tableRow");
    return bodyRowBreak(code4);
  }
  function bodyRowBreak(code4) {
    if (code4 === codes.verticalBar) {
      effects.enter("tableCellDivider");
      effects.consume(code4);
      effects.exit("tableCellDivider");
      return bodyRowBreak;
    }
    if (code4 === codes.eof || markdownLineEnding(code4)) {
      effects.exit("tableRow");
      return ok3(code4);
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, bodyRowBreak, types.whitespace)(code4);
    }
    effects.enter(types.data);
    return bodyRowData(code4);
  }
  function bodyRowData(code4) {
    if (code4 === codes.eof || code4 === codes.verticalBar || markdownLineEndingOrSpace(code4)) {
      effects.exit(types.data);
      return bodyRowBreak(code4);
    }
    effects.consume(code4);
    return code4 === codes.backslash ? bodyRowEscape : bodyRowData;
  }
  function bodyRowEscape(code4) {
    if (code4 === codes.backslash || code4 === codes.verticalBar) {
      effects.consume(code4);
      return bodyRowData;
    }
    return bodyRowData(code4);
  }
}
function resolveTable(events, context) {
  let index4 = -1;
  let inFirstCellAwaitingPipe = true;
  let rowKind = 0;
  let lastCell = [0, 0, 0, 0];
  let cell = [0, 0, 0, 0];
  let afterHeadAwaitingFirstBodyRow = false;
  let lastTableEnd = 0;
  let currentTable;
  let currentBody;
  let currentCell;
  const map4 = new EditMap();
  while (++index4 < events.length) {
    const event = events[index4];
    const token = event[1];
    if (event[0] === "enter") {
      if (token.type === "tableHead") {
        afterHeadAwaitingFirstBodyRow = false;
        if (lastTableEnd !== 0) {
          ok(currentTable, "there should be a table opening");
          flushTableEnd(map4, context, lastTableEnd, currentTable, currentBody);
          currentBody = void 0;
          lastTableEnd = 0;
        }
        currentTable = {
          type: "table",
          start: Object.assign({}, token.start),
          // Note: correct end is set later.
          end: Object.assign({}, token.end)
        };
        map4.add(index4, 0, [["enter", currentTable, context]]);
      } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
        inFirstCellAwaitingPipe = true;
        currentCell = void 0;
        lastCell = [0, 0, 0, 0];
        cell = [0, index4 + 1, 0, 0];
        if (afterHeadAwaitingFirstBodyRow) {
          afterHeadAwaitingFirstBodyRow = false;
          currentBody = {
            type: "tableBody",
            start: Object.assign({}, token.start),
            // Note: correct end is set later.
            end: Object.assign({}, token.end)
          };
          map4.add(index4, 0, [["enter", currentBody, context]]);
        }
        rowKind = token.type === "tableDelimiterRow" ? 2 : currentBody ? 3 : 1;
      } else if (rowKind && (token.type === types.data || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
        inFirstCellAwaitingPipe = false;
        if (cell[2] === 0) {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(
              map4,
              context,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
            lastCell = [0, 0, 0, 0];
          }
          cell[2] = index4;
        }
      } else if (token.type === "tableCellDivider") {
        if (inFirstCellAwaitingPipe) {
          inFirstCellAwaitingPipe = false;
        } else {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(
              map4,
              context,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
          }
          lastCell = cell;
          cell = [lastCell[1], index4, 0, 0];
        }
      }
    } else if (token.type === "tableHead") {
      afterHeadAwaitingFirstBodyRow = true;
      lastTableEnd = index4;
    } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
      lastTableEnd = index4;
      if (lastCell[1] !== 0) {
        cell[0] = cell[1];
        currentCell = flushCell(
          map4,
          context,
          lastCell,
          rowKind,
          index4,
          currentCell
        );
      } else if (cell[1] !== 0) {
        currentCell = flushCell(map4, context, cell, rowKind, index4, currentCell);
      }
      rowKind = 0;
    } else if (rowKind && (token.type === types.data || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
      cell[3] = index4;
    }
  }
  if (lastTableEnd !== 0) {
    ok(currentTable, "expected table opening");
    flushTableEnd(map4, context, lastTableEnd, currentTable, currentBody);
  }
  map4.consume(context.events);
  index4 = -1;
  while (++index4 < context.events.length) {
    const event = context.events[index4];
    if (event[0] === "enter" && event[1].type === "table") {
      event[1]._align = gfmTableAlign(context.events, index4);
    }
  }
  return events;
}
function flushCell(map4, context, range, rowKind, rowEnd, previousCell) {
  const groupName = rowKind === 1 ? "tableHeader" : rowKind === 2 ? "tableDelimiter" : "tableData";
  const valueName = "tableContent";
  if (range[0] !== 0) {
    ok(previousCell, "expected previous cell enter");
    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
    map4.add(range[0], 0, [["exit", previousCell, context]]);
  }
  const now = getPoint(context.events, range[1]);
  previousCell = {
    type: groupName,
    start: Object.assign({}, now),
    // Note: correct end is set later.
    end: Object.assign({}, now)
  };
  map4.add(range[1], 0, [["enter", previousCell, context]]);
  if (range[2] !== 0) {
    const relatedStart = getPoint(context.events, range[2]);
    const relatedEnd = getPoint(context.events, range[3]);
    const valueToken = {
      type: valueName,
      start: Object.assign({}, relatedStart),
      end: Object.assign({}, relatedEnd)
    };
    map4.add(range[2], 0, [["enter", valueToken, context]]);
    ok(range[3] !== 0);
    if (rowKind !== 2) {
      const start3 = context.events[range[2]];
      const end2 = context.events[range[3]];
      start3[1].end = Object.assign({}, end2[1].end);
      start3[1].type = types.chunkText;
      start3[1].contentType = constants.contentTypeText;
      if (range[3] > range[2] + 1) {
        const a2 = range[2] + 1;
        const b2 = range[3] - range[2] - 1;
        map4.add(a2, b2, []);
      }
    }
    map4.add(range[3] + 1, 0, [["exit", valueToken, context]]);
  }
  if (rowEnd !== void 0) {
    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
    map4.add(rowEnd, 0, [["exit", previousCell, context]]);
    previousCell = void 0;
  }
  return previousCell;
}
function flushTableEnd(map4, context, index4, table2, tableBody) {
  const exits = [];
  const related = getPoint(context.events, index4);
  if (tableBody) {
    tableBody.end = Object.assign({}, related);
    exits.push(["exit", tableBody, context]);
  }
  table2.end = Object.assign({}, related);
  exits.push(["exit", table2, context]);
  map4.add(index4 + 1, 0, exits);
}
function getPoint(events, index4) {
  const event = events[index4];
  const side = event[0] === "enter" ? "start" : "end";
  return event[1][side];
}

// node_modules/micromark-extension-gfm-tagfilter/lib/index.js
var reFlow = /<(\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\t\n\f\r />])/gi;
var reText = new RegExp("^" + reFlow.source, "i");

// node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js
var tasklistCheck = { name: "tasklistCheck", tokenize: tokenizeTasklistCheck };
function gfmTaskListItem() {
  return {
    text: { [codes.leftSquareBracket]: tasklistCheck }
  };
}
function tokenizeTasklistCheck(effects, ok3, nok) {
  const self2 = this;
  return open;
  function open(code4) {
    ok(code4 === codes.leftSquareBracket, "expected `[`");
    if (
      // Exit if there’s stuff before.
      self2.previous !== codes.eof || // Exit if not in the first content that is the first child of a list
      // item.
      !self2._gfmTasklistFirstContentOfListItem
    ) {
      return nok(code4);
    }
    effects.enter("taskListCheck");
    effects.enter("taskListCheckMarker");
    effects.consume(code4);
    effects.exit("taskListCheckMarker");
    return inside;
  }
  function inside(code4) {
    if (markdownLineEndingOrSpace(code4)) {
      effects.enter("taskListCheckValueUnchecked");
      effects.consume(code4);
      effects.exit("taskListCheckValueUnchecked");
      return close;
    }
    if (code4 === codes.uppercaseX || code4 === codes.lowercaseX) {
      effects.enter("taskListCheckValueChecked");
      effects.consume(code4);
      effects.exit("taskListCheckValueChecked");
      return close;
    }
    return nok(code4);
  }
  function close(code4) {
    if (code4 === codes.rightSquareBracket) {
      effects.enter("taskListCheckMarker");
      effects.consume(code4);
      effects.exit("taskListCheckMarker");
      effects.exit("taskListCheck");
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    if (markdownLineEnding(code4)) {
      return ok3(code4);
    }
    if (markdownSpace(code4)) {
      return effects.check({ tokenize: spaceThenNonSpace }, ok3, nok)(code4);
    }
    return nok(code4);
  }
}
function spaceThenNonSpace(effects, ok3, nok) {
  return factorySpace(effects, after, types.whitespace);
  function after(code4) {
    return code4 === codes.eof ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-extension-gfm/index.js
function gfm(options2) {
  return combineExtensions([
    gfmAutolinkLiteral(),
    gfmFootnote(),
    gfmStrikethrough(options2),
    gfmTable(),
    gfmTaskListItem()
  ]);
}

// node_modules/remark-gfm/lib/index.js
var emptyOptions5 = {};
function remarkGfm(options2) {
  const self2 = (
    /** @type {Processor<Root>} */
    this
  );
  const settings = options2 || emptyOptions5;
  const data = self2.data();
  const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
  const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
  const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
  micromarkExtensions.push(gfm(settings));
  fromMarkdownExtensions.push(gfmFromMarkdown());
  toMarkdownExtensions.push(gfmToMarkdown(settings));
}

// node_modules/stream-chat-react/dist/components/Message/renderText/componentRenderers/Anchor.js
var import_react143 = __toESM(require_react());
var Anchor = ({ children, href }) => {
  const isEmail = href == null ? void 0 : href.startsWith("mailto:");
  const isUrl2 = href == null ? void 0 : href.startsWith("http");
  if (!href || !isEmail && !isUrl2)
    return import_react143.default.createElement(import_react143.default.Fragment, null, children);
  return import_react143.default.createElement("a", { className: clsx_default({ "str-chat__message-url-link": isUrl2 }), href, rel: "nofollow noreferrer noopener", target: "_blank" }, children);
};

// node_modules/stream-chat-react/dist/components/Message/renderText/componentRenderers/Emoji.js
var import_react144 = __toESM(require_react());
var Emoji = ({ children }) => import_react144.default.createElement("span", { className: "inline-text-emoji", "data-testid": "inline-text-emoji" }, children);

// node_modules/stream-chat-react/dist/components/Message/renderText/componentRenderers/Mention.js
var import_react145 = __toESM(require_react());
var Mention = ({ children, node: { mentionedUser } }) => import_react145.default.createElement("span", { className: "str-chat__message-mention", "data-user-id": mentionedUser.id }, children);

// node_modules/stream-chat-react/dist/components/Message/renderText/renderText.js
var defaultAllowedTagNames = [
  "html",
  "text",
  "br",
  "p",
  "em",
  "strong",
  "a",
  "ol",
  "ul",
  "li",
  "code",
  "pre",
  "blockquote",
  "del",
  "table",
  "thead",
  "tbody",
  "th",
  "tr",
  "td",
  "tfoot",
  // custom types (tagNames)
  "emoji",
  "mention",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "ins"
];
function formatUrlForDisplay(url) {
  try {
    return decodeURIComponent(url).replace(detectHttp, "");
  } catch (e) {
    return url;
  }
}
function encodeDecode(url) {
  try {
    return encodeURI(decodeURIComponent(url));
  } catch (error) {
    return url;
  }
}
var urlTransform = (uri) => uri.startsWith("app://") ? uri : defaultUrlTransform(uri);
var getPluginsForward = (plugins) => plugins;
var markDownRenderers = {
  a: Anchor,
  emoji: Emoji,
  mention: Mention
};
var renderText = (text8, mentionedUsers, { allowedTagNames = defaultAllowedTagNames, customMarkDownRenderers, getRehypePlugins = getPluginsForward, getRemarkPlugins = getPluginsForward } = {}) => {
  if (!text8)
    return null;
  if (text8.trim().length === 1)
    return import_react146.default.createElement(import_react146.default.Fragment, null, text8);
  let newText = text8;
  const markdownLinks = matchMarkdownLinks(newText);
  const codeBlocks = messageCodeBlocks(newText);
  const links = [...find(newText, "email"), ...find(newText, "url")];
  for (let i2 = links.length - 1; i2 >= 0; i2--) {
    const { end: end2, href, start: start3, type, value } = links[i2];
    const linkIsInBlock = codeBlocks.some((block) => block == null ? void 0 : block.includes(value));
    const noParsingNeeded = markdownLinks && markdownLinks.filter((text9) => {
      const strippedHref = href == null ? void 0 : href.replace(detectHttp, "");
      const strippedText = text9 == null ? void 0 : text9.replace(detectHttp, "");
      if (!strippedHref || !strippedText)
        return false;
      return strippedHref.includes(strippedText) || strippedText.includes(strippedHref);
    });
    if (noParsingNeeded.length > 0 || linkIsInBlock)
      continue;
    try {
      if (type === "email" && mentionedUsers) {
        const emailMatchesWithName = mentionedUsers.find((u3) => u3.name === value);
        if (emailMatchesWithName) {
          const isMention = newText.charAt(start3 - 1) === "@";
          newText = newText.slice(0, start3) + (isMention ? value : `[${value}](${encodeDecode(href)})`) + newText.slice(end2);
        }
      } else {
        const displayLink = type === "email" ? value : formatUrlForDisplay(href);
        newText = newText.slice(0, start3) + `[${displayLink}](${encodeDecode(href)})` + newText.slice(end2);
      }
    } catch (e) {
      void e;
    }
  }
  const remarkPlugins2 = [
    htmlToTextPlugin,
    keepLineBreaksPlugin,
    [remarkGfm, { singleTilde: false }],
    plusPlusToEmphasis,
    imageToLink
  ];
  const rehypePlugins = [emojiMarkdownPlugin];
  if (mentionedUsers == null ? void 0 : mentionedUsers.length) {
    rehypePlugins.push(mentionsMarkdownPlugin(mentionedUsers));
  }
  return import_react146.default.createElement(
    ErrorBoundary,
    { fallback: import_react146.default.createElement(import_react146.default.Fragment, null, text8) },
    import_react146.default.createElement(Markdown, { allowedElements: allowedTagNames, components: {
      ...markDownRenderers,
      ...customMarkDownRenderers
    }, rehypePlugins: getRehypePlugins(rehypePlugins), remarkPlugins: getRemarkPlugins(remarkPlugins2), skipHtml: true, unwrapDisallowed: true, urlTransform }, newText)
  );
};

// node_modules/stream-chat-react/dist/components/Message/FixedHeightMessage.js
var selectColor = (number2, dark) => {
  const hue = number2 * 137.508;
  return `hsl(${hue},${dark ? "50%" : "85%"}, ${dark ? "75%" : "55%"})`;
};
var hashUserId = (userId) => {
  const hash3 = userId.split("").reduce((acc, c2) => {
    acc = (acc << 5) - acc + c2.charCodeAt(0);
    return acc & acc;
  }, 0);
  return Math.abs(hash3) / 10 ** Math.ceil(Math.log10(Math.abs(hash3) + 1));
};
var getUserColor = (theme, userId) => selectColor(hashUserId(userId), theme.includes("dark"));
var UnMemoizedFixedHeightMessage = (props) => {
  var _a, _b, _c, _d;
  const { groupedByUser: propGroupedByUser, message: propMessage } = props;
  const { theme } = useChatContext("FixedHeightMessage");
  const { groupedByUser: contextGroupedByUser, message: contextMessage } = useMessageContext("FixedHeightMessage");
  const { MessageDeleted: MessageDeleted2 = MessageDeleted } = useComponentContext("FixedHeightMessage");
  const { userLanguage } = useTranslationContext("FixedHeightMessage");
  const groupedByUser = propGroupedByUser !== void 0 ? propGroupedByUser : contextGroupedByUser;
  const message = propMessage || contextMessage;
  const handleDelete2 = useDeleteHandler(message);
  const role = useUserRole(message);
  const messageTextToRender = ((_a = message == null ? void 0 : message.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || (message == null ? void 0 : message.text);
  const renderedText = (0, import_react147.useMemo)(() => renderText(messageTextToRender, message.mentioned_users), [message.mentioned_users, messageTextToRender]);
  const userId = ((_b = message.user) == null ? void 0 : _b.id) || "";
  const userColor = (0, import_react147.useMemo)(() => getUserColor(theme, userId), [userId, theme]);
  const messageActionsHandler = (0, import_react147.useCallback)(() => getMessageActions(["delete"], { canDelete: role.canDelete }), [role]);
  const images = (_c = message == null ? void 0 : message.attachments) == null ? void 0 : _c.filter(({ type }) => type === "image");
  return import_react147.default.createElement(
    "div",
    { className: `str-chat__virtual-message__wrapper ${role.isMyMessage ? "str-chat__virtual-message__wrapper--me" : ""} ${groupedByUser ? "str-chat__virtual-message__wrapper--group" : ""}`, key: message.id },
    message.user && import_react147.default.createElement(Avatar, { image: message.user.image, name: message.user.name || message.user.id, user: message.user }),
    import_react147.default.createElement(
      "div",
      { className: "str-chat__virtual-message__content" },
      import_react147.default.createElement(
        "div",
        { className: "str-chat__virtual-message__meta" },
        import_react147.default.createElement(
          "div",
          { className: "str-chat__virtual-message__author", style: { color: userColor } },
          import_react147.default.createElement("strong", null, ((_d = message.user) == null ? void 0 : _d.name) || "unknown")
        )
      ),
      message.deleted_at || message.type === "deleted" ? import_react147.default.createElement(MessageDeleted2, { message }) : import_react147.default.createElement(
        import_react147.default.Fragment,
        null,
        images && import_react147.default.createElement(Gallery, { images }),
        import_react147.default.createElement(
          "div",
          { className: "str-chat__virtual-message__text", "data-testid": "msg-text" },
          renderedText,
          import_react147.default.createElement(
            "div",
            { className: "str-chat__virtual-message__data" },
            import_react147.default.createElement(MessageActions, { customWrapperClass: "str-chat__virtual-message__actions", getMessageActions: messageActionsHandler, handleDelete: handleDelete2, message, mine: () => role.isMyMessage }),
            import_react147.default.createElement(
              "span",
              { className: "str-chat__virtual-message__date" },
              import_react147.default.createElement(MessageTimestamp, { customClass: "str-chat__message-simple-timestamp", message })
            )
          )
        )
      )
    )
  );
};
var FixedHeightMessage = import_react147.default.memo(UnMemoizedFixedHeightMessage);

// node_modules/stream-chat-react/dist/components/Message/Message.js
var import_react242 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/MessageSimple.js
var import_react241 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageBounce/MessageBounceModal.js
var import_react148 = __toESM(require_react());
function MessageBounceModal({ MessageBouncePrompt: MessageBouncePrompt2, ...modalProps }) {
  const { Modal: Modal2 = Modal } = useComponentContext();
  return import_react148.default.createElement(
    Modal2,
    { className: "str-chat__message-bounce-modal", ...modalProps },
    import_react148.default.createElement(
      MessageBounceProvider,
      null,
      import_react148.default.createElement(MessageBouncePrompt2, { onClose: modalProps.onClose })
    )
  );
}

// node_modules/stream-chat-react/dist/components/MessageBounce/MessageBouncePrompt.js
var import_react149 = __toESM(require_react());
function MessageBouncePrompt({ children, onClose }) {
  const { handleDelete: handleDelete2, handleEdit, handleRetry } = useMessageBounceContext("MessageBouncePrompt");
  const { t: t2 } = useTranslationContext("MessageBouncePrompt");
  function createHandler(handle2) {
    return (e) => {
      handle2(e);
      onClose == null ? void 0 : onClose(e);
    };
  }
  return import_react149.default.createElement(
    "div",
    { className: "str-chat__message-bounce-prompt", "data-testid": "message-bounce-prompt" },
    import_react149.default.createElement("div", { className: "str-chat__message-bounce-prompt-header" }, children ?? t2("This message did not meet our content guidelines")),
    import_react149.default.createElement(
      "div",
      { className: "str-chat__message-bounce-actions" },
      import_react149.default.createElement("button", { className: "str-chat__message-bounce-edit", "data-testid": "message-bounce-edit", onClick: createHandler(handleEdit), type: "button" }, t2("Edit Message")),
      import_react149.default.createElement("button", { className: "str-chat__message-bounce-send", "data-testid": "message-bounce-send", onClick: createHandler(handleRetry) }, t2("Send Anyway")),
      import_react149.default.createElement("button", { className: "str-chat__message-bounce-delete", "data-testid": "message-bounce-delete", onClick: createHandler(handleDelete2) }, t2("Delete"))
    )
  );
}

// node_modules/stream-chat-react/dist/components/Message/MessageBlocked.js
var import_react150 = __toESM(require_react());
var MessageBlocked = () => {
  const { message } = useMessageContext();
  const { t: t2 } = useTranslationContext("MessageBlocked");
  const { isMyMessage } = useUserRole(message);
  const messageClasses = clsx_default("str-chat__message str-chat__message-simple str-chat__message--blocked", message.type, {
    "str-chat__message--me str-chat__message-simple--me": isMyMessage,
    "str-chat__message--other": !isMyMessage
  });
  return import_react150.default.createElement(
    "div",
    { className: messageClasses, "data-testid": "message-blocked-component", key: message.id },
    import_react150.default.createElement("div", { className: "str-chat__message--blocked-inner" }, t2("Message was blocked by moderation policies"))
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageOptions.js
var import_react156 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelectorWithButton.js
var import_react155 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelector.js
var import_react154 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/reactionOptions.js
var import_react153 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/StreamEmoji.js
var import_react152 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/SpriteImage.js
var import_react151 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/utils/utils.js
var isMutableRef = (ref) => {
  if (ref) {
    return ref.current !== void 0;
  }
  return false;
};
var getImageDimensions = (source) => new Promise((resolve, reject) => {
  const image3 = new Image();
  image3.addEventListener("load", () => {
    resolve([image3.width, image3.height]);
  }, { once: true });
  image3.addEventListener("error", () => reject(`Couldn't load image from ${source}`), {
    once: true
  });
  image3.src = source;
});

// node_modules/stream-chat-react/dist/components/Reactions/SpriteImage.js
var SpriteImage = ({ columns, fallback, height, position: position3, rows, spriteUrl, style, width }) => {
  const [[spriteWidth, spriteHeight], setSpriteDimensions] = (0, import_react151.useState)([0, 0]);
  (0, import_react151.useEffect)(() => {
    getImageDimensions(spriteUrl).then(setSpriteDimensions).catch(console.error);
  }, [spriteUrl]);
  const [x2, y2] = position3;
  if (!spriteHeight || !spriteWidth)
    return import_react151.default.createElement(import_react151.default.Fragment, null, fallback);
  return import_react151.default.createElement("div", { "data-testid": "sprite-image", style: {
    ...style,
    "--str-chat__sprite-image-resize-ratio": "var(--str-chat__sprite-image-resize-ratio-x, var(--str-chat__sprite-image-resize-ratio-y, 1))",
    "--str-chat__sprite-image-resize-ratio-x": "calc(var(--str-chat__sprite-image-width) / var(--str-chat__sprite-item-width))",
    "--str-chat__sprite-image-resize-ratio-y": "calc(var(--str-chat__sprite-image-height) / var(--str-chat__sprite-item-height))",
    "--str-chat__sprite-item-height": `${spriteHeight / rows}`,
    "--str-chat__sprite-item-width": `${spriteWidth / columns}`,
    ...Number.isFinite(height) ? { "--str-chat__sprite-image-height": `${height}px` } : {},
    ...Number.isFinite(width) ? { "--str-chat__sprite-image-width": `${width}px` } : {},
    backgroundImage: `url('${spriteUrl}')`,
    backgroundPosition: `${x2 * (100 / (columns - 1))}% ${y2 * (100 / (rows - 1))}%`,
    backgroundSize: `${columns * 100}% ${rows * 100}%`,
    height: "var(--str-chat__sprite-image-height, calc(var(--str-chat__sprite-item-height) * var(--str-chat__sprite-image-resize-ratio)))",
    width: "var(--str-chat__sprite-image-width, calc(var(--str-chat__sprite-item-width) * var(--str-chat__sprite-image-resize-ratio)))"
  } });
};

// node_modules/stream-chat-react/dist/components/Reactions/StreamEmoji.js
var StreamSpriteEmojiPositions = {
  angry: [1, 1],
  haha: [1, 0],
  like: [0, 0],
  love: [1, 2],
  sad: [0, 1],
  wow: [0, 2]
};
var STREAM_SPRITE_URL = "https://getstream.imgix.net/images/emoji-sprite.png";
var StreamEmoji = ({ fallback, type }) => {
  const position3 = StreamSpriteEmojiPositions[type];
  return import_react152.default.createElement(SpriteImage, { columns: 2, fallback, position: position3, rows: 3, spriteUrl: STREAM_SPRITE_URL, style: {
    "--str-chat__sprite-image-height": "var(--str-chat__stream-emoji-size, 18px)"
  } });
};

// node_modules/stream-chat-react/dist/components/Reactions/reactionOptions.js
var defaultReactionOptions = [
  {
    type: "haha",
    Component: () => import_react153.default.createElement(StreamEmoji, { fallback: "😂", type: "haha" }),
    name: "Joy"
  },
  {
    type: "like",
    Component: () => import_react153.default.createElement(StreamEmoji, { fallback: "👍", type: "like" }),
    name: "Thumbs up"
  },
  {
    type: "love",
    Component: () => import_react153.default.createElement(StreamEmoji, { fallback: "❤️", type: "love" }),
    name: "Heart"
  },
  { type: "sad", Component: () => import_react153.default.createElement(StreamEmoji, { fallback: "😔", type: "sad" }), name: "Sad" },
  {
    type: "wow",
    Component: () => import_react153.default.createElement(StreamEmoji, { fallback: "😲", type: "wow" }),
    name: "Astonished"
  }
];

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelector.js
var UnMemoizedReactionSelector = (props) => {
  var _a;
  const { Avatar: propAvatar, detailedView = true, handleReaction: propHandleReaction, latest_reactions: propLatestReactions, own_reactions: propOwnReactions, reaction_groups: propReactionGroups, reactionOptions: propReactionOptions, reverse = false } = props;
  const { Avatar: contextAvatar, reactionOptions: contextReactionOptions = defaultReactionOptions } = useComponentContext("ReactionSelector");
  const { closeReactionSelectorOnClick, handleReaction: contextHandleReaction, message } = useMessageContext("ReactionSelector");
  const dialogId = `reaction-selector--${message.id}`;
  const dialog = useDialog({ id: dialogId });
  const reactionOptions = propReactionOptions ?? contextReactionOptions;
  const Avatar2 = propAvatar || contextAvatar || Avatar;
  const handleReaction = propHandleReaction || contextHandleReaction;
  const latestReactions = propLatestReactions || (message == null ? void 0 : message.latest_reactions) || [];
  const ownReactions = propOwnReactions || (message == null ? void 0 : message.own_reactions) || [];
  const reactionGroups = propReactionGroups || (message == null ? void 0 : message.reaction_groups) || {};
  const [tooltipReactionType, setTooltipReactionType] = (0, import_react154.useState)(null);
  const [tooltipPositions, setTooltipPositions] = (0, import_react154.useState)(null);
  const rootRef = (0, import_react154.useRef)(null);
  const targetRef = (0, import_react154.useRef)(null);
  const tooltipRef = (0, import_react154.useRef)(null);
  const showTooltip = (0, import_react154.useCallback)((event, reactionType) => {
    targetRef.current = event.currentTarget;
    setTooltipReactionType(reactionType);
  }, []);
  const hideTooltip = (0, import_react154.useCallback)(() => {
    setTooltipReactionType(null);
    setTooltipPositions(null);
  }, []);
  (0, import_react154.useEffect)(() => {
    var _a2, _b, _c;
    if (!tooltipReactionType || !rootRef.current)
      return;
    const tooltip = (_a2 = tooltipRef.current) == null ? void 0 : _a2.getBoundingClientRect();
    const target = (_b = targetRef.current) == null ? void 0 : _b.getBoundingClientRect();
    const container = isMutableRef(rootRef) ? (_c = rootRef.current) == null ? void 0 : _c.getBoundingClientRect() : null;
    if (!tooltip || !target || !container)
      return;
    const tooltipPosition = tooltip.width === container.width || tooltip.x < container.x ? 0 : target.left + target.width / 2 - container.left - tooltip.width / 2;
    const arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;
    setTooltipPositions({
      arrow: arrowPosition,
      tooltip: tooltipPosition
    });
  }, [tooltipReactionType, rootRef]);
  const getUsersPerReactionType = (type) => latestReactions.map((reaction) => {
    var _a2, _b;
    if (reaction.type === type) {
      return ((_a2 = reaction.user) == null ? void 0 : _a2.name) || ((_b = reaction.user) == null ? void 0 : _b.id);
    }
    return null;
  }).filter(Boolean);
  const iHaveReactedWithReaction = (reactionType) => ownReactions.find((reaction) => reaction.type === reactionType);
  const getLatestUserForReactionType = (type) => {
    var _a2;
    return ((_a2 = latestReactions.find((reaction) => reaction.type === type && !!reaction.user)) == null ? void 0 : _a2.user) || void 0;
  };
  return import_react154.default.createElement(
    "div",
    { className: clsx_default("str-chat__reaction-selector str-chat__message-reaction-selector str-chat-react__message-reaction-selector", {
      "str-chat__reaction-selector--reverse": reverse
    }), "data-testid": "reaction-selector", ref: rootRef },
    !!tooltipReactionType && detailedView && import_react154.default.createElement(
      "div",
      { className: "str-chat__reaction-selector-tooltip", ref: tooltipRef, style: {
        left: tooltipPositions == null ? void 0 : tooltipPositions.tooltip,
        visibility: tooltipPositions ? "visible" : "hidden"
      } },
      import_react154.default.createElement("div", { className: "arrow", style: { left: tooltipPositions == null ? void 0 : tooltipPositions.arrow } }),
      (_a = getUsersPerReactionType(tooltipReactionType)) == null ? void 0 : _a.map((user, i2, users) => import_react154.default.createElement("span", { className: "latest-user-username", key: `key-${i2}-${user}` }, `${user}${i2 < users.length - 1 ? ", " : ""}`))
    ),
    import_react154.default.createElement("ul", { className: "str-chat__message-reactions-list str-chat__message-reactions-options" }, reactionOptions.map(({ Component: Component2, name: reactionName, type: reactionType }) => {
      var _a2;
      const latestUser = getLatestUserForReactionType(reactionType);
      const count = ((_a2 = reactionGroups[reactionType]) == null ? void 0 : _a2.count) ?? 0;
      return import_react154.default.createElement(
        "li",
        { key: reactionType },
        import_react154.default.createElement(
          "button",
          { "aria-label": `Select Reaction: ${reactionName || reactionType}`, className: clsx_default("str-chat__message-reactions-list-item str-chat__message-reactions-option", {
            "str-chat__message-reactions-option-selected": iHaveReactedWithReaction(reactionType)
          }), "data-testid": "select-reaction-button", "data-text": reactionType, onClick: (event) => {
            handleReaction(reactionType, event);
            if (closeReactionSelectorOnClick) {
              dialog.close();
            }
          } },
          !!count && detailedView && import_react154.default.createElement("div", { className: "latest-user str-chat__message-reactions-last-user", onClick: hideTooltip, onMouseEnter: (e) => showTooltip(e, reactionType), onMouseLeave: hideTooltip }, latestUser ? import_react154.default.createElement(Avatar2, { image: latestUser.image, name: latestUser.name, size: 20, user: latestUser }) : import_react154.default.createElement("div", { className: "latest-user-not-found" })),
          import_react154.default.createElement(
            "span",
            { className: "str-chat__message-reaction-emoji" },
            import_react154.default.createElement(Component2, null)
          ),
          Boolean(count) && detailedView && import_react154.default.createElement("span", { className: "str-chat__message-reactions-list-item__count" }, count || "")
        )
      );
    }))
  );
};
var ReactionSelector = import_react154.default.memo(UnMemoizedReactionSelector);

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelectorWithButton.js
var ReactionSelectorWithButton = ({ ReactionIcon: ReactionIcon2 }) => {
  const { t: t2 } = useTranslationContext("ReactionSelectorWithButton");
  const { isMyMessage, message, threadList } = useMessageContext("MessageOptions");
  const { ReactionSelector: ReactionSelector2 = ReactionSelector } = useComponentContext("MessageOptions");
  const buttonRef = (0, import_react155.useRef)(null);
  const dialogIdNamespace = threadList ? "-thread-" : "";
  const dialogId = `reaction-selector${dialogIdNamespace}--${message.id}`;
  const dialog = useDialog({ id: dialogId });
  const dialogIsOpen = useDialogIsOpen(dialogId);
  return import_react155.default.createElement(
    import_react155.default.Fragment,
    null,
    import_react155.default.createElement(
      DialogAnchor,
      { id: dialogId, placement: isMyMessage() ? "top-end" : "top-start", referenceElement: buttonRef.current, trapFocus: true },
      import_react155.default.createElement(ReactionSelector2, null)
    ),
    import_react155.default.createElement(
      "button",
      { "aria-expanded": dialogIsOpen, "aria-label": t2("aria/Open Reaction Selector"), className: "str-chat__message-reactions-button", "data-testid": "message-reaction-action", onClick: () => dialog == null ? void 0 : dialog.toggle(), ref: buttonRef },
      import_react155.default.createElement(ReactionIcon2, { className: "str-chat__message-action-icon" })
    )
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageOptions.js
var UnMemoizedMessageOptions = (props) => {
  const { ActionsIcon: ActionsIcon2 = ActionsIcon, displayReplies = true, handleOpenThread: propHandleOpenThread, ReactionIcon: ReactionIcon2 = ReactionIcon, theme = "simple", ThreadIcon: ThreadIcon2 = ThreadIcon } = props;
  const { getMessageActions: getMessageActions2, handleOpenThread: contextHandleOpenThread, initialMessage, message, threadList } = useMessageContext("MessageOptions");
  const { t: t2 } = useTranslationContext("MessageOptions");
  const dialogIdNamespace = threadList ? "-thread-" : "";
  const messageActionsDialogIsOpen = useDialogIsOpen(`message-actions${dialogIdNamespace}--${message.id}`);
  const reactionSelectorDialogIsOpen = useDialogIsOpen(`reaction-selector${dialogIdNamespace}--${message.id}`);
  const handleOpenThread = propHandleOpenThread || contextHandleOpenThread;
  const messageActions = getMessageActions2();
  const shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;
  const shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;
  if (!message.type || message.type === "error" || message.type === "system" || message.type === "ephemeral" || message.status === "failed" || message.status === "sending" || initialMessage) {
    return null;
  }
  return import_react156.default.createElement(
    "div",
    { className: clsx_default(`str-chat__message-${theme}__actions str-chat__message-options`, {
      "str-chat__message-options--active": messageActionsDialogIsOpen || reactionSelectorDialogIsOpen
    }), "data-testid": "message-options" },
    import_react156.default.createElement(MessageActions, { ActionsIcon: ActionsIcon2 }),
    shouldShowReplies && import_react156.default.createElement(
      "button",
      { "aria-label": t2("aria/Open Thread"), className: `str-chat__message-${theme}__actions__action str-chat__message-${theme}__actions__action--thread str-chat__message-reply-in-thread-button`, "data-testid": "thread-action", onClick: handleOpenThread },
      import_react156.default.createElement(ThreadIcon2, { className: "str-chat__message-action-icon" })
    ),
    shouldShowReactions && import_react156.default.createElement(ReactionSelectorWithButton, { ReactionIcon: ReactionIcon2 })
  );
};
var MessageOptions = import_react156.default.memo(UnMemoizedMessageOptions);

// node_modules/stream-chat-react/dist/components/Message/MessageRepliesCountButton.js
var import_react157 = __toESM(require_react());
var UnMemoizedMessageRepliesCountButton = (props) => {
  const { labelPlural, labelSingle, onClick, reply_count = 0 } = props;
  const { t: t2 } = useTranslationContext("MessageRepliesCountButton");
  if (!reply_count)
    return null;
  let replyCountText = t2("replyCount", { count: reply_count });
  if (labelPlural && reply_count > 1) {
    replyCountText = `${reply_count} ${labelPlural}`;
  } else if (labelSingle) {
    replyCountText = `1 ${labelSingle}`;
  }
  return import_react157.default.createElement(
    "div",
    { className: "str-chat__message-replies-count-button-wrapper" },
    import_react157.default.createElement("button", { className: "str-chat__message-replies-count-button", "data-testid": "replies-count-button", onClick }, replyCountText)
  );
};
var MessageRepliesCountButton = import_react157.default.memo(UnMemoizedMessageRepliesCountButton);

// node_modules/stream-chat-react/dist/components/Message/MessageStatus.js
var import_react160 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Tooltip/Tooltip.js
var import_react158 = __toESM(require_react());
var Tooltip = ({ children, ...rest }) => import_react158.default.createElement("div", { className: "str-chat__tooltip", ...rest }, children);
var PopperTooltip = ({ children, offset: offset2 = [0, 10], placement = "top", referenceElement, visible = false }) => {
  const [popperElement, setPopperElement] = (0, import_react158.useState)(null);
  const { attributes, styles } = usePopper(referenceElement, popperElement, {
    modifiers: [
      {
        name: "offset",
        options: {
          offset: offset2
        }
      }
    ],
    placement
  });
  if (!visible)
    return null;
  return import_react158.default.createElement("div", { className: "str-chat__tooltip", ref: setPopperElement, style: styles.popper, ...attributes.popper }, children);
};

// node_modules/stream-chat-react/dist/components/Tooltip/hooks/useEnterLeaveHandlers.js
var import_react159 = __toESM(require_react());
var useEnterLeaveHandlers = ({ onMouseEnter, onMouseLeave } = {}) => {
  const [tooltipVisible, setTooltipVisible] = (0, import_react159.useState)(false);
  const handleEnter = (0, import_react159.useCallback)((e) => {
    setTooltipVisible(true);
    onMouseEnter == null ? void 0 : onMouseEnter(e);
  }, [onMouseEnter]);
  const handleLeave = (0, import_react159.useCallback)((e) => {
    setTooltipVisible(false);
    onMouseLeave == null ? void 0 : onMouseLeave(e);
  }, [onMouseLeave]);
  return { handleEnter, handleLeave, tooltipVisible };
};

// node_modules/stream-chat-react/dist/components/Message/MessageStatus.js
var UnMemoizedMessageStatus = (props) => {
  var _a;
  const { Avatar: propAvatar, MessageDeliveredStatus, MessageReadStatus, MessageSendingStatus, messageType = "simple", tooltipUserNameMapper = mapToUserNameOrId } = props;
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const { client } = useChatContext("MessageStatus");
  const { Avatar: contextAvatar } = useComponentContext("MessageStatus");
  const { isMyMessage, lastReceivedId, message, readBy, threadList } = useMessageContext("MessageStatus");
  const { t: t2 } = useTranslationContext("MessageStatus");
  const [referenceElement, setReferenceElement] = (0, import_react160.useState)(null);
  const Avatar2 = propAvatar || contextAvatar || Avatar;
  if (!isMyMessage() || message.type === "error")
    return null;
  const justReadByMe = (readBy == null ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) == null ? void 0 : _a.id);
  const rootClassName2 = `str-chat__message-${messageType}-status str-chat__message-status`;
  const sending = message.status === "sending";
  const delivered = message.status === "received" && message.id === lastReceivedId && !threadList;
  const deliveredAndRead = !!((readBy == null ? void 0 : readBy.length) && !threadList && !justReadByMe);
  const readersWithoutOwnUser = deliveredAndRead ? readBy.filter((item) => {
    var _a2;
    return item.id !== ((_a2 = client.user) == null ? void 0 : _a2.id);
  }) : [];
  const [lastReadUser] = readersWithoutOwnUser;
  return import_react160.default.createElement(
    "span",
    { className: rootClassName2, "data-testid": clsx_default({
      "message-status-read-by": deliveredAndRead,
      "message-status-received": delivered && !deliveredAndRead,
      "message-status-sending": sending
    }), onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
    sending && (MessageSendingStatus ? import_react160.default.createElement(MessageSendingStatus, null) : import_react160.default.createElement(
      import_react160.default.Fragment,
      null,
      import_react160.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, t2("Sending...")),
      import_react160.default.createElement(LoadingIndicator, null)
    )),
    delivered && !deliveredAndRead && (MessageDeliveredStatus ? import_react160.default.createElement(MessageDeliveredStatus, null) : import_react160.default.createElement(
      import_react160.default.Fragment,
      null,
      import_react160.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, t2("Delivered")),
      import_react160.default.createElement(MessageDeliveredIcon, null)
    )),
    deliveredAndRead && (MessageReadStatus ? import_react160.default.createElement(MessageReadStatus, null) : import_react160.default.createElement(
      import_react160.default.Fragment,
      null,
      import_react160.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, getReadByTooltipText(readBy, t2, client, tooltipUserNameMapper)),
      import_react160.default.createElement(Avatar2, { className: "str-chat__avatar--message-status", image: lastReadUser.image, name: lastReadUser.name || lastReadUser.id, user: lastReadUser }),
      readersWithoutOwnUser.length > 1 && import_react160.default.createElement("span", { className: `str-chat__message-${messageType}-status-number`, "data-testid": "message-status-read-by-many" }, readersWithoutOwnUser.length)
    ))
  );
};
var MessageStatus = import_react160.default.memo(UnMemoizedMessageStatus);

// node_modules/stream-chat-react/dist/components/Message/MessageText.js
var import_react197 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/QuotedMessage.js
var import_react195 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/Poll.js
var import_react187 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollContent.js
var import_react185 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollHeader.js
var import_react161 = __toESM(require_react());
var pollStateSelector = (nextValue) => ({
  enforce_unique_vote: nextValue.enforce_unique_vote,
  is_closed: nextValue.is_closed,
  max_votes_allowed: nextValue.max_votes_allowed,
  name: nextValue.name,
  options: nextValue.options
});
var PollHeader = () => {
  const { t: t2 } = useTranslationContext("PollHeader");
  const { poll } = usePollContext();
  const { enforce_unique_vote, is_closed, max_votes_allowed, name: name2, options: options2 } = useStateStore(poll.state, pollStateSelector);
  const selectionInstructions = (0, import_react161.useMemo)(() => {
    if (is_closed)
      return t2("Vote ended");
    if (enforce_unique_vote || options2.length === 1)
      return t2("Select one");
    if (max_votes_allowed)
      return t2("Select up to {{count}}", {
        count: max_votes_allowed > options2.length ? options2.length : max_votes_allowed
      });
    if (options2.length > 1)
      return t2("Select one or more");
    return "";
  }, [is_closed, enforce_unique_vote, max_votes_allowed, options2.length, t2]);
  if (!name2)
    return;
  return import_react161.default.createElement(
    "div",
    { className: "str-chat__poll-header" },
    import_react161.default.createElement("div", { className: "str-chat__poll-title" }, name2),
    import_react161.default.createElement("div", { className: "str-chat__poll-subtitle" }, selectionInstructions)
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/AddCommentForm.js
var import_react164 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Dialog/FormDialog.js
var import_react163 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Form/FieldError.js
var import_react162 = __toESM(require_react());
var FieldError = ({ className, text: text8, ...props }) => import_react162.default.createElement("div", { ...props, className: clsx_default("str-chat__form-field-error", className) }, text8);

// node_modules/stream-chat-react/dist/components/Dialog/FormDialog.js
var FormDialog = ({ className, close, fields, onSubmit, shouldDisableSubmitButton, title }) => {
  const { t: t2 } = useTranslationContext();
  const [fieldErrors, setFieldErrors] = (0, import_react163.useState)({});
  const [value, setValue] = (0, import_react163.useState)(() => {
    let acc = {};
    for (const [id3, config] of Object.entries(fields)) {
      acc = { ...acc, [id3]: config.props.value };
    }
    return acc;
  });
  const handleChange = (0, import_react163.useCallback)((event) => {
    var _a;
    const fieldId = event.target.id;
    const fieldConfig = fields[fieldId];
    if (!fieldConfig)
      return;
    const error = (_a = fieldConfig.validator) == null ? void 0 : _a.call(fieldConfig, event.target.value);
    if (error) {
      setFieldErrors((prev) => ({ [fieldId]: error, ...prev }));
    } else {
      setFieldErrors((prev) => {
        delete prev[fieldId];
        return prev;
      });
    }
    setValue((prev) => ({ ...prev, [fieldId]: event.target.value }));
    if (!fieldConfig.props.onChange)
      return;
    if (fieldConfig.element === "input") {
      fieldConfig.props.onChange(event);
    } else if (fieldConfig.element === "textarea") {
      fieldConfig.props.onChange(event);
    }
  }, [fields]);
  const handleSubmit = async () => {
    var _a, _b;
    if (!Object.keys(value).length)
      return;
    const errors = {};
    for (const [id3, fieldValue] of Object.entries(value)) {
      const thisFieldError = (_b = (_a = fields[id3]).validator) == null ? void 0 : _b.call(_a, fieldValue);
      if (thisFieldError) {
        errors[id3] = thisFieldError;
      }
    }
    if (Object.keys(errors).length) {
      setFieldErrors(errors);
      return;
    }
    await onSubmit(value);
    close();
  };
  return import_react163.default.createElement(
    "div",
    { className: clsx_default("str-chat__dialog str-chat__dialog--form", className) },
    import_react163.default.createElement(
      "div",
      { className: "str-chat__dialog__body" },
      title && import_react163.default.createElement("div", { className: "str-chat__dialog__title" }, title),
      import_react163.default.createElement(
        "form",
        { autoComplete: "off", onSubmit: (e) => {
          e.preventDefault();
          handleSubmit();
        } },
        Object.entries(fields).map(([id3, fieldConfig]) => {
          var _a;
          return import_react163.default.createElement(
            "div",
            { className: "str-chat__dialog__field", key: `dialog-field-${id3}` },
            fieldConfig.label && import_react163.default.createElement("label", { className: clsx_default(`str-chat__dialog__title str-chat__dialog__title--${id3}`), htmlFor: id3 }, fieldConfig.label),
            import_react163.default.createElement(fieldConfig.element, {
              id: id3,
              ...fieldConfig.props,
              onChange: handleChange,
              value: value[id3]
            }),
            import_react163.default.createElement(FieldError, { text: (_a = fieldErrors[id3]) == null ? void 0 : _a.message })
          );
        }),
        import_react163.default.createElement(
          "div",
          { className: "str-chat__dialog__controls" },
          import_react163.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--cancel", onClick: close, type: "button" }, t2("Cancel")),
          import_react163.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--submit", disabled: Object.keys(fieldErrors).length > 0 || (shouldDisableSubmitButton == null ? void 0 : shouldDisableSubmitButton(value)), type: "submit" }, t2("Send"))
        )
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/AddCommentForm.js
var pollStateSelector2 = (nextValue) => ({
  ownAnswer: nextValue.ownAnswer
});
var AddCommentForm = ({ close, messageId }) => {
  const { t: t2 } = useTranslationContext("AddCommentForm");
  const { poll } = usePollContext();
  const { ownAnswer } = useStateStore(poll.state, pollStateSelector2);
  return import_react164.default.createElement(FormDialog, { className: "str-chat__prompt-dialog str-chat__modal__poll-add-comment", close, fields: {
    comment: {
      element: "input",
      props: {
        id: "comment",
        name: "comment",
        required: true,
        type: "text",
        value: (ownAnswer == null ? void 0 : ownAnswer.answer_text) ?? ""
      },
      validator: (value) => {
        const valueString = typeof value !== "undefined" ? value.toString() : value;
        const trimmedValue = valueString == null ? void 0 : valueString.trim();
        if (!trimmedValue) {
          return new Error(t2("This field cannot be empty or contain only spaces"));
        }
        return;
      }
    }
  }, onSubmit: async (value) => {
    await poll.addAnswer(value.comment, messageId);
  }, shouldDisableSubmitButton: (value) => !value.comment || value.comment === (ownAnswer == null ? void 0 : ownAnswer.answer_text), title: ownAnswer ? t2("Update your comment") : t2("Add a comment") });
};

// node_modules/stream-chat-react/dist/components/Dialog/PromptDialog.js
var import_react165 = __toESM(require_react());
var PromptDialog = ({ actions, className, prompt, title }) => import_react165.default.createElement(
  "div",
  { className: clsx_default("str-chat__dialog str-chat__dialog--prompt", className) },
  import_react165.default.createElement(
    "div",
    { className: "str-chat__dialog__body" },
    title && import_react165.default.createElement("div", { className: "str-chat__dialog__title" }, title),
    import_react165.default.createElement("div", { className: "str-chat__dialog__prompt" }, prompt)
  ),
  import_react165.default.createElement("div", { className: "str-chat__dialog__controls" }, actions.map(({ className: className2, ...props }, i2) => import_react165.default.createElement("button", { className: clsx_default(`str-chat__dialog__controls-button`, className2), key: `prompt-dialog__controls-button--${i2}`, ...props })))
);

// node_modules/stream-chat-react/dist/components/Poll/PollActions/EndPollDialog.js
var import_react166 = __toESM(require_react());
var EndPollDialog = ({ close }) => {
  const { t: t2 } = useTranslationContext("SuggestPollOptionForm");
  const { poll } = usePollContext();
  return import_react166.default.createElement(PromptDialog, { actions: [
    {
      children: t2("Cancel"),
      className: "str-chat__dialog__controls-button--cancel",
      onClick: close
    },
    {
      children: t2("End"),
      className: ".str-chat__dialog__controls-button--submit str-chat__dialog__controls-button--end-poll",
      onClick: poll.close
    }
  ], className: "str-chat__modal__end-vote", prompt: t2("Nobody will be able to vote in this poll anymore."), title: t2("End vote") });
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollActions.js
var import_react184 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollAction.js
var import_react167 = __toESM(require_react());
var PollAction = ({ buttonText, children, closeModal, modalClassName, modalIsOpen, openModal }) => {
  const { Modal: Modal2 = Modal } = useComponentContext();
  return import_react167.default.createElement(
    import_react167.default.Fragment,
    null,
    import_react167.default.createElement("button", { className: "str-chat__poll-action", onClick: openModal }, buttonText),
    import_react167.default.createElement(Modal2, { className: modalClassName, onClose: closeModal, open: modalIsOpen }, children)
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/SuggestPollOptionForm.js
var import_react168 = __toESM(require_react());
var pollStateSelector3 = (nextValue) => ({
  options: nextValue.options
});
var SuggestPollOptionForm = ({ close, messageId }) => {
  const { client } = useChatContext("SuggestPollOptionForm");
  const { t: t2 } = useTranslationContext("SuggestPollOptionForm");
  const { poll } = usePollContext();
  const { options: options2 } = useStateStore(poll.state, pollStateSelector3);
  return import_react168.default.createElement(FormDialog, { className: "str-chat__prompt-dialog str-chat__modal__suggest-poll-option", close, fields: {
    optionText: {
      element: "input",
      props: {
        id: "optionText",
        name: "optionText",
        required: true,
        type: "text",
        value: ""
      },
      validator: (value) => {
        const valueString = typeof value !== "undefined" ? value.toString() : value;
        const trimmedValue = valueString == null ? void 0 : valueString.trim();
        if (!trimmedValue) {
          return new Error(t2("This field cannot be empty or contain only spaces"));
        }
        const existingOption = options2.find((option) => option.text === trimmedValue);
        if (existingOption) {
          return new Error(t2("Option already exists"));
        }
        return;
      }
    }
  }, onSubmit: async (value) => {
    const { poll_option } = await client.createPollOption(poll.id, {
      text: value.optionText
    });
    poll.castVote(poll_option.id, messageId);
  }, shouldDisableSubmitButton: (value) => !value.optionText, title: t2("Suggest an option") });
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollAnswerList.js
var import_react176 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Modal/ModalHeader.js
var import_react169 = __toESM(require_react());
var ModalHeader = ({ className, close, goBack, title }) => import_react169.default.createElement(
  "div",
  { className: clsx_default("str-chat__modal-header", className) },
  goBack && import_react169.default.createElement("button", { className: "str-chat__modal-header__go-back-button", onClick: goBack }),
  import_react169.default.createElement("div", { className: "str-chat__modal-header__title" }, title),
  close && import_react169.default.createElement("button", { className: "str-chat__modal-header__close-button", onClick: close })
);

// node_modules/stream-chat-react/dist/components/Poll/PollVote.js
var import_react170 = __toESM(require_react());
var PollVoteTimestamp = ({ timestamp }) => {
  const { t: t2 } = useTranslationContext();
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const [referenceElement, setReferenceElement] = (0, import_react170.useState)(null);
  const timestampDate = new Date(timestamp);
  return import_react170.default.createElement(
    "div",
    { className: "str-chat__poll-vote__timestamp", onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
    t2("timestamp/PollVote", { timestamp: timestampDate }),
    import_react170.default.createElement(PopperTooltip, { offset: [0, 5], placement: "bottom", referenceElement, visible: tooltipVisible }, t2("timestamp/PollVoteTooltip", { timestamp: timestampDate }))
  );
};
var PollVoteAuthor = ({ vote }) => {
  var _a, _b, _c;
  const { t: t2 } = useTranslationContext();
  const { client } = useChatContext();
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const [referenceElement, setReferenceElement] = (0, import_react170.useState)(null);
  const displayName = ((_a = client.user) == null ? void 0 : _a.id) && client.user.id === ((_b = vote.user) == null ? void 0 : _b.id) ? t2("You") : ((_c = vote.user) == null ? void 0 : _c.name) || t2("Anonymous");
  return import_react170.default.createElement(
    "div",
    { className: "str-chat__poll-vote__author", onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
    vote.user && import_react170.default.createElement(Avatar, { className: "str-chat__avatar--poll-vote-author", image: vote.user.image, key: `poll-vote-${vote.id}-avatar-${vote.user.id}`, name: vote.user.name }),
    import_react170.default.createElement("div", { className: "str-chat__poll-vote__author__name" }, displayName),
    import_react170.default.createElement(PopperTooltip, { offset: [0, 5], placement: "bottom", referenceElement, visible: tooltipVisible }, displayName)
  );
};
var PollVote = ({ vote }) => import_react170.default.createElement(
  "div",
  { className: "str-chat__poll-vote" },
  import_react170.default.createElement(PollVoteAuthor, { vote }),
  import_react170.default.createElement(PollVoteTimestamp, { timestamp: vote.created_at })
);
var PollVoteListing = ({ votes }) => import_react170.default.createElement("div", { className: "str-chat__poll-vote-listing" }, votes.map((vote) => import_react170.default.createElement(PollVote, { key: `poll-vote-${vote.id}`, vote })));

// node_modules/stream-chat-react/dist/components/Poll/hooks/usePollAnswerPagination.js
var import_react173 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/hooks/useManagePollVotesRealtime.js
var import_react171 = __toESM(require_react());
function useManagePollVotesRealtime(managedVoteType, cursorPaginatorState, optionId) {
  const { client } = useChatContext();
  const [votesInRealtime, setVotesInRealtime] = (0, import_react171.useState)((cursorPaginatorState == null ? void 0 : cursorPaginatorState.getLatestValue().items) ?? []);
  (0, import_react171.useEffect)(() => cursorPaginatorState == null ? void 0 : cursorPaginatorState.subscribeWithSelector((state) => [state.latestPageItems], ([latestPageItems]) => setVotesInRealtime((prev) => [...prev, ...latestPageItems])), [cursorPaginatorState]);
  (0, import_react171.useEffect)(() => {
    const handleVoteEvent = (event) => {
      if (!event.poll_vote)
        return;
      const isAnswer = isVoteAnswer(event.poll_vote);
      if (managedVoteType === "answer" && !isAnswer || managedVoteType === "vote" && (isAnswer || event.poll_vote.option_id !== optionId))
        return;
      if (event.type === "poll.vote_removed") {
        setVotesInRealtime((prev) => event.poll_vote ? prev.filter((vote) => vote.id !== event.poll_vote.id) : prev);
      }
      if (event.type === "poll.vote_changed") {
        setVotesInRealtime((prev) => event.poll_vote ? prev.filter((vote) => vote.id !== event.poll_vote.id) : prev);
      }
      if (["poll.vote_casted", "poll.vote_changed"].includes(event.type)) {
        setVotesInRealtime((prev) => event.poll_vote ? [event.poll_vote, ...prev] : prev);
      }
    };
    const voteCastedSubscription = client.on("poll.vote_casted", handleVoteEvent);
    const voteRemovedSubscription = client.on("poll.vote_removed", handleVoteEvent);
    const voteChangedSubscription = client.on("poll.vote_changed", handleVoteEvent);
    return () => {
      voteCastedSubscription.unsubscribe();
      voteRemovedSubscription.unsubscribe();
      voteChangedSubscription.unsubscribe();
    };
  }, [client, optionId, managedVoteType]);
  return votesInRealtime;
}

// node_modules/stream-chat-react/dist/components/InfiniteScrollPaginator/hooks/useCursorPaginator.js
var import_lodash12 = __toESM(require_lodash2());
var import_react172 = __toESM(require_react());
var useCursorPaginator = (paginationFn, loadFirstPage) => {
  const cursorPaginatorState = (0, import_react172.useMemo)(() => new StateStore({
    hasNextPage: true,
    items: [],
    latestPageItems: [],
    loading: false
  }), []);
  const loadMore = (0, import_react172.useCallback)(async () => {
    const { loading, next: currentNext } = cursorPaginatorState.getLatestValue();
    if (currentNext === null || loading)
      return;
    cursorPaginatorState.partialNext({ loading: true });
    try {
      const { items, next } = await paginationFn(currentNext);
      cursorPaginatorState.next((prev) => ({
        ...prev,
        hasNextPage: !!next,
        items: (0, import_lodash12.default)(prev.items.concat(items), "id"),
        latestPageItems: items,
        next: next || null
      }));
    } catch (error) {
      cursorPaginatorState.partialNext({ error });
    }
    cursorPaginatorState.partialNext({ loading: false });
  }, [cursorPaginatorState, paginationFn]);
  (0, import_react172.useEffect)(() => {
    const { items } = cursorPaginatorState.getLatestValue();
    if (!loadFirstPage || items.length)
      return;
    loadMore();
  }, [cursorPaginatorState, loadFirstPage, loadMore]);
  return {
    cursorPaginatorState,
    loadMore
  };
};

// node_modules/stream-chat-react/dist/components/Poll/hooks/usePollAnswerPagination.js
var paginationStateSelector = (state) => [
  state.error,
  state.hasNextPage,
  state.loading
];
var usePollAnswerPagination = ({ paginationParams } = {}) => {
  const { poll } = usePollContext();
  const paginationFn = (0, import_react173.useCallback)(async (next) => {
    const { next: newNext, votes } = await poll.queryAnswers({
      filter: paginationParams == null ? void 0 : paginationParams.filter,
      options: !next ? paginationParams == null ? void 0 : paginationParams.options : { ...paginationParams == null ? void 0 : paginationParams.options, next },
      sort: { created_at: -1, ...paginationParams == null ? void 0 : paginationParams.sort }
    });
    return { items: votes, next: newNext };
  }, [paginationParams, poll]);
  const { cursorPaginatorState, loadMore } = useCursorPaginator(paginationFn, true);
  const answers = useManagePollVotesRealtime("answer", cursorPaginatorState);
  const [error, hasNextPage, loading] = useStateStore(cursorPaginatorState, paginationStateSelector);
  return {
    answers,
    error,
    hasNextPage,
    loading,
    loadMore
  };
};

// node_modules/stream-chat-react/dist/components/Poll/hooks/usePollOptionVotesPagination.js
var import_react174 = __toESM(require_react());
var paginationStateSelector2 = (state) => [
  state.error,
  state.hasNextPage,
  state.loading
];
var usePollOptionVotesPagination = ({ paginationParams }) => {
  const { poll } = usePollContext();
  const paginationFn = (0, import_react174.useCallback)(async (next) => {
    const { next: newNext, votes: votes2 } = await poll.queryOptionVotes({
      filter: paginationParams.filter,
      options: !next ? paginationParams == null ? void 0 : paginationParams.options : { ...paginationParams == null ? void 0 : paginationParams.options, next },
      sort: { created_at: -1, ...paginationParams == null ? void 0 : paginationParams.sort }
    });
    return { items: votes2, next: newNext };
  }, [paginationParams, poll]);
  const { cursorPaginatorState, loadMore } = useCursorPaginator(paginationFn, true);
  const votes = useManagePollVotesRealtime("vote", cursorPaginatorState, paginationParams.filter.option_id);
  const [error, hasNextPage, loading] = useStateStore(cursorPaginatorState, paginationStateSelector2);
  return {
    error,
    hasNextPage,
    loading,
    loadMore,
    votes
  };
};

// node_modules/stream-chat-react/dist/components/InfiniteScrollPaginator/InfiniteScrollPaginator.js
var import_lodash13 = __toESM(require_lodash3());
var import_react175 = __toESM(require_react());
var mousewheelListener = (event) => {
  if (event instanceof WheelEvent && event.deltaY === 1) {
    event.preventDefault();
  }
};
var InfiniteScrollPaginator = (props) => {
  const { children, className, listenToScroll, loadNextDebounceMs = 500, loadNextOnScrollToBottom, loadNextOnScrollToTop, threshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, useCapture = false, ...componentProps } = props;
  const rootRef = (0, import_react175.useRef)(null);
  const childRef = (0, import_react175.useRef)(null);
  const scrollListener = (0, import_react175.useMemo)(() => (0, import_lodash13.default)(() => {
    const root4 = rootRef.current;
    const child = childRef.current;
    if (!root4 || root4.offsetParent === null || !child) {
      return;
    }
    const distanceFromBottom = child.scrollHeight - root4.scrollTop - root4.clientHeight;
    const distanceFromTop = root4.scrollTop;
    if (listenToScroll) {
      listenToScroll(distanceFromBottom, distanceFromTop, threshold);
    }
    if (distanceFromTop < Number(threshold)) {
      loadNextOnScrollToTop == null ? void 0 : loadNextOnScrollToTop();
    }
    if (distanceFromBottom < Number(threshold)) {
      loadNextOnScrollToBottom == null ? void 0 : loadNextOnScrollToBottom();
    }
  }, loadNextDebounceMs), [
    listenToScroll,
    loadNextDebounceMs,
    loadNextOnScrollToBottom,
    loadNextOnScrollToTop,
    threshold
  ]);
  (0, import_react175.useEffect)(() => {
    const scrollElement = rootRef.current;
    if (!scrollElement)
      return;
    scrollElement.addEventListener("scroll", scrollListener, useCapture);
    return () => {
      scrollElement.removeEventListener("scroll", scrollListener, useCapture);
    };
  }, [scrollListener, useCapture]);
  (0, import_react175.useEffect)(() => {
    const root4 = rootRef.current;
    if (!root4 || typeof ResizeObserver === "undefined" || !scrollListener)
      return;
    const observer = new ResizeObserver(scrollListener);
    observer.observe(root4);
    return () => {
      observer.disconnect();
    };
  }, [scrollListener]);
  (0, import_react175.useEffect)(() => {
    const root4 = rootRef.current;
    if (root4) {
      root4.addEventListener("wheel", mousewheelListener, { passive: false });
    }
    return () => {
      if (root4) {
        root4.removeEventListener("wheel", mousewheelListener, useCapture);
      }
    };
  }, [useCapture]);
  return import_react175.default.createElement(
    "div",
    { ...componentProps, className: clsx_default("str-chat__infinite-scroll-paginator", className), ref: rootRef },
    import_react175.default.createElement("div", { className: "str-chat__infinite-scroll-paginator__content", ref: childRef }, children)
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollAnswerList.js
var pollStateSelector4 = (nextValue) => ({
  is_closed: nextValue.is_closed,
  ownAnswer: nextValue.ownAnswer
});
var PollAnswerList = ({ close, onUpdateOwnAnswerClick }) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { is_closed, ownAnswer } = useStateStore(poll.state, pollStateSelector4);
  const { answers, error, hasNextPage, loading, loadMore } = usePollAnswerPagination();
  return import_react176.default.createElement(
    "div",
    { className: "str-chat__modal__poll-answer-list" },
    import_react176.default.createElement(ModalHeader, { close, title: t2("Poll comments") }),
    import_react176.default.createElement(
      "div",
      { className: "str-chat__modal__poll-answer-list__body" },
      import_react176.default.createElement(
        InfiniteScrollPaginator,
        { loadNextOnScrollToBottom: loadMore, threshold: 40 },
        import_react176.default.createElement("div", { className: "str-chat__poll-answer-list" }, answers.map((answer) => import_react176.default.createElement(
          "div",
          { className: "str-chat__poll-answer", key: `comment-${answer.id}` },
          answer.answer_text && import_react176.default.createElement("p", { className: "str-chat__poll-answer__text" }, answer.answer_text),
          import_react176.default.createElement(PollVote, { key: `poll-vote-${answer.id}`, vote: answer })
        ))),
        hasNextPage && import_react176.default.createElement("div", { className: "str-chat__loading-indicator-placeholder" }, loading && import_react176.default.createElement(LoadingIndicator, null))
      ),
      (error == null ? void 0 : error.message) && import_react176.default.createElement("div", null, error == null ? void 0 : error.message)
    ),
    answers.length > 0 && !is_closed && import_react176.default.createElement("button", { className: "str-chat__poll-action", onClick: onUpdateOwnAnswerClick }, ownAnswer ? t2("Update your comment") : t2("Add a comment"))
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollOptionsFullList.js
var import_react179 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollOptionList.js
var import_react178 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollOptionSelector.js
var import_lodash14 = __toESM(require_lodash3());
var import_react177 = __toESM(require_react());
var AmountBar = ({ amount, className }) => import_react177.default.createElement("div", { className: clsx_default("str-chat__amount-bar", className), "data-testid": "amount-bar", role: "progressbar", style: {
  "--str-chat__amount-bar-fulfillment": amount + "%"
} });
var Checkmark = ({ checked }) => import_react177.default.createElement("div", { className: clsx_default("str-chat__checkmark", { "str-chat__checkmark--checked": checked }) });
var pollStateSelector5 = (nextValue) => ({
  is_closed: nextValue.is_closed,
  latest_votes_by_option: nextValue.latest_votes_by_option,
  maxVotedOptionIds: nextValue.maxVotedOptionIds,
  ownVotesByOptionId: nextValue.ownVotesByOptionId,
  vote_counts_by_option: nextValue.vote_counts_by_option,
  voting_visibility: nextValue.voting_visibility
});
var PollOptionSelector = ({ displayAvatarCount, option, voteCountVerbose }) => {
  const { t: t2 } = useTranslationContext();
  const { channelCapabilities = {} } = useChannelStateContext("PollOptionsShortlist");
  const { message } = useMessageContext();
  const { poll } = usePollContext();
  const { is_closed, latest_votes_by_option, maxVotedOptionIds, ownVotesByOptionId, vote_counts_by_option, voting_visibility } = useStateStore(poll.state, pollStateSelector5);
  const canCastVote = channelCapabilities["cast-poll-vote"] && !is_closed;
  const winningOptionCount = maxVotedOptionIds[0] ? vote_counts_by_option[maxVotedOptionIds[0]] : 0;
  const toggleVote = (0, import_react177.useMemo)(() => (0, import_lodash14.default)(() => {
    if (!canCastVote)
      return;
    const haveVotedForTheOption = !!ownVotesByOptionId[option.id];
    return haveVotedForTheOption ? poll.removeVote(ownVotesByOptionId[option.id].id, message.id) : poll.castVote(option.id, message.id);
  }, 100), [canCastVote, message.id, option.id, ownVotesByOptionId, poll]);
  return import_react177.default.createElement(
    "div",
    { className: clsx_default("str-chat__poll-option", {
      "str-chat__poll-option--votable": canCastVote
    }), key: `base-poll-option-${option.id}`, onClick: toggleVote },
    canCastVote && import_react177.default.createElement(Checkmark, { checked: !!ownVotesByOptionId[option.id] }),
    import_react177.default.createElement(
      "div",
      { className: "str-chat__poll-option-data" },
      import_react177.default.createElement("p", { className: "str-chat__poll-option-text" }, option.text),
      displayAvatarCount && voting_visibility === "public" && import_react177.default.createElement("div", { className: "str-chat__poll-option-voters" }, (latest_votes_by_option == null ? void 0 : latest_votes_by_option[option.id]) && latest_votes_by_option[option.id].filter((vote) => !!vote.user && !isVoteAnswer(vote)).slice(0, displayAvatarCount).map(({ user }) => import_react177.default.createElement(Avatar, { image: user == null ? void 0 : user.image, key: `poll-option-${option.id}-avatar-${user == null ? void 0 : user.id}`, name: user == null ? void 0 : user.name }))),
      import_react177.default.createElement("div", { className: "str-chat__poll-option-vote-count" }, voteCountVerbose ? t2("{{count}} votes", {
        count: vote_counts_by_option[option.id] ?? 0
      }) : vote_counts_by_option[option.id] ?? 0)
    ),
    import_react177.default.createElement(AmountBar, { amount: (winningOptionCount && (vote_counts_by_option[option.id] ?? 0) / winningOptionCount) * 100, className: clsx_default("str-chat__poll-option__votes-bar", {
      "str-chat__poll-option__votes-bar--winner": is_closed && maxVotedOptionIds.length === 1 && maxVotedOptionIds[0] === option.id
    }) })
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollOptionList.js
var pollStateSelector6 = (nextValue) => ({
  options: nextValue.options
});
var PollOptionList = ({ optionsDisplayCount }) => {
  const { PollOptionSelector: PollOptionSelector2 = PollOptionSelector } = useComponentContext();
  const { poll } = usePollContext();
  const { options: options2 } = useStateStore(poll.state, pollStateSelector6);
  return import_react178.default.createElement("div", { className: clsx_default("str-chat__poll-option-list", {
    "str-chat__poll-option-list--full": typeof optionsDisplayCount === "undefined"
  }) }, options2.slice(0, optionsDisplayCount ?? options2.length).map((option) => import_react178.default.createElement(PollOptionSelector2, { displayAvatarCount: 3, key: `poll-option-${option.id}`, option })));
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollOptionsFullList.js
var pollStateSelector7 = (nextValue) => ({
  name: nextValue.name
});
var PollOptionsFullList = ({ close }) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { name: name2 } = useStateStore(poll.state, pollStateSelector7);
  return import_react179.default.createElement(
    "div",
    { className: "str-chat__modal__poll-option-list" },
    import_react179.default.createElement(ModalHeader, { close, title: t2("Poll options") }),
    import_react179.default.createElement(
      "div",
      { className: "str-chat__modal__poll-option-list__body" },
      import_react179.default.createElement("div", { className: "str-chat__modal__poll-option-list__title" }, name2),
      import_react179.default.createElement(PollOptionList, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollResults.js
var import_react183 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollOptionVotesList.js
var import_react181 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollOptionWithVotesHeader.js
var import_react180 = __toESM(require_react());
var pollStateSelector8 = (nextValue) => ({
  maxVotedOptionIds: nextValue.maxVotedOptionIds,
  vote_counts_by_option: nextValue.vote_counts_by_option
});
var PollResultOptionVoteCounter = ({ optionId }) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { maxVotedOptionIds, vote_counts_by_option } = useStateStore(poll.state, pollStateSelector8);
  return import_react180.default.createElement(
    "div",
    { className: "str-chat__poll-result-option-vote-counter" },
    maxVotedOptionIds.length === 1 && maxVotedOptionIds[0] === optionId && import_react180.default.createElement("div", { className: "str-chat__poll-result-winning-option-icon" }),
    import_react180.default.createElement("span", { className: "str-chat__poll-result-option-vote-count" }, t2("{{count}} votes", { count: vote_counts_by_option[optionId] ?? 0 }))
  );
};
var PollOptionWithVotesHeader = ({ option }) => import_react180.default.createElement(
  "div",
  { className: "str-chat__poll-option__header" },
  import_react180.default.createElement("div", { className: "str-chat__poll-option__option-text" }, option.text),
  import_react180.default.createElement(PollResultOptionVoteCounter, { optionId: option.id })
);

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollOptionVotesList.js
var PollOptionVotesList = ({ option }) => {
  const paginationParams = (0, import_react181.useMemo)(() => ({ filter: { option_id: option.id } }), [option.id]);
  const { error, hasNextPage, loading, loadMore, votes } = usePollOptionVotesPagination({
    paginationParams
  });
  return import_react181.default.createElement(
    "div",
    { className: "str-chat__poll-option str-chat__poll-option--full-vote-list" },
    import_react181.default.createElement(PollOptionWithVotesHeader, { option }),
    import_react181.default.createElement(
      InfiniteScrollPaginator,
      { loadNextOnScrollToBottom: loadMore, threshold: 40 },
      import_react181.default.createElement(PollVoteListing, { votes }),
      hasNextPage && import_react181.default.createElement("div", { className: "str-chat__loading-indicator-placeholder" }, loading && import_react181.default.createElement(LoadingIndicator, null))
    ),
    error && error.message
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollOptionWithLatestVotes.js
var import_react182 = __toESM(require_react());
var pollStateSelector9 = (nextValue) => ({
  latest_votes_by_option: nextValue.latest_votes_by_option
});
var PollOptionWithLatestVotes = ({ countVotesPreview = 5, option, showAllVotes }) => {
  const { t: t2 } = useTranslationContext();
  const { channelCapabilities = {} } = useChannelStateContext("PollOptionWithLatestVotes");
  const { poll } = usePollContext();
  const { latest_votes_by_option } = useStateStore(poll.state, pollStateSelector9);
  const votes = latest_votes_by_option && latest_votes_by_option[option.id];
  return import_react182.default.createElement(
    "div",
    { className: "str-chat__poll-option" },
    import_react182.default.createElement(PollOptionWithVotesHeader, { option }),
    votes && import_react182.default.createElement(PollVoteListing, { votes: votes.slice(0, countVotesPreview) }),
    channelCapabilities["query-poll-votes"] && showAllVotes && (votes == null ? void 0 : votes.length) > countVotesPreview && import_react182.default.createElement("button", { className: "str-chat__poll-option__show-all-votes-button", onClick: showAllVotes }, t2("Show all"))
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollResults.js
var pollStateSelector10 = (nextValue) => ({
  name: nextValue.name,
  options: [...nextValue.options],
  vote_counts_by_option: nextValue.vote_counts_by_option
});
var PollResults = ({ close }) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { name: name2, options: options2, vote_counts_by_option } = useStateStore(poll.state, pollStateSelector10);
  const [optionToView, setOptionToView] = (0, import_react183.useState)();
  const goBack = (0, import_react183.useCallback)(() => setOptionToView(void 0), []);
  return import_react183.default.createElement("div", { className: clsx_default("str-chat__modal__poll-results", {
    "str-chat__modal__poll-results--option-detail": optionToView
  }) }, optionToView ? import_react183.default.createElement(
    import_react183.default.Fragment,
    null,
    import_react183.default.createElement(ModalHeader, { close, goBack, title: optionToView.text }),
    import_react183.default.createElement(
      "div",
      { className: "str-chat__modal__poll-results__body" },
      import_react183.default.createElement(PollOptionVotesList, { key: `poll-option-detail-${optionToView.id}`, option: optionToView })
    )
  ) : import_react183.default.createElement(
    import_react183.default.Fragment,
    null,
    import_react183.default.createElement(ModalHeader, { close, title: t2("Poll results") }),
    import_react183.default.createElement(
      "div",
      { className: "str-chat__modal__poll-results__body" },
      import_react183.default.createElement("div", { className: "str-chat__modal__poll-results__title" }, name2),
      import_react183.default.createElement("div", { className: "str-chat__modal__poll-results__option-list" }, options2.sort((next, current) => (vote_counts_by_option[current.id] ?? 0) >= (vote_counts_by_option[next.id] ?? 0) ? 1 : -1).map((option) => import_react183.default.createElement(PollOptionWithLatestVotes, { key: `poll-option-${option.id}`, option, showAllVotes: () => setOptionToView(option) })))
    )
  ));
};

// node_modules/stream-chat-react/dist/components/Poll/constants.js
var MAX_POLL_OPTIONS = 100;
var MAX_OPTIONS_DISPLAYED = 10;

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollActions.js
var COMMON_MODAL_CLASS = "str-chat__poll-action-modal";
var pollStateSelector11 = (nextValue) => ({
  allow_answers: nextValue.allow_answers,
  allow_user_suggested_options: nextValue.allow_user_suggested_options,
  answers_count: nextValue.answers_count,
  created_by_id: nextValue.created_by_id,
  is_closed: nextValue.is_closed,
  options: nextValue.options,
  ownAnswer: nextValue.ownAnswer
});
var PollActions = ({ AddCommentForm: AddCommentForm2 = AddCommentForm, EndPollDialog: EndPollDialog2 = EndPollDialog, PollAnswerList: PollAnswerList2 = PollAnswerList, PollOptionsFullList: PollOptionsFullList2 = PollOptionsFullList, PollResults: PollResults2 = PollResults, SuggestPollOptionForm: SuggestPollOptionForm2 = SuggestPollOptionForm }) => {
  var _a;
  const { client } = useChatContext();
  const { t: t2 } = useTranslationContext("PollActions");
  const { channelCapabilities = {} } = useChannelStateContext("PollActions");
  const { message } = useMessageContext("PollActions");
  const { poll } = usePollContext();
  const { allow_answers, allow_user_suggested_options, answers_count, created_by_id, is_closed, options: options2, ownAnswer } = useStateStore(poll.state, pollStateSelector11);
  const [modalOpen, setModalOpen] = (0, import_react184.useState)();
  const closeModal = (0, import_react184.useCallback)(() => setModalOpen(void 0), []);
  const onUpdateAnswerClick = (0, import_react184.useCallback)(() => setModalOpen("add-comment"), []);
  return import_react184.default.createElement(
    "div",
    { className: "str-chat__poll-actions" },
    options2.length > MAX_OPTIONS_DISPLAYED && import_react184.default.createElement(
      PollAction,
      { buttonText: t2("See all options ({{count}})", {
        count: options2.length
      }), closeModal, modalClassName: COMMON_MODAL_CLASS, modalIsOpen: modalOpen === "view-all-options", openModal: () => setModalOpen("view-all-options") },
      import_react184.default.createElement(PollOptionsFullList2, { close: closeModal })
    ),
    !is_closed && allow_user_suggested_options && options2.length < MAX_POLL_OPTIONS && import_react184.default.createElement(
      PollAction,
      { buttonText: t2("Suggest an option"), closeModal, modalClassName: clsx_default(COMMON_MODAL_CLASS, "str-chat__suggest-poll-option-modal"), modalIsOpen: modalOpen === "suggest-option", openModal: () => setModalOpen("suggest-option") },
      import_react184.default.createElement(SuggestPollOptionForm2, { close: closeModal, messageId: message.id })
    ),
    !is_closed && allow_answers && import_react184.default.createElement(
      PollAction,
      { buttonText: ownAnswer ? t2("Update your comment") : t2("Add a comment"), closeModal, modalClassName: clsx_default(COMMON_MODAL_CLASS, "str-chat__add-poll-answer-modal"), modalIsOpen: modalOpen === "add-comment", openModal: () => setModalOpen("add-comment") },
      import_react184.default.createElement(AddCommentForm2, { close: closeModal, messageId: message.id })
    ),
    answers_count > 0 && channelCapabilities["query-poll-votes"] && import_react184.default.createElement(
      PollAction,
      { buttonText: t2("View {{count}} comments", { count: answers_count }), closeModal, modalClassName: clsx_default(COMMON_MODAL_CLASS, "str-chat__poll-answer-list-modal"), modalIsOpen: modalOpen === "view-comments", openModal: () => setModalOpen("view-comments") },
      import_react184.default.createElement(PollAnswerList2, { close: closeModal, onUpdateOwnAnswerClick: onUpdateAnswerClick })
    ),
    import_react184.default.createElement(
      PollAction,
      { buttonText: t2("View results"), closeModal, modalClassName: clsx_default(COMMON_MODAL_CLASS, "str-chat__poll-results-modal"), modalIsOpen: modalOpen === "view-results", openModal: () => setModalOpen("view-results") },
      import_react184.default.createElement(PollResults2, { close: closeModal })
    ),
    !is_closed && created_by_id === ((_a = client.user) == null ? void 0 : _a.id) && import_react184.default.createElement(
      PollAction,
      { buttonText: t2("End vote"), closeModal, modalClassName: clsx_default(COMMON_MODAL_CLASS, "str-chat__end-poll-modal"), modalIsOpen: modalOpen === "end-vote", openModal: () => setModalOpen("end-vote") },
      import_react184.default.createElement(EndPollDialog2, { close: closeModal })
    )
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollContent.js
var pollStateSelectorPollContent = (nextValue) => ({ is_closed: nextValue.is_closed });
var PollContent = () => {
  const { PollActions: PollActions2 = PollActions, PollHeader: PollHeader2 = PollHeader } = useComponentContext();
  const { poll } = usePollContext();
  const { is_closed } = useStateStore(poll.state, pollStateSelectorPollContent);
  return import_react185.default.createElement(
    "div",
    { className: clsx_default("str-chat__poll", { "str-chat__poll--closed": is_closed }) },
    import_react185.default.createElement(PollHeader2, null),
    import_react185.default.createElement(PollOptionList, { optionsDisplayCount: MAX_OPTIONS_DISPLAYED }),
    import_react185.default.createElement(PollActions2, null)
  );
};

// node_modules/stream-chat-react/dist/components/Poll/QuotedPoll.js
var import_react186 = __toESM(require_react());
var pollStateSelectorQuotedPoll = (nextValue) => ({
  is_closed: nextValue.is_closed,
  name: nextValue.name
});
var QuotedPoll = () => {
  const { poll } = usePollContext();
  const { is_closed, name: name2 } = useStateStore(poll.state, pollStateSelectorQuotedPoll);
  return import_react186.default.createElement(
    "div",
    { className: clsx_default("str-chat__quoted-poll-preview", {
      "str-chat__quoted-poll-preview--closed": is_closed
    }) },
    import_react186.default.createElement("div", { className: "str-chat__quoted-poll-preview__icon" }, "📊"),
    import_react186.default.createElement("div", { className: "str-chat__quoted-poll-preview__name" }, name2)
  );
};

// node_modules/stream-chat-react/dist/components/Poll/Poll.js
var Poll = ({ isQuoted, poll }) => {
  const { PollContent: PollContent2 = PollContent, QuotedPoll: QuotedPoll2 = QuotedPoll } = useComponentContext();
  return poll ? import_react187.default.createElement(PollProvider, { poll }, isQuoted ? import_react187.default.createElement(QuotedPoll2, null) : import_react187.default.createElement(PollContent2, null)) : null;
};

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/PollCreationDialog.js
var import_react194 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/MultipleAnswersField.js
var import_react189 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Form/SwitchField.js
var import_react188 = __toESM(require_react());
var SwitchField = ({ children, ...props }) => {
  const inputRef = (0, import_react188.useRef)(null);
  const handleKeyUp = (event) => {
    if (![" ", "Enter"].includes(event.key) || !inputRef.current)
      return;
    event.preventDefault();
    inputRef.current.click();
  };
  return import_react188.default.createElement(
    "div",
    { className: clsx_default("str-chat__form__field str-chat__form__switch-field", {
      "str-chat__form__field str-chat__form__switch-field--disabled": props.disabled
    }) },
    import_react188.default.createElement(
      "label",
      null,
      import_react188.default.createElement("div", { className: "str-chat__form__field str-chat__form__switch-field-content" }, children),
      import_react188.default.createElement("input", { type: "checkbox", ...props, ref: inputRef }),
      import_react188.default.createElement(
        "div",
        { className: clsx_default("str-chat__form__switch-field__switch", {
          "str-chat__form__switch-field__switch--on": props.checked
        }), onKeyUp: handleKeyUp, tabIndex: 0 },
        import_react188.default.createElement("div", { className: "str-chat__form__switch-field__switch-handle" })
      )
    )
  );
};
var SimpleSwitchField = ({ labelText, ...props }) => import_react188.default.createElement(
  SwitchField,
  { ...props },
  import_react188.default.createElement("div", { className: "str-chat__form__field str-chat__form__switch-field__text" }, labelText)
);

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/MultipleAnswersField.js
var pollComposerStateSelector = (state) => ({
  enforce_unique_vote: state.data.enforce_unique_vote,
  error: state.errors.max_votes_allowed,
  max_votes_allowed: state.data.max_votes_allowed
});
var MultipleAnswersField = () => {
  const { t: t2 } = useTranslationContext();
  const { pollComposer } = useMessageComposer();
  const { enforce_unique_vote, error, max_votes_allowed } = useStateStore(pollComposer.state, pollComposerStateSelector);
  return import_react189.default.createElement(
    "div",
    { className: clsx_default("str-chat__form__expandable-field", {
      "str-chat__form__expandable-field--expanded": !enforce_unique_vote
    }) },
    import_react189.default.createElement(SimpleSwitchField, { checked: !enforce_unique_vote, id: "enforce_unique_vote", labelText: t2("Multiple answers"), onChange: (e) => {
      pollComposer.updateFields({ enforce_unique_vote: !e.target.checked });
    } }),
    !enforce_unique_vote && import_react189.default.createElement(
      "div",
      { className: clsx_default("str-chat__form__input-field", {
        "str-chat__form__input-field--has-error": error
      }) },
      import_react189.default.createElement(
        "div",
        { className: clsx_default("str-chat__form__input-field__value") },
        import_react189.default.createElement(FieldError, { className: "str-chat__form__input-field__error", "data-testid": "poll-max-votes-allowed-input-field-error", text: error && t2(error) }),
        import_react189.default.createElement("input", { id: "max_votes_allowed", onBlur: () => {
          pollComposer.handleFieldBlur("max_votes_allowed");
        }, onChange: (e) => {
          const nativeFieldValidation = !e.target.validity.valid ? {
            max_votes_allowed: t2("Only numbers are allowed")
          } : void 0;
          pollComposer.updateFields({
            max_votes_allowed: !nativeFieldValidation ? e.target.value : pollComposer.max_votes_allowed
          }, nativeFieldValidation);
        }, placeholder: t2("Maximum number of votes (from 2 to 10)"), type: "text", value: max_votes_allowed })
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/NameField.js
var import_react190 = __toESM(require_react());
var pollComposerStateSelector2 = (state) => ({
  error: state.errors.name,
  name: state.data.name
});
var NameField = () => {
  const { t: t2 } = useTranslationContext();
  const { pollComposer } = useMessageComposer();
  const { error, name: name2 } = useStateStore(pollComposer.state, pollComposerStateSelector2);
  return import_react190.default.createElement(
    "div",
    { className: clsx_default("str-chat__form__field str-chat__form__input-field str-chat__form__input-field--with-label", {
      "str-chat__form__input-field--has-error": error
    }) },
    import_react190.default.createElement("label", { className: "str-chat__form__field-label", htmlFor: "name" }, t2("Question")),
    import_react190.default.createElement(
      "div",
      { className: clsx_default("str-chat__form__input-field__value") },
      import_react190.default.createElement(FieldError, { className: "str-chat__form__input-field__error", "data-testid": "poll-name-input-field-error", text: error && t2(error) }),
      import_react190.default.createElement("input", { id: "name", onBlur: () => {
        pollComposer.handleFieldBlur("name");
      }, onChange: (e) => {
        pollComposer.updateFields({ name: e.target.value });
      }, placeholder: t2("Ask a question"), type: "text", value: name2 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/OptionFieldSet.js
var import_react192 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/DragAndDrop/DragAndDropContainer.js
var import_react191 = __toESM(require_react());
var DragAndDropContainer = ({ children, className, draggable, onSetNewOrder }) => {
  const [order3, setOrder] = (0, import_react191.useState)([]);
  const [dragStartIndex, setDragStartIndex] = (0, import_react191.useState)(null);
  const [dragOverIndex, setDragOverIndex] = (0, import_react191.useState)(null);
  const [container, setContainer] = (0, import_react191.useState)(null);
  const moveDirection = dragStartIndex === null || dragOverIndex === null ? void 0 : dragStartIndex <= dragOverIndex ? "down" : "up";
  const childrenArray = import_react191.default.Children.toArray(children);
  (0, import_react191.useEffect)(() => {
    setOrder(import_react191.default.Children.map(children, (_2, index4) => index4) || []);
  }, [children]);
  (0, import_react191.useEffect)(() => {
    if (!container)
      return;
    const handleDragStart = (e) => {
      var _a, _b;
      const target = e.target;
      const draggableItem = target.closest(".str-chat__drag-and-drop-container__item");
      if (e.dataTransfer) {
        e.dataTransfer.effectAllowed = "move";
      }
      if (draggableItem instanceof HTMLElement) {
        const index4 = Array.from(((_a = draggableItem.parentElement) == null ? void 0 : _a.children) || []).indexOf(draggableItem);
        setDragStartIndex(index4);
        (_b = e.dataTransfer) == null ? void 0 : _b.setData("text/plain", index4.toString());
        draggableItem.style.opacity = "0.3";
      }
    };
    const handleDragOver = (e) => {
      var _a;
      e.preventDefault();
      const target = e.target;
      const draggableItem = target.closest(".str-chat__drag-and-drop-container__item");
      if (draggableItem instanceof HTMLElement) {
        const index4 = Array.from(((_a = draggableItem.parentElement) == null ? void 0 : _a.children) || []).indexOf(draggableItem);
        setDragOverIndex(index4);
      }
    };
    const handleDragLeave = () => {
      setDragOverIndex(null);
    };
    const handleDrop = (e) => {
      var _a, _b;
      e.preventDefault();
      const draggedIndex = parseInt(((_a = e.dataTransfer) == null ? void 0 : _a.getData("text/plain")) || "-1", 10);
      const target = e.target;
      const draggableItem = target.closest(".str-chat__drag-and-drop-container__item");
      if (draggableItem instanceof HTMLElement) {
        const dropIndex = Array.from(((_b = draggableItem.parentElement) == null ? void 0 : _b.children) || []).indexOf(draggableItem);
        if (draggedIndex !== -1 && draggedIndex !== dropIndex) {
          setOrder((prevOrder) => {
            const newOrder = [...prevOrder];
            const [removed] = newOrder.splice(draggedIndex, 1);
            newOrder.splice(dropIndex, 0, removed);
            onSetNewOrder == null ? void 0 : onSetNewOrder(newOrder);
            return newOrder;
          });
        }
      }
      setDragStartIndex(null);
      setDragOverIndex(null);
    };
    const handleDragEnd = (e) => {
      const target = e.target;
      if (target instanceof HTMLElement) {
        target.style.opacity = "";
      }
      setDragStartIndex(null);
      setDragOverIndex(null);
    };
    container.addEventListener("dragstart", handleDragStart);
    container.addEventListener("dragover", handleDragOver);
    container.addEventListener("dragleave", handleDragLeave);
    container.addEventListener("drop", handleDrop);
    container.addEventListener("dragend", handleDragEnd);
    return () => {
      container.removeEventListener("dragstart", handleDragStart);
      container.removeEventListener("dragover", handleDragOver);
      container.removeEventListener("dragleave", handleDragLeave);
      container.removeEventListener("drop", handleDrop);
      container.removeEventListener("dragend", handleDragEnd);
    };
  }, [container, onSetNewOrder]);
  return import_react191.default.createElement("div", { className: clsx_default("str-chat__drag-and-drop-container", className), ref: setContainer }, order3.map((originalIndex, currentIndex) => {
    const child = childrenArray[originalIndex];
    return import_react191.default.createElement("div", { className: clsx_default("str-chat__drag-and-drop-container__item", {
      "str-chat__drag-and-drop-container__item--dragged-over-from-bottom": moveDirection === "up" && dragOverIndex === currentIndex,
      "str-chat__drag-and-drop-container__item--dragged-over-from-top": moveDirection === "down" && dragOverIndex === currentIndex
    }), draggable, key: import_react191.default.isValidElement(child) ? child.key : `draggable-item-${originalIndex}` }, child);
  }));
};

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/OptionFieldSet.js
var pollComposerStateSelector3 = (state) => ({
  errors: state.errors.options,
  options: state.data.options
});
var OptionFieldSet = () => {
  const { pollComposer } = useMessageComposer();
  const { errors, options: options2 } = useStateStore(pollComposer.state, pollComposerStateSelector3);
  const { t: t2 } = useTranslationContext("OptionFieldSet");
  const onSetNewOrder = (0, import_react192.useCallback)((newOrder) => {
    const prevOptions = pollComposer.options;
    pollComposer.updateFields({ options: newOrder.map((index4) => prevOptions[index4]) });
  }, [pollComposer]);
  const draggable = options2.length > 1;
  return import_react192.default.createElement(
    "fieldset",
    { className: "str-chat__form__field str-chat__form__input-fieldset" },
    import_react192.default.createElement("legend", { className: "str-chat__form__field-label" }, t2("Options")),
    import_react192.default.createElement(DragAndDropContainer, { className: "str-chat__form__input-fieldset__values", draggable, onSetNewOrder }, options2.map((option, i2) => {
      const error = errors == null ? void 0 : errors[option.id];
      return import_react192.default.createElement(
        "div",
        { className: clsx_default("str-chat__form__input-field", {
          "str-chat__form__input-field--draggable": draggable,
          "str-chat__form__input-field--has-error": error
        }), key: `new-poll-option-${i2}` },
        import_react192.default.createElement(
          "div",
          { className: "str-chat__form__input-field__value" },
          import_react192.default.createElement(FieldError, { className: "str-chat__form__input-field__error", "data-testid": "poll-option-input-field-error", text: error && t2(error) }),
          import_react192.default.createElement("input", { id: option.id, onBlur: () => {
            pollComposer.handleFieldBlur("options");
          }, onChange: (e) => {
            pollComposer.updateFields({
              options: { index: i2, text: e.target.value }
            });
          }, onKeyUp: (event) => {
            var _a;
            const isFocusedLastOptionField = i2 === options2.length - 1;
            if (event.key === "Enter" && !isFocusedLastOptionField) {
              const nextInputId = options2[i2 + 1].id;
              (_a = document.getElementById(nextInputId)) == null ? void 0 : _a.focus();
            }
          }, placeholder: t2("Add an option"), type: "text", value: option.text })
        ),
        draggable && import_react192.default.createElement("div", { className: "str-chat__drag-handle" })
      );
    }))
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/PollCreationDialogControls.js
var import_react193 = __toESM(require_react());
var PollCreationDialogControls = ({ close }) => {
  const { t: t2 } = useTranslationContext("PollCreationDialogControls");
  const { handleSubmit: handleSubmitMessage } = useMessageInputContext();
  const messageComposer = useMessageComposer();
  const canCreatePoll = useCanCreatePoll();
  return import_react193.default.createElement(
    "div",
    { className: "str-chat__dialog__controls" },
    import_react193.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--cancel", onClick: () => {
      messageComposer.pollComposer.initState();
      close();
    }, type: "button" }, t2("Cancel")),
    import_react193.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--submit", disabled: !canCreatePoll, onClick: () => {
      messageComposer.createPoll().then(() => handleSubmitMessage()).then(() => {
        messageComposer.pollComposer.initState();
        close();
      }).catch(console.error);
    }, type: "submit" }, t2("Create"))
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/PollCreationDialog.js
var pollComposerStateSelector4 = (state) => ({
  allow_answers: state.data.allow_answers,
  allow_user_suggested_options: state.data.allow_user_suggested_options,
  voting_visibility: state.data.voting_visibility
});
var PollCreationDialog = ({ close }) => {
  const { t: t2 } = useTranslationContext();
  const { pollComposer } = useMessageComposer();
  const { allow_answers, allow_user_suggested_options, voting_visibility } = useStateStore(pollComposer.state, pollComposerStateSelector4);
  const onClose = (0, import_react194.useCallback)(() => {
    pollComposer.initState();
    close();
  }, [pollComposer, close]);
  return import_react194.default.createElement(
    "div",
    { className: "str-chat__dialog str-chat__poll-creation-dialog", "data-testid": "poll-creation-dialog" },
    import_react194.default.createElement(ModalHeader, { close: onClose, title: t2("Create poll") }),
    import_react194.default.createElement(
      "div",
      { className: "str-chat__dialog__body" },
      import_react194.default.createElement(
        "form",
        { autoComplete: "off" },
        import_react194.default.createElement(NameField, null),
        import_react194.default.createElement(OptionFieldSet, null),
        import_react194.default.createElement(MultipleAnswersField, null),
        import_react194.default.createElement(SimpleSwitchField, { checked: voting_visibility === "anonymous", id: "voting_visibility", labelText: t2("Anonymous poll"), onChange: (e) => pollComposer.updateFields({
          voting_visibility: e.target.checked ? VotingVisibility.anonymous : VotingVisibility.public
        }) }),
        import_react194.default.createElement(SimpleSwitchField, { checked: allow_user_suggested_options, id: "allow_user_suggested_options", labelText: t2("Allow option suggestion"), onChange: (e) => pollComposer.updateFields({
          allow_user_suggested_options: e.target.checked
        }) }),
        import_react194.default.createElement(SimpleSwitchField, { checked: allow_answers, id: "allow_answers", labelText: t2("Allow comments"), onChange: (e) => pollComposer.updateFields({ allow_answers: e.target.checked }) })
      )
    ),
    import_react194.default.createElement(PollCreationDialogControls, { close })
  );
};

// node_modules/stream-chat-react/dist/components/Message/QuotedMessage.js
var QuotedMessage = ({ renderText: propsRenderText }) => {
  var _a, _b, _c;
  const { Attachment: Attachment2 = Attachment, Avatar: ContextAvatar } = useComponentContext("QuotedMessage");
  const { client } = useChatContext();
  const { isMyMessage, message, renderText: contextRenderText } = useMessageContext("QuotedMessage");
  const { t: t2, userLanguage } = useTranslationContext("QuotedMessage");
  const { jumpToMessage } = useChannelActionContext("QuotedMessage");
  const renderText2 = propsRenderText ?? contextRenderText ?? renderText;
  const Avatar2 = ContextAvatar || Avatar;
  const { quoted_message } = message;
  const poll = (quoted_message == null ? void 0 : quoted_message.poll_id) && client.polls.fromState(quoted_message.poll_id);
  const quotedMessageDeleted = (quoted_message == null ? void 0 : quoted_message.deleted_at) || (quoted_message == null ? void 0 : quoted_message.type) === "deleted";
  const quotedMessageText = quotedMessageDeleted ? t2("This message was deleted...") : ((_a = quoted_message == null ? void 0 : quoted_message.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || (quoted_message == null ? void 0 : quoted_message.text);
  const quotedMessageAttachment = ((_b = quoted_message == null ? void 0 : quoted_message.attachments) == null ? void 0 : _b.length) && !quotedMessageDeleted ? quoted_message.attachments[0] : null;
  const renderedText = (0, import_react195.useMemo)(() => renderText2(quotedMessageText, quoted_message == null ? void 0 : quoted_message.mentioned_users), [quotedMessageText, quoted_message == null ? void 0 : quoted_message.mentioned_users, renderText2]);
  if (!quoted_message)
    return null;
  if (!quoted_message.poll && !quotedMessageText && !quotedMessageAttachment)
    return null;
  return import_react195.default.createElement(
    import_react195.default.Fragment,
    null,
    import_react195.default.createElement(
      "div",
      { className: clsx_default("str-chat__quoted-message-preview", { mine: isMyMessage() }), "data-testid": "quoted-message", onClickCapture: (e) => {
        e.stopPropagation();
        e.preventDefault();
        jumpToMessage(quoted_message.id);
      } },
      quoted_message.user && import_react195.default.createElement(Avatar2, { className: "str-chat__avatar--quoted-message-sender", image: quoted_message.user.image, name: quoted_message.user.name || quoted_message.user.id, user: quoted_message.user }),
      import_react195.default.createElement("div", { className: "str-chat__quoted-message-bubble", "data-testid": "quoted-message-contents" }, poll ? import_react195.default.createElement(Poll, { isQuoted: true, poll }) : import_react195.default.createElement(
        import_react195.default.Fragment,
        null,
        quotedMessageAttachment && import_react195.default.createElement(Attachment2, { attachments: [quotedMessageAttachment], isQuoted: true }),
        import_react195.default.createElement("div", { className: "str-chat__quoted-message-bubble__text", "data-testid": "quoted-message-text" }, renderedText)
      ))
    ),
    ((_c = message.attachments) == null ? void 0 : _c.length) ? import_react195.default.createElement(Attachment2, { attachments: message.attachments }) : null
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageErrorText.js
var import_react196 = __toESM(require_react());
function MessageErrorText({ message, theme }) {
  var _a;
  const { t: t2 } = useTranslationContext("MessageText");
  if (message.type === "error" && !isMessageBounced(message)) {
    return import_react196.default.createElement("div", { className: `str-chat__${theme}-message--error-message str-chat__message--error-message` }, t2("Error · Unsent"));
  }
  if (message.status === "failed") {
    return import_react196.default.createElement("div", { className: `str-chat__${theme}-message--error-message str-chat__message--error-message` }, ((_a = message.error) == null ? void 0 : _a.status) !== 403 ? t2("Message Failed · Click to try again") : t2("Message Failed · Unauthorized"));
  }
  return null;
}

// node_modules/stream-chat-react/dist/components/Message/MessageText.js
var UnMemoizedMessageTextComponent = (props) => {
  var _a;
  const { customInnerClass, customWrapperClass = "", message: propMessage, renderText: propsRenderText, theme = "simple" } = props;
  const { QuotedMessage: QuotedMessage2 = QuotedMessage } = useComponentContext("MessageText");
  const { message: contextMessage, onMentionsClickMessage, onMentionsHoverMessage, renderText: contextRenderText, unsafeHTML } = useMessageContext("MessageText");
  const renderText2 = propsRenderText ?? contextRenderText ?? renderText;
  const { userLanguage } = useTranslationContext("MessageText");
  const message = propMessage || contextMessage;
  const hasAttachment = messageHasAttachments(message);
  const messageTextToRender = ((_a = message.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || message.text;
  const messageText = (0, import_react197.useMemo)(
    () => renderText2(messageTextToRender, message.mentioned_users),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [message.mentioned_users, messageTextToRender]
  );
  const wrapperClass = customWrapperClass || "str-chat__message-text";
  const innerClass = customInnerClass || `str-chat__message-text-inner str-chat__message-${theme}-text-inner`;
  if (!messageTextToRender && !message.quoted_message)
    return null;
  return import_react197.default.createElement(
    "div",
    { className: wrapperClass, tabIndex: 0 },
    import_react197.default.createElement(
      "div",
      { className: clsx_default(innerClass, {
        [`str-chat__message-${theme}-text-inner--has-attachment`]: hasAttachment,
        [` str-chat__message-${theme}-text-inner--is-emoji`]: isOnlyEmojis(message.text) && !message.quoted_message
      }), "data-testid": "message-text-inner-wrapper", onClick: onMentionsClickMessage, onMouseOver: onMentionsHoverMessage },
      message.quoted_message && import_react197.default.createElement(QuotedMessage2, null),
      import_react197.default.createElement(MessageErrorText, { message, theme }),
      unsafeHTML && message.html ? import_react197.default.createElement("div", { dangerouslySetInnerHTML: { __html: message.html } }) : import_react197.default.createElement("div", null, messageText)
    )
  );
};
var MessageText = import_react197.default.memo(UnMemoizedMessageTextComponent);

// node_modules/stream-chat-react/dist/components/Message/StreamedMessageText.js
var import_react198 = __toESM(require_react());
var StreamedMessageText = (props) => {
  const { message: messageFromProps, renderingLetterCount, renderText: renderText2, streamingLetterIntervalMs } = props;
  const { message: messageFromContext } = useMessageContext("StreamedMessageText");
  const message = messageFromProps || messageFromContext;
  const { text: text8 = "" } = message;
  const { streamedMessageText } = useMessageTextStreaming({
    renderingLetterCount,
    streamingLetterIntervalMs,
    text: text8
  });
  return import_react198.default.createElement(MessageText, { message: { ...message, text: streamedMessageText }, renderText: renderText2 });
};

// node_modules/stream-chat-react/dist/components/MessageList/ConnectionStatus.js
var import_react200 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/CustomNotification.js
var import_react199 = __toESM(require_react());
var UnMemoizedCustomNotification = (props) => {
  const { active, children, className, type } = props;
  if (!active)
    return null;
  return import_react199.default.createElement("div", { "aria-live": "polite", className: clsx_default(`str-chat__custom-notification notification-${type}`, `str-chat__notification`, `str-chat-react__notification`, className), "data-testid": "custom-notification" }, children);
};
var CustomNotification = import_react199.default.memo(UnMemoizedCustomNotification);

// node_modules/stream-chat-react/dist/components/MessageList/ConnectionStatus.js
var UnMemoizedConnectionStatus = () => {
  const { client } = useChatContext("ConnectionStatus");
  const { t: t2 } = useTranslationContext("ConnectionStatus");
  const [online, setOnline] = (0, import_react200.useState)(true);
  (0, import_react200.useEffect)(() => {
    const connectionChanged = ({ online: onlineStatus = false }) => {
      if (online !== onlineStatus) {
        setOnline(onlineStatus);
      }
    };
    client.on("connection.changed", connectionChanged);
    return () => client.off("connection.changed", connectionChanged);
  }, [client, online]);
  return import_react200.default.createElement(CustomNotification, { active: !online, className: "str-chat__connection-status-notification", type: "error" }, t2("Connection failure, reconnecting now..."));
};
var ConnectionStatus = import_react200.default.memo(UnMemoizedConnectionStatus);

// node_modules/stream-chat-react/dist/components/MessageList/GiphyPreviewMessage.js
var import_react201 = __toESM(require_react());
var GiphyPreviewMessage = (props) => {
  const { message } = props;
  return import_react201.default.createElement(
    "div",
    { className: "giphy-preview-message" },
    import_react201.default.createElement(Message, { message })
  );
};

// node_modules/stream-chat-react/dist/components/MessageList/MessageList.js
var import_react221 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useEnrichedMessages.js
var import_react202 = __toESM(require_react());

// node_modules/stream-chat-react/dist/constants/messageTypes.js
var CUSTOM_MESSAGE_TYPE = {
  date: "message.date",
  intro: "channel.intro"
};

// node_modules/stream-chat-react/dist/i18n/de.json
var de_default = {
  "Add a comment": "Einen Kommentar hinzufügen",
  "Add an option": "Eine Option hinzufügen",
  "All results loaded": "Alle Ergebnisse geladen",
  "Allow access to camera": "Zugriff auf Kamera erlauben",
  "Allow access to microphone": "Zugriff auf Mikrofon erlauben",
  "Allow comments": "Kommentare erlauben",
  "Allow option suggestion": "Optionsvorschläge erlauben",
  "Also send as a direct message": "Auch als Direktnachricht senden",
  "Also send in channel": "Auch im Kanal senden",
  "An error has occurred during recording": "Ein Fehler ist während der Aufnahme aufgetreten",
  "An error has occurred during the recording processing": "Ein Fehler ist während der Aufnahmeverarbeitung aufgetreten",
  Anonymous: "Anonym",
  "Anonymous poll": "Anonyme Umfrage",
  Archive: "Archivieren",
  "Ask a question": "Eine Frage stellen",
  Attach: "Anhängen",
  "Attach files": "Dateien anhängen",
  "Attachment upload blocked due to {{reason}}": "Anhang-Upload blockiert wegen {{reason}}",
  "Attachment upload failed due to {{reason}}": "Anhang-Upload fehlgeschlagen wegen {{reason}}",
  Cancel: "Abbrechen",
  "Cannot seek in the recording": "In der Aufnahme kann nicht gesucht werden",
  "Channel Missing": "Kanal fehlt",
  Close: "Schließen",
  "Close emoji picker": "Emoji-Auswahl schließen",
  "Commands matching": "Übereinstimmende Befehle",
  "Connection failure, reconnecting now...": "Verbindungsfehler, Wiederherstellung der Verbindung...",
  Create: "Erstellen",
  "Create poll": "Umfrage erstellen",
  "Current location": "Aktueller Standort",
  Delete: "Löschen",
  Delivered: "Zugestellt",
  "Download attachment {{ name }}": "Anhang {{ name }} herunterladen",
  "Drag your files here": "Ziehen Sie Ihre Dateien hierher",
  "Drag your files here to add to your post": "Ziehen Sie Ihre Dateien hierher, um sie Ihrem Beitrag hinzuzufügen",
  "Due since {{ dueSince }}": "Fällig seit {{ dueSince }}",
  "Due {{ timeLeft }}": "Fällig {{ timeLeft }}",
  "Edit Message": "Nachricht bearbeiten",
  "Edit message request failed": "Anfrage zum Bearbeiten der Nachricht fehlgeschlagen",
  Edited: "Bearbeitet",
  "Emoji matching": "Passende Emojis",
  "Empty message...": "Leere Nachricht...",
  End: "Beenden",
  "End vote": "Abstimmung beenden",
  "Enforce unique vote is enabled": "Eindeutige Abstimmung ist aktiviert",
  "Error adding flag": "Fehler beim Hinzufügen des Flags",
  "Error connecting to chat, refresh the page to try again.": "Verbindungsfehler zum Chat, aktualisieren Sie die Seite, um es erneut zu versuchen.",
  "Error deleting message": "Fehler beim Löschen der Nachricht",
  "Error fetching reactions": "Fehler beim Laden von Reaktionen",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Fehler beim Markieren der Nachricht als ungelesen. Kann keine älteren ungelesenen Nachrichten markieren als die neuesten 100 Kanalnachrichten.",
  "Error muting a user ...": "Fehler beim Stummschalten eines Nutzers.",
  "Error pinning message": "Fehler beim Pinnen der Nachricht",
  "Error removing message pin": "Fehler beim Entfernen der gepinnten Nachricht",
  "Error reproducing the recording": "Fehler bei der Wiedergabe der Aufnahme",
  "Error starting recording": "Fehler beim Starten der Aufnahme",
  "Error unmuting a user ...": "Fehler beim Aufheben der Stummschaltung eines Nutzers ...",
  "Error uploading attachment": "Fehler beim Hochladen des Anhangs",
  "Error uploading file": "Fehler beim Hochladen der Datei",
  "Error uploading image": "Fehler beim Hochladen des Bildes",
  "Error · Unsent": "Fehler · Nicht gesendet",
  "Error: {{ errorMessage }}": "Fehler: {{ errorMessage }}",
  "Failed to create the poll": "Fehler beim Erstellen der Umfrage",
  "Failed to create the poll due to {{reason}}": "Die Umfrage konnte aufgrund von {{reason}} nicht erstellt werden",
  "Failed to jump to the first unread message": "Fehler beim Springen zur ersten ungelesenen Nachricht",
  "Failed to mark channel as read": "Fehler beim Markieren des Kanals als gelesen",
  "Failed to play the recording": "Wiedergabe der Aufnahme fehlgeschlagen",
  "Failed to retrieve location": "Standort konnte nicht abgerufen werden",
  "Failed to share location": "Standort konnte nicht geteilt werden",
  File: "Datei",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Datei ist zu groß: {{ size }}, maximale Upload-Größe beträgt {{ limit }}",
  Flag: "Melden",
  "Generating...": "Generieren...",
  "Latest Messages": "Neueste Nachrichten",
  "Live for {{duration}}": "Live für {{duration}}",
  "Live location": "Live-Standort",
  "Live until {{ timestamp }}": "Live bis {{ timestamp }}",
  "Load more": "Mehr laden",
  Location: "Standort",
  "Location sharing ended": "Standortfreigabe beendet",
  "Mark as unread": "Als ungelesen markieren",
  "Maximum number of votes (from 2 to 10)": "Maximale Anzahl der Stimmen (von 2 bis 10)",
  Menu: "Menü",
  "Message Failed · Click to try again": "Nachricht fehlgeschlagen · Klicken, um es erneut zu versuchen",
  "Message Failed · Unauthorized": "Nachricht fehlgeschlagen · Nicht autorisiert",
  "Message deleted": "Nachricht gelöscht",
  "Message has been successfully flagged": "Nachricht wurde erfolgreich gemeldet",
  "Message pinned": "Nachricht angeheftet",
  "Message was blocked by moderation policies": "Nachricht wurde durch moderationsrichtlinien blockiert",
  "Messages have been marked unread.": "Nachrichten wurden als ungelesen markiert.",
  "Missing permissions to upload the attachment": "Fehlende Berechtigungen zum Hochladen des Anhangs",
  "Multiple answers": "Mehrere Antworten",
  Mute: "Stummschalten",
  New: "Neu",
  "New Messages!": "Neue Nachrichten!",
  "No chats here yet…": "Noch keine Chats hier...",
  "No results found": "Keine Ergebnisse gefunden",
  "Nobody will be able to vote in this poll anymore.": "Niemand kann mehr in dieser Umfrage abstimmen.",
  "Nothing yet...": "Noch nichts...",
  Ok: "Ok",
  "Only numbers are allowed": "Nur Zahlen sind erlaubt",
  "Open emoji picker": "Emoji-Auswahl öffnen",
  "Option already exists": "Option existiert bereits",
  "Option is empty": "Option ist leer",
  Options: "Optionen",
  "People matching": "Passende Personen",
  Pin: "Anheften",
  "Pinned by": "Angeheftet von",
  Poll: "Umfrage",
  "Poll comments": "Umfragekommentare",
  "Poll options": "Umfrageoptionen",
  "Poll results": "Umfrageergebnisse",
  Question: "Frage",
  "Question is required": "Frage ist erforderlich",
  Quote: "Zitieren",
  "Reached the vote limit. Remove an existing vote first.": "Das Abstimmungslimit wurde erreicht. Entfernen Sie zuerst eine bestehende Stimme.",
  "Recording format is not supported and cannot be reproduced": "Aufnahmeformat wird nicht unterstützt und kann nicht wiedergegeben werden",
  "Remind Me": "Erinnern",
  "Remove reminder": "Erinnerung entfernen",
  Reply: "Antworten",
  "Reply to Message": "Auf Nachricht antworten",
  "Save for later": "Für später speichern",
  "Saved for later": "Für später gespeichert",
  Search: "Suche",
  "Searching...": "Suchen...",
  "See all options ({{count}})_one": "Alle Optionen anzeigen ({{count}})",
  "See all options ({{count}})_other": "Alle Optionen anzeigen ({{count}})",
  "Select one": "Eine auswählen",
  "Select one or more": "Eine oder mehrere auswählen",
  "Select up to {{count}}_one": "Bis zu {{count}} auswählen",
  "Select up to {{count}}_other": "Bis zu {{count}} auswählen",
  Send: "Senden",
  "Send Anyway": "Trotzdem senden",
  "Send message request failed": "Senden der Nachrichtenanfrage fehlgeschlagen",
  "Sending...": "Senden...",
  Share: "Teilen",
  "Share Location": "Standort teilen",
  "Share live location for": "Live-Standort teilen für",
  "Shared live location": "Geteilter Live-Standort",
  "Show all": "Alle anzeigen",
  Shuffle: "Mischen",
  "Slow Mode ON": "Langsamer Modus EIN",
  "Some of the files will not be accepted": "Einige der Dateien werden nicht akzeptiert",
  "Start typing to search": "Tippen Sie, um zu suchen",
  "Stop sharing": "Teilen beenden",
  Submit: "Absenden",
  "Suggest an option": "Eine Option vorschlagen",
  "Thinking...": "Denken...",
  "This field cannot be empty or contain only spaces": "Dieses Feld darf nicht leer sein oder nur Leerzeichen enthalten",
  "This message did not meet our content guidelines": "Diese Nachricht entsprach nicht unseren Inhaltsrichtlinien",
  "This message was deleted...": "Diese Nachricht wurde gelöscht...",
  Thread: "Thread",
  "Thread has not been found": "Thread wurde nicht gefunden",
  "Thread reply": "Thread-Antwort",
  "To start recording, allow the camera access in your browser": "Um mit der Aufnahme zu beginnen, erlauben Sie den Zugriff auf die Kamera in Ihrem Browser",
  "To start recording, allow the microphone access in your browser": "Um mit der Aufnahme zu beginnen, erlauben Sie den Zugriff auf das Mikrofon in Ihrem Browser",
  "Type a number from 2 to 10": "Geben Sie eine Zahl von 2 bis 10 ein",
  "Type your message": "Nachricht eingeben",
  Unarchive: "Archivierung aufheben",
  Unmute: "Stummschaltung aufheben",
  Unpin: "Anheftung aufheben",
  "Unread messages": "Ungelesene Nachrichten",
  "Unsupported attachment": "Nicht unterstützter Anhang",
  "Update your comment": "Ihren Kommentar aktualisieren",
  'Upload type: "{{ type }}" is not allowed': 'Upload-Typ: "{{ type }}" ist nicht erlaubt',
  "User uploaded content": "Vom Benutzer hochgeladener Inhalt",
  "View results": "Ergebnisse anzeigen",
  "View {{count}} comments_one": "{{count}} Kommentar anzeigen",
  "View {{count}} comments_other": "{{count}} Kommentare anzeigen",
  "Voice message": "Sprachnachricht",
  "Vote ended": "Abstimmung beendet",
  "Wait until all attachments have uploaded": "Bitte warten, bis alle Anhänge hochgeladen wurden",
  You: "Du",
  "You have no channels currently": "Du hast momentan noch keine Kanäle",
  "You've reached the maximum number of files": "Die maximale Anzahl an Dateien ist erreicht",
  "aria/Attachment": "Anhang",
  "aria/Cancel Reply": "Antwort abbrechen",
  "aria/Cancel upload": "Upload abbrechen",
  "aria/Channel list": "Kanalliste",
  "aria/Channel search results": "Kanalsuchergebnisse",
  "aria/Close thread": "Thread schließen",
  "aria/Download attachment": "Anhang herunterladen",
  "aria/Emoji picker": "Emoji-Auswahl",
  "aria/File input": "Dateieingabe",
  "aria/File upload": "Datei hochladen",
  "aria/Image input": "Bildeingabe",
  "aria/Load More Channels": "Mehr Kanäle laden",
  "aria/Menu": "Menü",
  "aria/Message Options": "Nachrichtenoptionen",
  "aria/Open Attachment Selector": "Anhang-Auswahl öffnen",
  "aria/Open Menu": "Menü öffnen",
  "aria/Open Message Actions Menu": "Nachrichtenaktionsmenü öffnen",
  "aria/Open Reaction Selector": "Reaktionsauswahl öffnen",
  "aria/Open Thread": "Thread öffnen",
  "aria/Reaction list": "Reaktionsliste",
  "aria/Remind Me Options": "Erinnerungsoptionen",
  "aria/Remove attachment": "Anhang entfernen",
  "aria/Remove location attachment": "Standortanhang entfernen",
  "aria/Retry upload": "Upload erneut versuchen",
  "aria/Search results": "Suchergebnisse",
  "aria/Search results header filter button": "Suchergebnisse-Kopfzeilen-Filterbutton",
  "aria/Send": "Senden",
  "aria/Stop AI Generation": "KI-Generierung stoppen",
  "ban-command-args": "[@Benutzername] [Text]",
  "ban-command-description": "Einen Benutzer verbannen",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[Text]",
  "giphy-command-description": "Poste ein zufälliges Gif in den Kanal",
  live: "live",
  "mute-command-args": "[@Benutzername]",
  "mute-command-description": "Stummschalten eines Benutzers",
  "network error": "Netzwerkfehler",
  replyCount_one: "1 Antwort",
  replyCount_other: "{{ count }} Antworten",
  "search-results-header-filter-source-button-label--channels": "Kanäle",
  "search-results-header-filter-source-button-label--messages": "Nachrichten",
  "search-results-header-filter-source-button-label--users": "Benutzer",
  searchResultsCount_one: "1 Ergebnis",
  searchResultsCount_other: "{{ count }} Ergebnisse",
  "size limit": "Größenbeschränkung",
  "this content could not be displayed": "Dieser Inhalt konnte nicht angezeigt werden",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@Benutzername]",
  "unban-command-description": "Einen Benutzer entbannen",
  "unknown error": "Unbekannter Fehler",
  "unmute-command-args": "[@Benutzername]",
  "unmute-command-description": "Stummschaltung eines Benutzers aufheben",
  unreadMessagesSeparatorText_one: "1 ungelesene Nachricht",
  unreadMessagesSeparatorText_other: "{{count}} ungelesene Nachrichten",
  "unsupported file type": "Nicht unterstützter Dateityp",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} und {{moreCount}} mehr",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} und {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} und {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mehr",
  "{{ memberCount }} members": "{{ memberCount }} Mitglieder",
  "{{ user }} has been muted": "{{ user }} wurde stummgeschaltet",
  "{{ user }} has been unmuted": "Die Stummschaltung von {{ user }} wurde aufgehoben",
  "{{ user }} is typing...": "{{ user }} tippt...",
  "{{ users }} and more are typing...": "{{ users }} und mehr tippen...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} und {{ user }} tippen...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} ungelesen",
  "{{count}} unread_other": "{{count}} ungelesen",
  "{{count}} votes_one": "{{count}} Stimme",
  "{{count}} votes_other": "{{count}} Stimmen",
  "🏙 Attachment...": "🏙 Anhang...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} hat erstellt: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} hat abgestimmt: {{pollOptionText}}",
  "📍Shared location": "📍Geteilter Standort"
};

// node_modules/stream-chat-react/dist/i18n/en.json
var en_default = {
  "Add a comment": "Add a comment",
  "Add an option": "Add an option",
  "All results loaded": "All results loaded",
  "Allow access to camera": "Allow access to camera",
  "Allow access to microphone": "Allow access to microphone",
  "Allow comments": "Allow comments",
  "Allow option suggestion": "Allow option suggestion",
  "Also send as a direct message": "Also send as a direct message",
  "Also send in channel": "Also send in channel",
  "An error has occurred during recording": "An error has occurred during recording",
  "An error has occurred during the recording processing": "An error has occurred during the recording processing",
  Anonymous: "Anonymous",
  "Anonymous poll": "Anonymous poll",
  Archive: "Archive",
  "Ask a question": "Ask a question",
  Attach: "Attach",
  "Attach files": "Attach files",
  "Attachment upload blocked due to {{reason}}": "Attachment upload blocked due to {{reason}}",
  "Attachment upload failed due to {{reason}}": "Attachment upload failed due to {{reason}}",
  Cancel: "Cancel",
  "Cannot seek in the recording": "Cannot seek in the recording",
  "Channel Missing": "Channel Missing",
  Close: "Close",
  "Close emoji picker": "Close emoji picker",
  "Commands matching": "Commands matching",
  "Connection failure, reconnecting now...": "Connection failure, reconnecting now...",
  Create: "Create",
  "Create poll": "Create poll",
  "Current location": "Current location",
  Delete: "Delete",
  Delivered: "Delivered",
  "Download attachment {{ name }}": "Download attachment {{ name }}",
  "Drag your files here": "Drag your files here",
  "Drag your files here to add to your post": "Drag your files here to add to your post",
  "Due since {{ dueSince }}": "Due since {{ dueSince }}",
  "Due {{ timeLeft }}": "Due {{ timeLeft }}",
  "Edit Message": "Edit Message",
  "Edit message request failed": "Edit message request failed",
  Edited: "Edited",
  "Emoji matching": "Emoji matching",
  "Empty message...": "Empty message...",
  End: "End",
  "End vote": "End vote",
  "Enforce unique vote is enabled": "Enforce unique vote is enabled",
  "Error adding flag": "Error adding flag",
  "Error connecting to chat, refresh the page to try again.": "Error connecting to chat, refresh the page to try again.",
  "Error deleting message": "Error deleting message",
  "Error fetching reactions": "Error loading reactions",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.",
  "Error muting a user ...": "Error muting a user ...",
  "Error pinning message": "Error pinning message",
  "Error removing message pin": "Error removing message pin",
  "Error reproducing the recording": "Error reproducing the recording",
  "Error starting recording": "Error starting recording",
  "Error unmuting a user ...": "Error unmuting a user ...",
  "Error uploading attachment": "Error uploading attachment",
  "Error uploading file": "Error uploading file",
  "Error uploading image": "Error uploading image",
  "Error · Unsent": "Error · Unsent",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  "Failed to create the poll": "Failed to create the poll",
  "Failed to create the poll due to {{reason}}": "Failed to create the poll due to {{reason}}",
  "Failed to jump to the first unread message": "Failed to jump to the first unread message",
  "Failed to mark channel as read": "Failed to mark channel as read",
  "Failed to play the recording": "Failed to play the recording",
  "Failed to retrieve location": "Failed to retrieve location",
  "Failed to share location": "Failed to share location",
  File: "File",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "File is too large: {{ size }}, maximum upload size is {{ limit }}",
  Flag: "Flag",
  "Generating...": "Generating...",
  "Latest Messages": "Latest Messages",
  "Live for {{duration}}": "Live for {{duration}}",
  "Live location": "Live location",
  "Live until {{ timestamp }}": "Live until {{ timestamp }}",
  "Load more": "Load more",
  Location: "Location",
  "Location sharing ended": "Location sharing ended",
  "Mark as unread": "Mark as unread",
  "Maximum number of votes (from 2 to 10)": "Maximum number of votes (from 2 to 10)",
  Menu: "Menu",
  "Message Failed · Click to try again": "Message Failed · Click to try again",
  "Message Failed · Unauthorized": "Message Failed · Unauthorized",
  "Message deleted": "Message deleted",
  "Message has been successfully flagged": "Message has been successfully flagged",
  "Message pinned": "Message pinned",
  "Message was blocked by moderation policies": "Message was blocked by moderation policies",
  "Messages have been marked unread.": "Messages have been marked unread.",
  "Missing permissions to upload the attachment": "Missing permissions to upload the attachment",
  "Multiple answers": "Multiple answers",
  Mute: "Mute",
  New: "New",
  "New Messages!": "New Messages!",
  "No chats here yet…": "No chats here yet…",
  "No results found": "No results found",
  "Nobody will be able to vote in this poll anymore.": "Nobody will be able to vote in this poll anymore.",
  "Nothing yet...": "Nothing yet...",
  Ok: "Ok",
  "Only numbers are allowed": "Only numbers are allowed",
  "Open emoji picker": "Open emoji picker",
  "Option already exists": "Option already exists",
  "Option is empty": "Option is empty",
  Options: "Options",
  "People matching": "People matching",
  Pin: "Pin",
  "Pinned by": "Pinned by",
  Poll: "Poll",
  "Poll comments": "Poll comments",
  "Poll options": "Poll options",
  "Poll results": "Poll results",
  Question: "Question",
  "Question is required": "Question is required",
  Quote: "Quote",
  "Reached the vote limit. Remove an existing vote first.": "Reached the vote limit. Remove an existing vote first.",
  "Recording format is not supported and cannot be reproduced": "Recording format is not supported and cannot be reproduced",
  "Remind Me": "Remind Me",
  "Remove reminder": "Remove reminder",
  Reply: "Reply",
  "Reply to Message": "Reply to Message",
  "Save for later": "Save for later",
  "Saved for later": "Saved for later",
  Search: "Search",
  "Searching...": "Searching...",
  "See all options ({{count}})_one": "See all options ({{count}})",
  "See all options ({{count}})_other": "See all options ({{count}})",
  "Select one": "Select one",
  "Select one or more": "Select one or more",
  "Select up to {{count}}_one": "Select up to {{count}}",
  "Select up to {{count}}_other": "Select up to {{count}}",
  Send: "Send",
  "Send Anyway": "Send Anyway",
  "Send message request failed": "Send message request failed",
  "Sending...": "Sending...",
  Share: "Share",
  "Share Location": "Share Location",
  "Share live location for": "Share live location for",
  "Shared live location": "Shared live location",
  "Show all": "Show all",
  Shuffle: "Shuffle",
  "Slow Mode ON": "Slow Mode ON",
  "Some of the files will not be accepted": "Some of the files will not be accepted",
  "Start typing to search": "Start typing to search",
  "Stop sharing": "Stop sharing",
  Submit: "Submit",
  "Suggest an option": "Suggest an option",
  "Thinking...": "Thinking...",
  "This field cannot be empty or contain only spaces": "This field cannot be empty or contain only spaces",
  "This message did not meet our content guidelines": "This message did not meet our content guidelines",
  "This message was deleted...": "This message was deleted...",
  Thread: "Thread",
  "Thread has not been found": "Thread has not been found",
  "Thread reply": "Thread reply",
  "To start recording, allow the camera access in your browser": "To start recording, allow the camera access in your browser",
  "To start recording, allow the microphone access in your browser": "To start recording, allow the microphone access in your browser",
  "Type a number from 2 to 10": "Type a number from 2 to 10",
  "Type your message": "Type your message",
  Unarchive: "Unarchive",
  Unmute: "Unmute",
  Unpin: "Unpin",
  "Unread messages": "Unread messages",
  "Unsupported attachment": "Unsupported attachment",
  "Update your comment": "Update your comment",
  'Upload type: "{{ type }}" is not allowed': 'Upload type: "{{ type }}" is not allowed',
  "User uploaded content": "User uploaded content",
  "View results": "View results",
  "View {{count}} comments_one": "View {{count}} comment",
  "View {{count}} comments_other": "View {{count}} comments",
  "Voice message": "Voice message",
  "Vote ended": "Vote ended",
  "Wait until all attachments have uploaded": "Wait until all attachments have uploaded",
  You: "You",
  "You have no channels currently": "You have no channels currently",
  "You've reached the maximum number of files": "You've reached the maximum number of files",
  "aria/Attachment": "Attachment",
  "aria/Cancel Reply": "Cancel Reply",
  "aria/Cancel upload": "Cancel upload",
  "aria/Channel list": "Channel list",
  "aria/Channel search results": "Channel search results",
  "aria/Close thread": "Close thread",
  "aria/Download attachment": "aria/Download attachment",
  "aria/Emoji picker": "Emoji picker",
  "aria/File input": "File input",
  "aria/File upload": "File upload",
  "aria/Image input": "Image input",
  "aria/Load More Channels": "Load More Channels",
  "aria/Menu": "Menu",
  "aria/Message Options": "Message Options",
  "aria/Open Attachment Selector": "aria/Open Attachment Selector",
  "aria/Open Menu": "Open Menu",
  "aria/Open Message Actions Menu": "Open Message Actions Menu",
  "aria/Open Reaction Selector": "Open Reaction Selector",
  "aria/Open Thread": "Open Thread",
  "aria/Reaction list": "Reaction list",
  "aria/Remind Me Options": "aria/Remind Me Options",
  "aria/Remove attachment": "Remove attachment",
  "aria/Remove location attachment": "Remove location attachment",
  "aria/Retry upload": "Retry upload",
  "aria/Search results": "Search results",
  "aria/Search results header filter button": "Search results header filter button",
  "aria/Send": "Send",
  "aria/Stop AI Generation": "Stop AI Generation",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  live: "live",
  "network error": "network error",
  replyCount_one: "1 reply",
  replyCount_other: "{{ count }} replies",
  "search-results-header-filter-source-button-label--channels": "channels",
  "search-results-header-filter-source-button-label--messages": "messages",
  "search-results-header-filter-source-button-label--users": "users",
  searchResultsCount_one: "1 result",
  searchResultsCount_other: "{{ count }} results",
  "size limit": "size limit",
  "this content could not be displayed": "this content could not be displayed",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unknown error": "unknown error",
  unreadMessagesSeparatorText_one: "1 unread message",
  unreadMessagesSeparatorText_other: "{{count}} unread messages",
  "unsupported file type": "unsupported file type",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} and {{ moreCount }} more",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }}, and {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} and {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} more",
  "{{ memberCount }} members": "{{ memberCount }} members",
  "{{ user }} has been muted": "{{ user }} has been muted",
  "{{ user }} has been unmuted": "{{ user }} has been unmuted",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} unread",
  "{{count}} unread_other": "{{count}} unread",
  "{{count}} votes_one": "{{count}} vote",
  "{{count}} votes_other": "{{count}} votes",
  "🏙 Attachment...": "🏙 Attachment...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} created: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} voted: {{pollOptionText}}",
  "📍Shared location": "📍Shared location"
};

// node_modules/stream-chat-react/dist/i18n/es.json
var es_default = {
  "Add a comment": "Agregar un comentario",
  "Add an option": "Agregar una opción",
  "All results loaded": "Todos los resultados cargados",
  "Allow access to camera": "Permitir acceso a la cámara",
  "Allow access to microphone": "Permitir acceso al micrófono",
  "Allow comments": "Permitir comentarios",
  "Allow option suggestion": "Permitir sugerencia de opciones",
  "Also send as a direct message": "También enviar como mensaje directo",
  "Also send in channel": "También enviar en el canal",
  "An error has occurred during recording": "Se ha producido un error durante la grabación",
  "An error has occurred during the recording processing": "Se ha producido un error durante el procesamiento de la grabación",
  Anonymous: "Anónimo",
  "Anonymous poll": "Encuesta anónima",
  Archive: "Archivo",
  "Ask a question": "Hacer una pregunta",
  Attach: "Adjuntar",
  "Attach files": "Adjuntar archivos",
  "Attachment upload blocked due to {{reason}}": "Carga de adjunto bloqueada debido a {{reason}}",
  "Attachment upload failed due to {{reason}}": "Carga de adjunto fallida debido a {{reason}}",
  Cancel: "Cancelar",
  "Cannot seek in the recording": "No se puede buscar en la grabación",
  "Channel Missing": "Falta canal",
  Close: "Cerrar",
  "Close emoji picker": "Cerrar el selector de emojis",
  "Commands matching": "Coincidencia de comandos",
  "Connection failure, reconnecting now...": "Fallo de conexión, reconectando ahora...",
  Create: "Crear",
  "Create poll": "Crear encuesta",
  "Current location": "Ubicación actual",
  Delete: "Borrar",
  Delivered: "Entregado",
  "Download attachment {{ name }}": "Descargar adjunto {{ name }}",
  "Drag your files here": "Arrastra tus archivos aquí",
  "Drag your files here to add to your post": "Arrastra tus archivos aquí para agregarlos a tu publicación",
  "Due since {{ dueSince }}": "Vencido desde {{ dueSince }}",
  "Due {{ timeLeft }}": "Vence en {{ timeLeft }}",
  "Edit Message": "Editar mensaje",
  "Edit message request failed": "Error al editar la solicitud de mensaje",
  Edited: "Editado",
  "Emoji matching": "Coincidencia de emoji",
  "Empty message...": "Mensaje vacío...",
  End: "Final",
  "End vote": "Finalizar votación",
  "Enforce unique vote is enabled": "El voto único está habilitado",
  "Error adding flag": "Error al agregar la bandera",
  "Error connecting to chat, refresh the page to try again.": "Error al conectarse al chat, actualice la página para volver a intentarlo.",
  "Error deleting message": "Error al eliminar el mensaje",
  "Error fetching reactions": "Error al cargar las reacciones",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Error al marcar el mensaje como no leído. No se pueden marcar mensajes no leídos más antiguos que los últimos 100 mensajes del canal.",
  "Error muting a user ...": "Error al silenciar el usuario...",
  "Error pinning message": "Error al fijar el mensaje",
  "Error removing message pin": "Error al quitar el pin del mensaje",
  "Error reproducing the recording": "Error al reproducir la grabación",
  "Error starting recording": "Error al iniciar la grabación",
  "Error unmuting a user ...": "Error al desactivar el silencio del usuario...",
  "Error uploading attachment": "Error al subir el archivo adjunto",
  "Error uploading file": "Error al cargar el archivo",
  "Error uploading image": "Error al subir la imagen",
  "Error · Unsent": "Error · No enviado",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  "Failed to create the poll": "Error al crear la encuesta",
  "Failed to create the poll due to {{reason}}": "No se pudo crear la encuesta debido a {{reason}}",
  "Failed to jump to the first unread message": "Error al saltar al primer mensaje no leído",
  "Failed to mark channel as read": "Error al marcar el canal como leído",
  "Failed to play the recording": "No se pudo reproducir la grabación",
  "Failed to retrieve location": "No se pudo obtener la ubicación",
  "Failed to share location": "No se pudo compartir la ubicación",
  File: "Archivo",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "El archivo es demasiado grande: {{ size }}, el tamaño máximo de carga es de {{ limit }}",
  Flag: "Marcar",
  "Generating...": "Generando...",
  "Latest Messages": "Últimos mensajes",
  "Live for {{duration}}": "En vivo durante {{duration}}",
  "Live location": "Ubicación en vivo",
  "Live until {{ timestamp }}": "En vivo hasta {{ timestamp }}",
  "Load more": "Cargar más",
  Location: "Ubicación",
  "Location sharing ended": "Compartir ubicación terminado",
  "Mark as unread": "Marcar como no leído",
  "Maximum number of votes (from 2 to 10)": "Número máximo de votos (de 2 a 10)",
  Menu: "Menú",
  "Message Failed · Click to try again": "Mensaje fallido · Haga clic para volver a intentarlo",
  "Message Failed · Unauthorized": "Mensaje fallido · No autorizado",
  "Message deleted": "Mensaje eliminado",
  "Message has been successfully flagged": "El mensaje se marcó correctamente",
  "Message pinned": "Mensaje fijado",
  "Message was blocked by moderation policies": "El mensaje fue bloqueado por las políticas de moderación",
  "Messages have been marked unread.": "Los mensajes han sido marcados como no leídos.",
  "Missing permissions to upload the attachment": "Faltan permisos para subir el archivo adjunto",
  "Multiple answers": "Múltiples respuestas",
  Mute: "Silenciar",
  New: "Nuevo",
  "New Messages!": "¡Nuevos mensajes!",
  "No chats here yet…": "Aún no hay mensajes aquí...",
  "No results found": "No se han encontrado resultados",
  "Nobody will be able to vote in this poll anymore.": "Nadie podrá votar en esta encuesta.",
  "Nothing yet...": "Nada aún...",
  Ok: "Ok",
  "Only numbers are allowed": "Solo se permiten números",
  "Open emoji picker": "Abrir el selector de emojis",
  "Option already exists": "La opción ya existe",
  "Option is empty": "La opción está vacía",
  Options: "Opciones",
  "People matching": "Personas que coinciden",
  Pin: "Fijar",
  "Pinned by": "Fijado por",
  Poll: "Encuesta",
  "Poll comments": "Comentarios de la encuesta",
  "Poll options": "Opciones de la encuesta",
  "Poll results": "Resultados de la encuesta",
  Question: "Pregunta",
  "Question is required": "La pregunta es obligatoria",
  Quote: "Citar",
  "Reached the vote limit. Remove an existing vote first.": "Se ha alcanzado el límite de votos. Elimina un voto existente primero.",
  "Recording format is not supported and cannot be reproduced": "El formato de grabación no es compatible y no se puede reproducir",
  "Remind Me": "Recordarme",
  "Remove reminder": "Eliminar recordatorio",
  Reply: "Responder",
  "Reply to Message": "Responder al mensaje",
  "Save for later": "Guardar para más tarde",
  "Saved for later": "Guardado para más tarde",
  Search: "Buscar",
  "Searching...": "Buscando...",
  "See all options ({{count}})_many": "Ver todas las opciones ({{count}})",
  "See all options ({{count}})_one": "Ver todas las opciones ({{count}})",
  "See all options ({{count}})_other": "Ver todas las opciones ({{count}})",
  "Select one": "Seleccionar uno",
  "Select one or more": "Seleccionar uno o más",
  "Select up to {{count}}_many": "Selecciona hasta {{count}}",
  "Select up to {{count}}_one": "Selecciona hasta {{count}}",
  "Select up to {{count}}_other": "Selecciona hasta {{count}}",
  Send: "Enviar",
  "Send Anyway": "Enviar de todos modos",
  "Send message request failed": "Error al enviar la solicitud de mensaje",
  "Sending...": "Enviando...",
  Share: "Compartir",
  "Share Location": "Compartir ubicación",
  "Share live location for": "Compartir ubicación en vivo durante",
  "Shared live location": "Ubicación en vivo compartida",
  "Show all": "Mostrar todo",
  Shuffle: "Mezclar",
  "Slow Mode ON": "Modo lento activado",
  "Some of the files will not be accepted": "Algunos archivos no serán aceptados",
  "Start typing to search": "Empieza a escribir para buscar",
  "Stop sharing": "Dejar de compartir",
  Submit: "Enviar",
  "Suggest an option": "Sugerir una opción",
  "Thinking...": "Pensando...",
  "This field cannot be empty or contain only spaces": "Este campo no puede estar vacío o contener solo espacios",
  "This message did not meet our content guidelines": "Este mensaje no cumple con nuestras directrices de contenido",
  "This message was deleted...": "Este mensaje fue eliminado...",
  Thread: "Hilo",
  "Thread has not been found": "No se ha encontrado el hilo",
  "Thread reply": "Respuesta en hilo",
  "To start recording, allow the camera access in your browser": "Para comenzar a grabar, permita el acceso a la cámara en su navegador",
  "To start recording, allow the microphone access in your browser": "Para comenzar a grabar, permita el acceso al micrófono en su navegador",
  "Type a number from 2 to 10": "Escribe un número del 2 al 10",
  "Type your message": "Escribe tu mensaje",
  Unarchive: "Desarchivar",
  Unmute: "Activar sonido",
  Unpin: "Desfijar",
  "Unread messages": "Mensajes no leídos",
  "Unsupported attachment": "Adjunto no compatible",
  "Update your comment": "Actualizar tu comentario",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de carga: "{{ type }}" no está permitido',
  "User uploaded content": "Contenido subido por el usuario",
  "View results": "Ver resultados",
  "View {{count}} comments_many": "Ver {{count}} comentarios",
  "View {{count}} comments_one": "Ver {{count}} comentario",
  "View {{count}} comments_other": "Ver {{count}} comentarios",
  "Voice message": "Mensaje de voz",
  "Vote ended": "Votación finalizada",
  "Wait until all attachments have uploaded": "Espere hasta que se hayan cargado todos los archivos adjuntos",
  You: "Tú",
  "You have no channels currently": "Actualmente no tienes canales",
  "You've reached the maximum number of files": "Has alcanzado el número máximo de archivos",
  "aria/Attachment": "Adjunto",
  "aria/Cancel Reply": "Cancelar respuesta",
  "aria/Cancel upload": "Cancelar carga",
  "aria/Channel list": "Lista de canales",
  "aria/Channel search results": "Resultados de búsqueda de canales",
  "aria/Close thread": "Cerrar hilo",
  "aria/Download attachment": "Descargar adjunto",
  "aria/Emoji picker": "Selector de emojis",
  "aria/File input": "Entrada de archivo",
  "aria/File upload": "Carga de archivo",
  "aria/Image input": "Entrada de imagen",
  "aria/Load More Channels": "Cargar más canales",
  "aria/Menu": "Menú",
  "aria/Message Options": "Opciones de mensaje",
  "aria/Open Attachment Selector": "Abrir selector de adjuntos",
  "aria/Open Menu": "Abrir menú",
  "aria/Open Message Actions Menu": "Abrir menú de acciones de mensaje",
  "aria/Open Reaction Selector": "Abrir selector de reacciones",
  "aria/Open Thread": "Abrir hilo",
  "aria/Reaction list": "Lista de reacciones",
  "aria/Remind Me Options": "Opciones de recordatorio",
  "aria/Remove attachment": "Eliminar adjunto",
  "aria/Remove location attachment": "Eliminar adjunto de ubicación",
  "aria/Retry upload": "Reintentar carga",
  "aria/Search results": "Resultados de búsqueda",
  "aria/Search results header filter button": "Botón de filtro del encabezado de resultados de búsqueda",
  "aria/Send": "Enviar",
  "aria/Stop AI Generation": "Detener generación de IA",
  "ban-command-args": "[@usuario] [texto]",
  "ban-command-description": "Prohibir a un usuario",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Publicar un gif aleatorio en el canal",
  live: "En vivo",
  "mute-command-args": "[@usuario]",
  "mute-command-description": "Silenciar a un usuario",
  "network error": "error de red",
  replyCount_many: "{{ count }} respuestas",
  replyCount_one: "1 respuesta",
  replyCount_other: "{{ count }} respuestas",
  "search-results-header-filter-source-button-label--channels": "canales",
  "search-results-header-filter-source-button-label--messages": "mensajes",
  "search-results-header-filter-source-button-label--users": "usuarios",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "size limit": "límite de tamaño",
  "this content could not be displayed": "Este contenido no se pudo mostrar",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@usuario]",
  "unban-command-description": "Quitar la prohibición a un usuario",
  "unknown error": "error desconocido",
  "unmute-command-args": "[@usuario]",
  "unmute-command-description": "Desactivar el silencio de un usuario",
  unreadMessagesSeparatorText_many: "{{count}} mensajes no leídos",
  unreadMessagesSeparatorText_one: "1 mensaje no leído",
  unreadMessagesSeparatorText_other: "{{count}} mensajes no leídos",
  "unsupported file type": "tipo de archivo no compatible",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} y {{ moreCount }} más",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} y {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} y {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} más",
  "{{ memberCount }} members": "{{ memberCount }} miembros",
  "{{ user }} has been muted": "{{ user }} ha sido silenciado",
  "{{ user }} has been unmuted": "Se ha desactivado el silencio de {{ user }}",
  "{{ user }} is typing...": "{{ user }} está escribiendo...",
  "{{ users }} and more are typing...": "{{ users }} y más están escribiendo...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} y {{ user }} están escribiendo...",
  "{{ watcherCount }} online": "{{ watcherCount }} en línea",
  "{{count}} unread_many": "{{count}} no leídos",
  "{{count}} unread_one": "{{count}} no leído",
  "{{count}} unread_other": "{{count}} no leídos",
  "{{count}} votes_many": "{{count}} votos",
  "{{count}} votes_one": "1 voto",
  "{{count}} votes_other": "{{count}} votos",
  "🏙 Attachment...": "🏙 Adjunto...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} creó: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} votó: {{pollOptionText}}",
  "📍Shared location": "📍Ubicación compartida"
};

// node_modules/stream-chat-react/dist/i18n/fr.json
var fr_default = {
  "Add a comment": "Ajouter un commentaire",
  "Add an option": "Ajouter une option",
  "All results loaded": "Tous les résultats sont chargés",
  "Allow access to camera": "Autoriser l'accès à la caméra",
  "Allow access to microphone": "Autoriser l'accès au microphone",
  "Allow comments": "Autoriser les commentaires",
  "Allow option suggestion": "Autoriser la suggestion d'options",
  "Also send as a direct message": "Également envoyer en message direct",
  "Also send in channel": "Également envoyer dans le canal",
  "An error has occurred during recording": "Une erreur s'est produite pendant l'enregistrement",
  "An error has occurred during the recording processing": "Une erreur s'est produite pendant le traitement de l'enregistrement",
  Anonymous: "Anonyme",
  "Anonymous poll": "Sondage anonyme",
  Archive: "Archive",
  "Ask a question": "Poser une question",
  Attach: "Joindre",
  "Attach files": "Joindre des fichiers",
  "Attachment upload blocked due to {{reason}}": "Téléchargement de pièce jointe bloqué en raison de {{reason}}",
  "Attachment upload failed due to {{reason}}": "Échec du téléchargement de la pièce jointe en raison de {{reason}}",
  Cancel: "Annuler",
  "Cannot seek in the recording": "Impossible de rechercher dans l'enregistrement",
  "Channel Missing": "Canal Manquant",
  Close: "Fermer",
  "Close emoji picker": "Fermer le sélecteur d'émojis",
  "Commands matching": "Correspondance des commandes",
  "Connection failure, reconnecting now...": "Échec de la connexion, reconnexion en cours...",
  Create: "Créer",
  "Create poll": "Créer un sondage",
  "Current location": "Emplacement actuel",
  Delete: "Supprimer",
  Delivered: "Publié",
  "Download attachment {{ name }}": "Télécharger la pièce jointe {{ name }}",
  "Drag your files here": "Glissez vos fichiers ici",
  "Drag your files here to add to your post": "Glissez vos fichiers ici pour les ajouter à votre publication",
  "Due since {{ dueSince }}": "Échéance depuis {{ dueSince }}",
  "Due {{ timeLeft }}": "Échéance dans {{ timeLeft }}",
  "Edit Message": "Éditer un message",
  "Edit message request failed": "Échec de la demande de modification du message",
  Edited: "Modifié",
  "Emoji matching": "Correspondance d'émojis",
  "Empty message...": "Message vide...",
  End: "Fin",
  "End vote": "Fin du vote",
  "Enforce unique vote is enabled": "Le vote unique est activé",
  "Error adding flag": "Erreur lors de l'ajout du signalement",
  "Error connecting to chat, refresh the page to try again.": "Erreur de connexion au chat, rafraîchissez la page pour réessayer.",
  "Error deleting message": "Erreur lors de la suppression du message",
  "Error fetching reactions": "Erreur lors du chargement des réactions",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Erreur lors de la marque du message comme non lu. Impossible de marquer des messages non lus plus anciens que les 100 derniers messages du canal.",
  "Error muting a user ...": "Erreur lors de la mise en sourdine d'un utilisateur...",
  "Error pinning message": "Erreur lors de l'épinglage du message",
  "Error removing message pin": "Erreur lors du retrait de l'épinglage du message",
  "Error reproducing the recording": "Erreur lors de la reproduction de l'enregistrement",
  "Error starting recording": "Erreur lors du démarrage de l'enregistrement",
  "Error unmuting a user ...": "Erreur lors du démarrage de la sourdine d'un utilisateur ...",
  "Error uploading attachment": "Erreur lors du téléchargement de la pièce jointe",
  "Error uploading file": "Erreur lors du téléchargement du fichier",
  "Error uploading image": "Erreur lors de l'envoi de l'image",
  "Error · Unsent": "Erreur - Non envoyé",
  "Error: {{ errorMessage }}": "Erreur : {{ errorMessage }}",
  "Failed to create the poll": "Échec de la création du sondage",
  "Failed to create the poll due to {{reason}}": "Échec de la création du sondage en raison de {{reason}}",
  "Failed to jump to the first unread message": "Échec du saut vers le premier message non lu",
  "Failed to mark channel as read": "Échec du marquage du canal comme lu",
  "Failed to play the recording": "Impossible de lire l'enregistrement",
  "Failed to retrieve location": "Impossible de récupérer l'emplacement",
  "Failed to share location": "Impossible de partager l'emplacement",
  File: "Fichier",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Le fichier est trop volumineux : {{ size }}, la taille maximale de téléchargement est de {{ limit }}",
  Flag: "Signaler",
  "Generating...": "Génération...",
  "Latest Messages": "Derniers messages",
  "Live for {{duration}}": "En direct pendant {{duration}}",
  "Live location": "Emplacement en direct",
  "Live until {{ timestamp }}": "En direct jusqu'à {{ timestamp }}",
  "Load more": "Charger plus",
  Location: "Emplacement",
  "Location sharing ended": "Partage d'emplacement terminé",
  "Mark as unread": "Marquer comme non lu",
  "Maximum number of votes (from 2 to 10)": "Nombre maximum de votes (de 2 à 10)",
  Menu: "Menu",
  "Message Failed · Click to try again": "Échec de l'envoi du message - Cliquez pour réessayer",
  "Message Failed · Unauthorized": "Échec de l'envoi du message - Non autorisé",
  "Message deleted": "Message supprimé",
  "Message has been successfully flagged": "Le message a été signalé avec succès",
  "Message pinned": "Message épinglé",
  "Message was blocked by moderation policies": "Le message a été bloqué par les politiques de modération",
  "Messages have been marked unread.": "Les messages ont été marqués comme non lus.",
  "Missing permissions to upload the attachment": "Autorisations manquantes pour télécharger la pièce jointe",
  "Multiple answers": "Réponses multiples",
  Mute: "Muet",
  New: "Nouveau",
  "New Messages!": "Nouveaux Messages!",
  "No chats here yet…": "Pas encore de messages ici...",
  "No results found": "Aucun résultat trouvé",
  "Nobody will be able to vote in this poll anymore.": "Personne ne pourra plus voter dans ce sondage.",
  "Nothing yet...": "Rien pour l'instant...",
  Ok: "D'accord",
  "Only numbers are allowed": "Seuls les chiffres sont autorisés",
  "Open emoji picker": "Ouvrir le sélecteur d'émojis",
  "Option already exists": "L'option existe déjà",
  "Option is empty": "L'option est vide",
  Options: "Options",
  "People matching": "Correspondance de personnes",
  Pin: "Épingler",
  "Pinned by": "Épinglé par",
  Poll: "Sondage",
  "Poll comments": "Commentaires du sondage",
  "Poll options": "Options du sondage",
  "Poll results": "Résultats du sondage",
  Question: "Question",
  "Question is required": "La question est obligatoire",
  Quote: "Citer",
  "Reached the vote limit. Remove an existing vote first.": "La limite de votes a été atteinte. Supprimez d'abord un vote existant.",
  "Recording format is not supported and cannot be reproduced": "Le format d'enregistrement n'est pas pris en charge et ne peut pas être reproduit",
  "Remind Me": "Me rappeler",
  "Remove reminder": "Supprimer le rappel",
  Reply: "Répondre",
  "Reply to Message": "Répondre au message",
  "Save for later": "Enregistrer pour plus tard",
  "Saved for later": "Enregistré pour plus tard",
  Search: "Rechercher",
  "Searching...": "Recherche en cours...",
  "See all options ({{count}})_many": "Voir toutes les options ({{count}})",
  "See all options ({{count}})_one": "Voir toutes les options ({{count}})",
  "See all options ({{count}})_other": "Voir toutes les options ({{count}})",
  "Select one": "Sélectionner un",
  "Select one or more": "Sélectionner un ou plusieurs",
  "Select up to {{count}}_many": "Sélectionner jusqu'à {{count}}",
  "Select up to {{count}}_one": "Sélectionner jusqu'à {{count}}",
  "Select up to {{count}}_other": "Sélectionner jusqu'à {{count}}",
  Send: "Envoyer",
  "Send Anyway": "Envoyer quand même",
  "Send message request failed": "Échec de la demande d'envoi de message",
  "Sending...": "Envoi en cours...",
  Share: "Partager",
  "Share Location": "Partager l'emplacement",
  "Share live location for": "Partager l'emplacement en direct pendant",
  "Shared live location": "Emplacement en direct partagé",
  "Show all": "Tout afficher",
  Shuffle: "Mélanger",
  "Slow Mode ON": "Mode lent activé",
  "Some of the files will not be accepted": "Certains fichiers ne seront pas acceptés",
  "Start typing to search": "Commencez à taper pour rechercher",
  "Stop sharing": "Arrêter de partager",
  Submit: "Envoyer",
  "Suggest an option": "Suggérer une option",
  "Thinking...": "Réflexion...",
  "This field cannot be empty or contain only spaces": "Ce champ ne peut pas être vide ou contenir uniquement des espaces",
  "This message did not meet our content guidelines": "Ce message ne respecte pas nos directives de contenu",
  "This message was deleted...": "Ce message a été supprimé...",
  Thread: "Fil de discussion",
  "Thread has not been found": "Le fil de discussion n'a pas été trouvé",
  "Thread reply": "Réponse dans le fil",
  "To start recording, allow the camera access in your browser": "Pour commencer l'enregistrement, autorisez l'accès à la caméra dans votre navigateur",
  "To start recording, allow the microphone access in your browser": "Pour commencer l'enregistrement, autorisez l'accès au microphone dans votre navigateur",
  "Type a number from 2 to 10": "Tapez un nombre de 2 à 10",
  "Type your message": "Tapez votre message",
  Unarchive: "Désarchiver",
  Unmute: "Désactiver muet",
  Unpin: "Détacher",
  "Unread messages": "Messages non lus",
  "Unsupported attachment": "Pièce jointe non prise en charge",
  "Update your comment": "Mettre à jour votre commentaire",
  'Upload type: "{{ type }}" is not allowed': `Le type de fichier : "{{ type }}" n'est pas autorisé`,
  "User uploaded content": "Contenu téléchargé par l'utilisateur",
  "View results": "Voir les résultats",
  "View {{count}} comments_many": "Voir {{count}} commentaires",
  "View {{count}} comments_one": "Voir {{count}} commentaire",
  "View {{count}} comments_other": "Voir {{count}} commentaires",
  "Voice message": "Message vocal",
  "Vote ended": "Vote terminé",
  "Wait until all attachments have uploaded": "Attendez que toutes les pièces jointes soient téléchargées",
  You: "Vous",
  "You have no channels currently": "Vous n'avez actuellement aucun canal",
  "You've reached the maximum number of files": "Vous avez atteint le nombre maximal de fichiers",
  "aria/Attachment": "Pièce jointe",
  "aria/Cancel Reply": "Annuler la réponse",
  "aria/Cancel upload": "Annuler le téléchargement",
  "aria/Channel list": "Liste des canaux",
  "aria/Channel search results": "Résultats de recherche de canaux",
  "aria/Close thread": "Fermer le fil",
  "aria/Download attachment": "Télécharger la pièce jointe",
  "aria/Emoji picker": "Sélecteur d'émojis",
  "aria/File input": "Entrée de fichier",
  "aria/File upload": "Téléchargement de fichier",
  "aria/Image input": "Entrée d'image",
  "aria/Load More Channels": "Charger plus de canaux",
  "aria/Menu": "Menu",
  "aria/Message Options": "Options du message",
  "aria/Open Attachment Selector": "Ouvrir le sélecteur de pièces jointes",
  "aria/Open Menu": "Ouvrir le menu",
  "aria/Open Message Actions Menu": "Ouvrir le menu des actions du message",
  "aria/Open Reaction Selector": "Ouvrir le sélecteur de réactions",
  "aria/Open Thread": "Ouvrir le fil",
  "aria/Reaction list": "Liste des réactions",
  "aria/Remind Me Options": "Options de rappel",
  "aria/Remove attachment": "Supprimer la pièce jointe",
  "aria/Remove location attachment": "Supprimer la pièce jointe d'emplacement",
  "aria/Retry upload": "Réessayer le téléchargement",
  "aria/Search results": "Résultats de recherche",
  "aria/Search results header filter button": "Bouton de filtre d'en-tête des résultats de recherche",
  "aria/Send": "Envoyer",
  "aria/Stop AI Generation": "Arrêter la génération d'IA",
  "ban-command-args": "[@nomdutilisateur] [texte]",
  "ban-command-description": "Bannir un utilisateur",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[texte]",
  "giphy-command-description": "Poster un GIF aléatoire dans le canal",
  live: "en direct",
  "mute-command-args": "[@nomdutilisateur]",
  "mute-command-description": "Muter un utilisateur",
  "network error": "erreur réseau",
  replyCount_many: "{{ count }} réponses",
  replyCount_one: "1 réponse",
  replyCount_other: "{{ count }} réponses",
  "search-results-header-filter-source-button-label--channels": "canaux",
  "search-results-header-filter-source-button-label--messages": "messages",
  "search-results-header-filter-source-button-label--users": "utilisateurs",
  searchResultsCount_many: "{{ count }} résultats",
  searchResultsCount_one: "1 résultat",
  searchResultsCount_other: "{{ count }} résultats",
  "size limit": "limite de taille",
  "this content could not be displayed": "ce contenu n'a pas pu être affiché",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@nomdutilisateur]",
  "unban-command-description": "Débannir un utilisateur",
  "unknown error": "erreur inconnue",
  "unmute-command-args": "[@nomdutilisateur]",
  "unmute-command-description": "Démuter un utilisateur",
  unreadMessagesSeparatorText_many: "{{count}} messages non lus",
  unreadMessagesSeparatorText_one: "1 message non lu",
  unreadMessagesSeparatorText_other: "{{count}} messages non lus",
  "unsupported file type": "type de fichier non pris en charge",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} et {{ moreCount }} autres",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} et {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} et {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} supplémentaires",
  "{{ memberCount }} members": "{{ memberCount }} membres",
  "{{ user }} has been muted": "{{ user }} a été mis en sourdine",
  "{{ user }} has been unmuted": "{{ user }} n'est plus en sourdine",
  "{{ user }} is typing...": "{{ user }} est en train d'écrire...",
  "{{ users }} and more are typing...": "{{ users }} et plus sont en train d'écrire...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} et {{ user }} sont en train d'écrire...",
  "{{ watcherCount }} online": "{{ watcherCount }} en ligne",
  "{{count}} unread_many": "{{count}} non lus",
  "{{count}} unread_one": "{{count}} non lu",
  "{{count}} unread_other": "{{count}} non lus",
  "{{count}} votes_many": "{{count}} votes",
  "{{count}} votes_one": "{{count}} vote",
  "{{count}} votes_other": "{{count}} votes",
  "🏙 Attachment...": "🏙 Pièce jointe...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} a créé : {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} a voté : {{pollOptionText}}",
  "📍Shared location": "📍Emplacement partagé"
};

// node_modules/stream-chat-react/dist/i18n/hi.json
var hi_default = {
  "Add a comment": "एक टिप्पणी जोड़ें",
  "Add an option": "एक विकल्प जोड़ें",
  "All results loaded": "सभी परिणाम लोड हो गए",
  "Allow access to camera": "कैमरा तक पहुँच दें",
  "Allow access to microphone": "माइक्रोफ़ोन तक पहुँच दें",
  "Allow comments": "टिप्पणियाँ की अनुमति दें",
  "Allow option suggestion": "विकल्प सुझाव की अनुमति दें",
  "Also send as a direct message": "सीधे संदेश के रूप में भी भेजें",
  "Also send in channel": "चैनल में भी भेजें",
  "An error has occurred during recording": "रेकॉर्डिंग के दौरान एक त्रुटि आ गई है",
  "An error has occurred during the recording processing": "रेकॉर्डिंग प्रोसेसिंग के दौरान एक त्रुटि आ गई है",
  Anonymous: "गुमनाम",
  "Anonymous poll": "गुमनाम मतदान",
  Archive: "आर्काइव",
  "Ask a question": "एक प्रश्न पूछें",
  Attach: "संलग्न करें",
  "Attach files": "फाइल्स अटैच करे",
  "Attachment upload blocked due to {{reason}}": "{{reason}} के कारण अटैचमेंट अपलोड ब्लॉक किया गया",
  "Attachment upload failed due to {{reason}}": "{{reason}} के कारण अटैचमेंट अपलोड विफल रहा",
  Cancel: "रद्द करें",
  "Cannot seek in the recording": "रेकॉर्डिंग में खोज नहीं की जा सकती",
  "Channel Missing": "चैनल उपलब्ध नहीं है",
  Close: "बंद करे",
  "Close emoji picker": "इमोजी पिकर बंद करें",
  "Commands matching": "मेल खाती है",
  "Connection failure, reconnecting now...": "कनेक्शन विफल रहा, अब पुनः कनेक्ट हो रहा है ...",
  Create: "बनाएँ",
  "Create poll": "मतदान बनाएँ",
  "Current location": "वर्तमान स्थान",
  Delete: "डिलीट",
  Delivered: "पहुंच गया",
  "Download attachment {{ name }}": "अनुलग्नक {{ name }} डाउनलोड करें",
  "Drag your files here": "अपनी फ़ाइलें यहाँ खींचें",
  "Drag your files here to add to your post": "अपनी फ़ाइलें यहाँ खींचें और अपने पोस्ट में जोड़ने के लिए",
  "Due since {{ dueSince }}": "{{ dueSince }} से देय",
  "Due {{ timeLeft }}": "{{ timeLeft }} में देय",
  "Edit Message": "मैसेज में बदलाव करे",
  "Edit message request failed": "संदेश संपादित करने का अनुरोध विफल रहा",
  Edited: "संपादित",
  "Emoji matching": "इमोजी मिलान",
  "Empty message...": "खाली संदेश ...",
  End: "समाप्त",
  "End vote": "मत समाप्त करें",
  "Enforce unique vote is enabled": "अनोखा वोट सक्षम है",
  "Error adding flag": "ध्वज जोड़ने में त्रुटि",
  "Error connecting to chat, refresh the page to try again.": "चैट से कनेक्ट करने में त्रुटि, पेज को रिफ्रेश करें",
  "Error deleting message": "संदेश हटाने में त्रुटि",
  "Error fetching reactions": "प्रतिक्रियाएँ लोड करने में त्रुटि",
  "Error marking message unread": "संदेश को अपठित चिह्नित करने में त्रुटि",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "संदेश को अपठित मार्क करने में त्रुटि। सबसे नए 100 चैनल संदेश से पहले के सभी अपठित संदेशों को अपठित मार्क नहीं किया जा सकता है।",
  "Error muting a user ...": "यूजर को म्यूट करने का प्रयास फेल हुआ",
  "Error pinning message": "संदेश को पिन करने में त्रुटि",
  "Error removing message pin": "संदेश पिन निकालने में त्रुटि",
  "Error reproducing the recording": "रिकॉर्डिंग पुन: उत्पन्न करने में त्रुटि",
  "Error starting recording": "रेकॉर्डिंग शुरू करने में त्रुटि",
  "Error unmuting a user ...": "यूजर को अनम्यूट करने का प्रयास फेल हुआ",
  "Error uploading attachment": "अटैचमेंट अपलोड करते समय त्रुटि",
  "Error uploading file": "फ़ाइल अपलोड करने में त्रुटि",
  "Error uploading image": "छवि अपलोड करने में त्रुटि",
  "Error · Unsent": "फेल",
  "Error: {{ errorMessage }}": "फेल: {{ errorMessage }}",
  "Failed to create the poll": "मतदान बनाने में विफल",
  "Failed to create the poll due to {{reason}}": "मतदान {{reason}} के कारण नहीं बन सका",
  "Failed to jump to the first unread message": "पहले अपठित संदेश पर जाने में विफल",
  "Failed to mark channel as read": "चैनल को पढ़ा हुआ चिह्नित करने में विफल।",
  "Failed to play the recording": "रेकॉर्डिंग प्ले करने में विफल",
  "Failed to retrieve location": "स्थान प्राप्त करने में विफल",
  "Failed to share location": "स्थान साझा करने में विफल",
  File: "फ़ाइल",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "फ़ाइल बहुत बड़ी है: {{ size }}, अधिकतम अपलोड साइज़ {{ limit }} है",
  Flag: "फ्लैग करे",
  "Generating...": "बना रहा है...",
  "Latest Messages": "नवीनतम संदेश",
  "Live for {{duration}}": "{{duration}} के लिए लाइव",
  "Live location": "लाइव स्थान",
  "Live until {{ timestamp }}": "{{ timestamp }} तक लाइव",
  "Load more": "और लोड करें",
  Location: "स्थान",
  "Location sharing ended": "स्थान साझा करना समाप्त",
  "Mark as unread": "अपठित चिह्नित करें",
  "Maximum number of votes (from 2 to 10)": "अधिकतम वोटों की संख्या (2 से 10)",
  Menu: "मेन्यू",
  "Message Failed · Click to try again": "मैसेज फ़ैल - पुनः कोशिश करें",
  "Message Failed · Unauthorized": "मैसेज फ़ैल - अनधिकृत",
  "Message deleted": "मैसेज हटा दिया गया",
  "Message has been successfully flagged": "मैसेज को फ्लैग कर दिया गया है",
  "Message pinned": "संदेश पिन किया गया",
  "Message was blocked by moderation policies": "संदेश को मॉडरेशन नीतियों द्वारा ब्लॉक कर दिया गया है",
  "Messages have been marked unread.": "संदेशों को अपठित चिह्नित किया गया है।",
  "Missing permissions to upload the attachment": "अटैचमेंट अपलोड करने के लिए अनुमतियां गायब",
  "Multiple answers": "कई उत्तर",
  Mute: "म्यूट करे",
  New: "नए",
  "New Messages!": "नए मैसेज!",
  "No chats here yet…": "यहां अभी तक कोई चैट नहीं...",
  "No results found": "कोई परिणाम नहीं मिला",
  "Nobody will be able to vote in this poll anymore.": "अब कोई भी इस मतदान में मतदान नहीं कर सकेगा।",
  "Nothing yet...": "कोई मैसेज नहीं है",
  Ok: "ठीक है",
  "Only numbers are allowed": "केवल संख्याएँ अनुमत हैं",
  "Open emoji picker": "इमोजी पिकर खोलिये",
  "Option already exists": "विकल्प पहले से मौजूद है",
  "Option is empty": "विकल्प खाली है",
  Options: "विकल्प",
  "People matching": "मेल खाते लोग",
  Pin: "पिन",
  "Pinned by": "द्वारा पिन किया गया",
  Poll: "मतदान",
  "Poll comments": "मतदान टिप्पणियाँ",
  "Poll options": "मतदान विकल्प",
  "Poll results": "मतदान परिणाम",
  Question: "प्रश्न",
  "Question is required": "प्रश्न आवश्यक है",
  Quote: "उद्धरण",
  "Reached the vote limit. Remove an existing vote first.": "मतदान सीमा तक पहुंच गया। पहले एक मौजूदा वोट हटाएं।",
  "Recording format is not supported and cannot be reproduced": "रेकॉर्डिंग फ़ॉर्मेट समर्थित नहीं है और पुनः उत्पन्न नहीं किया जा सकता",
  "Remind Me": "मुझे याद दिलाएं",
  "Remove reminder": "रिमाइंडर हटाएं",
  Reply: "जवाब दे दो",
  "Reply to Message": "संदेश का जवाब दें",
  "Save for later": "बाद के लिए सहेजें",
  "Saved for later": "बाद के लिए सहेजा गया",
  Search: "खोज",
  "Searching...": "खोज कर...",
  "See all options ({{count}})_one": "सभी विकल्प देखें ({{count}})",
  "See all options ({{count}})_other": "सभी विकल्प देखें ({{count}})",
  "Select one": "एक चुनें",
  "Select one or more": "एक या अधिक चुनें",
  "Select up to {{count}}_one": "अधिकतम {{count}} तक चुनें",
  "Select up to {{count}}_other": "अधिकतम {{count}} तक चुनें",
  Send: "भेजे",
  "Send Anyway": "वैसे भी भेजें",
  "Send message request failed": "संदेश भेजने का अनुरोध विफल रहा",
  "Sending...": "भेजा जा रहा है",
  Share: "साझा करें",
  "Share Location": "स्थान साझा करें",
  "Share live location for": "लाइव स्थान साझा करें",
  "Shared live location": "साझा किया गया लाइव स्थान",
  "Show all": "सभी दिखाएँ",
  Shuffle: "मिश्रित करें",
  "Slow Mode ON": "स्लो मोड ऑन",
  "Some of the files will not be accepted": "कुछ फ़ाइलें स्वीकार नहीं की जाएंगी",
  "Start typing to search": "खोजने के लिए टाइप करना शुरू करें",
  "Stop sharing": "साझा करना बंद करें",
  Submit: "जमा करें",
  "Suggest an option": "एक विकल्प सुझाव दें",
  "Thinking...": "सोच रहा है...",
  "This field cannot be empty or contain only spaces": "यह फ़ील्ड खाली नहीं हो सकता या केवल रिक्त स्थान नहीं रख सकता",
  "This message did not meet our content guidelines": "यह संदेश हमारे सामग्री दिशानिर्देशों के अनुरूप नहीं था",
  "This message was deleted...": "मैसेज हटा दिया गया",
  Thread: "रिप्लाई थ्रेड",
  "Thread has not been found": "थ्रेड नहीं मिला",
  "Thread reply": "थ्रेड में उत्तर",
  "To start recording, allow the camera access in your browser": "रिकॉर्डिंग शुरू करने के लिए, अपने ब्राउज़र में कैमरा तक पहुँच दें",
  "To start recording, allow the microphone access in your browser": "रिकॉर्डिंग शुरू करने के लिए, अपने ब्राउज़र में माइक्रोफ़ोन तक पहुँच दें",
  "Type a number from 2 to 10": "2 से 10 तक का एक नंबर टाइप करें",
  "Type your message": "अपना मैसेज लिखे",
  Unarchive: "अनआर्काइव",
  Unmute: "अनम्यूट",
  Unpin: "अनपिन",
  "Unread messages": "अपठित संदेश",
  "Unsupported attachment": "असमर्थित अटैचमेंट",
  "Update your comment": "अपने टिप्पणी को अपडेट करें",
  'Upload type: "{{ type }}" is not allowed': 'अपलोड प्रकार: "{{ type }}" की अनुमति नहीं है',
  "User uploaded content": "उपयोगकर्ता अपलोड की गई सामग्री",
  "View results": "परिणाम देखें",
  "View {{count}} comments_one": "देखें {{count}} टिप्पणी",
  "View {{count}} comments_other": "देखें {{count}} टिप्पणियाँ",
  "Voice message": "आवाज संदेश",
  "Vote ended": "मतदान समाप्त",
  "Wait until all attachments have uploaded": "सभी अटैचमेंट अपलोड होने तक प्रतीक्षा करें",
  You: "आप",
  "You have no channels currently": "आपके पास कोई चैनल नहीं है",
  "You've reached the maximum number of files": "आप अधिकतम फ़ाइलों तक पहुँच गए हैं",
  "aria/Attachment": "अनुलग्नक",
  "aria/Cancel Reply": "उत्तर रद्द करें",
  "aria/Cancel upload": "अपलोड रद्द करें",
  "aria/Channel list": "चैनल सूची",
  "aria/Channel search results": "चैनल खोज परिणाम",
  "aria/Close thread": "थ्रेड बंद करें",
  "aria/Download attachment": "अनुलग्नक डाउनलोड करें",
  "aria/Emoji picker": "इमोजी चुनने वाला",
  "aria/File input": "फ़ाइल इनपुट",
  "aria/File upload": "फ़ाइल अपलोड",
  "aria/Image input": "छवि इनपुट",
  "aria/Load More Channels": "और चैनल लोड करें",
  "aria/Menu": "मेन्यू",
  "aria/Message Options": "संदेश विकल्प",
  "aria/Open Attachment Selector": "अटैचमेंट चयनकर्ता खोलें",
  "aria/Open Menu": "मेन्यू खोलें",
  "aria/Open Message Actions Menu": "संदेश क्रिया मेन्यू खोलें",
  "aria/Open Reaction Selector": "प्रतिक्रिया चयनकर्ता खोलें",
  "aria/Open Thread": "थ्रेड खोलें",
  "aria/Reaction list": "प्रतिक्रिया सूची",
  "aria/Remind Me Options": "रिमाइंडर विकल्प",
  "aria/Remove attachment": "संलग्नक हटाएं",
  "aria/Remove location attachment": "स्थान संलग्नक हटाएं",
  "aria/Retry upload": "अपलोड पुनः प्रयास करें",
  "aria/Search results": "खोज परिणाम",
  "aria/Search results header filter button": "खोज परिणाम हेडर फ़िल्टर बटन",
  "aria/Send": "भेजें",
  "aria/Stop AI Generation": "एआई जनरेशन रोकें",
  "ban-command-args": "[@उपयोगकर्तनाम] [पाठ]",
  "ban-command-description": "एक उपयोगकर्ता को प्रतिषेधित करें",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[पाठ]",
  "giphy-command-description": "चैनल पर एक क्रॉफिल जीआइएफ पोस्ट करें",
  live: "लाइव",
  "mute-command-args": "[@उपयोगकर्तनाम]",
  "mute-command-description": "एक उपयोगकर्ता को म्यूट करें",
  "network error": "नेटवर्क त्रुटि",
  replyCount_one: "1 रिप्लाई",
  replyCount_other: "{{ count }} रिप्लाई",
  "search-results-header-filter-source-button-label--channels": "चैनल्स",
  "search-results-header-filter-source-button-label--messages": "संदेश",
  "search-results-header-filter-source-button-label--users": "उपयोगकर्ता",
  searchResultsCount_one: "1 परिणाम",
  searchResultsCount_other: "{{ count }} परिणाम",
  "size limit": "आकार सीमा",
  "this content could not be displayed": "यह कॉन्टेंट लोड नहीं हो पाया",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@उपयोगकर्तनाम]",
  "unban-command-description": "एक उपयोगकर्ता को प्रतिषेध से मुक्त करें",
  "unknown error": "अज्ञात त्रुटि",
  "unmute-command-args": "[@उपयोगकर्तनाम]",
  "unmute-command-description": "एक उपयोगकर्ता को अनम्यूट करें",
  unreadMessagesSeparatorText_one: "1 अपठित संदेश",
  unreadMessagesSeparatorText_other: "{{count}} अपठित संदेश",
  "unsupported file type": "असमर्थित फ़ाइल प्रकार",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} और {{ moreCount }} और",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} और {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} और {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} और",
  "{{ memberCount }} members": "{{ memberCount }} मेंबर्स",
  "{{ user }} has been muted": "{{ user }} को म्यूट कर दिया गया है",
  "{{ user }} has been unmuted": "{{ user }} को अनम्यूट कर दिया गया है",
  "{{ user }} is typing...": "{{ user }} टाइप कर रहा है...",
  "{{ users }} and more are typing...": "{{ users }} और अधिक टाइप कर रहे हैं...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} और {{ user }} टाइप कर रहे हैं...",
  "{{ watcherCount }} online": "{{ watcherCount }} ऑनलाइन",
  "{{count}} unread_one": "{{count}} अपठित",
  "{{count}} unread_other": "{{count}} अपठित",
  "{{count}} votes_one": "{{count}} वोट",
  "{{count}} votes_other": "{{count}} वोट",
  "🏙 Attachment...": "🏙 अटैचमेंट",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} ने बनाया: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} ने वोट दिया: {{pollOptionText}}",
  "📍Shared location": "📍साझा किया गया स्थान"
};

// node_modules/stream-chat-react/dist/i18n/it.json
var it_default = {
  "Add a comment": "Aggiungi un commento",
  "Add an option": "Aggiungi un'opzione",
  "All results loaded": "Tutti i risultati caricati",
  "Allow access to camera": "Consenti l'accesso alla fotocamera",
  "Allow access to microphone": "Consenti l'accesso al microfono",
  "Allow comments": "Consenti i commenti",
  "Allow option suggestion": "Consenti il suggerimento di opzioni",
  "Also send as a direct message": "Invia anche come messaggio diretto",
  "Also send in channel": "Invia anche nel canale",
  "An error has occurred during recording": "Si è verificato un errore durante la registrazione",
  "An error has occurred during the recording processing": "Si è verificato un errore durante l'elaborazione della registrazione",
  Anonymous: "Anonimo",
  "Anonymous poll": "Sondaggio anonimo",
  Archive: "Archivia",
  "Ask a question": "Fai una domanda",
  Attach: "Allega",
  "Attach files": "Allega file",
  "Attachment upload blocked due to {{reason}}": "Caricamento allegato bloccato a causa di {{reason}}",
  "Attachment upload failed due to {{reason}}": "Caricamento allegato fallito a causa di {{reason}}",
  Cancel: "Annulla",
  "Cannot seek in the recording": "Impossibile cercare nella registrazione",
  "Channel Missing": "Il canale non esiste",
  Close: "Chiudi",
  "Close emoji picker": "Chiudi il selettore di emoji",
  "Commands matching": "Comandi corrispondenti",
  "Connection failure, reconnecting now...": "Errore di connessione, riconnessione in corso...",
  Create: "Crea",
  "Create poll": "Crea sondaggio",
  "Current location": "Posizione attuale",
  Delete: "Elimina",
  Delivered: "Consegnato",
  "Download attachment {{ name }}": "Scarica l'allegato {{ name }}",
  "Drag your files here": "Trascina i tuoi file qui",
  "Drag your files here to add to your post": "Trascina i tuoi file qui per aggiungerli al tuo post",
  "Due since {{ dueSince }}": "Scaduto dal {{ dueSince }}",
  "Due {{ timeLeft }}": "Scadenza tra {{ timeLeft }}",
  "Edit Message": "Modifica messaggio",
  "Edit message request failed": "Richiesta di modifica del messaggio non riuscita",
  Edited: "Modificato",
  "Emoji matching": "Abbinamento emoji",
  "Empty message...": "Messaggio vuoto...",
  End: "Fine",
  "End vote": "Termina il voto",
  "Enforce unique vote is enabled": "Il voto unico è abilitato",
  "Error adding flag": "Errore durante l'aggiunta del flag",
  "Error connecting to chat, refresh the page to try again.": "Errore di connessione alla chat, aggiorna la pagina per riprovare.",
  "Error deleting message": "Errore durante l'eliminazione del messaggio",
  "Error fetching reactions": "Errore nel caricamento delle reazioni",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Errore durante la marcatura del messaggio come non letto. Impossibile marcare messaggi non letti più vecchi dei più recenti 100 messaggi del canale.",
  "Error muting a user ...": "Errore nel silenziare un utente ...",
  "Error pinning message": "Errore durante il blocco del messaggio",
  "Error removing message pin": "Errore durante la rimozione del PIN del messaggio",
  "Error reproducing the recording": "Errore durante la riproduzione della registrazione",
  "Error starting recording": "Errore durante l'avvio della registrazione",
  "Error unmuting a user ...": "Errore nel riattivare un utente ...",
  "Error uploading attachment": "Errore durante il caricamento dell'allegato",
  "Error uploading file": "Errore durante il caricamento del file",
  "Error uploading image": "Errore durante il caricamento dell'immagine",
  "Error · Unsent": "Errore · Non inviato",
  "Error: {{ errorMessage }}": "Errore: {{ errorMessage }}",
  "Failed to create the poll": "Impossibile creare il sondaggio",
  "Failed to create the poll due to {{reason}}": "Impossibile creare il sondaggio a causa di {{reason}}",
  "Failed to jump to the first unread message": "Impossibile passare al primo messaggio non letto",
  "Failed to mark channel as read": "Impossibile contrassegnare il canale come letto",
  "Failed to play the recording": "Impossibile riprodurre la registrazione",
  "Failed to retrieve location": "Impossibile recuperare la posizione",
  "Failed to share location": "Impossibile condividere la posizione",
  File: "File",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Il file è troppo grande: {{ size }}, la dimensione massima di caricamento è {{ limit }}",
  Flag: "Segnala",
  "Generating...": "Generando...",
  "Latest Messages": "Ultimi messaggi",
  "Live for {{duration}}": "Live per {{duration}}",
  "Live location": "Posizione live",
  "Live until {{ timestamp }}": "Live fino a {{ timestamp }}",
  "Load more": "Carica di più",
  Location: "Posizione",
  "Location sharing ended": "Condivisione posizione terminata",
  "Mark as unread": "Contrassegna come non letto",
  "Maximum number of votes (from 2 to 10)": "Numero massimo di voti (da 2 a 10)",
  Menu: "Menù",
  "Message Failed · Click to try again": "Invio messaggio fallito · Clicca per riprovare",
  "Message Failed · Unauthorized": "Invio messaggio fallito · Non autorizzato",
  "Message deleted": "Messaggio cancellato",
  "Message has been successfully flagged": "Il messaggio è stato segnalato con successo",
  "Message pinned": "Messaggio bloccato",
  "Message was blocked by moderation policies": "Il messaggio è stato bloccato dalle politiche di moderazione",
  "Messages have been marked unread.": "I messaggi sono stati contrassegnati come non letti.",
  "Missing permissions to upload the attachment": "Autorizzazioni mancanti per caricare l'allegato",
  "Multiple answers": "Risposte multiple",
  Mute: "Silenzia",
  New: "Nuovo",
  "New Messages!": "Nuovi messaggi!",
  "No chats here yet…": "Non ci sono ancora messaggi qui...",
  "No results found": "Nessun risultato trovato",
  "Nobody will be able to vote in this poll anymore.": "Nessuno potrà più votare in questo sondaggio.",
  "Nothing yet...": "Ancora niente...",
  Ok: "Ok",
  "Only numbers are allowed": "Sono consentiti solo numeri",
  "Open emoji picker": "Apri il selettore di emoji",
  "Option already exists": "L'opzione esiste già",
  "Option is empty": "L'opzione è vuota",
  Options: "Opzioni",
  "People matching": "Persone che corrispondono",
  Pin: "Pin",
  "Pinned by": "Appuntato da",
  Poll: "Sondaggio",
  "Poll comments": "Commenti del sondaggio",
  "Poll options": "Opzioni del sondaggio",
  "Poll results": "Risultati del sondaggio",
  Question: "Domanda",
  "Question is required": "La domanda è obbligatoria",
  Quote: "Citazione",
  "Reached the vote limit. Remove an existing vote first.": "Raggiunto il limite di voti. Rimuovi prima un voto esistente.",
  "Recording format is not supported and cannot be reproduced": "Il formato di registrazione non è supportato e non può essere riprodotto",
  "Remind Me": "Ricordami",
  "Remove reminder": "Rimuovi promemoria",
  Reply: "Rispondi",
  "Reply to Message": "Rispondi al messaggio",
  "Save for later": "Salva per dopo",
  "Saved for later": "Salvato per dopo",
  Search: "Cerca",
  "Searching...": "Ricerca in corso...",
  "See all options ({{count}})_many": "Vedi tutte le opzioni ({{count}})",
  "See all options ({{count}})_one": "Vedi tutte le opzioni ({{count}})",
  "See all options ({{count}})_other": "Vedi tutte le opzioni ({{count}})",
  "Select one": "Seleziona uno",
  "Select one or more": "Seleziona uno o più",
  "Select up to {{count}}_many": "Seleziona fino a {{count}}",
  "Select up to {{count}}_one": "Seleziona fino a {{count}}",
  "Select up to {{count}}_other": "Seleziona fino a {{count}}",
  Send: "Invia",
  "Send Anyway": "Invia comunque",
  "Send message request failed": "Richiesta di invio messaggio non riuscita",
  "Sending...": "Invio in corso...",
  Share: "Condividi",
  "Share Location": "Condividi posizione",
  "Share live location for": "Condividi posizione live per",
  "Shared live location": "Posizione live condivisa",
  "Show all": "Mostra tutto",
  Shuffle: "Mescolare",
  "Slow Mode ON": "Modalità lenta attivata",
  "Some of the files will not be accepted": "Alcuni dei file non saranno accettati",
  "Start typing to search": "Inizia a digitare per cercare",
  "Stop sharing": "Ferma condivisione",
  Submit: "Invia",
  "Suggest an option": "Suggerisci un'opzione",
  "Thinking...": "Pensando...",
  "This field cannot be empty or contain only spaces": "Questo campo non può essere vuoto o contenere solo spazi",
  "This message did not meet our content guidelines": "Questo messaggio non soddisfa le nostre linee guida sui contenuti",
  "This message was deleted...": "Questo messaggio è stato cancellato...",
  Thread: "Discussione",
  "Thread has not been found": "Discussione non trovata",
  "Thread reply": "Risposta nella discussione",
  "To start recording, allow the camera access in your browser": "Per iniziare a registrare, consenti l'accesso alla fotocamera nel tuo browser",
  "To start recording, allow the microphone access in your browser": "Per iniziare a registrare, consenti l'accesso al microfono nel tuo browser",
  "Type a number from 2 to 10": "Digita un numero da 2 a 10",
  "Type your message": "Scrivi il tuo messaggio",
  Unarchive: "Ripristina",
  Unmute: "Riattiva il notifiche",
  Unpin: "Sblocca",
  "Unread messages": "Messaggi non letti",
  "Unsupported attachment": "Allegato non supportato",
  "Update your comment": "Aggiorna il tuo commento",
  'Upload type: "{{ type }}" is not allowed': 'Tipo di caricamento: "{{ type }}" non è consentito',
  "User uploaded content": "Contenuto caricato dall'utente",
  "View results": "Vedi risultati",
  "View {{count}} comments_many": "Visualizza {{count}} commenti",
  "View {{count}} comments_one": "Visualizza {{count}} commento",
  "View {{count}} comments_other": "Visualizza {{count}} commenti",
  "Voice message": "Messaggio vocale",
  "Vote ended": "Voto terminato",
  "Wait until all attachments have uploaded": "Attendi il caricamento di tutti gli allegati",
  You: "Tu",
  "You have no channels currently": "Al momento non sono presenti canali",
  "You've reached the maximum number of files": "Hai raggiunto il numero massimo di file",
  "aria/Attachment": "Allegato",
  "aria/Cancel Reply": "Annulla risposta",
  "aria/Cancel upload": "Annulla caricamento",
  "aria/Channel list": "Elenco dei canali",
  "aria/Channel search results": "Risultati della ricerca dei canali",
  "aria/Close thread": "Chiudi discussione",
  "aria/Download attachment": "Scarica l'allegato",
  "aria/Emoji picker": "Selettore di emoji",
  "aria/File input": "Input di file",
  "aria/File upload": "Caricamento di file",
  "aria/Image input": "Input di immagine",
  "aria/Load More Channels": "Carica altri canali",
  "aria/Menu": "Menu",
  "aria/Message Options": "Opzioni di messaggio",
  "aria/Open Attachment Selector": "Apri selettore allegati",
  "aria/Open Menu": "Apri menu",
  "aria/Open Message Actions Menu": "Apri il menu delle azioni di messaggio",
  "aria/Open Reaction Selector": "Apri il selettore di reazione",
  "aria/Open Thread": "Apri discussione",
  "aria/Reaction list": "Elenco delle reazioni",
  "aria/Remind Me Options": "Opzioni promemoria",
  "aria/Remove attachment": "Rimuovi allegato",
  "aria/Remove location attachment": "Rimuovi allegato posizione",
  "aria/Retry upload": "Riprova caricamento",
  "aria/Search results": "Risultati della ricerca",
  "aria/Search results header filter button": "Pulsante filtro intestazione risultati ricerca",
  "aria/Send": "Invia",
  "aria/Stop AI Generation": "Interrompi generazione IA",
  "ban-command-args": "[@nomeutente] [testo]",
  "ban-command-description": "Vietare un utente",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[testo]",
  "giphy-command-description": "Pubblica un gif casuale sul canale",
  live: "live",
  "mute-command-args": "[@nomeutente]",
  "mute-command-description": "Silenzia un utente",
  "network error": "errore di rete",
  replyCount_many: "{{ count }} risposte",
  replyCount_one: "Una risposta",
  replyCount_other: "{{ count }} risposte",
  "search-results-header-filter-source-button-label--channels": "canali",
  "search-results-header-filter-source-button-label--messages": "messaggi",
  "search-results-header-filter-source-button-label--users": "utenti",
  searchResultsCount_many: "{{ count }} risultati",
  searchResultsCount_one: "1 risultato",
  searchResultsCount_other: "{{ count }} risultati",
  "size limit": "limite di dimensione",
  "this content could not be displayed": "questo contenuto non può essere mostrato",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@nomeutente]",
  "unban-command-description": "Togliere il divieto a un utente",
  "unknown error": "errore sconosciuto",
  "unmute-command-args": "[@nomeutente]",
  "unmute-command-description": "Togliere il silenzio a un utente",
  unreadMessagesSeparatorText_many: "{{count}} messaggi non letti",
  unreadMessagesSeparatorText_one: "1 messaggio non letto",
  unreadMessagesSeparatorText_other: "{{count}} messaggi non letti",
  "unsupported file type": "tipo di file non supportato",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e altri {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "+ {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} membri",
  "{{ user }} has been muted": "{{ user }} è stato silenziato",
  "{{ user }} has been unmuted": "Notifiche riattivate per {{ user }}",
  "{{ user }} is typing...": "{{ user }} sta digitando...",
  "{{ users }} and more are typing...": "{{ users }} e altri stanno digitando...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} e {{ user }} stanno digitando...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_many": "{{count}} non letti",
  "{{count}} unread_one": "{{count}} non letto",
  "{{count}} unread_other": "{{count}} non letti",
  "{{count}} votes_many": "{{count}} voti",
  "{{count}} votes_one": "{{count}} voto",
  "{{count}} votes_other": "{{count}} voti",
  "🏙 Attachment...": "🏙 Allegato...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} ha creato: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} ha votato: {{pollOptionText}}",
  "📍Shared location": "📍Posizione condivisa"
};

// node_modules/stream-chat-react/dist/i18n/ja.json
var ja_default = {
  "Add a comment": "コメントを追加",
  "Add an option": "オプションを追加",
  "All results loaded": "すべての結果が読み込まれました",
  "Allow access to camera": "カメラへのアクセスを許可する",
  "Allow access to microphone": "マイクロフォンへのアクセスを許可する",
  "Allow comments": "コメントを許可",
  "Allow option suggestion": "オプションの提案を許可",
  "Also send as a direct message": "ダイレクトメッセージとしても送信",
  "Also send in channel": "チャンネルにも送信",
  "An error has occurred during recording": "録音中にエラーが発生しました",
  "An error has occurred during the recording processing": "録音処理中にエラーが発生しました",
  Anonymous: "匿名",
  "Anonymous poll": "匿名投票",
  Archive: "アーカイブ",
  "Ask a question": "質問する",
  Attach: "添付",
  "Attach files": "ファイルを添付する",
  "Attachment upload blocked due to {{reason}}": "{{reason}}のため添付ファイルのアップロードがブロックされました",
  "Attachment upload failed due to {{reason}}": "{{reason}}のため添付ファイルのアップロードに失敗しました",
  Cancel: "キャンセル",
  "Cannot seek in the recording": "録音中にシークできません",
  "Channel Missing": "チャネルがありません",
  Close: "閉める",
  "Close emoji picker": "絵文字ピッカーを閉める",
  "Commands matching": "一致するコマンド",
  "Connection failure, reconnecting now...": "接続が失敗しました。再接続中...",
  Create: "作成",
  "Create poll": "投票を作成",
  "Current location": "現在の位置",
  Delete: "消去",
  Delivered: "配信しました",
  "Download attachment {{ name }}": "添付ファイル {{ name }} をダウンロード",
  "Drag your files here": "ここにファイルをドラッグ",
  "Drag your files here to add to your post": "投稿に追加するためにここにファイルをドラッグ",
  "Due since {{ dueSince }}": "{{ dueSince }}から期限切れ",
  "Due {{ timeLeft }}": "{{ timeLeft }}に期限切れ",
  "Edit Message": "メッセージを編集",
  "Edit message request failed": "メッセージの編集要求が失敗しました",
  Edited: "編集済み",
  "Emoji matching": "絵文字マッチング",
  "Empty message...": "空のメッセージ...",
  End: "終了",
  "End vote": "投票を終了",
  "Enforce unique vote is enabled": "一意の投票が有効になっています",
  "Error adding flag": "フラグを追加のエラーが発生しました",
  "Error connecting to chat, refresh the page to try again.": "チャットへの接続ができませんでした。ページを更新してください。",
  "Error deleting message": "メッセージを削除するエラーが発生しました",
  "Error fetching reactions": "反応の読み込みエラー",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "メッセージを未読にする際にエラーが発生しました。最新の100件のチャンネルメッセージより古い未読メッセージはマークできません。",
  "Error muting a user ...": "ユーザーを無音するエラーが発生しました...",
  "Error pinning message": "メッセージをピンのエラーが発生しました",
  "Error removing message pin": "メッセージのピンを削除のエラーが発生しました",
  "Error reproducing the recording": "録音の再生中にエラーが発生しました",
  "Error starting recording": "録音の開始時にエラーが発生しました",
  "Error unmuting a user ...": "ユーザーの無音解除のエラーが発生しました...",
  "Error uploading attachment": "添付ファイルのアップロード中にエラーが発生しました",
  "Error uploading file": "ファイルをアップロードのエラーが発生しました",
  "Error uploading image": "画像をアップロードのエラーが発生しました",
  "Error · Unsent": "エラー・未送信",
  "Error: {{ errorMessage }}": "エラー: {{ errorMessage }}",
  "Failed to create the poll": "投票の作成に失敗しました",
  "Failed to create the poll due to {{reason}}": "{{reason}} のため投票の作成に失敗しました",
  "Failed to jump to the first unread message": "最初の未読メッセージにジャンプできませんでした",
  "Failed to mark channel as read": "チャンネルを既読にすることができませんでした",
  "Failed to play the recording": "録音の再生に失敗しました",
  "Failed to retrieve location": "位置情報の取得に失敗しました",
  "Failed to share location": "位置情報の共有に失敗しました",
  File: "ファイル",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "ファイルが大きすぎます：{{ size }}、最大アップロードサイズは{{ limit }}です",
  Flag: "フラグ",
  "Generating...": "生成中...",
  "Latest Messages": "最新のメッセージ",
  "Live for {{duration}}": "{{duration}}間ライブ",
  "Live location": "ライブ位置情報",
  "Live until {{ timestamp }}": "{{ timestamp }}までライブ",
  "Load more": "もっと読み込む",
  Location: "位置情報",
  "Location sharing ended": "位置情報の共有が終了しました",
  "Mark as unread": "未読としてマーク",
  "Maximum number of votes (from 2 to 10)": "最大投票数（2から10まで）",
  Menu: "メニュー",
  "Message Failed · Click to try again": "メッセージが失敗しました · クリックして再試行してください",
  "Message Failed · Unauthorized": "メッセージが失敗しました · 許可されていません",
  "Message deleted": "メッセージが削除されました",
  "Message has been successfully flagged": "メッセージに正常にフラグが付けられました",
  "Message pinned": "メッセージにピンが付けられました",
  "Message was blocked by moderation policies": "メッセージはモデレーションポリシーによってブロックされました",
  "Messages have been marked unread.": "メッセージは未読としてマークされました。",
  "Missing permissions to upload the attachment": "添付ファイルをアップロードするための許可がありません",
  "Multiple answers": "複数回答",
  Mute: "無音",
  New: "新しい",
  "New Messages!": "新しいメッセージ!",
  "No chats here yet…": "ここにはまだチャットはありません…",
  "No results found": "結果が見つかりません",
  "Nobody will be able to vote in this poll anymore.": "この投票では、誰も投票できなくなります。",
  "Nothing yet...": "まだ何もありません...",
  Ok: "OK",
  "Only numbers are allowed": "数字のみ許可されています",
  "Open emoji picker": "絵文字ピッカーを開く",
  "Option already exists": "オプションは既に存在します",
  "Option is empty": "オプションが空です",
  Options: "オプション",
  "People matching": "一致する人",
  Pin: "ピン",
  "Pinned by": "ピンした方",
  Poll: "投票",
  "Poll comments": "投票コメント",
  "Poll options": "投票オプション",
  "Poll results": "投票結果",
  Question: "質問",
  "Question is required": "質問は必須です",
  Quote: "引用",
  "Reached the vote limit. Remove an existing vote first.": "投票制限に達しました。既存の投票を先に削除してください。",
  "Recording format is not supported and cannot be reproduced": "録音形式はサポートされておらず、再生できません",
  "Remind Me": "リマインダー",
  "Remove reminder": "リマインダーを削除",
  Reply: "返事",
  "Reply to Message": "メッセージに返信",
  "Save for later": "後で保存",
  "Saved for later": "後で保存済み",
  Search: "探す",
  "Searching...": "検索中...",
  "See all options ({{count}})_other": "すべてのオプションを見る ({{count}})",
  "Select one": "1つ選択",
  "Select one or more": "1つ以上選択",
  "Select up to {{count}}_other": "最大{{count}}まで選択",
  Send: "送信",
  "Send Anyway": "とにかく送信する",
  "Send message request failed": "メッセージ送信リクエストが失敗しました",
  "Sending...": "送信中...",
  Share: "共有",
  "Share Location": "位置情報を共有",
  "Share live location for": "ライブ位置情報を共有",
  "Shared live location": "共有されたライブ位置情報",
  "Show all": "すべて表示",
  Shuffle: "シャッフル",
  "Slow Mode ON": "スローモードオン",
  "Some of the files will not be accepted": "一部のファイルは受け付けられません",
  "Start typing to search": "検索するには入力を開始してください",
  "Stop sharing": "共有を停止",
  Submit: "送信",
  "Suggest an option": "オプションを提案",
  "Thinking...": "考え中...",
  "This field cannot be empty or contain only spaces": "このフィールドは空にすることはできません。また、空白文字のみを含むこともできません",
  "This message did not meet our content guidelines": "このメッセージはコンテンツガイドラインに適合していません",
  "This message was deleted...": "このメッセージは削除されました...",
  Thread: "スレッド",
  "Thread has not been found": "スレッドが見つかりませんでした",
  "Thread reply": "スレッドの返信",
  "To start recording, allow the camera access in your browser": "録音を開始するには、ブラウザーでカメラへのアクセスを許可してください",
  "To start recording, allow the microphone access in your browser": "録音を開始するには、ブラウザーでマイクロフォンへのアクセスを許可してください",
  "Type a number from 2 to 10": "2から10までの数字を入力してください",
  "Type your message": "メッセージを入力してください",
  Unarchive: "アーカイブ解除",
  Unmute: "無音を解除する",
  Unpin: "ピンを解除する",
  "Unread messages": "未読メッセージ",
  "Unsupported attachment": "サポートされていない添付ファイル",
  "Update your comment": "コメントを更新",
  'Upload type: "{{ type }}" is not allowed': 'アップロードタイプ："{{ type }}"は許可されていません',
  "User uploaded content": "ユーザーがアップロードしたコンテンツ",
  "View results": "結果を表示",
  "View {{count}} comments_other": "{{count}} コメントを表示",
  "Voice message": "ボイスメッセージ",
  "Vote ended": "投票が終了しました",
  "Wait until all attachments have uploaded": "すべての添付ファイルがアップロードされるまでお待ちください",
  You: "あなた",
  "You have no channels currently": "現在チャンネルはありません",
  "You've reached the maximum number of files": "ファイルの最大数に達しました",
  "aria/Attachment": "添付ファイル",
  "aria/Cancel Reply": "返信をキャンセル",
  "aria/Cancel upload": "アップロードをキャンセル",
  "aria/Channel list": "チャンネル一覧",
  "aria/Channel search results": "チャンネル検索結果",
  "aria/Close thread": "スレッドを閉じる",
  "aria/Download attachment": "添付ファイルをダウンロード",
  "aria/Emoji picker": "絵文字ピッカー",
  "aria/File input": "ファイル入力",
  "aria/File upload": "ファイルアップロード",
  "aria/Image input": "画像入力",
  "aria/Load More Channels": "さらにチャンネルを読み込む",
  "aria/Menu": "メニュー",
  "aria/Message Options": "メッセージオプション",
  "aria/Open Attachment Selector": "添付ファイル選択を開く",
  "aria/Open Menu": "メニューを開く",
  "aria/Open Message Actions Menu": "メッセージアクションメニューを開く",
  "aria/Open Reaction Selector": "リアクションセレクターを開く",
  "aria/Open Thread": "スレッドを開く",
  "aria/Reaction list": "リアクション一覧",
  "aria/Remind Me Options": "リマインダーオプション",
  "aria/Remove attachment": "添付ファイルを削除",
  "aria/Remove location attachment": "位置情報の添付ファイルを削除",
  "aria/Retry upload": "アップロードを再試行",
  "aria/Search results": "検索結果",
  "aria/Search results header filter button": "検索結果ヘッダーフィルターボタン",
  "aria/Send": "送信",
  "aria/Stop AI Generation": "AI生成を停止",
  "ban-command-args": "[@ユーザ名] [テキスト]",
  "ban-command-description": "ユーザーを禁止する",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[テキスト]",
  "giphy-command-description": "チャンネルにランダムなGIFを投稿する",
  live: "ライブ",
  "mute-command-args": "[@ユーザ名]",
  "mute-command-description": "ユーザーをミュートする",
  "network error": "ネットワークエラー",
  replyCount_one: "1件の返信",
  replyCount_other: "{{ count }} 返信",
  "search-results-header-filter-source-button-label--channels": "チャンネル",
  "search-results-header-filter-source-button-label--messages": "メッセージ",
  "search-results-header-filter-source-button-label--users": "ユーザー",
  searchResultsCount_one: "1件の結果",
  searchResultsCount_other: "{{ count }}件の結果",
  "size limit": "サイズ制限",
  "this content could not be displayed": "このコンテンツは表示できませんでした",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@ユーザ名]",
  "unban-command-description": "ユーザーの禁止を解除する",
  "unknown error": "不明なエラー",
  "unmute-command-args": "[@ユーザ名]",
  "unmute-command-description": "ユーザーのミュートを解除する",
  unreadMessagesSeparatorText_other: "未読メッセージ {{count}} 件",
  "unsupported file type": "サポートされていないファイル形式",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} と {{ moreCount }} 他人",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} と {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} と {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} イメージ",
  "{{ memberCount }} members": "{{ memberCount }} メンバー",
  "{{ user }} has been muted": "{{ user }} 無音されています",
  "{{ user }} has been unmuted": "{{ user }} 無音されていません",
  "{{ user }} is typing...": "{{ user }} が入力中...",
  "{{ users }} and more are typing...": "{{ users }} とその他が入力中...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} と {{ user }} が入力中...",
  "{{ watcherCount }} online": "{{ watcherCount }} オンライン",
  "{{count}} unread_other": "{{count}} 未読",
  "{{count}} votes_other": "{{count}} 票",
  "🏙 Attachment...": "🏙 アタッチメント...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} が作成: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} が投票: {{pollOptionText}}",
  "📍Shared location": "📍共有された位置情報"
};

// node_modules/stream-chat-react/dist/i18n/ko.json
var ko_default = {
  "Add a comment": "댓글 추가",
  "Add an option": "옵션 추가",
  "All results loaded": "모든 결과가 로드되었습니다",
  "Allow access to camera": "카메라에 대한 액세스 허용",
  "Allow access to microphone": "마이크로폰에 대한 액세스 허용",
  "Allow comments": "댓글 허용",
  "Allow option suggestion": "옵션 제안 허용",
  "Also send as a direct message": "다이렉트 메시지로도 보내기",
  "Also send in channel": "채널에도 보내기",
  "An error has occurred during recording": "녹음 중 오류가 발생했습니다",
  "An error has occurred during the recording processing": "녹음 처리 중 오류가 발생했습니다",
  Anonymous: "익명",
  "Anonymous poll": "익명 투표",
  Archive: "아카이브",
  "Ask a question": "질문하기",
  Attach: "첨부",
  "Attach files": "파일 첨부",
  "Attachment upload blocked due to {{reason}}": "{{reason}}로 인해 첨부 파일 업로드가 차단되었습니다",
  "Attachment upload failed due to {{reason}}": "{{reason}}로 인해 첨부 파일 업로드가 실패했습니다",
  Cancel: "취소",
  "Cannot seek in the recording": "녹음에서 찾을 수 없습니다",
  "Channel Missing": "채널 누락",
  Close: "닫기",
  "Close emoji picker": "이모티콘 선택기 닫기",
  "Commands matching": "일치하는 명령",
  "Connection failure, reconnecting now...": "연결 실패, 지금 다시 연결 중...",
  Create: "생성",
  "Create poll": "투표 생성",
  "Current location": "현재 위치",
  Delete: "삭제",
  Delivered: "배달됨",
  "Download attachment {{ name }}": "첨부 파일 {{ name }} 다운로드",
  "Drag your files here": "여기로 파일을 끌어다 놓으세요",
  "Drag your files here to add to your post": "게시물에 추가하려면 파일을 여기로 끌어다 놓으세요",
  "Due since {{ dueSince }}": "{{ dueSince }}부터 기한",
  "Due {{ timeLeft }}": "{{ timeLeft }}에 기한",
  "Edit Message": "메시지 수정",
  "Edit message request failed": "메시지 수정 요청 실패",
  Edited: "편집됨",
  "Emoji matching": "이모티콘 매칭",
  "Empty message...": "빈 메시지...",
  End: "종료",
  "End vote": "투표 종료",
  "Enforce unique vote is enabled": "고유 투표가 활성화되었습니다",
  "Error adding flag": "플래그를 추가하는 동안 오류가 발생했습니다.",
  "Error connecting to chat, refresh the page to try again.": "채팅에 연결하는 동안 오류가 발생했습니다. 페이지를 새로고침하여 다시 시도하세요.",
  "Error deleting message": "메시지를 삭제하는 중에 오류가 발생했습니다.",
  "Error fetching reactions": "반응 로딩 오류.",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "메시지를 읽지 않음으로 표시하는 중 오류가 발생했습니다. 가장 최근 100개의 채널 메시지보다 오래된 읽지 않은 메시지는 표시할 수 없습니다.",
  "Error muting a user ...": "사용자를 음소거하는 중에 오류가 발생했습니다...",
  "Error pinning message": "메시지를 핀하는 중에 오류가 발생했습니다.",
  "Error removing message pin": "메시지 핀을 제거하는 중에 오류가 발생했습니다.",
  "Error reproducing the recording": "녹음 재생 중 오류 발생",
  "Error starting recording": "녹음 시작 중 오류가 발생했습니다",
  "Error unmuting a user ...": "사용자 음소거 해제 중 오류 발생...",
  "Error uploading attachment": "첨부 파일 업로드 중 오류가 발생했습니다",
  "Error uploading file": "파일 업로드 오류",
  "Error uploading image": "이미지를 업로드하는 동안 오류가 발생했습니다.",
  "Error · Unsent": "오류 · 전송되지 않음",
  "Error: {{ errorMessage }}": "오류: {{ errorMessage }}",
  "Failed to create the poll": "투표 생성 실패",
  "Failed to create the poll due to {{reason}}": "{{reason}} 때문에 투표를 생성하지 못했습니다",
  "Failed to jump to the first unread message": "첫 번째 읽지 않은 메시지로 이동하지 못했습니다",
  "Failed to mark channel as read": "채널을 읽음으로 표시하는 데 실패했습니다",
  "Failed to play the recording": "녹음을 재생하지 못했습니다",
  "Failed to retrieve location": "위치를 가져오지 못했습니다",
  "Failed to share location": "위치를 공유하지 못했습니다",
  File: "파일",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "파일이 너무 큽니다: {{ size }}, 최대 업로드 크기는 {{ limit }}입니다",
  Flag: "플래그",
  "Generating...": "생성 중...",
  "Latest Messages": "최신 메시지",
  "Live for {{duration}}": "{{duration}} 동안 라이브",
  "Live location": "라이브 위치",
  "Live until {{ timestamp }}": "{{ timestamp }}까지 라이브",
  "Load more": "더 불러오기",
  Location: "위치",
  "Location sharing ended": "위치 공유가 종료되었습니다",
  "Mark as unread": "읽지 않음으로 표시",
  "Maximum number of votes (from 2 to 10)": "최대 투표 수 (2에서 10까지)",
  Menu: "메뉴",
  "Message Failed · Click to try again": "메시지 실패 · 다시 시도하려면 클릭하세요.",
  "Message Failed · Unauthorized": "메시지 실패 · 승인되지 않음",
  "Message deleted": "메시지가 삭제되었습니다.",
  "Message has been successfully flagged": "메시지에 플래그가 지정되었습니다.",
  "Message pinned": "메시지 핀했습니다",
  "Message was blocked by moderation policies": "메시지가 관리 정책에 의해 차단되었습니다.",
  "Messages have been marked unread.": "메시지가 읽지 않음으로 표시되었습니다.",
  "Missing permissions to upload the attachment": "첨부 파일을 업로드하려면 권한이 필요합니다",
  "Multiple answers": "복수 응답",
  Mute: "무음",
  New: "새로운",
  "New Messages!": "새 메시지!",
  "No chats here yet…": "아직 채팅이 없습니다...",
  "No results found": "검색 결과가 없습니다",
  "Nobody will be able to vote in this poll anymore.": "이 투표에 더 이상 아무도 투표할 수 없습니다.",
  "Nothing yet...": "아직 아무것도...",
  Ok: "확인",
  "Only numbers are allowed": "숫자만 입력 가능합니다",
  "Open emoji picker": "이모지 선택기 열기",
  "Option already exists": "옵션이 이미 존재합니다",
  "Option is empty": "옵션이 비어 있습니다",
  Options: "옵션",
  "People matching": "일치하는 사람",
  Pin: "핀",
  "Pinned by": "핀했던 분:",
  Poll: "투표",
  "Poll comments": "투표 댓글",
  "Poll options": "투표 옵션",
  "Poll results": "투표 결과",
  Question: "질문",
  "Question is required": "질문이 필요합니다",
  Quote: "인용",
  "Reached the vote limit. Remove an existing vote first.": "투표 한도에 도달했습니다. 기존 투표를 먼저 제거하세요.",
  "Recording format is not supported and cannot be reproduced": "녹음 형식이 지원되지 않으므로 재생할 수 없습니다",
  "Remind Me": "알림 설정",
  "Remove reminder": "알림 제거",
  Reply: "답장",
  "Reply to Message": "메시지에 답장",
  "Save for later": "나중에 저장",
  "Saved for later": "나중에 저장됨",
  Search: "찾다",
  "Searching...": "수색...",
  "See all options ({{count}})_other": "모든 옵션 보기 ({{count}})",
  "Select one": "하나 선택",
  "Select one or more": "하나 이상 선택",
  "Select up to {{count}}_other": "{{count}}개까지 선택",
  Send: "보내다",
  "Send Anyway": "어쨌든 보내기",
  "Send message request failed": "메시지 보내기 요청 실패",
  "Sending...": "배상중...",
  Share: "공유",
  "Share Location": "위치 공유",
  "Share live location for": "라이브 위치 공유",
  "Shared live location": "공유된 라이브 위치",
  "Show all": "모두 보기",
  Shuffle: "셔플",
  "Slow Mode ON": "슬로우 모드 켜짐",
  "Some of the files will not be accepted": "일부 파일은 허용되지 않을 수 있습니다",
  "Start typing to search": "검색하려면 입력을 시작하세요",
  "Stop sharing": "공유 중지",
  Submit: "제출",
  "Suggest an option": "옵션 제안",
  "Thinking...": "생각 중...",
  "This field cannot be empty or contain only spaces": "이 필드는 비워둘 수 없으며 공백만 포함할 수도 없습니다",
  "This message did not meet our content guidelines": "이 메시지는 콘텐츠 가이드라인을 충족하지 않습니다.",
  "This message was deleted...": "이 메시지는 삭제되었습니다...",
  Thread: "스레드",
  "Thread has not been found": "스레드를 찾을 수 없습니다",
  "Thread reply": "스레드 답장",
  "To start recording, allow the camera access in your browser": "브라우저에서 카메라 액세스를 허용하여 녹음을 시작합니다",
  "To start recording, allow the microphone access in your browser": "브라우저에서 마이크로폰 액세스를 허용하여 녹음을 시작합니다",
  "Type a number from 2 to 10": "2에서 10 사이의 숫자를 입력하세요",
  "Type your message": "메시지 입력",
  Unarchive: "아카이브 해제",
  Unmute: "음소거 해제",
  Unpin: "핀 해제",
  "Unread messages": "읽지 않은 메시지",
  "Unsupported attachment": "지원되지 않는 첨부 파일",
  "Update your comment": "댓글 업데이트",
  'Upload type: "{{ type }}" is not allowed': '업로드 유형: "{{ type }}"은(는) 허용되지 않습니다.',
  "User uploaded content": "사용자 업로드 콘텐츠",
  "View results": "결과 보기",
  "View {{count}} comments_other": "{{count}}개의 댓글 보기",
  "Voice message": "음성 메시지",
  "Vote ended": "투표 종료",
  "Wait until all attachments have uploaded": "모든 첨부 파일이 업로드될 때까지 기다립니다.",
  You: "당신",
  "You have no channels currently": "현재 채널이 없습니다.",
  "You've reached the maximum number of files": "최대 파일 수에 도달했습니다.",
  "aria/Attachment": "첨부 파일",
  "aria/Cancel Reply": "답장 취소",
  "aria/Cancel upload": "업로드 취소",
  "aria/Channel list": "채널 목록",
  "aria/Channel search results": "채널 검색 결과",
  "aria/Close thread": "스레드 닫기",
  "aria/Download attachment": "첨부 파일 다운로드",
  "aria/Emoji picker": "이모지 선택기",
  "aria/File input": "파일 입력",
  "aria/File upload": "파일 업로드",
  "aria/Image input": "이미지 입력",
  "aria/Load More Channels": "더 많은 채널 불러오기",
  "aria/Menu": "메뉴",
  "aria/Message Options": "메시지 옵션",
  "aria/Open Attachment Selector": "첨부 파일 선택기 열기",
  "aria/Open Menu": "메뉴 열기",
  "aria/Open Message Actions Menu": "메시지 액션 메뉴 열기",
  "aria/Open Reaction Selector": "반응 선택기 열기",
  "aria/Open Thread": "스레드 열기",
  "aria/Reaction list": "반응 목록",
  "aria/Remind Me Options": "알림 옵션",
  "aria/Remove attachment": "첨부 파일 제거",
  "aria/Remove location attachment": "위치 첨부 파일 제거",
  "aria/Retry upload": "업로드 다시 시도",
  "aria/Search results": "검색 결과",
  "aria/Search results header filter button": "검색 결과 헤더 필터 버튼",
  "aria/Send": "보내기",
  "aria/Stop AI Generation": "AI 생성 중지",
  "ban-command-args": "[@사용자이름] [텍스트]",
  "ban-command-description": "사용자를 차단",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[텍스트]",
  "giphy-command-description": "채널에 무작위 GIF 게시",
  live: "라이브",
  "mute-command-args": "[@사용자이름]",
  "mute-command-description": "사용자 음소거",
  "network error": "네트워크 오류",
  replyCount_one: "답장 1개",
  replyCount_other: "{{ count }} 답장",
  "search-results-header-filter-source-button-label--channels": "채널",
  "search-results-header-filter-source-button-label--messages": "메시지",
  "search-results-header-filter-source-button-label--users": "사용자",
  searchResultsCount_one: "1개의 결과",
  searchResultsCount_other: "{{ count }}개 결과",
  "size limit": "크기 제한",
  "this content could not be displayed": "이 콘텐츠를 표시할 수 없습니다",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@사용자이름]",
  "unban-command-description": "사용자 차단 해제",
  "unknown error": "알 수 없는 오류",
  "unmute-command-args": "[@사용자이름]",
  "unmute-command-description": "사용자 음소거 해제",
  unreadMessagesSeparatorText_other: "읽지 않은 메시지 {{count}}개",
  "unsupported file type": "지원되지 않는 파일 형식",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} 그리고 {{ moreCount }}명 더",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} 그리고 {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} 그리고 {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }}개 더",
  "{{ memberCount }} members": "{{ memberCount }}명",
  "{{ user }} has been muted": "{{ user }} 음소거되었습니다",
  "{{ user }} has been unmuted": "{{ user }} 음소거가 해제되었습니다",
  "{{ user }} is typing...": "{{ user }}이(가) 입력 중입니다...",
  "{{ users }} and more are typing...": "{{ users }}와(과) 더 많은 사람들이 입력 중입니다...",
  "{{ users }} and {{ user }} are typing...": "{{ users }}와(과) {{ user }}이(가) 입력 중입니다...",
  "{{ watcherCount }} online": "{{ watcherCount }} 온라인",
  "{{count}} unread_other": "{{count}} 읽지 않음",
  "{{count}} votes_other": "{{count}} 투표",
  "🏙 Attachment...": "🏙 부착...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}}이(가) 생성함: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}}이(가) 투표함: {{pollOptionText}}",
  "📍Shared location": "📍공유된 위치"
};

// node_modules/stream-chat-react/dist/i18n/nl.json
var nl_default = {
  "Add a comment": "Voeg een opmerking toe",
  "Add an option": "Voeg een optie toe",
  "All results loaded": "Alle resultaten geladen",
  "Allow access to camera": "Toegang tot camera toestaan",
  "Allow access to microphone": "Toegang tot microfoon toestaan",
  "Allow comments": "Sta opmerkingen toe",
  "Allow option suggestion": "Sta optie-suggesties toe",
  "Also send as a direct message": "Ook als direct bericht versturen",
  "Also send in channel": "Ook in kanaal versturen",
  "An error has occurred during recording": "Er is een fout opgetreden tijdens het opnemen",
  "An error has occurred during the recording processing": "Er is een fout opgetreden tijdens de verwerking van de opname",
  Anonymous: "Anoniem",
  "Anonymous poll": "Anonieme peiling",
  Archive: "Archief",
  "Ask a question": "Stel een vraag",
  Attach: "Bijvoegen",
  "Attach files": "Bijlage toevoegen",
  "Attachment upload blocked due to {{reason}}": "Bijlage upload geblokkeerd vanwege {{reason}}",
  "Attachment upload failed due to {{reason}}": "Bijlage upload mislukt vanwege {{reason}}",
  Cancel: "Annuleer",
  "Cannot seek in the recording": "Kan niet zoeken in de opname",
  "Channel Missing": "Kanaal niet gevonden",
  Close: "Sluit",
  "Close emoji picker": "Sluit de emoji-kiezer",
  "Commands matching": "Bijpassende opdrachten",
  "Connection failure, reconnecting now...": "Verbindingsfout, opnieuw verbinden...",
  Create: "Maak",
  "Create poll": "Maak peiling",
  "Current location": "Huidige locatie",
  Delete: "Verwijder",
  Delivered: "Afgeleverd",
  "Download attachment {{ name }}": "Bijlage {{ name }} downloaden",
  "Drag your files here": "Sleep je bestanden hier naartoe",
  "Drag your files here to add to your post": "Sleep je bestanden hier naartoe om aan je bericht toe te voegen",
  "Due since {{ dueSince }}": "Vervallen sinds {{ dueSince }}",
  "Due {{ timeLeft }}": "Vervallen in {{ timeLeft }}",
  "Edit Message": "Bericht bewerken",
  "Edit message request failed": "Verzoek om bericht bewerken mislukt",
  Edited: "Bewerkt",
  "Emoji matching": "Emoji-overeenkomsten",
  "Empty message...": "Leeg bericht...",
  End: "Einde",
  "End vote": "Einde stem",
  "Enforce unique vote is enabled": "Unieke stem is ingeschakeld",
  "Error adding flag": "Fout bij toevoegen van vlag",
  "Error connecting to chat, refresh the page to try again.": "Fout bij het verbinden, ververs de pagina om nogmaals te proberen",
  "Error deleting message": "Fout bij verwijderen van bericht",
  "Error fetching reactions": "Fout bij het laden van reacties",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Fout bij markeren van bericht als ongelezen. Kan geen oudere ongelezen berichten markeren dan de nieuwste 100 kanaalberichten.",
  "Error muting a user ...": "Fout bij het muten van de gebruiker",
  "Error pinning message": "Fout bij vastzetten van bericht",
  "Error removing message pin": "Fout bij verwijderen van berichtpin",
  "Error reproducing the recording": "Fout bij het afspelen van de opname",
  "Error starting recording": "Fout bij het starten van de opname",
  "Error unmuting a user ...": "Fout bij het unmuten van de gebruiker",
  "Error uploading attachment": "Fout bij het uploaden van de bijlage",
  "Error uploading file": "Fout bij uploaden bestand",
  "Error uploading image": "Fout bij uploaden afbeelding",
  "Error · Unsent": "Fout · niet verzonden",
  "Error: {{ errorMessage }}": "Fout: {{ errorMessage }}",
  "Failed to create the poll": "Fout bij het maken van de peiling",
  "Failed to create the poll due to {{reason}}": "Peiling kon niet worden aangemaakt vanwege {{reason}}",
  "Failed to jump to the first unread message": "Niet gelukt om naar het eerste ongelezen bericht te springen",
  "Failed to mark channel as read": "Kanaal kon niet als gelezen worden gemarkeerd",
  "Failed to play the recording": "Kan de opname niet afspelen",
  "Failed to retrieve location": "Locatie kon niet worden opgehaald",
  "Failed to share location": "Locatie kon niet worden gedeeld",
  File: "Bestand",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Bestand is te groot: {{ size }}, maximale uploadgrootte is {{ limit }}",
  Flag: "Markeer",
  "Generating...": "Genereren...",
  "Latest Messages": "Laatste berichten",
  "Live for {{duration}}": "Live voor {{duration}}",
  "Live location": "Live locatie",
  "Live until {{ timestamp }}": "Live tot {{ timestamp }}",
  "Load more": "Meer laden",
  Location: "Locatie",
  "Location sharing ended": "Locatie delen beëindigd",
  "Mark as unread": "Markeren als ongelezen",
  "Maximum number of votes (from 2 to 10)": "Maximaal aantal stemmen (van 2 tot 10)",
  Menu: "Menu",
  "Message Failed · Click to try again": "Bericht mislukt, klik om het nogmaals te proberen",
  "Message Failed · Unauthorized": "Bericht mislukt, ongeautoriseerd",
  "Message deleted": "Bericht verwijderd",
  "Message has been successfully flagged": "Bericht is succesvol gemarkeerd",
  "Message pinned": "Bericht vastgezet",
  "Message was blocked by moderation policies": "Bericht is geblokkeerd door moderatiebeleid",
  "Messages have been marked unread.": "Berichten zijn gemarkeerd als ongelezen.",
  "Missing permissions to upload the attachment": "Missende toestemmingen om de bijlage te uploaden",
  "Multiple answers": "Meerdere antwoorden",
  Mute: "Dempen",
  New: "Nieuwe",
  "New Messages!": "Nieuwe Berichten!",
  "No chats here yet…": "Nog geen chats hier...",
  "No results found": "Geen resultaten gevonden",
  "Nobody will be able to vote in this poll anymore.": "Niemand kan meer stemmen in deze peiling.",
  "Nothing yet...": "Nog niets ...",
  Ok: "Oké",
  "Only numbers are allowed": "Alleen nummers zijn toegestaan",
  "Open emoji picker": "Emoji-kiezer openen",
  "Option already exists": "Optie bestaat al",
  "Option is empty": "Optie is leeg",
  Options: "Opties",
  "People matching": "Mensen die matchen",
  Pin: "Pin",
  "Pinned by": "Vastgemaakt door",
  Poll: "Peiling",
  "Poll comments": "Peiling opmerkingen",
  "Poll options": "Peiling opties",
  "Poll results": "Peiling resultaten",
  Question: "Vraag",
  "Question is required": "Vraag is verplicht",
  Quote: "Citeer",
  "Reached the vote limit. Remove an existing vote first.": "Stemlimiet bereikt. Verwijder eerst een bestaande stem.",
  "Recording format is not supported and cannot be reproduced": "Opnameformaat wordt niet ondersteund en kan niet worden gereproduceerd",
  "Remind Me": "Herinner mij",
  "Remove reminder": "Herinnering verwijderen",
  Reply: "Antwoord",
  "Reply to Message": "Antwoord op bericht",
  "Save for later": "Bewaren voor later",
  "Saved for later": "Bewaard voor later",
  Search: "Zoeken",
  "Searching...": "Zoeken...",
  "See all options ({{count}})_one": "Bekijk alle opties ({{count}})",
  "See all options ({{count}})_other": "Bekijk alle opties ({{count}})",
  "Select one": "Selecteer er een",
  "Select one or more": "Selecteer een of meer",
  "Select up to {{count}}_one": "Selecteer tot {{count}}",
  "Select up to {{count}}_other": "Selecteer tot {{count}}",
  Send: "Verstuur",
  "Send Anyway": "Toch versturen",
  "Send message request failed": "Verzoek om bericht te verzenden mislukt",
  "Sending...": "Aan het verzenden...",
  Share: "Delen",
  "Share Location": "Locatie delen",
  "Share live location for": "Live locatie delen voor",
  "Shared live location": "Gedeelde live locatie",
  "Show all": "Toon alles",
  Shuffle: "Schudden",
  "Slow Mode ON": "Langzame modus aan",
  "Some of the files will not be accepted": "Sommige bestanden zullen niet worden geaccepteerd",
  "Start typing to search": "Begin met typen om te zoeken",
  "Stop sharing": "Delen stoppen",
  Submit: "Versturen",
  "Suggest an option": "Stel een optie voor",
  "Thinking...": "Denken...",
  "This field cannot be empty or contain only spaces": "Dit veld mag niet leeg zijn of alleen spaties bevatten",
  "This message did not meet our content guidelines": "Dit bericht voldeed niet aan onze inhoudsrichtlijnen",
  "This message was deleted...": "Dit bericht was verwijderd",
  Thread: "Draadje",
  "Thread has not been found": "Draadje niet gevonden",
  "Thread reply": "Draadje antwoord",
  "To start recording, allow the camera access in your browser": "Om te beginnen met opnemen, sta toegang tot de camera toe in uw browser",
  "To start recording, allow the microphone access in your browser": "Om te beginnen met opnemen, sta toegang tot de microfoon toe in uw browser",
  "Type a number from 2 to 10": "Typ een getal van 2 tot 10",
  "Type your message": "Type je bericht",
  Unarchive: "Uit archief halen",
  Unmute: "Dempen opheffen",
  Unpin: "Losmaken",
  "Unread messages": "Ongelezen berichten",
  "Unsupported attachment": "Niet-ondersteunde bijlage",
  "Update your comment": "Werk je opmerking bij",
  'Upload type: "{{ type }}" is not allowed': 'Uploadtype: "{{ type }}" is niet toegestaan',
  "User uploaded content": "Gebruikersgeüploade inhoud",
  "View results": "Bekijk resultaten",
  "View {{count}} comments_one": "Bekijk {{count}} opmerkingen",
  "View {{count}} comments_other": "Bekijk {{count}} opmerkingen",
  "Voice message": "Spraakbericht",
  "Vote ended": "Stemmen beëindigd",
  "Wait until all attachments have uploaded": "Wacht tot alle bijlagen zijn geüpload",
  You: "Jij",
  "You have no channels currently": "Er zijn geen chats beschikbaar",
  "You've reached the maximum number of files": "Je hebt het maximale aantal bestanden bereikt",
  "aria/Attachment": "Bijlage",
  "aria/Cancel Reply": "Antwoord annuleren",
  "aria/Cancel upload": "Upload annuleren",
  "aria/Channel list": "Kanaallijst",
  "aria/Channel search results": "Zoekresultaten voor kanalen",
  "aria/Close thread": "Draad sluiten",
  "aria/Download attachment": "Bijlage downloaden",
  "aria/Emoji picker": "Emoji kiezer",
  "aria/File input": "Bestandsinvoer",
  "aria/File upload": "Bestand uploaden",
  "aria/Image input": "Afbeelding invoeren",
  "aria/Load More Channels": "Meer kanalen laden",
  "aria/Menu": "Menu",
  "aria/Message Options": "Berichtopties",
  "aria/Open Attachment Selector": "Open bijlage selector",
  "aria/Open Menu": "Menu openen",
  "aria/Open Message Actions Menu": "Menu voor berichtacties openen",
  "aria/Open Reaction Selector": "Reactiekiezer openen",
  "aria/Open Thread": "Draad openen",
  "aria/Reaction list": "Reactielijst",
  "aria/Remind Me Options": "Herinneringsopties",
  "aria/Remove attachment": "Bijlage verwijderen",
  "aria/Remove location attachment": "Locatie bijlage verwijderen",
  "aria/Retry upload": "Upload opnieuw proberen",
  "aria/Search results": "Zoekresultaten",
  "aria/Search results header filter button": "Zoekresultaten header filter knop",
  "aria/Send": "Verzenden",
  "aria/Stop AI Generation": "AI-generatie stoppen",
  "ban-command-args": "[@gebruikersnaam] [tekst]",
  "ban-command-description": "Een gebruiker verbannen",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[tekst]",
  "giphy-command-description": "Plaats een willekeurige gif in het kanaal",
  live: "live",
  "mute-command-args": "[@gebruikersnaam]",
  "mute-command-description": "Een gebruiker dempen",
  "network error": "netwerkfout",
  replyCount_one: "1 antwoord",
  replyCount_other: "{{ count }} antwoorden",
  "search-results-header-filter-source-button-label--channels": "kanalen",
  "search-results-header-filter-source-button-label--messages": "berichten",
  "search-results-header-filter-source-button-label--users": "gebruikers",
  searchResultsCount_one: "1 resultaat",
  searchResultsCount_other: "{{ count }} resultaten",
  "size limit": "grootte limiet",
  "this content could not be displayed": "Deze inhoud kan niet weergegeven worden",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@gebruikersnaam]",
  "unban-command-description": "Een gebruiker debannen",
  "unknown error": "onbekende fout",
  "unmute-command-args": "[@gebruikersnaam]",
  "unmute-command-description": "Een gebruiker niet meer dempen",
  unreadMessagesSeparatorText_one: "1 ongelezen bericht",
  unreadMessagesSeparatorText_other: "{{count}} ongelezen berichten",
  "unsupported file type": "niet-ondersteund bestandstype",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} en {{ moreCount }} meer",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} en {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} en {{ secondUser }}",
  "{{ imageCount }} more": "+{{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} deelnemers",
  "{{ user }} has been muted": "{{ user }} is gedempt",
  "{{ user }} has been unmuted": "{{ user }} is niet meer gedempt",
  "{{ user }} is typing...": "{{ user }} is aan het typen...",
  "{{ users }} and more are typing...": "{{ users }} en meer zijn aan het typen...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} en {{ user }} zijn aan het typen...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} ongelezen",
  "{{count}} unread_other": "{{count}} ongelezen",
  "{{count}} votes_one": "{{count}} stem",
  "{{count}} votes_other": "{{count}} stemmen",
  "🏙 Attachment...": "🏙 Bijlage...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} heeft gemaakt: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} heeft gestemd: {{pollOptionText}}",
  "📍Shared location": "📍Gedeelde locatie"
};

// node_modules/stream-chat-react/dist/i18n/pt.json
var pt_default = {
  "Add a comment": "Adicionar um comentário",
  "Add an option": "Adicionar uma opção",
  "All results loaded": "Todos os resultados carregados",
  "Allow access to camera": "Permitir acesso à câmera",
  "Allow access to microphone": "Permitir acesso ao microfone",
  "Allow comments": "Permitir comentários",
  "Allow option suggestion": "Permitir sugestão de opção",
  "Also send as a direct message": "Também enviar como mensagem direta",
  "Also send in channel": "Também enviar no canal",
  "An error has occurred during recording": "Ocorreu um erro durante a gravação",
  "An error has occurred during the recording processing": "Ocorreu um erro durante o processamento da gravação",
  Anonymous: "Anônimo",
  "Anonymous poll": "Enquete anônima",
  Archive: "Arquivar",
  "Ask a question": "Faça uma pergunta",
  Attach: "Anexar",
  "Attach files": "Anexar arquivos",
  "Attachment upload blocked due to {{reason}}": "Upload de anexo bloqueado devido a {{reason}}",
  "Attachment upload failed due to {{reason}}": "Upload de anexo falhou devido a {{reason}}",
  Cancel: "Cancelar",
  "Cannot seek in the recording": "Não é possível buscar na gravação",
  "Channel Missing": "Canal ausente",
  Close: "Fechar",
  "Close emoji picker": "Fechar seletor de emoji",
  "Commands matching": "Comandos correspondentes",
  "Connection failure, reconnecting now...": "Falha de conexão, reconectando agora...",
  Create: "Criar",
  "Create poll": "Criar enquete",
  "Current location": "Localização atual",
  Delete: "Excluir",
  Delivered: "Entregue",
  "Download attachment {{ name }}": "Baixar anexo {{ name }}",
  "Drag your files here": "Arraste seus arquivos aqui",
  "Drag your files here to add to your post": "Arraste seus arquivos aqui para adicionar ao seu post",
  "Due since {{ dueSince }}": "Vencido desde {{ dueSince }}",
  "Due {{ timeLeft }}": "Vence em {{ timeLeft }}",
  "Edit Message": "Editar Mensagem",
  "Edit message request failed": "O pedido de edição da mensagem falhou",
  Edited: "Editada",
  "Emoji matching": "Emoji correspondente",
  "Empty message...": "Mensagem vazia...",
  End: "Fim",
  "End vote": "Encerrar votação",
  "Enforce unique vote is enabled": "Voto único está habilitado",
  "Error adding flag": "Erro ao reportar",
  "Error connecting to chat, refresh the page to try again.": "Erro ao conectar ao bate-papo, atualize a página para tentar novamente.",
  "Error deleting message": "Erro ao deletar mensagem",
  "Error fetching reactions": "Erro ao carregar reações",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Erro ao marcar a mensagem como não lida. Não é possível marcar mensagens não lidas mais antigas do que as 100 mensagens mais recentes do canal.",
  "Error muting a user ...": "Erro ao silenciar um usuário...",
  "Error pinning message": "Erro ao fixar mensagem",
  "Error removing message pin": "Erro ao remover o PIN da mensagem",
  "Error reproducing the recording": "Erro ao reproduzir a gravação",
  "Error starting recording": "Erro ao iniciar a gravação",
  "Error unmuting a user ...": "Erro ao ativar o som de um usuário...",
  "Error uploading attachment": "Erro ao carregar o anexo",
  "Error uploading file": "Erro ao enviar arquivo",
  "Error uploading image": "Erro ao carregar a imagem",
  "Error · Unsent": "Erro · Não enviado",
  "Error: {{ errorMessage }}": "Erro: {{ errorMessage }}",
  "Failed to create the poll": "Falha ao criar a pesquisa",
  "Failed to create the poll due to {{reason}}": "Falha ao criar a enquete devido a {{reason}}",
  "Failed to jump to the first unread message": "Falha ao pular para a primeira mensagem não lida",
  "Failed to mark channel as read": "Falha ao marcar o canal como lido",
  "Failed to play the recording": "Falha ao reproduzir a gravação",
  "Failed to retrieve location": "Falha ao obter localização",
  "Failed to share location": "Falha ao compartilhar localização",
  File: "Arquivo",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "O arquivo é muito grande: {{ size }}, o tamanho máximo de upload é {{ limit }}",
  Flag: "Reportar",
  "Generating...": "Gerando...",
  "Latest Messages": "Mensagens mais recentes",
  "Live for {{duration}}": "Ao vivo por {{duration}}",
  "Live location": "Localização ao vivo",
  "Live until {{ timestamp }}": "Ao vivo até {{ timestamp }}",
  "Load more": "Carregar mais",
  Location: "Localização",
  "Location sharing ended": "Compartilhamento de localização encerrado",
  "Mark as unread": "Marcar como não lida",
  "Maximum number of votes (from 2 to 10)": "Número máximo de votos (de 2 a 10)",
  Menu: "Menu",
  "Message Failed · Click to try again": "A mensagem falhou · Clique para tentar novamente",
  "Message Failed · Unauthorized": "A mensagem falhou · não autorizado",
  "Message deleted": "Mensagem apagada",
  "Message has been successfully flagged": "A mensagem foi reportada com sucesso",
  "Message pinned": "Mensagem fixada",
  "Message was blocked by moderation policies": "A mensagem foi bloqueada pelas políticas de moderação",
  "Messages have been marked unread.": "Mensagens foram marcadas como não lidas.",
  "Missing permissions to upload the attachment": "Faltando permissões para enviar o anexo",
  "Multiple answers": "Múltiplas respostas",
  Mute: "Silenciar",
  New: "Novo",
  "New Messages!": "Novas Mensagens!",
  "No chats here yet…": "Ainda não há conversas aqui...",
  "No results found": "Nenhum resultado encontrado",
  "Nobody will be able to vote in this poll anymore.": "Ninguém mais poderá votar nesta pesquisa.",
  "Nothing yet...": "Nada ainda...",
  Ok: "Ok",
  "Only numbers are allowed": "Apenas números são permitidos",
  "Open emoji picker": "Abrir seletor de emoji",
  "Option already exists": "Opção já existe",
  "Option is empty": "A opção está vazia",
  Options: "Opções",
  "People matching": "Pessoas correspondentes",
  Pin: "Fixar",
  "Pinned by": "Fixado por",
  Poll: "Enquete",
  "Poll comments": "Comentários da pesquisa",
  "Poll options": "Opções da pesquisa",
  "Poll results": "Resultados da pesquisa",
  Question: "Pergunta",
  "Question is required": "A pergunta é obrigatória",
  Quote: "Citar",
  "Reached the vote limit. Remove an existing vote first.": "Limite de votos atingido. Remova um voto existente primeiro.",
  "Recording format is not supported and cannot be reproduced": "Formato de gravação não é suportado e não pode ser reproduzido",
  "Remind Me": "Lembrar-me",
  "Remove reminder": "Remover lembrete",
  Reply: "Responder",
  "Reply to Message": "Responder à mensagem",
  "Save for later": "Salvar para depois",
  "Saved for later": "Salvo para depois",
  Search: "Buscar",
  "Searching...": "Buscando...",
  "See all options ({{count}})_many": "Ver todas as opções ({{count}})",
  "See all options ({{count}})_one": "Ver todas as opções ({{count}})",
  "See all options ({{count}})_other": "Ver todas as opções ({{count}})",
  "Select one": "Selecionar um",
  "Select one or more": "Selecionar um ou mais",
  "Select up to {{count}}_many": "Selecionar até {{count}}",
  "Select up to {{count}}_one": "Selecionar até {{count}}",
  "Select up to {{count}}_other": "Selecionar até {{count}}",
  Send: "Enviar",
  "Send Anyway": "Enviar de qualquer forma",
  "Send message request failed": "O pedido de envio da mensagem falhou",
  "Sending...": "Enviando...",
  Share: "Compartilhar",
  "Share Location": "Compartilhar localização",
  "Share live location for": "Compartilhar localização ao vivo por",
  "Shared live location": "Localização ao vivo compartilhada",
  "Show all": "Mostrar tudo",
  Shuffle: "Embaralhar",
  "Slow Mode ON": "Modo lento LIGADO",
  "Some of the files will not be accepted": "Alguns arquivos não serão aceitos",
  "Start typing to search": "Comece a digitar para pesquisar",
  "Stop sharing": "Parar de compartilhar",
  Submit: "Enviar",
  "Suggest an option": "Sugerir uma opção",
  "Thinking...": "Pensando...",
  "This field cannot be empty or contain only spaces": "Este campo não pode estar vazio ou conter apenas espaços",
  "This message did not meet our content guidelines": "Esta mensagem não corresponde às nossas diretrizes de conteúdo",
  "This message was deleted...": "Esta mensagem foi excluída...",
  Thread: "Fio",
  "Thread has not been found": "Fio não encontrado",
  "Thread reply": "Resposta no fio",
  "To start recording, allow the camera access in your browser": "Para começar a gravar, permita o acesso à câmera no seu navegador",
  "To start recording, allow the microphone access in your browser": "Para começar a gravar, permita o acesso ao microfone no seu navegador",
  "Type a number from 2 to 10": "Digite um número de 2 a 10",
  "Type your message": "Digite sua mensagem",
  Unarchive: "Desarquivar",
  Unmute: "Ativar som",
  Unpin: "Desfixar",
  "Unread messages": "Mensagens não lidas",
  "Unsupported attachment": "Anexo não suportado",
  "Update your comment": "Atualizar seu comentário",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de upload: "{{ type }}" não é permitido',
  "User uploaded content": "Conteúdo enviado pelo usuário",
  "View results": "Ver resultados",
  "View {{count}} comments_many": "Ver {{count}} comentários",
  "View {{count}} comments_one": "Ver {{count}} comentário",
  "View {{count}} comments_other": "Ver {{count}} comentários",
  "Voice message": "Mensagem de voz",
  "Vote ended": "Votação encerrada",
  "Wait until all attachments have uploaded": "Espere até que todos os anexos tenham sido carregados",
  You: "Você",
  "You have no channels currently": "Você não tem canais atualmente",
  "You've reached the maximum number of files": "Você atingiu o número máximo de arquivos",
  "aria/Attachment": "Anexo",
  "aria/Cancel Reply": "Cancelar resposta",
  "aria/Cancel upload": "Cancelar upload",
  "aria/Channel list": "Lista de canais",
  "aria/Channel search results": "Resultados de pesquisa de canais",
  "aria/Close thread": "Fechar tópico",
  "aria/Download attachment": "Baixar anexo",
  "aria/Emoji picker": "Seletor de emojis",
  "aria/File input": "Entrada de arquivo",
  "aria/File upload": "Carregar arquivo",
  "aria/Image input": "Entrada de imagem",
  "aria/Load More Channels": "Carregar mais canais",
  "aria/Menu": "Menu",
  "aria/Message Options": "Opções de mensagem",
  "aria/Open Attachment Selector": "Abrir seletor de anexos",
  "aria/Open Menu": "Abrir menu",
  "aria/Open Message Actions Menu": "Abrir menu de ações de mensagem",
  "aria/Open Reaction Selector": "Abrir seletor de reações",
  "aria/Open Thread": "Abrir tópico",
  "aria/Reaction list": "Lista de reações",
  "aria/Remind Me Options": "Opções de lembrete",
  "aria/Remove attachment": "Remover anexo",
  "aria/Remove location attachment": "Remover anexo de localização",
  "aria/Retry upload": "Tentar upload novamente",
  "aria/Search results": "Resultados da pesquisa",
  "aria/Search results header filter button": "Botão de filtro do cabeçalho dos resultados da pesquisa",
  "aria/Send": "Enviar",
  "aria/Stop AI Generation": "Parar geração de IA",
  "ban-command-args": "[@nomedeusuário] [texto]",
  "ban-command-description": "Banir um usuário",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Postar um gif aleatório no canal",
  live: "ao vivo",
  "mute-command-args": "[@nomedeusuário]",
  "mute-command-description": "Silenciar um usuário",
  "network error": "erro de rede",
  replyCount_many: "{{ count }} respostas",
  replyCount_one: "1 resposta",
  replyCount_other: "{{ count }} respostas",
  "search-results-header-filter-source-button-label--channels": "canais",
  "search-results-header-filter-source-button-label--messages": "mensagens",
  "search-results-header-filter-source-button-label--users": "usuários",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "size limit": "limite de tamanho",
  "this content could not be displayed": "este conteúdo não pôde ser exibido",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@nomedeusuário]",
  "unban-command-description": "Desbanir um usuário",
  "unknown error": "erro desconhecido",
  "unmute-command-args": "[@nomedeusuário]",
  "unmute-command-description": "Retirar o silenciamento de um usuário",
  unreadMessagesSeparatorText_many: "{{count}} mensagens não lidas",
  unreadMessagesSeparatorText_one: "1 mensagem não lida",
  unreadMessagesSeparatorText_other: "{{count}} mensagens não lidas",
  "unsupported file type": "tipo de arquivo não suportado",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e mais {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mais",
  "{{ memberCount }} members": "{{ memberCount }} membros",
  "{{ user }} has been muted": "{{ user }} foi silenciado",
  "{{ user }} has been unmuted": "{{ user }} foi reativado",
  "{{ user }} is typing...": "{{ user }} está digitando...",
  "{{ users }} and more are typing...": "{{ users }} e mais estão digitando...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} e {{ user }} estão digitando...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_many": "{{count}} não lidos",
  "{{count}} unread_one": "{{count}} não lido",
  "{{count}} unread_other": "{{count}} não lidos",
  "{{count}} votes_many": "{{count}} votos",
  "{{count}} votes_one": "{{count}} voto",
  "{{count}} votes_other": "{{count}} votos",
  "🏙 Attachment...": "🏙 Anexo...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} criou: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} votou: {{pollOptionText}}",
  "📍Shared location": "📍Localização compartilhada"
};

// node_modules/stream-chat-react/dist/i18n/ru.json
var ru_default = {
  "Add a comment": "Добавить комментарий",
  "Add an option": "Добавить вариант",
  "All results loaded": "Все результаты загружены",
  "Allow access to camera": "Разрешить доступ к камере",
  "Allow access to microphone": "Разрешить доступ к микрофону",
  "Allow comments": "Разрешить комментарии",
  "Allow option suggestion": "Разрешить предложение вариантов",
  "Also send as a direct message": "Также отправить как личное сообщение",
  "Also send in channel": "Также отправить в канал",
  "An error has occurred during recording": "Произошла ошибка во время записи",
  "An error has occurred during the recording processing": "Произошла ошибка во время обработки записи",
  Anonymous: "Аноним",
  "Anonymous poll": "Анонимный опрос",
  Archive: "Aрхивировать",
  "Ask a question": "Задать вопрос",
  Attach: "Прикрепить",
  "Attach files": "Прикрепить файлы",
  "Attachment upload blocked due to {{reason}}": "Загрузка вложения заблокирована из-за {{reason}}",
  "Attachment upload failed due to {{reason}}": "Загрузка вложения не удалась из-за {{reason}}",
  Cancel: "Отмена",
  "Cannot seek in the recording": "Невозможно осуществить поиск в записи",
  "Channel Missing": "Канал не найден",
  Close: "Закрыть",
  "Close emoji picker": "Закрыть окно выбора смайлов",
  "Commands matching": "Соответствие команд",
  "Connection failure, reconnecting now...": "Ошибка соединения, переподключение...",
  Create: "Создать",
  "Create poll": "Создать опрос",
  "Current location": "Текущее местоположение",
  Delete: "Удалить",
  Delivered: "Отправлено",
  "Download attachment {{ name }}": "Скачать вложение {{ name }}",
  "Drag your files here": "Перетащите ваши файлы сюда",
  "Drag your files here to add to your post": "Перетащите ваши файлы сюда, чтобы добавить их в ваш пост",
  "Due since {{ dueSince }}": "Просрочено с {{ dueSince }}",
  "Due {{ timeLeft }}": "Просрочено в {{ timeLeft }}",
  "Edit Message": "Редактировать сообщение",
  "Edit message request failed": "Не удалось изменить запрос сообщения",
  Edited: "Отредактировано",
  "Emoji matching": "Соответствие эмодзи",
  "Empty message...": "Пустое сообщение...",
  End: "Конец",
  "End vote": "Закончить голосование",
  "Enforce unique vote is enabled": "Уникальное голосование включено",
  "Error adding flag": "Ошибка добавления флага",
  "Error connecting to chat, refresh the page to try again.": "Ошибка подключения к чату, обновите страницу чтобы попробовать снова.",
  "Error deleting message": "Ошибка при удалении сообщения",
  "Error fetching reactions": "Ошибка при загрузке реакций",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Ошибка при отметке сообщения как непрочитанного. Невозможно отметить как непрочитанные сообщения старше последних 100 сообщений в канале.",
  "Error muting a user ...": "Ошибка отключения уведомлений от пользователя...",
  "Error pinning message": "Сообщение об ошибке при закреплении",
  "Error removing message pin": "Ошибка при удалении булавки сообщения",
  "Error reproducing the recording": "Ошибка воспроизведения записи",
  "Error starting recording": "Ошибка при запуске записи",
  "Error unmuting a user ...": "Ошибка включения уведомлений...",
  "Error uploading attachment": "Ошибка при загрузке вложения",
  "Error uploading file": "Ошибка при загрузке файла",
  "Error uploading image": "Ошибка загрузки изображения",
  "Error · Unsent": "Ошибка · Не отправлено",
  "Error: {{ errorMessage }}": "Ошибка: {{ errorMessage }}",
  "Failed to create the poll": "Не удалось создать опрос",
  "Failed to create the poll due to {{reason}}": "Не удалось создать опрос из-за {{reason}}",
  "Failed to jump to the first unread message": "Не удалось перейти к первому непрочитанному сообщению",
  "Failed to mark channel as read": "Не удалось пометить канал как прочитанный",
  "Failed to play the recording": "Не удалось воспроизвести запись",
  "Failed to retrieve location": "Не удалось получить местоположение",
  "Failed to share location": "Не удалось поделиться местоположением",
  File: "Файл",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Файл слишком большой: {{ size }}, максимальный размер загрузки составляет {{ limit }}",
  Flag: "Пожаловаться",
  "Generating...": "Генерирую...",
  "Latest Messages": "Последние сообщения",
  "Live for {{duration}}": "В прямом эфире {{duration}}",
  "Live location": "Местоположение в прямом эфире",
  "Live until {{ timestamp }}": "В прямом эфире до {{ timestamp }}",
  "Load more": "Загрузить больше",
  Location: "Местоположение",
  "Location sharing ended": "Обмен местоположением завершен",
  "Mark as unread": "Отметить как непрочитанное",
  "Maximum number of votes (from 2 to 10)": "Максимальное количество голосов (от 2 до 10)",
  Menu: "Меню",
  "Message Failed · Click to try again": "Ошибка отправки сообщения · Нажмите чтобы повторить",
  "Message Failed · Unauthorized": "Ошибка отправки сообщения · Неавторизованный",
  "Message deleted": "Сообщение удалено",
  "Message has been successfully flagged": "Жалоба на сообщение была принята",
  "Message pinned": "Сообщение закреплено",
  "Message was blocked by moderation policies": "Сообщение было заблокировано модерацией",
  "Messages have been marked unread.": "Сообщения были отмечены как непрочитанные.",
  "Missing permissions to upload the attachment": "Отсутствуют разрешения для загрузки вложения",
  "Multiple answers": "Несколько ответов",
  Mute: "Отключить уведомления",
  New: "Новые",
  "New Messages!": "Новые сообщения!",
  "No chats here yet…": "Здесь еще нет чатов...",
  "No results found": "Результаты не найдены",
  "Nobody will be able to vote in this poll anymore.": "Никто больше не сможет голосовать в этом опросе.",
  "Nothing yet...": "Пока ничего нет...",
  Ok: "Ок",
  "Only numbers are allowed": "Разрешены только цифры",
  "Open emoji picker": "Открыть выбор смайлов",
  "Option already exists": "Вариант уже существует",
  "Option is empty": "Вариант пуст",
  Options: "Варианты",
  "People matching": "Совпадающие люди",
  Pin: "Закрепить",
  "Pinned by": "Закреплено",
  Poll: "Опрос",
  "Poll comments": "Комментарии к опросу",
  "Poll options": "Опции опроса",
  "Poll results": "Результаты опроса",
  Question: "Вопрос",
  "Question is required": "Вопрос обязателен",
  Quote: "Цитировать",
  "Reached the vote limit. Remove an existing vote first.": "Достигнут лимит голосов. Сначала удалите существующий голос.",
  "Recording format is not supported and cannot be reproduced": "Формат записи не поддерживается и не может быть воспроизведен",
  "Remind Me": "Напомнить мне",
  "Remove reminder": "Удалить напоминание",
  Reply: "Ответить",
  "Reply to Message": "Ответить на сообщение",
  "Save for later": "Сохранить на потом",
  "Saved for later": "Сохранено на потом",
  Search: "Поиск",
  "Searching...": "Ищем...",
  "See all options ({{count}})_few": "Посмотреть все варианты ({{count}})",
  "See all options ({{count}})_many": "Посмотреть все варианты ({{count}})",
  "See all options ({{count}})_one": "Посмотреть все варианты ({{count}})",
  "See all options ({{count}})_other": "Посмотреть все варианты ({{count}})",
  "Select one": "Выберите один",
  "Select one or more": "Выберите один или несколько",
  "Select up to {{count}}_few": "Выберите до {{count}}",
  "Select up to {{count}}_many": "Выберите до {{count}}",
  "Select up to {{count}}_one": "Выберите до {{count}}",
  "Select up to {{count}}_other": "Выберите до {{count}}",
  Send: "Отправить",
  "Send Anyway": "Мне всё равно, отправить",
  "Send message request failed": "Не удалось отправить запрос на отправку сообщения",
  "Sending...": "Отправка...",
  Share: "Поделиться",
  "Share Location": "Поделиться местоположением",
  "Share live location for": "Поделиться местоположением в прямом эфире на",
  "Shared live location": "Общее местоположение в прямом эфире",
  "Show all": "Показать все",
  Shuffle: "Перемешать",
  "Slow Mode ON": "Медленный режим включен",
  "Some of the files will not be accepted": "Некоторые файлы не будут приняты",
  "Start typing to search": "Начните вводить для поиска",
  "Stop sharing": "Прекратить делиться",
  Submit: "Отправить",
  "Suggest an option": "Предложить вариант",
  "Thinking...": "Думаю...",
  "This field cannot be empty or contain only spaces": "Это поле не может быть пустым или содержать только пробелы",
  "This message did not meet our content guidelines": "Сообщение не соответствует правилам",
  "This message was deleted...": "Сообщение было удалено...",
  Thread: "Ветка",
  "Thread has not been found": "Ветка не найдена",
  "Thread reply": "Ответ в ветке",
  "To start recording, allow the camera access in your browser": "Для начала записи разрешите доступ к камере в вашем браузере",
  "To start recording, allow the microphone access in your browser": "Для начала записи разрешите доступ к микрофону в вашем браузере",
  "Type a number from 2 to 10": "Введите число от 2 до 10",
  "Type your message": "Ваше сообщение",
  Unarchive: "Удалить из архива",
  Unmute: "Включить уведомления",
  Unpin: "Открепить",
  "Unread messages": "Непрочитанные сообщения",
  "Unsupported attachment": "Неподдерживаемое вложение",
  "Update your comment": "Обновите ваш комментарий",
  'Upload type: "{{ type }}" is not allowed': 'Тип загрузки: "{{ type }}" не разрешен',
  "User uploaded content": "Пользователь загрузил контент",
  "View results": "Посмотреть результаты",
  "View {{count}} comments_few": "Просмотреть {{count}} комментариев",
  "View {{count}} comments_many": "Просмотреть {{count}} комментариев",
  "View {{count}} comments_one": "Просмотреть {{count}} комментарий",
  "View {{count}} comments_other": "Просмотреть {{count}} комментариев",
  "Voice message": "Голосовое сообщение",
  "Vote ended": "Голосование завершено",
  "Wait until all attachments have uploaded": "Подождите, пока все вложения загрузятся",
  You: "Вы",
  "You have no channels currently": "У вас нет каналов в данный момент",
  "You've reached the maximum number of files": "Вы достигли максимального количества файлов",
  "aria/Attachment": "Вложение",
  "aria/Cancel Reply": "Отменить ответ",
  "aria/Cancel upload": "Отменить загрузку",
  "aria/Channel list": "Список каналов",
  "aria/Channel search results": "Результаты поиска по каналам",
  "aria/Close thread": "Закрыть тему",
  "aria/Download attachment": "Скачать вложение",
  "aria/Emoji picker": "Выбор эмодзи",
  "aria/File input": "Ввод файла",
  "aria/File upload": "Загрузка файла",
  "aria/Image input": "Ввод изображения",
  "aria/Load More Channels": "Загрузить больше каналов",
  "aria/Menu": "Меню",
  "aria/Message Options": "Параметры сообщения",
  "aria/Open Attachment Selector": "Открыть выбор вложений",
  "aria/Open Menu": "Открыть меню",
  "aria/Open Message Actions Menu": "Открыть меню действий с сообщениями",
  "aria/Open Reaction Selector": "Открыть селектор реакций",
  "aria/Open Thread": "Открыть тему",
  "aria/Reaction list": "Список реакций",
  "aria/Remind Me Options": "Параметры напоминания",
  "aria/Remove attachment": "Удалить вложение",
  "aria/Remove location attachment": "Удалить вложение местоположения",
  "aria/Retry upload": "Повторить загрузку",
  "aria/Search results": "Результаты поиска",
  "aria/Search results header filter button": "Кнопка фильтра заголовка результатов поиска",
  "aria/Send": "Отправить",
  "aria/Stop AI Generation": "Остановить генерацию ИИ",
  "ban-command-args": "[@имяпользователя] [текст]",
  "ban-command-description": "Заблокировать пользователя",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[текст]",
  "giphy-command-description": "Опубликовать случайную GIF-анимацию в канале",
  live: "В прямом эфире",
  "mute-command-args": "[@имяпользователя]",
  "mute-command-description": "Выключить микрофон у пользователя",
  "network error": "ошибка сети",
  replyCount_few: "{{ count }} ответов",
  replyCount_many: "{{ count }} ответов",
  replyCount_one: "1 ответ",
  replyCount_other: "{{ count }} ответов",
  "search-results-header-filter-source-button-label--channels": "каналы",
  "search-results-header-filter-source-button-label--messages": "сообщения",
  "search-results-header-filter-source-button-label--users": "пользователи",
  searchResultsCount_few: "{{ count }} результата",
  searchResultsCount_many: "{{ count }} результатов",
  searchResultsCount_one: "1 результат",
  searchResultsCount_other: "{{ count }} результатов",
  "size limit": "ограничение размера",
  "this content could not be displayed": "Этот контент не может быть отображен в данный момент",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@имяпользователя]",
  "unban-command-description": "Разблокировать пользователя",
  "unknown error": "неизвестная ошибка",
  "unmute-command-args": "[@имяпользователя]",
  "unmute-command-description": "Включить микрофон у пользователя",
  unreadMessagesSeparatorText_few: "1 непрочитанное сообщения",
  unreadMessagesSeparatorText_many: "{{count}} непрочитанных сообщений",
  unreadMessagesSeparatorText_one: "1 непрочитанное сообщение",
  unreadMessagesSeparatorText_other: "{{count}} непрочитанных сообщений",
  "unsupported file type": "неподдерживаемый тип файла",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} и {{ moreCount }} еще",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} и {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} и {{ secondUser }}",
  "{{ imageCount }} more": "Ещё {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} участников",
  "{{ user }} has been muted": "Вы отписались от уведомлений от {{ user }}",
  "{{ user }} has been unmuted": "Уведомления от {{ user }} были включены",
  "{{ user }} is typing...": "{{ user }} печатает...",
  "{{ users }} and more are typing...": "{{ users }} и другие печатают...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} и {{ user }} печатают...",
  "{{ watcherCount }} online": "{{ watcherCount }} в сети",
  "{{count}} unread_few": "{{count}} непрочитанных",
  "{{count}} unread_many": "{{count}} непрочитанных",
  "{{count}} unread_one": "{{count}} непрочитанное",
  "{{count}} unread_other": "{{count}} непрочитанных",
  "{{count}} votes_few": "{{count}} голоса",
  "{{count}} votes_many": "{{count}} голосов",
  "{{count}} votes_one": "{{count}} голос",
  "{{count}} votes_other": "{{count}} голосов",
  "🏙 Attachment...": "🏙 Вложение...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} создал(а): {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} проголосовал(а): {{pollOptionText}}",
  "📍Shared location": "📍Общее местоположение"
};

// node_modules/stream-chat-react/dist/i18n/tr.json
var tr_default = {
  "Add a comment": "Yorum ekle",
  "Add an option": "Bir seçenek ekle",
  "All results loaded": "Tüm sonuçlar yüklendi",
  "Allow access to camera": "Kameraya erişime izin ver",
  "Allow access to microphone": "Mikrofona erişime izin ver",
  "Allow comments": "Yorumlara izin ver",
  "Allow option suggestion": "Seçenek önerisine izin ver",
  "Also send as a direct message": "Ayrıca doğrudan mesaj olarak gönder",
  "Also send in channel": "Ayrıca kanala gönder",
  "An error has occurred during recording": "Kayıt sırasında bir hata oluştu",
  "An error has occurred during the recording processing": "Kayıt işlemi sırasında bir hata oluştu",
  Anonymous: "Anonim",
  "Anonymous poll": "Anonim anket",
  Archive: "Arşivle",
  "Ask a question": "Bir soru sor",
  Attach: "Ekle",
  "Attach files": "Dosya ekle",
  "Attachment upload blocked due to {{reason}}": "{{reason}} nedeniyle ek yükleme engellendi",
  "Attachment upload failed due to {{reason}}": "{{reason}} nedeniyle ek yükleme başarısız oldu",
  Cancel: "İptal",
  "Cannot seek in the recording": "Kayıtta arama yapılamıyor",
  "Channel Missing": "Kanal bulunamıyor",
  Close: "Kapat",
  "Close emoji picker": "Emoji seçiciyi kapat",
  "Commands matching": "Eşleşen komutlar",
  "Connection failure, reconnecting now...": "Bağlantı hatası, tekrar bağlanılıyor...",
  Create: "Oluştur",
  "Create poll": "Anket oluştur",
  "Current location": "Mevcut konum",
  Delete: "Sil",
  Delivered: "İletildi",
  "Download attachment {{ name }}": "Ek {{ name }}'i indir",
  "Drag your files here": "Dosyalarınızı buraya sürükleyin",
  "Drag your files here to add to your post": "Gönderinize eklemek için dosyalarınızı buraya sürükleyin",
  "Due since {{ dueSince }}": "{{ dueSince }}'den beri süresi dolmuş",
  "Due {{ timeLeft }}": "{{ timeLeft }} içinde süresi dolacak",
  "Edit Message": "Mesajı Düzenle",
  "Edit message request failed": "Mesaj düzenleme isteği başarısız oldu",
  Edited: "Düzenlendi",
  "Emoji matching": "Emoji eşleştirme",
  "Empty message...": "Boş mesaj...",
  End: "Son",
  "End vote": "Oyu bitir",
  "Enforce unique vote is enabled": "Benzersiz oy etkinleştirildi",
  "Error adding flag": "Bayrak eklenirken hata oluştu",
  "Error connecting to chat, refresh the page to try again.": "Bağlantı hatası, sayfayı yenileyip tekrar deneyin.",
  "Error deleting message": "Mesaj silinirken hata oluştu",
  "Error fetching reactions": "Reaksiyonlar alınırken hata oluştu",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Mesajı okunmamış olarak işaretleme hatası. En yeni 100 kanal mesajından daha eski okunmamış mesajları işaretleme yapılamaz.",
  "Error muting a user ...": "Kullanıcıyı sessize alırken hata oluştu ...",
  "Error pinning message": "Mesaj sabitlenirken hata oluştu",
  "Error removing message pin": "Mesaj PIN'i kaldırılırken hata oluştu",
  "Error reproducing the recording": "Kaydı yeniden üretme hatası",
  "Error starting recording": "Kayıt başlatılırken hata oluştu",
  "Error unmuting a user ...": "Kullanıcının sesini açarken hata oluştu ...",
  "Error uploading attachment": "Ek yüklenirken hata oluştu",
  "Error uploading file": "Dosya yüklenirken hata oluştu",
  "Error uploading image": "Resmi yüklerken hata",
  "Error · Unsent": "Hata · Gönderilemedi",
  "Error: {{ errorMessage }}": "Hata: {{ errorMessage }}",
  "Failed to create the poll": "Anket oluşturulurken hata oluştu",
  "Failed to create the poll due to {{reason}}": "{{reason}} nedeniyle anket oluşturulamadı",
  "Failed to jump to the first unread message": "İlk okunmamış mesaja atlamada hata oluştu",
  "Failed to mark channel as read": "Kanalı okundu olarak işaretleme başarısız oldu",
  "Failed to play the recording": "Kayıt oynatılamadı",
  "Failed to retrieve location": "Konum alınamadı",
  "Failed to share location": "Konum paylaşılamadı",
  File: "Dosya",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Dosya çok büyük: {{ size }}, maksimum yükleme boyutu {{ limit }}",
  Flag: "Bayrak",
  "Generating...": "Oluşturuluyor...",
  "Latest Messages": "Son Mesajlar",
  "Live for {{duration}}": "{{duration}} boyunca canlı",
  "Live location": "Canlı konum",
  "Live until {{ timestamp }}": "{{ timestamp }}'e kadar canlı",
  "Load more": "Daha fazla yükle",
  Location: "Konum",
  "Location sharing ended": "Konum paylaşımı sona erdi",
  "Mark as unread": "Okunmamış olarak işaretle",
  "Maximum number of votes (from 2 to 10)": "Maksimum oy sayısı (2 ile 10 arası)",
  Menu: "Menü",
  "Message Failed · Click to try again": "Mesaj Başarısız · Tekrar denemek için tıklayın",
  "Message Failed · Unauthorized": "Mesaj Başarısız · Yetkisiz",
  "Message deleted": "Mesaj silindi",
  "Message has been successfully flagged": "Mesaj başarıyla bayraklandı",
  "Message pinned": "Mesaj sabitlendi",
  "Message was blocked by moderation policies": "Mesaj moderasyon politikaları tarafından engellendi",
  "Messages have been marked unread.": "Mesajlar okunmamış olarak işaretlendi.",
  "Missing permissions to upload the attachment": "Ek yüklemek için izinler eksik",
  "Multiple answers": "Çoklu cevaplar",
  Mute: "Sessiz",
  New: "Yeni",
  "New Messages!": "Yeni Mesajlar!",
  "No chats here yet…": "Henüz burada sohbet yok...",
  "No results found": "Sonuç bulunamadı",
  "Nobody will be able to vote in this poll anymore.": "Artık bu ankette kimse oy kullanamayacak.",
  "Nothing yet...": "Şimdilik hiçbir şey...",
  Ok: "Tamam",
  "Only numbers are allowed": "Sadece sayılar kullanılabilir",
  "Open emoji picker": "Emoji klavyesini aç",
  "Option already exists": "Seçenek zaten mevcut",
  "Option is empty": "Seçenek boş",
  Options: "Seçenekler",
  "People matching": "Eşleşen kişiler",
  Pin: "Sabitle",
  "Pinned by": "Sabitleyen",
  Poll: "Anket",
  "Poll comments": "Anket yorumları",
  "Poll options": "Anket seçenekleri",
  "Poll results": "Anket sonuçları",
  Question: "Soru",
  "Question is required": "Soru gereklidir",
  Quote: "Alıntı",
  "Reached the vote limit. Remove an existing vote first.": "Oylama sınırına ulaşıldı. Önce mevcut bir oyu kaldırın.",
  "Recording format is not supported and cannot be reproduced": "Kayıt formatı desteklenmiyor ve çoğaltılamıyor",
  "Remind Me": "Hatırlat",
  "Remove reminder": "Hatırlatıcıyı kaldır",
  Reply: "Cevapla",
  "Reply to Message": "Mesaja Cevapla",
  "Save for later": "Daha sonra kaydet",
  "Saved for later": "Daha sonra kaydedildi",
  Search: "Arama",
  "Searching...": "Aranıyor...",
  "See all options ({{count}})_one": "Tüm seçenekleri göster ({{count}})",
  "See all options ({{count}})_other": "Tüm seçenekleri göster ({{count}})",
  "Select one": "Birini seçin",
  "Select one or more": "Bir veya daha fazlasını seçin",
  "Select up to {{count}}_one": "En fazla {{count}}'yi seçin",
  "Select up to {{count}}_other": "En fazla {{count}}'yi seçin",
  Send: "Gönder",
  "Send Anyway": "Yine de gönder",
  "Send message request failed": "Mesaj gönderme isteği başarısız oldu",
  "Sending...": "Gönderiliyor...",
  Share: "Paylaş",
  "Share Location": "Konum Paylaş",
  "Share live location for": "Canlı konum paylaş",
  "Shared live location": "Paylaşılan canlı konum",
  "Show all": "Tümünü göster",
  Shuffle: "Karıştır",
  "Slow Mode ON": "Yavaş Mod Açık",
  "Some of the files will not be accepted": "Bazı dosyalar kabul edilmeyecek",
  "Start typing to search": "Aramak için yazmaya başlayın",
  "Stop sharing": "Paylaşımı durdur",
  Submit: "Gönder",
  "Suggest an option": "Bir seçenek önerin",
  "Thinking...": "Düşünüyor...",
  "This field cannot be empty or contain only spaces": "Bu alan boş olamaz veya sadece boşluk içeremez",
  "This message did not meet our content guidelines": "Bu mesaj içerik yönergelerimize uygun değil",
  "This message was deleted...": "Bu mesaj silindi...",
  Thread: "Konu",
  "Thread has not been found": "Konu bulunamadı",
  "Thread reply": "Konu yanıtı",
  "To start recording, allow the camera access in your browser": "Kayıt yapmaya başlamak için tarayıcınızda kameraya erişime izin verin",
  "To start recording, allow the microphone access in your browser": "Kayıt yapmaya başlamak için tarayıcınızda mikrofona erişime izin verin",
  "Type a number from 2 to 10": "2 ile 10 arasında bir sayı yazın",
  "Type your message": "Mesajınızı yazın",
  Unarchive: "Arşivden çıkar",
  Unmute: "Sesini aç",
  Unpin: "Sabitlemeyi kaldır",
  "Unread messages": "Okunmamış mesajlar",
  "Unsupported attachment": "Desteklenmeyen ek",
  "Update your comment": "Yorumunuzu güncelleyin",
  'Upload type: "{{ type }}" is not allowed': 'Yükleme türü: "{{ type }}" izin verilmez',
  "User uploaded content": "Kullanıcı tarafından yüklenen içerik",
  "View results": "Sonuçları görüntüle",
  "View {{count}} comments_one": "{{count}} yorumu görüntüle",
  "View {{count}} comments_other": "{{count}} yorumu görüntüle",
  "Voice message": "Sesli mesaj",
  "Vote ended": "Oylama sona erdi",
  "Wait until all attachments have uploaded": "Tüm ekler yüklenene kadar bekleyin",
  You: "Sen",
  "You have no channels currently": "Henüz kanalınız yok",
  "You've reached the maximum number of files": "Maksimum dosya sayısına ulaştınız",
  "aria/Attachment": "Ek",
  "aria/Cancel Reply": "Cevabı İptal Et",
  "aria/Cancel upload": "Yüklemeyi İptal Et",
  "aria/Channel list": "Kanal listesi",
  "aria/Channel search results": "Kanal arama sonuçları",
  "aria/Close thread": "Konuyu kapat",
  "aria/Download attachment": "Ek indir",
  "aria/Emoji picker": "Emoji seçici",
  "aria/File input": "Dosya girişi",
  "aria/File upload": "Dosya yükleme",
  "aria/Image input": "Resim girişi",
  "aria/Load More Channels": "Daha Fazla Kanal Yükle",
  "aria/Menu": "Menü",
  "aria/Message Options": "Mesaj Seçenekleri",
  "aria/Open Attachment Selector": "Ek Seçiciyi Aç",
  "aria/Open Menu": "Menüyü Aç",
  "aria/Open Message Actions Menu": "Mesaj İşlemleri Menüsünü Aç",
  "aria/Open Reaction Selector": "Tepki Seçiciyi Aç",
  "aria/Open Thread": "Konuyu Aç",
  "aria/Reaction list": "Tepki listesi",
  "aria/Remind Me Options": "Hatırlatma seçenekleri",
  "aria/Remove attachment": "Eki kaldır",
  "aria/Remove location attachment": "Konum ekini kaldır",
  "aria/Retry upload": "Yüklemeyi Tekrar Dene",
  "aria/Search results": "Arama sonuçları",
  "aria/Search results header filter button": "Arama sonuçları başlık filtre düğmesi",
  "aria/Send": "Gönder",
  "aria/Stop AI Generation": "Yapay Zeka Üretimini Durdur",
  "ban-command-args": "[@kullanıcıadı] [metin]",
  "ban-command-description": "Bir kullanıcıyı yasakla",
  "duration/Message reminder": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Remind Me": "{{ milliseconds | durationFormatter(withSuffix: true) }}",
  "duration/Share Location": "{{ milliseconds | durationFormatter }}",
  "giphy-command-args": "[metin]",
  "giphy-command-description": "Rastgele bir gif'i kanala gönder",
  live: "canlı",
  "mute-command-args": "[@kullanıcıadı]",
  "mute-command-description": "Bir kullanıcının sesini kapat",
  "network error": "ağ hatası",
  replyCount_one: "1 cevap",
  replyCount_other: "{{ count }} cevap",
  "search-results-header-filter-source-button-label--channels": "kanallar",
  "search-results-header-filter-source-button-label--messages": "mesajlar",
  "search-results-header-filter-source-button-label--users": "kullanıcılar",
  searchResultsCount_one: "1 sonuç",
  searchResultsCount_other: "{{ count }} sonuç",
  "size limit": "boyut sınırı",
  "this content could not be displayed": "bu içerik gösterilemiyor",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/LiveLocation": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/ReminderNotification": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "translationBuilderTopic/notification": "{{value, notification}}",
  "unban-command-args": "[@kullanıcıadı]",
  "unban-command-description": "Bir kullanıcının yasağını kaldır",
  "unknown error": "bilinmeyen hata",
  "unmute-command-args": "[@kullanıcıadı]",
  "unmute-command-description": "Bir kullanıcının sesini aç",
  unreadMessagesSeparatorText_one: "1 okunmamış mesaj",
  unreadMessagesSeparatorText_other: "{{count}} okunmamış mesaj",
  "unsupported file type": "desteklenmeyen dosya türü",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} ve {{ moreCount }} daha",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} ve {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} ve {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} adet daha",
  "{{ memberCount }} members": "{{ memberCount }} üye",
  "{{ user }} has been muted": "{{ user }} sessize alındı",
  "{{ user }} has been unmuted": "{{ user }} sesi açıldı",
  "{{ user }} is typing...": "{{ user }} yazıyor...",
  "{{ users }} and more are typing...": "{{ users }} ve diğerleri yazıyor...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} ve {{ user }} yazıyor...",
  "{{ watcherCount }} online": "{{ watcherCount }} çevrimiçi",
  "{{count}} unread_one": "{{count}} okunmamış",
  "{{count}} unread_other": "{{count}} okunmamış",
  "{{count}} votes_one": "{{count}} oy",
  "{{count}} votes_other": "{{count}} oy",
  "🏙 Attachment...": "🏙 Ek...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} oluşturdu: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} oy verdi: {{pollOptionText}}",
  "📍Shared location": "📍Paylaşılan konum"
};

// node_modules/i18next/dist/esm/i18next.js
var isString = (obj) => typeof obj === "string";
var defer = () => {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
};
var makeString = (object) => {
  if (object == null) return "";
  return "" + object;
};
var copy = (a2, s2, t2) => {
  a2.forEach((m2) => {
    if (s2[m2]) t2[m2] = s2[m2];
  });
};
var lastOfPathSeparatorRegExp = /###/g;
var cleanKey = (key) => key && key.indexOf("###") > -1 ? key.replace(lastOfPathSeparatorRegExp, ".") : key;
var canNotTraverseDeeper = (object) => !object || isString(object);
var getLastOfPath = (object, path2, Empty) => {
  const stack = !isString(path2) ? path2 : path2.split(".");
  let stackIndex = 0;
  while (stackIndex < stack.length - 1) {
    if (canNotTraverseDeeper(object)) return {};
    const key = cleanKey(stack[stackIndex]);
    if (!object[key] && Empty) object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
    ++stackIndex;
  }
  if (canNotTraverseDeeper(object)) return {};
  return {
    obj: object,
    k: cleanKey(stack[stackIndex])
  };
};
var setPath = (object, path2, newValue) => {
  const {
    obj,
    k: k2
  } = getLastOfPath(object, path2, Object);
  if (obj !== void 0 || path2.length === 1) {
    obj[k2] = newValue;
    return;
  }
  let e = path2[path2.length - 1];
  let p2 = path2.slice(0, path2.length - 1);
  let last = getLastOfPath(object, p2, Object);
  while (last.obj === void 0 && p2.length) {
    e = `${p2[p2.length - 1]}.${e}`;
    p2 = p2.slice(0, p2.length - 1);
    last = getLastOfPath(object, p2, Object);
    if ((last == null ? void 0 : last.obj) && typeof last.obj[`${last.k}.${e}`] !== "undefined") {
      last.obj = void 0;
    }
  }
  last.obj[`${last.k}.${e}`] = newValue;
};
var pushPath = (object, path2, newValue, concat) => {
  const {
    obj,
    k: k2
  } = getLastOfPath(object, path2, Object);
  obj[k2] = obj[k2] || [];
  obj[k2].push(newValue);
};
var getPath = (object, path2) => {
  const {
    obj,
    k: k2
  } = getLastOfPath(object, path2);
  if (!obj) return void 0;
  if (!Object.prototype.hasOwnProperty.call(obj, k2)) return void 0;
  return obj[k2];
};
var getPathWithDefaults = (data, defaultData, key) => {
  const value = getPath(data, key);
  if (value !== void 0) {
    return value;
  }
  return getPath(defaultData, key);
};
var deepExtend = (target, source, overwrite) => {
  for (const prop in source) {
    if (prop !== "__proto__" && prop !== "constructor") {
      if (prop in target) {
        if (isString(target[prop]) || target[prop] instanceof String || isString(source[prop]) || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
};
var regexEscape = (str) => str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
var escape = (data) => {
  if (isString(data)) {
    return data.replace(/[&<>"'\/]/g, (s2) => _entityMap[s2]);
  }
  return data;
};
var RegExpCache = class {
  constructor(capacity) {
    this.capacity = capacity;
    this.regExpMap = /* @__PURE__ */ new Map();
    this.regExpQueue = [];
  }
  getRegExp(pattern) {
    const regExpFromCache = this.regExpMap.get(pattern);
    if (regExpFromCache !== void 0) {
      return regExpFromCache;
    }
    const regExpNew = new RegExp(pattern);
    if (this.regExpQueue.length === this.capacity) {
      this.regExpMap.delete(this.regExpQueue.shift());
    }
    this.regExpMap.set(pattern, regExpNew);
    this.regExpQueue.push(pattern);
    return regExpNew;
  }
};
var chars = [" ", ",", "?", "!", ";"];
var looksLikeObjectPathRegExpCache = new RegExpCache(20);
var looksLikeObjectPath = (key, nsSeparator, keySeparator) => {
  nsSeparator = nsSeparator || "";
  keySeparator = keySeparator || "";
  const possibleChars = chars.filter((c2) => nsSeparator.indexOf(c2) < 0 && keySeparator.indexOf(c2) < 0);
  if (possibleChars.length === 0) return true;
  const r2 = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map((c2) => c2 === "?" ? "\\?" : c2).join("|")})`);
  let matched = !r2.test(key);
  if (!matched) {
    const ki = key.indexOf(keySeparator);
    if (ki > 0 && !r2.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
};
var deepFind = (obj, path2, keySeparator = ".") => {
  if (!obj) return void 0;
  if (obj[path2]) {
    if (!Object.prototype.hasOwnProperty.call(obj, path2)) return void 0;
    return obj[path2];
  }
  const tokens = path2.split(keySeparator);
  let current = obj;
  for (let i2 = 0; i2 < tokens.length; ) {
    if (!current || typeof current !== "object") {
      return void 0;
    }
    let next;
    let nextPath = "";
    for (let j2 = i2; j2 < tokens.length; ++j2) {
      if (j2 !== i2) {
        nextPath += keySeparator;
      }
      nextPath += tokens[j2];
      next = current[nextPath];
      if (next !== void 0) {
        if (["string", "number", "boolean"].indexOf(typeof next) > -1 && j2 < tokens.length - 1) {
          continue;
        }
        i2 += j2 - i2 + 1;
        break;
      }
    }
    current = next;
  }
  return current;
};
var getCleanedCode = (code4) => code4 == null ? void 0 : code4.replace("_", "-");
var consoleLogger = {
  type: "logger",
  log(args) {
    this.output("log", args);
  },
  warn(args) {
    this.output("warn", args);
  },
  error(args) {
    this.output("error", args);
  },
  output(type, args) {
    var _a, _b;
    (_b = (_a = console == null ? void 0 : console[type]) == null ? void 0 : _a.apply) == null ? void 0 : _b.call(_a, console, args);
  }
};
var Logger = class _Logger {
  constructor(concreteLogger, options2 = {}) {
    this.init(concreteLogger, options2);
  }
  init(concreteLogger, options2 = {}) {
    this.prefix = options2.prefix || "i18next:";
    this.logger = concreteLogger || consoleLogger;
    this.options = options2;
    this.debug = options2.debug;
  }
  log(...args) {
    return this.forward(args, "log", "", true);
  }
  warn(...args) {
    return this.forward(args, "warn", "", true);
  }
  error(...args) {
    return this.forward(args, "error", "");
  }
  deprecate(...args) {
    return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
  }
  forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug) return null;
    if (isString(args[0])) args[0] = `${prefix}${this.prefix} ${args[0]}`;
    return this.logger[lvl](args);
  }
  create(moduleName) {
    return new _Logger(this.logger, {
      ...{
        prefix: `${this.prefix}:${moduleName}:`
      },
      ...this.options
    });
  }
  clone(options2) {
    options2 = options2 || this.options;
    options2.prefix = options2.prefix || this.prefix;
    return new _Logger(this.logger, options2);
  }
};
var baseLogger = new Logger();
var EventEmitter = class {
  constructor() {
    this.observers = {};
  }
  on(events, listener) {
    events.split(" ").forEach((event) => {
      if (!this.observers[event]) this.observers[event] = /* @__PURE__ */ new Map();
      const numListeners = this.observers[event].get(listener) || 0;
      this.observers[event].set(listener, numListeners + 1);
    });
    return this;
  }
  off(event, listener) {
    if (!this.observers[event]) return;
    if (!listener) {
      delete this.observers[event];
      return;
    }
    this.observers[event].delete(listener);
  }
  emit(event, ...args) {
    if (this.observers[event]) {
      const cloned = Array.from(this.observers[event].entries());
      cloned.forEach(([observer, numTimesAdded]) => {
        for (let i2 = 0; i2 < numTimesAdded; i2++) {
          observer(...args);
        }
      });
    }
    if (this.observers["*"]) {
      const cloned = Array.from(this.observers["*"].entries());
      cloned.forEach(([observer, numTimesAdded]) => {
        for (let i2 = 0; i2 < numTimesAdded; i2++) {
          observer.apply(observer, [event, ...args]);
        }
      });
    }
  }
};
var ResourceStore = class extends EventEmitter {
  constructor(data, options2 = {
    ns: ["translation"],
    defaultNS: "translation"
  }) {
    super();
    this.data = data || {};
    this.options = options2;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    if (this.options.ignoreJSONStructure === void 0) {
      this.options.ignoreJSONStructure = true;
    }
  }
  addNamespaces(ns) {
    if (this.options.ns.indexOf(ns) < 0) {
      this.options.ns.push(ns);
    }
  }
  removeNamespaces(ns) {
    const index4 = this.options.ns.indexOf(ns);
    if (index4 > -1) {
      this.options.ns.splice(index4, 1);
    }
  }
  getResource(lng, ns, key, options2 = {}) {
    var _a, _b;
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    const ignoreJSONStructure = options2.ignoreJSONStructure !== void 0 ? options2.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let path2;
    if (lng.indexOf(".") > -1) {
      path2 = lng.split(".");
    } else {
      path2 = [lng, ns];
      if (key) {
        if (Array.isArray(key)) {
          path2.push(...key);
        } else if (isString(key) && keySeparator) {
          path2.push(...key.split(keySeparator));
        } else {
          path2.push(key);
        }
      }
    }
    const result = getPath(this.data, path2);
    if (!result && !ns && !key && lng.indexOf(".") > -1) {
      lng = path2[0];
      ns = path2[1];
      key = path2.slice(2).join(".");
    }
    if (result || !ignoreJSONStructure || !isString(key)) return result;
    return deepFind((_b = (_a = this.data) == null ? void 0 : _a[lng]) == null ? void 0 : _b[ns], key, keySeparator);
  }
  addResource(lng, ns, key, value, options2 = {
    silent: false
  }) {
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    let path2 = [lng, ns];
    if (key) path2 = path2.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf(".") > -1) {
      path2 = lng.split(".");
      value = ns;
      ns = path2[1];
    }
    this.addNamespaces(ns);
    setPath(this.data, path2, value);
    if (!options2.silent) this.emit("added", lng, ns, key, value);
  }
  addResources(lng, ns, resources, options2 = {
    silent: false
  }) {
    for (const m2 in resources) {
      if (isString(resources[m2]) || Array.isArray(resources[m2])) this.addResource(lng, ns, m2, resources[m2], {
        silent: true
      });
    }
    if (!options2.silent) this.emit("added", lng, ns, resources);
  }
  addResourceBundle(lng, ns, resources, deep, overwrite, options2 = {
    silent: false,
    skipCopy: false
  }) {
    let path2 = [lng, ns];
    if (lng.indexOf(".") > -1) {
      path2 = lng.split(".");
      deep = resources;
      resources = ns;
      ns = path2[1];
    }
    this.addNamespaces(ns);
    let pack = getPath(this.data, path2) || {};
    if (!options2.skipCopy) resources = JSON.parse(JSON.stringify(resources));
    if (deep) {
      deepExtend(pack, resources, overwrite);
    } else {
      pack = {
        ...pack,
        ...resources
      };
    }
    setPath(this.data, path2, pack);
    if (!options2.silent) this.emit("added", lng, ns, resources);
  }
  removeResourceBundle(lng, ns) {
    if (this.hasResourceBundle(lng, ns)) {
      delete this.data[lng][ns];
    }
    this.removeNamespaces(ns);
    this.emit("removed", lng, ns);
  }
  hasResourceBundle(lng, ns) {
    return this.getResource(lng, ns) !== void 0;
  }
  getResourceBundle(lng, ns) {
    if (!ns) ns = this.options.defaultNS;
    return this.getResource(lng, ns);
  }
  getDataByLanguage(lng) {
    return this.data[lng];
  }
  hasLanguageSomeTranslations(lng) {
    const data = this.getDataByLanguage(lng);
    const n2 = data && Object.keys(data) || [];
    return !!n2.find((v2) => data[v2] && Object.keys(data[v2]).length > 0);
  }
  toJSON() {
    return this.data;
  }
};
var postProcessor = {
  processors: {},
  addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle(processors, value, key, options2, translator) {
    processors.forEach((processor) => {
      var _a;
      value = ((_a = this.processors[processor]) == null ? void 0 : _a.process(value, key, options2, translator)) ?? value;
    });
    return value;
  }
};
var PATH_KEY = Symbol("i18next/PATH_KEY");
function createProxy() {
  const state = [];
  const handler = /* @__PURE__ */ Object.create(null);
  let proxy;
  handler.get = (target, key) => {
    var _a;
    (_a = proxy == null ? void 0 : proxy.revoke) == null ? void 0 : _a.call(proxy);
    if (key === PATH_KEY) return state;
    state.push(key);
    proxy = Proxy.revocable(target, handler);
    return proxy.proxy;
  };
  return Proxy.revocable(/* @__PURE__ */ Object.create(null), handler).proxy;
}
function keysFromSelector(selector8, opts) {
  const {
    [PATH_KEY]: path2
  } = selector8(createProxy());
  return path2.join((opts == null ? void 0 : opts.keySeparator) ?? ".");
}
var checkedLoadedFor = {};
var shouldHandleAsObject = (res) => !isString(res) && typeof res !== "boolean" && typeof res !== "number";
var Translator = class _Translator extends EventEmitter {
  constructor(services, options2 = {}) {
    super();
    copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, this);
    this.options = options2;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    this.logger = baseLogger.create("translator");
  }
  changeLanguage(lng) {
    if (lng) this.language = lng;
  }
  exists(key, o2 = {
    interpolation: {}
  }) {
    const opt = {
      ...o2
    };
    if (key == null) return false;
    const resolved = this.resolve(key, opt);
    return (resolved == null ? void 0 : resolved.res) !== void 0;
  }
  extractFromKey(key, opt) {
    let nsSeparator = opt.nsSeparator !== void 0 ? opt.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === void 0) nsSeparator = ":";
    const keySeparator = opt.keySeparator !== void 0 ? opt.keySeparator : this.options.keySeparator;
    let namespaces = opt.ns || this.options.defaultNS || [];
    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !opt.keySeparator && !this.options.userDefinedNsSeparator && !opt.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
      const m2 = key.match(this.interpolator.nestingRegexp);
      if (m2 && m2.length > 0) {
        return {
          key,
          namespaces: isString(namespaces) ? [namespaces] : namespaces
        };
      }
      const parts = key.split(nsSeparator);
      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
      key = parts.join(keySeparator);
    }
    return {
      key,
      namespaces: isString(namespaces) ? [namespaces] : namespaces
    };
  }
  translate(keys3, o2, lastKey) {
    let opt = typeof o2 === "object" ? {
      ...o2
    } : o2;
    if (typeof opt !== "object" && this.options.overloadTranslationOptionHandler) {
      opt = this.options.overloadTranslationOptionHandler(arguments);
    }
    if (typeof opt === "object") opt = {
      ...opt
    };
    if (!opt) opt = {};
    if (keys3 == null) return "";
    if (typeof keys3 === "function") keys3 = keysFromSelector(keys3, {
      ...this.options,
      ...opt
    });
    if (!Array.isArray(keys3)) keys3 = [String(keys3)];
    const returnDetails = opt.returnDetails !== void 0 ? opt.returnDetails : this.options.returnDetails;
    const keySeparator = opt.keySeparator !== void 0 ? opt.keySeparator : this.options.keySeparator;
    const {
      key,
      namespaces
    } = this.extractFromKey(keys3[keys3.length - 1], opt);
    const namespace = namespaces[namespaces.length - 1];
    let nsSeparator = opt.nsSeparator !== void 0 ? opt.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === void 0) nsSeparator = ":";
    const lng = opt.lng || this.language;
    const appendNamespaceToCIMode = opt.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if ((lng == null ? void 0 : lng.toLowerCase()) === "cimode") {
      if (appendNamespaceToCIMode) {
        if (returnDetails) {
          return {
            res: `${namespace}${nsSeparator}${key}`,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace,
            usedParams: this.getUsedParamsDetails(opt)
          };
        }
        return `${namespace}${nsSeparator}${key}`;
      }
      if (returnDetails) {
        return {
          res: key,
          usedKey: key,
          exactUsedKey: key,
          usedLng: lng,
          usedNS: namespace,
          usedParams: this.getUsedParamsDetails(opt)
        };
      }
      return key;
    }
    const resolved = this.resolve(keys3, opt);
    let res = resolved == null ? void 0 : resolved.res;
    const resUsedKey = (resolved == null ? void 0 : resolved.usedKey) || key;
    const resExactUsedKey = (resolved == null ? void 0 : resolved.exactUsedKey) || key;
    const noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
    const joinArrays = opt.joinArrays !== void 0 ? opt.joinArrays : this.options.joinArrays;
    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
    const needsPluralHandling = opt.count !== void 0 && !isString(opt.count);
    const hasDefaultValue = _Translator.hasDefaultValue(opt);
    const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, opt.count, opt) : "";
    const defaultValueSuffixOrdinalFallback = opt.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, opt.count, {
      ordinal: false
    }) : "";
    const needsZeroSuffixLookup = needsPluralHandling && !opt.ordinal && opt.count === 0;
    const defaultValue = needsZeroSuffixLookup && opt[`defaultValue${this.options.pluralSeparator}zero`] || opt[`defaultValue${defaultValueSuffix}`] || opt[`defaultValue${defaultValueSuffixOrdinalFallback}`] || opt.defaultValue;
    let resForObjHndl = res;
    if (handleAsObjectInI18nFormat && !res && hasDefaultValue) {
      resForObjHndl = defaultValue;
    }
    const handleAsObject = shouldHandleAsObject(resForObjHndl);
    const resType = Object.prototype.toString.apply(resForObjHndl);
    if (handleAsObjectInI18nFormat && resForObjHndl && handleAsObject && noObject.indexOf(resType) < 0 && !(isString(joinArrays) && Array.isArray(resForObjHndl))) {
      if (!opt.returnObjects && !this.options.returnObjects) {
        if (!this.options.returnedObjectHandler) {
          this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        }
        const r2 = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, resForObjHndl, {
          ...opt,
          ns: namespaces
        }) : `key '${key} (${this.language})' returned an object instead of string.`;
        if (returnDetails) {
          resolved.res = r2;
          resolved.usedParams = this.getUsedParamsDetails(opt);
          return resolved;
        }
        return r2;
      }
      if (keySeparator) {
        const resTypeIsArray = Array.isArray(resForObjHndl);
        const copy2 = resTypeIsArray ? [] : {};
        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
        for (const m2 in resForObjHndl) {
          if (Object.prototype.hasOwnProperty.call(resForObjHndl, m2)) {
            const deepKey = `${newKeyToUse}${keySeparator}${m2}`;
            if (hasDefaultValue && !res) {
              copy2[m2] = this.translate(deepKey, {
                ...opt,
                defaultValue: shouldHandleAsObject(defaultValue) ? defaultValue[m2] : void 0,
                ...{
                  joinArrays: false,
                  ns: namespaces
                }
              });
            } else {
              copy2[m2] = this.translate(deepKey, {
                ...opt,
                ...{
                  joinArrays: false,
                  ns: namespaces
                }
              });
            }
            if (copy2[m2] === deepKey) copy2[m2] = resForObjHndl[m2];
          }
        }
        res = copy2;
      }
    } else if (handleAsObjectInI18nFormat && isString(joinArrays) && Array.isArray(res)) {
      res = res.join(joinArrays);
      if (res) res = this.extendTranslation(res, keys3, opt, lastKey);
    } else {
      let usedDefault = false;
      let usedKey = false;
      if (!this.isValidLookup(res) && hasDefaultValue) {
        usedDefault = true;
        res = defaultValue;
      }
      if (!this.isValidLookup(res)) {
        usedKey = true;
        res = key;
      }
      const missingKeyNoValueFallbackToKey = opt.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
      if (usedKey || usedDefault || updateMissing) {
        this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
        if (keySeparator) {
          const fk = this.resolve(key, {
            ...opt,
            keySeparator: false
          });
          if (fk && fk.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let lngs = [];
        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, opt.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
          for (let i2 = 0; i2 < fallbackLngs.length; i2++) {
            lngs.push(fallbackLngs[i2]);
          }
        } else if (this.options.saveMissingTo === "all") {
          lngs = this.languageUtils.toResolveHierarchy(opt.lng || this.language);
        } else {
          lngs.push(opt.lng || this.language);
        }
        const send = (l2, k2, specificDefaultValue) => {
          var _a;
          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
          if (this.options.missingKeyHandler) {
            this.options.missingKeyHandler(l2, namespace, k2, defaultForMissing, updateMissing, opt);
          } else if ((_a = this.backendConnector) == null ? void 0 : _a.saveMissing) {
            this.backendConnector.saveMissing(l2, namespace, k2, defaultForMissing, updateMissing, opt);
          }
          this.emit("missingKey", l2, namespace, k2, res);
        };
        if (this.options.saveMissing) {
          if (this.options.saveMissingPlurals && needsPluralHandling) {
            lngs.forEach((language) => {
              const suffixes = this.pluralResolver.getSuffixes(language, opt);
              if (needsZeroSuffixLookup && opt[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                suffixes.push(`${this.options.pluralSeparator}zero`);
              }
              suffixes.forEach((suffix) => {
                send([language], key + suffix, opt[`defaultValue${suffix}`] || defaultValue);
              });
            });
          } else {
            send(lngs, key, defaultValue);
          }
        }
      }
      res = this.extendTranslation(res, keys3, opt, resolved, lastKey);
      if (usedKey && res === key && this.options.appendNamespaceToMissingKey) {
        res = `${namespace}${nsSeparator}${key}`;
      }
      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
        res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}${nsSeparator}${key}` : key, usedDefault ? res : void 0, opt);
      }
    }
    if (returnDetails) {
      resolved.res = res;
      resolved.usedParams = this.getUsedParamsDetails(opt);
      return resolved;
    }
    return res;
  }
  extendTranslation(res, key, opt, resolved, lastKey) {
    var _a, _b;
    if ((_a = this.i18nFormat) == null ? void 0 : _a.parse) {
      res = this.i18nFormat.parse(res, {
        ...this.options.interpolation.defaultVariables,
        ...opt
      }, opt.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
        resolved
      });
    } else if (!opt.skipInterpolation) {
      if (opt.interpolation) this.interpolator.init({
        ...opt,
        ...{
          interpolation: {
            ...this.options.interpolation,
            ...opt.interpolation
          }
        }
      });
      const skipOnVariables = isString(res) && (((_b = opt == null ? void 0 : opt.interpolation) == null ? void 0 : _b.skipOnVariables) !== void 0 ? opt.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let nestBef;
      if (skipOnVariables) {
        const nb = res.match(this.interpolator.nestingRegexp);
        nestBef = nb && nb.length;
      }
      let data = opt.replace && !isString(opt.replace) ? opt.replace : opt;
      if (this.options.interpolation.defaultVariables) data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
      res = this.interpolator.interpolate(res, data, opt.lng || this.language || resolved.usedLng, opt);
      if (skipOnVariables) {
        const na = res.match(this.interpolator.nestingRegexp);
        const nestAft = na && na.length;
        if (nestBef < nestAft) opt.nest = false;
      }
      if (!opt.lng && resolved && resolved.res) opt.lng = this.language || resolved.usedLng;
      if (opt.nest !== false) res = this.interpolator.nest(res, (...args) => {
        if ((lastKey == null ? void 0 : lastKey[0]) === args[0] && !opt.context) {
          this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
          return null;
        }
        return this.translate(...args, key);
      }, opt);
      if (opt.interpolation) this.interpolator.reset();
    }
    const postProcess = opt.postProcess || this.options.postProcess;
    const postProcessorNames = isString(postProcess) ? [postProcess] : postProcess;
    if (res != null && (postProcessorNames == null ? void 0 : postProcessorNames.length) && opt.applyPostProcessor !== false) {
      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
        i18nResolved: {
          ...resolved,
          usedParams: this.getUsedParamsDetails(opt)
        },
        ...opt
      } : opt, this);
    }
    return res;
  }
  resolve(keys3, opt = {}) {
    let found;
    let usedKey;
    let exactUsedKey;
    let usedLng;
    let usedNS;
    if (isString(keys3)) keys3 = [keys3];
    keys3.forEach((k2) => {
      if (this.isValidLookup(found)) return;
      const extracted = this.extractFromKey(k2, opt);
      const key = extracted.key;
      usedKey = key;
      let namespaces = extracted.namespaces;
      if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
      const needsPluralHandling = opt.count !== void 0 && !isString(opt.count);
      const needsZeroSuffixLookup = needsPluralHandling && !opt.ordinal && opt.count === 0;
      const needsContextHandling = opt.context !== void 0 && (isString(opt.context) || typeof opt.context === "number") && opt.context !== "";
      const codes2 = opt.lngs ? opt.lngs : this.languageUtils.toResolveHierarchy(opt.lng || this.language, opt.fallbackLng);
      namespaces.forEach((ns) => {
        var _a, _b;
        if (this.isValidLookup(found)) return;
        usedNS = ns;
        if (!checkedLoadedFor[`${codes2[0]}-${ns}`] && ((_a = this.utils) == null ? void 0 : _a.hasLoadedNamespace) && !((_b = this.utils) == null ? void 0 : _b.hasLoadedNamespace(usedNS))) {
          checkedLoadedFor[`${codes2[0]}-${ns}`] = true;
          this.logger.warn(`key "${usedKey}" for languages "${codes2.join(", ")}" won't get resolved as namespace "${usedNS}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
        }
        codes2.forEach((code4) => {
          var _a2;
          if (this.isValidLookup(found)) return;
          usedLng = code4;
          const finalKeys = [key];
          if ((_a2 = this.i18nFormat) == null ? void 0 : _a2.addLookupKeys) {
            this.i18nFormat.addLookupKeys(finalKeys, key, code4, ns, opt);
          } else {
            let pluralSuffix;
            if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code4, opt.count, opt);
            const zeroSuffix = `${this.options.pluralSeparator}zero`;
            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (needsPluralHandling) {
              if (opt.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
              }
              finalKeys.push(key + pluralSuffix);
              if (needsZeroSuffixLookup) {
                finalKeys.push(key + zeroSuffix);
              }
            }
            if (needsContextHandling) {
              const contextKey = `${key}${this.options.contextSeparator || "_"}${opt.context}`;
              finalKeys.push(contextKey);
              if (needsPluralHandling) {
                if (opt.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                finalKeys.push(contextKey + pluralSuffix);
                if (needsZeroSuffixLookup) {
                  finalKeys.push(contextKey + zeroSuffix);
                }
              }
            }
          }
          let possibleKey;
          while (possibleKey = finalKeys.pop()) {
            if (!this.isValidLookup(found)) {
              exactUsedKey = possibleKey;
              found = this.getResource(code4, ns, possibleKey, opt);
            }
          }
        });
      });
    });
    return {
      res: found,
      usedKey,
      exactUsedKey,
      usedLng,
      usedNS
    };
  }
  isValidLookup(res) {
    return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
  }
  getResource(code4, ns, key, options2 = {}) {
    var _a;
    if ((_a = this.i18nFormat) == null ? void 0 : _a.getResource) return this.i18nFormat.getResource(code4, ns, key, options2);
    return this.resourceStore.getResource(code4, ns, key, options2);
  }
  getUsedParamsDetails(options2 = {}) {
    const optionsKeys = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"];
    const useOptionsReplaceForData = options2.replace && !isString(options2.replace);
    let data = useOptionsReplaceForData ? options2.replace : options2;
    if (useOptionsReplaceForData && typeof options2.count !== "undefined") {
      data.count = options2.count;
    }
    if (this.options.interpolation.defaultVariables) {
      data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
    }
    if (!useOptionsReplaceForData) {
      data = {
        ...data
      };
      for (const key of optionsKeys) {
        delete data[key];
      }
    }
    return data;
  }
  static hasDefaultValue(options2) {
    const prefix = "defaultValue";
    for (const option in options2) {
      if (Object.prototype.hasOwnProperty.call(options2, option) && prefix === option.substring(0, prefix.length) && void 0 !== options2[option]) {
        return true;
      }
    }
    return false;
  }
};
var LanguageUtil = class {
  constructor(options2) {
    this.options = options2;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create("languageUtils");
  }
  getScriptPartFromCode(code4) {
    code4 = getCleanedCode(code4);
    if (!code4 || code4.indexOf("-") < 0) return null;
    const p2 = code4.split("-");
    if (p2.length === 2) return null;
    p2.pop();
    if (p2[p2.length - 1].toLowerCase() === "x") return null;
    return this.formatLanguageCode(p2.join("-"));
  }
  getLanguagePartFromCode(code4) {
    code4 = getCleanedCode(code4);
    if (!code4 || code4.indexOf("-") < 0) return code4;
    const p2 = code4.split("-");
    return this.formatLanguageCode(p2[0]);
  }
  formatLanguageCode(code4) {
    if (isString(code4) && code4.indexOf("-") > -1) {
      let formattedCode;
      try {
        formattedCode = Intl.getCanonicalLocales(code4)[0];
      } catch (e) {
      }
      if (formattedCode && this.options.lowerCaseLng) {
        formattedCode = formattedCode.toLowerCase();
      }
      if (formattedCode) return formattedCode;
      if (this.options.lowerCaseLng) {
        return code4.toLowerCase();
      }
      return code4;
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? code4.toLowerCase() : code4;
  }
  isSupportedCode(code4) {
    if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
      code4 = this.getLanguagePartFromCode(code4);
    }
    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code4) > -1;
  }
  getBestMatchFromCodes(codes2) {
    if (!codes2) return null;
    let found;
    codes2.forEach((code4) => {
      if (found) return;
      const cleanedLng = this.formatLanguageCode(code4);
      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
    });
    if (!found && this.options.supportedLngs) {
      codes2.forEach((code4) => {
        if (found) return;
        const lngScOnly = this.getScriptPartFromCode(code4);
        if (this.isSupportedCode(lngScOnly)) return found = lngScOnly;
        const lngOnly = this.getLanguagePartFromCode(code4);
        if (this.isSupportedCode(lngOnly)) return found = lngOnly;
        found = this.options.supportedLngs.find((supportedLng) => {
          if (supportedLng === lngOnly) return supportedLng;
          if (supportedLng.indexOf("-") < 0 && lngOnly.indexOf("-") < 0) return;
          if (supportedLng.indexOf("-") > 0 && lngOnly.indexOf("-") < 0 && supportedLng.substring(0, supportedLng.indexOf("-")) === lngOnly) return supportedLng;
          if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
        });
      });
    }
    if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
    return found;
  }
  getFallbackCodes(fallbacks, code4) {
    if (!fallbacks) return [];
    if (typeof fallbacks === "function") fallbacks = fallbacks(code4);
    if (isString(fallbacks)) fallbacks = [fallbacks];
    if (Array.isArray(fallbacks)) return fallbacks;
    if (!code4) return fallbacks.default || [];
    let found = fallbacks[code4];
    if (!found) found = fallbacks[this.getScriptPartFromCode(code4)];
    if (!found) found = fallbacks[this.formatLanguageCode(code4)];
    if (!found) found = fallbacks[this.getLanguagePartFromCode(code4)];
    if (!found) found = fallbacks.default;
    return found || [];
  }
  toResolveHierarchy(code4, fallbackCode) {
    const fallbackCodes = this.getFallbackCodes((fallbackCode === false ? [] : fallbackCode) || this.options.fallbackLng || [], code4);
    const codes2 = [];
    const addCode = (c2) => {
      if (!c2) return;
      if (this.isSupportedCode(c2)) {
        codes2.push(c2);
      } else {
        this.logger.warn(`rejecting language code not found in supportedLngs: ${c2}`);
      }
    };
    if (isString(code4) && (code4.indexOf("-") > -1 || code4.indexOf("_") > -1)) {
      if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code4));
      if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code4));
      if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code4));
    } else if (isString(code4)) {
      addCode(this.formatLanguageCode(code4));
    }
    fallbackCodes.forEach((fc) => {
      if (codes2.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
    });
    return codes2;
  }
};
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
var dummyRule = {
  select: (count) => count === 1 ? "one" : "other",
  resolvedOptions: () => ({
    pluralCategories: ["one", "other"]
  })
};
var PluralResolver = class {
  constructor(languageUtils, options2 = {}) {
    this.languageUtils = languageUtils;
    this.options = options2;
    this.logger = baseLogger.create("pluralResolver");
    this.pluralRulesCache = {};
  }
  addRule(lng, obj) {
    this.rules[lng] = obj;
  }
  clearCache() {
    this.pluralRulesCache = {};
  }
  getRule(code4, options2 = {}) {
    const cleanedCode = getCleanedCode(code4 === "dev" ? "en" : code4);
    const type = options2.ordinal ? "ordinal" : "cardinal";
    const cacheKey = JSON.stringify({
      cleanedCode,
      type
    });
    if (cacheKey in this.pluralRulesCache) {
      return this.pluralRulesCache[cacheKey];
    }
    let rule;
    try {
      rule = new Intl.PluralRules(cleanedCode, {
        type
      });
    } catch (err) {
      if (!Intl) {
        this.logger.error("No Intl support, please use an Intl polyfill!");
        return dummyRule;
      }
      if (!code4.match(/-|_/)) return dummyRule;
      const lngPart = this.languageUtils.getLanguagePartFromCode(code4);
      rule = this.getRule(lngPart, options2);
    }
    this.pluralRulesCache[cacheKey] = rule;
    return rule;
  }
  needsPlural(code4, options2 = {}) {
    let rule = this.getRule(code4, options2);
    if (!rule) rule = this.getRule("dev", options2);
    return (rule == null ? void 0 : rule.resolvedOptions().pluralCategories.length) > 1;
  }
  getPluralFormsOfKey(code4, key, options2 = {}) {
    return this.getSuffixes(code4, options2).map((suffix) => `${key}${suffix}`);
  }
  getSuffixes(code4, options2 = {}) {
    let rule = this.getRule(code4, options2);
    if (!rule) rule = this.getRule("dev", options2);
    if (!rule) return [];
    return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options2.ordinal ? `ordinal${this.options.prepend}` : ""}${pluralCategory}`);
  }
  getSuffix(code4, count, options2 = {}) {
    const rule = this.getRule(code4, options2);
    if (rule) {
      return `${this.options.prepend}${options2.ordinal ? `ordinal${this.options.prepend}` : ""}${rule.select(count)}`;
    }
    this.logger.warn(`no plural rule found for: ${code4}`);
    return this.getSuffix("dev", count, options2);
  }
};
var deepFindWithDefaults = (data, defaultData, key, keySeparator = ".", ignoreJSONStructure = true) => {
  let path2 = getPathWithDefaults(data, defaultData, key);
  if (!path2 && ignoreJSONStructure && isString(key)) {
    path2 = deepFind(data, key, keySeparator);
    if (path2 === void 0) path2 = deepFind(defaultData, key, keySeparator);
  }
  return path2;
};
var regexSafe = (val) => val.replace(/\$/g, "$$$$");
var Interpolator = class {
  constructor(options2 = {}) {
    var _a;
    this.logger = baseLogger.create("interpolator");
    this.options = options2;
    this.format = ((_a = options2 == null ? void 0 : options2.interpolation) == null ? void 0 : _a.format) || ((value) => value);
    this.init(options2);
  }
  init(options2 = {}) {
    if (!options2.interpolation) options2.interpolation = {
      escapeValue: true
    };
    const {
      escape: escape$1,
      escapeValue,
      useRawValueToEscape,
      prefix,
      prefixEscaped,
      suffix,
      suffixEscaped,
      formatSeparator,
      unescapeSuffix,
      unescapePrefix,
      nestingPrefix,
      nestingPrefixEscaped,
      nestingSuffix,
      nestingSuffixEscaped,
      nestingOptionsSeparator,
      maxReplaces,
      alwaysFormat
    } = options2.interpolation;
    this.escape = escape$1 !== void 0 ? escape$1 : escape;
    this.escapeValue = escapeValue !== void 0 ? escapeValue : true;
    this.useRawValueToEscape = useRawValueToEscape !== void 0 ? useRawValueToEscape : false;
    this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || "{{";
    this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || "}}";
    this.formatSeparator = formatSeparator || ",";
    this.unescapePrefix = unescapeSuffix ? "" : unescapePrefix || "-";
    this.unescapeSuffix = this.unescapePrefix ? "" : unescapeSuffix || "";
    this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape("$t(");
    this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(")");
    this.nestingOptionsSeparator = nestingOptionsSeparator || ",";
    this.maxReplaces = maxReplaces || 1e3;
    this.alwaysFormat = alwaysFormat !== void 0 ? alwaysFormat : false;
    this.resetRegExp();
  }
  reset() {
    if (this.options) this.init(this.options);
  }
  resetRegExp() {
    const getOrResetRegExp = (existingRegExp, pattern) => {
      if ((existingRegExp == null ? void 0 : existingRegExp.source) === pattern) {
        existingRegExp.lastIndex = 0;
        return existingRegExp;
      }
      return new RegExp(pattern, "g");
    };
    this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
    this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
    this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}((?:[^()"']+|"[^"]*"|'[^']*'|\\((?:[^()]|"[^"]*"|'[^']*')*\\))*?)${this.nestingSuffix}`);
  }
  interpolate(str, data, lng, options2) {
    var _a;
    let match;
    let value;
    let replaces;
    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    const handleFormat = (key) => {
      if (key.indexOf(this.formatSeparator) < 0) {
        const path2 = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(path2, void 0, lng, {
          ...options2,
          ...data,
          interpolationkey: key
        }) : path2;
      }
      const p2 = key.split(this.formatSeparator);
      const k2 = p2.shift().trim();
      const f2 = p2.join(this.formatSeparator).trim();
      return this.format(deepFindWithDefaults(data, defaultData, k2, this.options.keySeparator, this.options.ignoreJSONStructure), f2, lng, {
        ...options2,
        ...data,
        interpolationkey: k2
      });
    };
    this.resetRegExp();
    const missingInterpolationHandler = (options2 == null ? void 0 : options2.missingInterpolationHandler) || this.options.missingInterpolationHandler;
    const skipOnVariables = ((_a = options2 == null ? void 0 : options2.interpolation) == null ? void 0 : _a.skipOnVariables) !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    const todos = [{
      regex: this.regexpUnescape,
      safeValue: (val) => regexSafe(val)
    }, {
      regex: this.regexp,
      safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
    }];
    todos.forEach((todo) => {
      replaces = 0;
      while (match = todo.regex.exec(str)) {
        const matchedVar = match[1].trim();
        value = handleFormat(matchedVar);
        if (value === void 0) {
          if (typeof missingInterpolationHandler === "function") {
            const temp = missingInterpolationHandler(str, match, options2);
            value = isString(temp) ? temp : "";
          } else if (options2 && Object.prototype.hasOwnProperty.call(options2, matchedVar)) {
            value = "";
          } else if (skipOnVariables) {
            value = match[0];
            continue;
          } else {
            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
            value = "";
          }
        } else if (!isString(value) && !this.useRawValueToEscape) {
          value = makeString(value);
        }
        const safeValue = todo.safeValue(value);
        str = str.replace(match[0], safeValue);
        if (skipOnVariables) {
          todo.regex.lastIndex += value.length;
          todo.regex.lastIndex -= match[0].length;
        } else {
          todo.regex.lastIndex = 0;
        }
        replaces++;
        if (replaces >= this.maxReplaces) {
          break;
        }
      }
    });
    return str;
  }
  nest(str, fc, options2 = {}) {
    let match;
    let value;
    let clonedOptions;
    const handleHasOptions = (key, inheritedOptions) => {
      const sep = this.nestingOptionsSeparator;
      if (key.indexOf(sep) < 0) return key;
      const c2 = key.split(new RegExp(`${sep}[ ]*{`));
      let optionsString = `{${c2[1]}`;
      key = c2[0];
      optionsString = this.interpolate(optionsString, clonedOptions);
      const matchedSingleQuotes = optionsString.match(/'/g);
      const matchedDoubleQuotes = optionsString.match(/"/g);
      if (((matchedSingleQuotes == null ? void 0 : matchedSingleQuotes.length) ?? 0) % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
        optionsString = optionsString.replace(/'/g, '"');
      }
      try {
        clonedOptions = JSON.parse(optionsString);
        if (inheritedOptions) clonedOptions = {
          ...inheritedOptions,
          ...clonedOptions
        };
      } catch (e) {
        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);
        return `${key}${sep}${optionsString}`;
      }
      if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
      return key;
    };
    while (match = this.nestingRegexp.exec(str)) {
      let formatters = [];
      clonedOptions = {
        ...options2
      };
      clonedOptions = clonedOptions.replace && !isString(clonedOptions.replace) ? clonedOptions.replace : clonedOptions;
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      const keyEndIndex = /{.*}/.test(match[1]) ? match[1].lastIndexOf("}") + 1 : match[1].indexOf(this.formatSeparator);
      if (keyEndIndex !== -1) {
        formatters = match[1].slice(keyEndIndex).split(this.formatSeparator).map((elem) => elem.trim()).filter(Boolean);
        match[1] = match[1].slice(0, keyEndIndex);
      }
      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
      if (value && match[0] === str && !isString(value)) return value;
      if (!isString(value)) value = makeString(value);
      if (!value) {
        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
        value = "";
      }
      if (formatters.length) {
        value = formatters.reduce((v2, f2) => this.format(v2, f2, options2.lng, {
          ...options2,
          interpolationkey: match[1].trim()
        }), value.trim());
      }
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  }
};
var parseFormatStr = (formatStr) => {
  let formatName = formatStr.toLowerCase().trim();
  const formatOptions = {};
  if (formatStr.indexOf("(") > -1) {
    const p2 = formatStr.split("(");
    formatName = p2[0].toLowerCase().trim();
    const optStr = p2[1].substring(0, p2[1].length - 1);
    if (formatName === "currency" && optStr.indexOf(":") < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      const opts = optStr.split(";");
      opts.forEach((opt) => {
        if (opt) {
          const [key, ...rest] = opt.split(":");
          const val = rest.join(":").trim().replace(/^'+|'+$/g, "");
          const trimmedKey = key.trim();
          if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
          if (val === "false") formatOptions[trimmedKey] = false;
          if (val === "true") formatOptions[trimmedKey] = true;
          if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
        }
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
};
var createCachedFormatter = (fn2) => {
  const cache = {};
  return (v2, l2, o2) => {
    let optForCache = o2;
    if (o2 && o2.interpolationkey && o2.formatParams && o2.formatParams[o2.interpolationkey] && o2[o2.interpolationkey]) {
      optForCache = {
        ...optForCache,
        [o2.interpolationkey]: void 0
      };
    }
    const key = l2 + JSON.stringify(optForCache);
    let frm = cache[key];
    if (!frm) {
      frm = fn2(getCleanedCode(l2), o2);
      cache[key] = frm;
    }
    return frm(v2);
  };
};
var createNonCachedFormatter = (fn2) => (v2, l2, o2) => fn2(getCleanedCode(l2), o2)(v2);
var Formatter = class {
  constructor(options2 = {}) {
    this.logger = baseLogger.create("formatter");
    this.options = options2;
    this.init(options2);
  }
  init(services, options2 = {
    interpolation: {}
  }) {
    this.formatSeparator = options2.interpolation.formatSeparator || ",";
    const cf = options2.cacheInBuiltFormats ? createCachedFormatter : createNonCachedFormatter;
    this.formats = {
      number: cf((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      currency: cf((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt,
          style: "currency"
        });
        return (val) => formatter.format(val);
      }),
      datetime: cf((lng, opt) => {
        const formatter = new Intl.DateTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      relativetime: cf((lng, opt) => {
        const formatter = new Intl.RelativeTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val, opt.range || "day");
      }),
      list: cf((lng, opt) => {
        const formatter = new Intl.ListFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      })
    };
  }
  add(name2, fc) {
    this.formats[name2.toLowerCase().trim()] = fc;
  }
  addCached(name2, fc) {
    this.formats[name2.toLowerCase().trim()] = createCachedFormatter(fc);
  }
  format(value, format, lng, options2 = {}) {
    const formats = format.split(this.formatSeparator);
    if (formats.length > 1 && formats[0].indexOf("(") > 1 && formats[0].indexOf(")") < 0 && formats.find((f2) => f2.indexOf(")") > -1)) {
      const lastIndex = formats.findIndex((f2) => f2.indexOf(")") > -1);
      formats[0] = [formats[0], ...formats.splice(1, lastIndex)].join(this.formatSeparator);
    }
    const result = formats.reduce((mem, f2) => {
      var _a;
      const {
        formatName,
        formatOptions
      } = parseFormatStr(f2);
      if (this.formats[formatName]) {
        let formatted = mem;
        try {
          const valOptions = ((_a = options2 == null ? void 0 : options2.formatParams) == null ? void 0 : _a[options2.interpolationkey]) || {};
          const l2 = valOptions.locale || valOptions.lng || options2.locale || options2.lng || lng;
          formatted = this.formats[formatName](mem, l2, {
            ...formatOptions,
            ...options2,
            ...valOptions
          });
        } catch (error) {
          this.logger.warn(error);
        }
        return formatted;
      } else {
        this.logger.warn(`there was no format function for ${formatName}`);
      }
      return mem;
    }, value);
    return result;
  }
};
var removePending = (q2, name2) => {
  if (q2.pending[name2] !== void 0) {
    delete q2.pending[name2];
    q2.pendingCount--;
  }
};
var Connector = class extends EventEmitter {
  constructor(backend, store, services, options2 = {}) {
    var _a, _b;
    super();
    this.backend = backend;
    this.store = store;
    this.services = services;
    this.languageUtils = services.languageUtils;
    this.options = options2;
    this.logger = baseLogger.create("backendConnector");
    this.waitingReads = [];
    this.maxParallelReads = options2.maxParallelReads || 10;
    this.readingCalls = 0;
    this.maxRetries = options2.maxRetries >= 0 ? options2.maxRetries : 5;
    this.retryTimeout = options2.retryTimeout >= 1 ? options2.retryTimeout : 350;
    this.state = {};
    this.queue = [];
    (_b = (_a = this.backend) == null ? void 0 : _a.init) == null ? void 0 : _b.call(_a, services, options2.backend, options2);
  }
  queueLoad(languages, namespaces, options2, callback) {
    const toLoad = {};
    const pending = {};
    const toLoadLanguages = {};
    const toLoadNamespaces = {};
    languages.forEach((lng) => {
      let hasAllNamespaces = true;
      namespaces.forEach((ns) => {
        const name2 = `${lng}|${ns}`;
        if (!options2.reload && this.store.hasResourceBundle(lng, ns)) {
          this.state[name2] = 2;
        } else if (this.state[name2] < 0) ;
        else if (this.state[name2] === 1) {
          if (pending[name2] === void 0) pending[name2] = true;
        } else {
          this.state[name2] = 1;
          hasAllNamespaces = false;
          if (pending[name2] === void 0) pending[name2] = true;
          if (toLoad[name2] === void 0) toLoad[name2] = true;
          if (toLoadNamespaces[ns] === void 0) toLoadNamespaces[ns] = true;
        }
      });
      if (!hasAllNamespaces) toLoadLanguages[lng] = true;
    });
    if (Object.keys(toLoad).length || Object.keys(pending).length) {
      this.queue.push({
        pending,
        pendingCount: Object.keys(pending).length,
        loaded: {},
        errors: [],
        callback
      });
    }
    return {
      toLoad: Object.keys(toLoad),
      pending: Object.keys(pending),
      toLoadLanguages: Object.keys(toLoadLanguages),
      toLoadNamespaces: Object.keys(toLoadNamespaces)
    };
  }
  loaded(name2, err, data) {
    const s2 = name2.split("|");
    const lng = s2[0];
    const ns = s2[1];
    if (err) this.emit("failedLoading", lng, ns, err);
    if (!err && data) {
      this.store.addResourceBundle(lng, ns, data, void 0, void 0, {
        skipCopy: true
      });
    }
    this.state[name2] = err ? -1 : 2;
    if (err && data) this.state[name2] = 0;
    const loaded = {};
    this.queue.forEach((q2) => {
      pushPath(q2.loaded, [lng], ns);
      removePending(q2, name2);
      if (err) q2.errors.push(err);
      if (q2.pendingCount === 0 && !q2.done) {
        Object.keys(q2.loaded).forEach((l2) => {
          if (!loaded[l2]) loaded[l2] = {};
          const loadedKeys = q2.loaded[l2];
          if (loadedKeys.length) {
            loadedKeys.forEach((n2) => {
              if (loaded[l2][n2] === void 0) loaded[l2][n2] = true;
            });
          }
        });
        q2.done = true;
        if (q2.errors.length) {
          q2.callback(q2.errors);
        } else {
          q2.callback();
        }
      }
    });
    this.emit("loaded", loaded);
    this.queue = this.queue.filter((q2) => !q2.done);
  }
  read(lng, ns, fcName, tried = 0, wait = this.retryTimeout, callback) {
    if (!lng.length) return callback(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng,
        ns,
        fcName,
        tried,
        wait,
        callback
      });
      return;
    }
    this.readingCalls++;
    const resolver2 = (err, data) => {
      this.readingCalls--;
      if (this.waitingReads.length > 0) {
        const next = this.waitingReads.shift();
        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
      }
      if (err && data && tried < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    };
    const fc = this.backend[fcName].bind(this.backend);
    if (fc.length === 2) {
      try {
        const r2 = fc(lng, ns);
        if (r2 && typeof r2.then === "function") {
          r2.then((data) => resolver2(null, data)).catch(resolver2);
        } else {
          resolver2(null, r2);
        }
      } catch (err) {
        resolver2(err);
      }
      return;
    }
    return fc(lng, ns, resolver2);
  }
  prepareLoading(languages, namespaces, options2 = {}, callback) {
    if (!this.backend) {
      this.logger.warn("No backend was added via i18next.use. Will not load resources.");
      return callback && callback();
    }
    if (isString(languages)) languages = this.languageUtils.toResolveHierarchy(languages);
    if (isString(namespaces)) namespaces = [namespaces];
    const toLoad = this.queueLoad(languages, namespaces, options2, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length) callback();
      return null;
    }
    toLoad.toLoad.forEach((name2) => {
      this.loadOne(name2);
    });
  }
  load(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {}, callback);
  }
  reload(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {
      reload: true
    }, callback);
  }
  loadOne(name2, prefix = "") {
    const s2 = name2.split("|");
    const lng = s2[0];
    const ns = s2[1];
    this.read(lng, ns, "read", void 0, void 0, (err, data) => {
      if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
      if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
      this.loaded(name2, err, data);
    });
  }
  saveMissing(languages, namespace, key, fallbackValue, isUpdate, options2 = {}, clb = () => {
  }) {
    var _a, _b, _c, _d, _e2;
    if (((_b = (_a = this.services) == null ? void 0 : _a.utils) == null ? void 0 : _b.hasLoadedNamespace) && !((_d = (_c = this.services) == null ? void 0 : _c.utils) == null ? void 0 : _d.hasLoadedNamespace(namespace))) {
      this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (key === void 0 || key === null || key === "") return;
    if ((_e2 = this.backend) == null ? void 0 : _e2.create) {
      const opts = {
        ...options2,
        isUpdate
      };
      const fc = this.backend.create.bind(this.backend);
      if (fc.length < 6) {
        try {
          let r2;
          if (fc.length === 5) {
            r2 = fc(languages, namespace, key, fallbackValue, opts);
          } else {
            r2 = fc(languages, namespace, key, fallbackValue);
          }
          if (r2 && typeof r2.then === "function") {
            r2.then((data) => clb(null, data)).catch(clb);
          } else {
            clb(null, r2);
          }
        } catch (err) {
          clb(err);
        }
      } else {
        fc(languages, namespace, key, fallbackValue, clb, opts);
      }
    }
    if (!languages || !languages[0]) return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  }
};
var get = () => ({
  debug: false,
  initAsync: true,
  ns: ["translation"],
  defaultNS: ["translation"],
  fallbackLng: ["dev"],
  fallbackNS: false,
  supportedLngs: false,
  nonExplicitSupportedLngs: false,
  load: "all",
  preload: false,
  simplifyPluralSuffix: true,
  keySeparator: ".",
  nsSeparator: ":",
  pluralSeparator: "_",
  contextSeparator: "_",
  partialBundledLanguages: false,
  saveMissing: false,
  updateMissing: false,
  saveMissingTo: "fallback",
  saveMissingPlurals: true,
  missingKeyHandler: false,
  missingInterpolationHandler: false,
  postProcess: false,
  postProcessPassResolved: false,
  returnNull: false,
  returnEmptyString: true,
  returnObjects: false,
  joinArrays: false,
  returnedObjectHandler: false,
  parseMissingKeyHandler: false,
  appendNamespaceToMissingKey: false,
  appendNamespaceToCIMode: false,
  overloadTranslationOptionHandler: (args) => {
    let ret = {};
    if (typeof args[1] === "object") ret = args[1];
    if (isString(args[1])) ret.defaultValue = args[1];
    if (isString(args[2])) ret.tDescription = args[2];
    if (typeof args[2] === "object" || typeof args[3] === "object") {
      const options2 = args[3] || args[2];
      Object.keys(options2).forEach((key) => {
        ret[key] = options2[key];
      });
    }
    return ret;
  },
  interpolation: {
    escapeValue: true,
    format: (value) => value,
    prefix: "{{",
    suffix: "}}",
    formatSeparator: ",",
    unescapePrefix: "-",
    nestingPrefix: "$t(",
    nestingSuffix: ")",
    nestingOptionsSeparator: ",",
    maxReplaces: 1e3,
    skipOnVariables: true
  },
  cacheInBuiltFormats: true
});
var transformOptions = (options2) => {
  var _a, _b;
  if (isString(options2.ns)) options2.ns = [options2.ns];
  if (isString(options2.fallbackLng)) options2.fallbackLng = [options2.fallbackLng];
  if (isString(options2.fallbackNS)) options2.fallbackNS = [options2.fallbackNS];
  if (((_b = (_a = options2.supportedLngs) == null ? void 0 : _a.indexOf) == null ? void 0 : _b.call(_a, "cimode")) < 0) {
    options2.supportedLngs = options2.supportedLngs.concat(["cimode"]);
  }
  if (typeof options2.initImmediate === "boolean") options2.initAsync = options2.initImmediate;
  return options2;
};
var noop5 = () => {
};
var bindMemberFunctions = (inst) => {
  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach((mem) => {
    if (typeof inst[mem] === "function") {
      inst[mem] = inst[mem].bind(inst);
    }
  });
};
var I18n = class _I18n extends EventEmitter {
  constructor(options2 = {}, callback) {
    super();
    this.options = transformOptions(options2);
    this.services = {};
    this.logger = baseLogger;
    this.modules = {
      external: []
    };
    bindMemberFunctions(this);
    if (callback && !this.isInitialized && !options2.isClone) {
      if (!this.options.initAsync) {
        this.init(options2, callback);
        return this;
      }
      setTimeout(() => {
        this.init(options2, callback);
      }, 0);
    }
  }
  init(options2 = {}, callback) {
    this.isInitializing = true;
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    if (options2.defaultNS == null && options2.ns) {
      if (isString(options2.ns)) {
        options2.defaultNS = options2.ns;
      } else if (options2.ns.indexOf("translation") < 0) {
        options2.defaultNS = options2.ns[0];
      }
    }
    const defOpts = get();
    this.options = {
      ...defOpts,
      ...this.options,
      ...transformOptions(options2)
    };
    this.options.interpolation = {
      ...defOpts.interpolation,
      ...this.options.interpolation
    };
    if (options2.keySeparator !== void 0) {
      this.options.userDefinedKeySeparator = options2.keySeparator;
    }
    if (options2.nsSeparator !== void 0) {
      this.options.userDefinedNsSeparator = options2.nsSeparator;
    }
    const createClassOnDemand = (ClassOrObject) => {
      if (!ClassOrObject) return null;
      if (typeof ClassOrObject === "function") return new ClassOrObject();
      return ClassOrObject;
    };
    if (!this.options.isClone) {
      if (this.modules.logger) {
        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        baseLogger.init(null, this.options);
      }
      let formatter;
      if (this.modules.formatter) {
        formatter = this.modules.formatter;
      } else {
        formatter = Formatter;
      }
      const lu = new LanguageUtil(this.options);
      this.store = new ResourceStore(this.options.resources, this.options);
      const s2 = this.services;
      s2.logger = baseLogger;
      s2.resourceStore = this.store;
      s2.languageUtils = lu;
      s2.pluralResolver = new PluralResolver(lu, {
        prepend: this.options.pluralSeparator,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      });
      const usingLegacyFormatFunction = this.options.interpolation.format && this.options.interpolation.format !== defOpts.interpolation.format;
      if (usingLegacyFormatFunction) {
        this.logger.deprecate(`init: you are still using the legacy format function, please use the new approach: https://www.i18next.com/translation-function/formatting`);
      }
      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
        s2.formatter = createClassOnDemand(formatter);
        if (s2.formatter.init) s2.formatter.init(s2, this.options);
        this.options.interpolation.format = s2.formatter.format.bind(s2.formatter);
      }
      s2.interpolator = new Interpolator(this.options);
      s2.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      };
      s2.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s2.resourceStore, s2, this.options);
      s2.backendConnector.on("*", (event, ...args) => {
        this.emit(event, ...args);
      });
      if (this.modules.languageDetector) {
        s2.languageDetector = createClassOnDemand(this.modules.languageDetector);
        if (s2.languageDetector.init) s2.languageDetector.init(s2, this.options.detection, this.options);
      }
      if (this.modules.i18nFormat) {
        s2.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
        if (s2.i18nFormat.init) s2.i18nFormat.init(this);
      }
      this.translator = new Translator(this.services, this.options);
      this.translator.on("*", (event, ...args) => {
        this.emit(event, ...args);
      });
      this.modules.external.forEach((m2) => {
        if (m2.init) m2.init(this);
      });
    }
    this.format = this.options.interpolation.format;
    if (!callback) callback = noop5;
    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const codes2 = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      if (codes2.length > 0 && codes2[0] !== "dev") this.options.lng = codes2[0];
    }
    if (!this.services.languageDetector && !this.options.lng) {
      this.logger.warn("init: no languageDetector is used and no lng is defined");
    }
    const storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
    storeApi.forEach((fcName) => {
      this[fcName] = (...args) => this.store[fcName](...args);
    });
    const storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
    storeApiChained.forEach((fcName) => {
      this[fcName] = (...args) => {
        this.store[fcName](...args);
        return this;
      };
    });
    const deferred = defer();
    const load = () => {
      const finish = (err, t2) => {
        this.isInitializing = false;
        if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn("init: i18next is already initialized. You should call init just once!");
        this.isInitialized = true;
        if (!this.options.isClone) this.logger.log("initialized", this.options);
        this.emit("initialized", this.options);
        deferred.resolve(t2);
        callback(err, t2);
      };
      if (this.languages && !this.isInitialized) return finish(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, finish);
    };
    if (this.options.resources || !this.options.initAsync) {
      load();
    } else {
      setTimeout(load, 0);
    }
    return deferred;
  }
  loadResources(language, callback = noop5) {
    var _a, _b;
    let usedCallback = callback;
    const usedLng = isString(language) ? language : this.language;
    if (typeof language === "function") usedCallback = language;
    if (!this.options.resources || this.options.partialBundledLanguages) {
      if ((usedLng == null ? void 0 : usedLng.toLowerCase()) === "cimode" && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
      const toLoad = [];
      const append = (lng) => {
        if (!lng) return;
        if (lng === "cimode") return;
        const lngs = this.services.languageUtils.toResolveHierarchy(lng);
        lngs.forEach((l2) => {
          if (l2 === "cimode") return;
          if (toLoad.indexOf(l2) < 0) toLoad.push(l2);
        });
      };
      if (!usedLng) {
        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        fallbacks.forEach((l2) => append(l2));
      } else {
        append(usedLng);
      }
      (_b = (_a = this.options.preload) == null ? void 0 : _a.forEach) == null ? void 0 : _b.call(_a, (l2) => append(l2));
      this.services.backendConnector.load(toLoad, this.options.ns, (e) => {
        if (!e && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
        usedCallback(e);
      });
    } else {
      usedCallback(null);
    }
  }
  reloadResources(lngs, ns, callback) {
    const deferred = defer();
    if (typeof lngs === "function") {
      callback = lngs;
      lngs = void 0;
    }
    if (typeof ns === "function") {
      callback = ns;
      ns = void 0;
    }
    if (!lngs) lngs = this.languages;
    if (!ns) ns = this.options.ns;
    if (!callback) callback = noop5;
    this.services.backendConnector.reload(lngs, ns, (err) => {
      deferred.resolve();
      callback(err);
    });
    return deferred;
  }
  use(module) {
    if (!module) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!module.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    if (module.type === "backend") {
      this.modules.backend = module;
    }
    if (module.type === "logger" || module.log && module.warn && module.error) {
      this.modules.logger = module;
    }
    if (module.type === "languageDetector") {
      this.modules.languageDetector = module;
    }
    if (module.type === "i18nFormat") {
      this.modules.i18nFormat = module;
    }
    if (module.type === "postProcessor") {
      postProcessor.addPostProcessor(module);
    }
    if (module.type === "formatter") {
      this.modules.formatter = module;
    }
    if (module.type === "3rdParty") {
      this.modules.external.push(module);
    }
    return this;
  }
  setResolvedLanguage(l2) {
    if (!l2 || !this.languages) return;
    if (["cimode", "dev"].indexOf(l2) > -1) return;
    for (let li = 0; li < this.languages.length; li++) {
      const lngInLngs = this.languages[li];
      if (["cimode", "dev"].indexOf(lngInLngs) > -1) continue;
      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
        this.resolvedLanguage = lngInLngs;
        break;
      }
    }
    if (!this.resolvedLanguage && this.languages.indexOf(l2) < 0 && this.store.hasLanguageSomeTranslations(l2)) {
      this.resolvedLanguage = l2;
      this.languages.unshift(l2);
    }
  }
  changeLanguage(lng, callback) {
    this.isLanguageChangingTo = lng;
    const deferred = defer();
    this.emit("languageChanging", lng);
    const setLngProps = (l2) => {
      this.language = l2;
      this.languages = this.services.languageUtils.toResolveHierarchy(l2);
      this.resolvedLanguage = void 0;
      this.setResolvedLanguage(l2);
    };
    const done = (err, l2) => {
      if (l2) {
        if (this.isLanguageChangingTo === lng) {
          setLngProps(l2);
          this.translator.changeLanguage(l2);
          this.isLanguageChangingTo = void 0;
          this.emit("languageChanged", l2);
          this.logger.log("languageChanged", l2);
        }
      } else {
        this.isLanguageChangingTo = void 0;
      }
      deferred.resolve((...args) => this.t(...args));
      if (callback) callback(err, (...args) => this.t(...args));
    };
    const setLng = (lngs) => {
      var _a, _b;
      if (!lng && !lngs && this.services.languageDetector) lngs = [];
      const fl = isString(lngs) ? lngs : lngs && lngs[0];
      const l2 = this.store.hasLanguageSomeTranslations(fl) ? fl : this.services.languageUtils.getBestMatchFromCodes(isString(lngs) ? [lngs] : lngs);
      if (l2) {
        if (!this.language) {
          setLngProps(l2);
        }
        if (!this.translator.language) this.translator.changeLanguage(l2);
        (_b = (_a = this.services.languageDetector) == null ? void 0 : _a.cacheUserLanguage) == null ? void 0 : _b.call(_a, l2);
      }
      this.loadResources(l2, (err) => {
        done(err, l2);
      });
    };
    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
      setLng(this.services.languageDetector.detect());
    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
      if (this.services.languageDetector.detect.length === 0) {
        this.services.languageDetector.detect().then(setLng);
      } else {
        this.services.languageDetector.detect(setLng);
      }
    } else {
      setLng(lng);
    }
    return deferred;
  }
  getFixedT(lng, ns, keyPrefix) {
    const fixedT = (key, opts, ...rest) => {
      let o2;
      if (typeof opts !== "object") {
        o2 = this.options.overloadTranslationOptionHandler([key, opts].concat(rest));
      } else {
        o2 = {
          ...opts
        };
      }
      o2.lng = o2.lng || fixedT.lng;
      o2.lngs = o2.lngs || fixedT.lngs;
      o2.ns = o2.ns || fixedT.ns;
      if (o2.keyPrefix !== "") o2.keyPrefix = o2.keyPrefix || keyPrefix || fixedT.keyPrefix;
      const keySeparator = this.options.keySeparator || ".";
      let resultKey;
      if (o2.keyPrefix && Array.isArray(key)) {
        resultKey = key.map((k2) => {
          if (typeof k2 === "function") k2 = keysFromSelector(k2, {
            ...this.options,
            ...opts
          });
          return `${o2.keyPrefix}${keySeparator}${k2}`;
        });
      } else {
        if (typeof key === "function") key = keysFromSelector(key, {
          ...this.options,
          ...opts
        });
        resultKey = o2.keyPrefix ? `${o2.keyPrefix}${keySeparator}${key}` : key;
      }
      return this.t(resultKey, o2);
    };
    if (isString(lng)) {
      fixedT.lng = lng;
    } else {
      fixedT.lngs = lng;
    }
    fixedT.ns = ns;
    fixedT.keyPrefix = keyPrefix;
    return fixedT;
  }
  t(...args) {
    var _a;
    return (_a = this.translator) == null ? void 0 : _a.translate(...args);
  }
  exists(...args) {
    var _a;
    return (_a = this.translator) == null ? void 0 : _a.exists(...args);
  }
  setDefaultNamespace(ns) {
    this.options.defaultNS = ns;
  }
  hasLoadedNamespace(ns, options2 = {}) {
    if (!this.isInitialized) {
      this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
      return false;
    }
    if (!this.languages || !this.languages.length) {
      this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
      return false;
    }
    const lng = options2.lng || this.resolvedLanguage || this.languages[0];
    const fallbackLng = this.options ? this.options.fallbackLng : false;
    const lastLng = this.languages[this.languages.length - 1];
    if (lng.toLowerCase() === "cimode") return true;
    const loadNotPending = (l2, n2) => {
      const loadState = this.services.backendConnector.state[`${l2}|${n2}`];
      return loadState === -1 || loadState === 0 || loadState === 2;
    };
    if (options2.precheck) {
      const preResult = options2.precheck(this, loadNotPending);
      if (preResult !== void 0) return preResult;
    }
    if (this.hasResourceBundle(lng, ns)) return true;
    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
    return false;
  }
  loadNamespaces(ns, callback) {
    const deferred = defer();
    if (!this.options.ns) {
      if (callback) callback();
      return Promise.resolve();
    }
    if (isString(ns)) ns = [ns];
    ns.forEach((n2) => {
      if (this.options.ns.indexOf(n2) < 0) this.options.ns.push(n2);
    });
    this.loadResources((err) => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  loadLanguages(lngs, callback) {
    const deferred = defer();
    if (isString(lngs)) lngs = [lngs];
    const preloaded = this.options.preload || [];
    const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
    if (!newLngs.length) {
      if (callback) callback();
      return Promise.resolve();
    }
    this.options.preload = preloaded.concat(newLngs);
    this.loadResources((err) => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  dir(lng) {
    var _a, _b;
    if (!lng) lng = this.resolvedLanguage || (((_a = this.languages) == null ? void 0 : _a.length) > 0 ? this.languages[0] : this.language);
    if (!lng) return "rtl";
    try {
      const l2 = new Intl.Locale(lng);
      if (l2 && l2.getTextInfo) {
        const ti = l2.getTextInfo();
        if (ti && ti.direction) return ti.direction;
      }
    } catch (e) {
    }
    const rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
    const languageUtils = ((_b = this.services) == null ? void 0 : _b.languageUtils) || new LanguageUtil(get());
    if (lng.toLowerCase().indexOf("-latn") > 1) return "ltr";
    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance(options2 = {}, callback) {
    return new _I18n(options2, callback);
  }
  cloneInstance(options2 = {}, callback = noop5) {
    const forkResourceStore = options2.forkResourceStore;
    if (forkResourceStore) delete options2.forkResourceStore;
    const mergedOptions = {
      ...this.options,
      ...options2,
      ...{
        isClone: true
      }
    };
    const clone = new _I18n(mergedOptions);
    if (options2.debug !== void 0 || options2.prefix !== void 0) {
      clone.logger = clone.logger.clone(options2);
    }
    const membersToCopy = ["store", "services", "language"];
    membersToCopy.forEach((m2) => {
      clone[m2] = this[m2];
    });
    clone.services = {
      ...this.services
    };
    clone.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    if (forkResourceStore) {
      const clonedData = Object.keys(this.store.data).reduce((prev, l2) => {
        prev[l2] = {
          ...this.store.data[l2]
        };
        prev[l2] = Object.keys(prev[l2]).reduce((acc, n2) => {
          acc[n2] = {
            ...prev[l2][n2]
          };
          return acc;
        }, prev[l2]);
        return prev;
      }, {});
      clone.store = new ResourceStore(clonedData, mergedOptions);
      clone.services.resourceStore = clone.store;
    }
    clone.translator = new Translator(clone.services, mergedOptions);
    clone.translator.on("*", (event, ...args) => {
      clone.emit(event, ...args);
    });
    clone.init(mergedOptions, callback);
    clone.translator.options = mergedOptions;
    clone.translator.backendConnector.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    return clone;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
};
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
var createInstance = instance.createInstance;
var dir = instance.dir;
var init3 = instance.init;
var loadResources = instance.loadResources;
var reloadResources = instance.reloadResources;
var use = instance.use;
var changeLanguage = instance.changeLanguage;
var getFixedT = instance.getFixedT;
var t = instance.t;
var exists = instance.exists;
var setDefaultNamespace = instance.setDefaultNamespace;
var hasLoadedNamespace = instance.hasLoadedNamespace;
var loadNamespaces = instance.loadNamespaces;
var loadLanguages = instance.loadLanguages;

// node_modules/stream-chat-react/dist/i18n/Streami18n.js
var import_dayjs3 = __toESM(require_dayjs_min());
var import_calendar2 = __toESM(require_calendar());
var import_updateLocale = __toESM(require_updateLocale());
var import_localizedFormat2 = __toESM(require_localizedFormat());
var import_localeData = __toESM(require_localeData());
var import_relativeTime = __toESM(require_relativeTime());
var import_duration = __toESM(require_duration());
var import_utc = __toESM(require_utc());
var import_timezone = __toESM(require_timezone());

// node_modules/stream-chat-react/dist/i18n/TranslationBuilder/TranslationBuilder.js
var TranslationTopic = class {
  constructor(options2) {
    this.options = options2;
    this.translators = /* @__PURE__ */ new Map();
    this.setTranslator = (name2, translator) => {
      this.translators.set(name2, translator);
    };
    this.removeTranslator = (name2) => {
      this.translators.delete(name2);
    };
    this.i18next = options2.i18next;
    if (options2.translators) {
      Object.entries(options2.translators).forEach(([name2, translator]) => {
        this.setTranslator(name2, translator);
      });
    }
  }
};
var forwardTranslation = ({ value }) => value;
var TranslationBuilder = class {
  constructor(i18next) {
    this.i18next = i18next;
    this.topics = /* @__PURE__ */ new Map();
    this.translatorRegistrationsBuffer = {};
    this.registerTopic = (name2, Topic) => {
      let topic = this.topics.get(name2);
      if (!topic) {
        topic = new Topic({ i18next: this.i18next });
        this.topics.set(name2, topic);
        this.i18next.use({
          name: name2,
          process: (value, key, options2) => {
            const topic2 = this.topics.get(name2);
            if (!topic2)
              return value;
            return topic2.translate(value, key, options2);
          },
          type: "postProcessor"
        });
      }
      const additionalTranslatorsToRegister = this.translatorRegistrationsBuffer[name2];
      if (additionalTranslatorsToRegister) {
        Object.entries(additionalTranslatorsToRegister).forEach(([translatorName, translator]) => {
          topic.setTranslator(translatorName, translator);
        });
        delete this.translatorRegistrationsBuffer[name2];
      }
      return topic;
    };
    this.disableTopic = (topicName) => {
      const topic = this.topics.get(topicName);
      if (!topic)
        return;
      this.i18next.use({
        name: topicName,
        process: forwardTranslation,
        type: "postProcessor"
      });
      this.topics.delete(topicName);
    };
    this.getTopic = (topicName) => this.topics.get(topicName);
  }
  registerTranslators(topicName, translators) {
    const topic = this.getTopic(topicName);
    if (!topic) {
      if (!this.translatorRegistrationsBuffer[topicName])
        this.translatorRegistrationsBuffer[topicName] = {};
      Object.entries(translators).forEach(([translatorName, translator]) => {
        this.translatorRegistrationsBuffer[topicName][translatorName] = translator;
      });
      return;
    }
    Object.entries(translators).forEach(([name2, translator]) => {
      topic.setTranslator(name2, translator);
    });
  }
  removeTranslators(topicName, translators) {
    const topic = this.getTopic(topicName);
    if (this.translatorRegistrationsBuffer[topicName]) {
      translators.forEach((translatorName) => {
        delete this.translatorRegistrationsBuffer[topicName][translatorName];
      });
    }
    if (!topic)
      return;
    translators.forEach((name2) => {
      topic.removeTranslator(name2);
    });
  }
};

// node_modules/stream-chat-react/dist/i18n/TranslationBuilder/notifications/attachmentUpload.js
var attachmentUploadBlockedNotificationTranslator = ({ options: options2, t: t2 }) => {
  var _a, _b;
  const { notification } = options2;
  if (!notification)
    return null;
  if (typeof ((_a = notification.metadata) == null ? void 0 : _a.reason) !== "string") {
    const reason2 = t2("unknown error");
    return t2("Attachment upload blocked due to {{reason}}", { reason: reason2 });
  }
  if (((_b = notification.metadata) == null ? void 0 : _b.reason) === "size_limit") {
    const reason2 = t2("size limit");
    return t2("Attachment upload blocked due to {{reason}}", { reason: reason2 });
  }
  const reason = t2("unsupported file type");
  return t2("Attachment upload blocked due to {{reason}}", { reason });
};
var attachmentUploadFailedNotificationTranslator = ({ options: options2, t: t2 }) => {
  const { notification } = options2;
  if (!notification)
    return null;
  const { reason: originalReason } = notification.metadata ?? {};
  if (typeof originalReason !== "string") {
    const reason2 = t2("unknown error");
    return t2("Attachment upload failed due to {{reason}}", { reason: reason2 });
  }
  let reason = originalReason.toLowerCase();
  if (reason === "network error") {
    reason = t2("network error");
    return t2("Attachment upload failed due to {{reason}}", { reason });
  }
  return t2("Attachment upload failed due to {{reason}}", { reason });
};

// node_modules/stream-chat-react/dist/i18n/TranslationBuilder/notifications/pollComposition.js
var pollCreationFailedNotificationTranslator = ({ options: { notification }, t: t2 }) => {
  var _a;
  if (typeof ((_a = notification == null ? void 0 : notification.metadata) == null ? void 0 : _a.reason) === "string" && notification.metadata.reason.length) {
    return t2("Failed to create the poll due to {{reason}}", {
      reason: notification.metadata.reason.toLowerCase()
    });
  }
  return t2("Failed to create the poll");
};

// node_modules/stream-chat-react/dist/i18n/TranslationBuilder/notifications/pollVoteCountTrespass.js
var pollVoteCountTrespass = ({ t: t2 }) => t2("Reached the vote limit. Remove an existing vote first.");

// node_modules/stream-chat-react/dist/i18n/TranslationBuilder/notifications/NotificationTranslationTopic.js
var defaultNotificationTranslators = {
  "api:attachment:upload:failed": attachmentUploadFailedNotificationTranslator,
  "api:poll:create:failed": pollCreationFailedNotificationTranslator,
  "validation:attachment:upload:blocked": attachmentUploadBlockedNotificationTranslator,
  "validation:poll:castVote:limit": pollVoteCountTrespass
};
var NotificationTranslationTopic = class extends TranslationTopic {
  constructor({ i18next, translators }) {
    super({ i18next, translators: defaultNotificationTranslators });
    this.translate = (value, key, options2) => {
      const { notification } = options2;
      if (!notification)
        return value;
      const translator = notification.type && this.translators.get(notification.type);
      if (!translator)
        return value;
      return translator({ key, options: options2, t: this.i18next.t, value }) || value;
    };
    if (translators) {
      Object.entries(translators).forEach(([name2, translator]) => {
        this.setTranslator(name2, translator);
      });
    }
  }
};

// node_modules/stream-chat-react/dist/i18n/Streami18n.js
var import_de2 = __toESM(require_de());
var import_es2 = __toESM(require_es());
var import_fr2 = __toESM(require_fr());
var import_hi2 = __toESM(require_hi());
var import_it2 = __toESM(require_it());
var import_ja2 = __toESM(require_ja());
var import_ko2 = __toESM(require_ko());
var import_nl2 = __toESM(require_nl());
var import_pt2 = __toESM(require_pt());
var import_ru2 = __toESM(require_ru());
var import_tr2 = __toESM(require_tr());
var import_en2 = __toESM(require_en());
var defaultNS = "translation";
var defaultLng = "en";
import_dayjs3.default.extend(import_updateLocale.default);
import_dayjs3.default.extend(import_utc.default);
import_dayjs3.default.extend(import_timezone.default);
import_dayjs3.default.updateLocale("de", {
  calendar: {
    lastDay: "[gestern um] LT",
    lastWeek: "[letzten] dddd [um] LT",
    nextDay: "[morgen um] LT",
    nextWeek: "dddd [um] LT",
    sameDay: "[heute um] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("es", {
  calendar: {
    lastDay: "[ayer a las] LT",
    lastWeek: "[pasado] dddd [a] LT",
    nextDay: "[mañana a] LT",
    nextWeek: "dddd [a] LT",
    sameDay: "[hoy a las] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("fr", {
  calendar: {
    lastDay: "[Hier à] LT",
    lastWeek: "dddd [dernier à] LT",
    nextDay: "[Demain à] LT",
    nextWeek: "dddd [à] LT",
    sameDay: "[Aujourd'hui à] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("hi", {
  calendar: {
    lastDay: "[कल] LT",
    lastWeek: "[पिछले] dddd, LT",
    nextDay: "[कल] LT",
    nextWeek: "dddd, LT",
    sameDay: "[आज] LT",
    sameElse: "L"
  },
  // Hindi notation for meridiems are quite fuzzy in practice. While there exists
  // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
  meridiem(hour) {
    if (hour < 4) {
      return "रात";
    } else if (hour < 10) {
      return "सुबह";
    } else if (hour < 17) {
      return "दोपहर";
    } else if (hour < 20) {
      return "शाम";
    } else {
      return "रात";
    }
  },
  meridiemHour(hour, meridiem) {
    if (hour === 12) {
      hour = 0;
    }
    if (meridiem === "रात") {
      return hour < 4 ? hour : hour + 12;
    } else if (meridiem === "सुबह") {
      return hour;
    } else if (meridiem === "दोपहर") {
      return hour >= 10 ? hour : hour + 12;
    } else if (meridiem === "शाम") {
      return hour + 12;
    }
    return hour;
  },
  meridiemParse: /रात|सुबह|दोपहर|शाम/
});
import_dayjs3.default.updateLocale("it", {
  calendar: {
    lastDay: "[Ieri alle] LT",
    lastWeek: "[lo scorso] dddd [alle] LT",
    nextDay: "[Domani alle] LT",
    nextWeek: "dddd [alle] LT",
    sameDay: "[Oggi alle] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("ja", {
  calendar: {
    lastDay: "[昨日] LT",
    lastWeek: "dddd LT",
    nextDay: "[明日] LT",
    nextWeek: "[次の] dddd LT",
    sameDay: "[今日] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("ko", {
  calendar: {
    lastDay: "[어제] LT",
    lastWeek: "[지난] dddd LT",
    nextDay: "[내일] LT",
    nextWeek: "dddd LT",
    sameDay: "[오늘] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("nl", {
  calendar: {
    lastDay: "[gisteren om] LT",
    lastWeek: "[afgelopen] dddd [om] LT",
    nextDay: "[morgen om] LT",
    nextWeek: "dddd [om] LT",
    sameDay: "[vandaag om] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("pt", {
  calendar: {
    lastDay: "[ontem às] LT",
    lastWeek: "dddd [passada às] LT",
    nextDay: "[amanhã às] LT",
    nextWeek: "dddd [às] LT",
    sameDay: "[hoje às] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("ru", {
  calendar: {
    lastDay: "[Вчера, в] LT",
    nextDay: "[Завтра, в] LT",
    sameDay: "[Сегодня, в] LT"
  }
});
import_dayjs3.default.updateLocale("tr", {
  calendar: {
    lastDay: "[dün] LT",
    lastWeek: "[geçen] dddd [saat] LT",
    nextDay: "[yarın saat] LT",
    nextWeek: "[gelecek] dddd [saat] LT",
    sameDay: "[bugün saat] LT",
    sameElse: "L"
  }
});
var en_locale = {
  formats: {},
  months: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  relativeTime: {},
  weekdays: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
};
var isDayJs = (dateTimeParser) => dateTimeParser.extend !== void 0;
var supportsTz = (dateTimeParser) => dateTimeParser.tz !== void 0;
var defaultStreami18nOptions = {
  DateTimeParser: import_dayjs3.default,
  dayjsLocaleConfigForLanguage: null,
  debug: false,
  disableDateTimeTranslations: false,
  language: "en",
  logger: (message) => console.warn(message),
  /**
   * Key in the translationBuilderTopics has to match postProcessorName in the translation value.
   *
   * {
   *   "key": "{{value, postProcessorName}}"
   * }
   *
   * At least the default topics will be supported.
   */
  translationBuilderTopics: {
    notification: NotificationTranslationTopic
  }
};
var Streami18n = class {
  /**
   * Constructor accepts following options:
   *  - language (String) default: 'en'
   *    Language code e.g., en, tr
   *
   *  - translationsForLanguage (object)
   *    Translations object. Please check src/i18n/en.json for example.
   *
   *  - disableDateTimeTranslations (boolean) default: false
   *    Disable translations for date-times
   *
   *  - debug (boolean) default: false
   *    Enable debug mode in internal i18n class
   *
   *  - logger (function) default: () => {}
   *    Logger function to log warnings/errors from this class
   *
   *  - dayjsLocaleConfigForLanguage (object) default: 'enConfig'
   *    [Config object](https://momentjs.com/docs/#/i18n/changing-locale/) for internal moment object,
   *    corresponding to language (param)
   *
   *  - DateTimeParser (function) Moment or Dayjs instance/function.
   *    Make sure to load all the required locales in this Moment or Dayjs instance that you will be provide to Streami18n
   *
   * @param {*} options
   */
  constructor(options2 = {}) {
    this.i18nInstance = instance.createInstance();
    this.translationBuilderTopics = {};
    this.Dayjs = null;
    this.setLanguageCallback = () => null;
    this.initialized = false;
    this.t = defaultTranslatorFunction;
    this.translations = {
      de: { [defaultNS]: de_default },
      en: { [defaultNS]: en_default },
      es: { [defaultNS]: es_default },
      fr: { [defaultNS]: fr_default },
      hi: { [defaultNS]: hi_default },
      it: { [defaultNS]: it_default },
      ja: { [defaultNS]: ja_default },
      ko: { [defaultNS]: ko_default },
      nl: { [defaultNS]: nl_default },
      pt: { [defaultNS]: pt_default },
      ru: { [defaultNS]: ru_default },
      tr: { [defaultNS]: tr_default }
    };
    this.dayjsLocales = {};
    this.formatters = predefinedFormatters;
    this.localeExists = (language) => {
      if (this.isCustomDateTimeParser)
        return true;
      return Object.keys(import_dayjs3.default.Ls).indexOf(language) > -1;
    };
    this.validateCurrentLanguage = () => {
      const availableLanguages = Object.keys(this.translations);
      if (availableLanguages.indexOf(this.currentLanguage) === -1) {
        this.logger(`Streami18n: '${this.currentLanguage}' language is not registered. Please make sure to call streami18n.registerTranslation('${this.currentLanguage}', {...}) or use one the built-in supported languages - ${this.getAvailableLanguages()}`);
        this.currentLanguage = defaultLng;
      }
    };
    this.geti18Instance = () => this.i18nInstance;
    this.getAvailableLanguages = () => Object.keys(this.translations);
    this.getTranslations = () => this.translations;
    const finalOptions = {
      ...defaultStreami18nOptions,
      ...options2
    };
    this.logger = finalOptions.logger;
    this.currentLanguage = finalOptions.language;
    this.DateTimeParser = finalOptions.DateTimeParser;
    this.timezone = finalOptions.timezone;
    this.formatters = { ...predefinedFormatters, ...options2 == null ? void 0 : options2.formatters };
    this.translationBuilder = new TranslationBuilder(this.i18nInstance);
    this.translationBuilderTopics = {
      ...defaultStreami18nOptions.translationBuilderTopics,
      ...options2.translationBuilderTopics
    };
    try {
      if (this.DateTimeParser && isDayJs(this.DateTimeParser)) {
        this.DateTimeParser.extend(import_localizedFormat2.default);
        this.DateTimeParser.extend(import_calendar2.default);
        this.DateTimeParser.extend(import_localeData.default);
        this.DateTimeParser.extend(import_relativeTime.default);
        this.DateTimeParser.extend(import_duration.default);
      }
    } catch (error) {
      throw Error(`Streami18n: Looks like you wanted to provide Dayjs instance, but something went wrong while adding plugins ${error}`);
    }
    this.isCustomDateTimeParser = !!options2.DateTimeParser;
    const translationsForLanguage = finalOptions.translationsForLanguage;
    if (translationsForLanguage) {
      this.translations[this.currentLanguage] = {
        [defaultNS]: this.translations[this.currentLanguage] && this.translations[this.currentLanguage][defaultNS] ? {
          ...this.translations[this.currentLanguage][defaultNS],
          ...translationsForLanguage
        } : translationsForLanguage
      };
    }
    if (!this.translations[this.currentLanguage]) {
      this.translations[this.currentLanguage] = {
        [defaultNS]: {}
      };
    }
    this.i18nextConfig = {
      debug: finalOptions.debug,
      fallbackLng: false,
      interpolation: { escapeValue: false, formatSeparator: "|" },
      keySeparator: false,
      lng: this.currentLanguage,
      nsSeparator: false
    };
    const postProcess = Object.keys(this.translationBuilderTopics);
    if (postProcess.length > 0) {
      this.i18nextConfig.postProcess = postProcess;
    }
    if (finalOptions.parseMissingKeyHandler) {
      this.i18nextConfig.parseMissingKeyHandler = finalOptions.parseMissingKeyHandler;
    }
    this.validateCurrentLanguage();
    const dayjsLocaleConfigForLanguage = finalOptions.dayjsLocaleConfigForLanguage;
    if (dayjsLocaleConfigForLanguage) {
      this.addOrUpdateLocale(this.currentLanguage, {
        ...dayjsLocaleConfigForLanguage
      });
    } else if (!this.localeExists(this.currentLanguage)) {
      this.logger(`Streami18n: Streami18n(...) - Locale config for ${this.currentLanguage} does not exist in momentjs.Please import the locale file using "import 'moment/locale/${this.currentLanguage}';" in your app or register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`);
    }
    this.tDateTimeParser = (timestamp) => {
      const language = finalOptions.disableDateTimeTranslations || !this.localeExists(this.currentLanguage) ? defaultLng : this.currentLanguage;
      if (isDayJs(this.DateTimeParser)) {
        return supportsTz(this.DateTimeParser) ? this.DateTimeParser(timestamp).tz(this.timezone).locale(language) : this.DateTimeParser(timestamp).locale(language);
      }
      if (supportsTz(this.DateTimeParser) && this.timezone) {
        return this.DateTimeParser(timestamp).tz(this.timezone).locale(language);
      }
      return this.DateTimeParser(timestamp).locale(language);
    };
  }
  /**
   * Initializes the i18next instance with configuration (which enables natural language as default keys)
   */
  async init() {
    this.validateCurrentLanguage();
    try {
      this.t = await this.i18nInstance.init({
        ...this.i18nextConfig,
        lng: this.currentLanguage,
        resources: this.translations
      });
      this.initialized = true;
      if (this.formatters) {
        Object.entries(this.formatters).forEach(([name2, formatterFactory]) => {
          var _a;
          if (!formatterFactory)
            return;
          (_a = this.i18nInstance.services.formatter) == null ? void 0 : _a.add(name2, formatterFactory(this));
        });
      }
      Object.entries(this.translationBuilderTopics).forEach(([topic, TranslationTopic2]) => {
        this.translationBuilder.registerTopic(topic, TranslationTopic2);
      });
    } catch (error) {
      this.logger(`Something went wrong with init: ${JSON.stringify(error)}`);
    }
    return {
      t: this.t,
      tDateTimeParser: this.tDateTimeParser
    };
  }
  /**
   * Returns current version translator function.
   */
  async getTranslators() {
    if (!this.initialized) {
      if (this.dayjsLocales[this.currentLanguage]) {
        this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
      }
      return await this.init();
    } else {
      return {
        t: this.t,
        tDateTimeParser: this.tDateTimeParser
      };
    }
  }
  registerTranslation(language, translation, customDayjsLocale) {
    if (!translation) {
      this.logger(`Streami18n: registerTranslation(language, translation, customDayjsLocale) called without translation`);
      return;
    }
    if (!this.translations[language]) {
      this.translations[language] = { [defaultNS]: translation };
    } else {
      this.translations[language][defaultNS] = translation;
    }
    if (customDayjsLocale) {
      this.dayjsLocales[language] = { ...customDayjsLocale };
    } else if (!this.localeExists(language)) {
      this.logger(`Streami18n: registerTranslation(language, translation, customDayjsLocale) - Locale config for ${language} does not exist in Dayjs.Please import the locale file using "import 'dayjs/locale/${language}';" in your app or register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`);
    }
    if (this.initialized) {
      this.i18nInstance.addResources(language, defaultNS, translation);
    }
  }
  addOrUpdateLocale(key, config) {
    if (this.localeExists(key)) {
      import_dayjs3.default.updateLocale(key, { ...config });
    } else {
      import_dayjs3.default.locale({ name: key, ...en_locale, ...config }, void 0, true);
    }
  }
  async setLanguage(language) {
    this.currentLanguage = language;
    if (!this.initialized)
      return;
    try {
      const t2 = await this.i18nInstance.changeLanguage(language);
      if (this.dayjsLocales[language]) {
        this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
      }
      this.setLanguageCallback(t2);
      return t2;
    } catch (error) {
      this.logger(`Failed to set language: ${JSON.stringify(error)}`);
      return this.t;
    }
  }
  registerSetLanguageCallback(callback) {
    this.setLanguageCallback = callback;
  }
};

// node_modules/stream-chat-react/dist/components/MessageList/utils.js
var processMessages = (params) => {
  var _a;
  const { messages, reviewProcessedMessage, setGiphyPreviewMessage, ...context } = params;
  const { enableDateSeparator, hideDeletedMessages, hideNewMessageSeparator, lastRead, userId } = context;
  let unread = false;
  let ephemeralMessagePresent = false;
  let lastDateSeparator;
  const newMessages = [];
  for (let i2 = 0; i2 < messages.length; i2 += 1) {
    const message = messages[i2];
    if (hideDeletedMessages && message.type === "deleted") {
      continue;
    }
    if (setGiphyPreviewMessage && message.type === "ephemeral" && message.command === "giphy") {
      ephemeralMessagePresent = true;
      setGiphyPreviewMessage(message);
      continue;
    }
    const changes = [];
    const messageDate = message.created_at && isDate(message.created_at) && message.created_at.toDateString() || "";
    const previousMessage = messages[i2 - 1];
    let prevMessageDate = messageDate;
    if (enableDateSeparator && (previousMessage == null ? void 0 : previousMessage.created_at) && isDate(previousMessage.created_at)) {
      prevMessageDate = previousMessage.created_at.toDateString();
    }
    if (!unread && !hideNewMessageSeparator) {
      unread = lastRead && message.created_at && new Date(lastRead) < message.created_at || false;
      if (enableDateSeparator && unread && ((_a = message.user) == null ? void 0 : _a.id) !== userId) {
        changes.push({
          customType: CUSTOM_MESSAGE_TYPE.date,
          date: message.created_at,
          id: makeDateMessageId(message.created_at),
          unread
        });
      }
    }
    if (enableDateSeparator && (i2 === 0 || // always put date separator before the first message
    messageDate !== prevMessageDate || // add date separator btw. 2 messages created on different date
    // if hiding deleted messages replace the previous deleted message(s) with A separator if the last rendered message was created on different date
    hideDeletedMessages && (previousMessage == null ? void 0 : previousMessage.type) === "deleted" && lastDateSeparator !== messageDate) && !isDateSeparatorMessage(changes[changes.length - 1])) {
      lastDateSeparator = messageDate;
      changes.push({
        customType: CUSTOM_MESSAGE_TYPE.date,
        date: message.created_at,
        id: makeDateMessageId(message.created_at)
      }, message);
    } else {
      changes.push(message);
    }
    newMessages.push(...(reviewProcessedMessage == null ? void 0 : reviewProcessedMessage({
      changes,
      context,
      index: i2,
      messages,
      processedMessages: newMessages
    })) || changes);
  }
  if (setGiphyPreviewMessage && !ephemeralMessagePresent) {
    setGiphyPreviewMessage(void 0);
  }
  return newMessages;
};
var makeIntroMessage = () => ({
  customType: CUSTOM_MESSAGE_TYPE.intro,
  id: nanoid()
});
var makeDateMessageId = (date) => {
  let idSuffix;
  try {
    idSuffix = !date ? nanoid() : date instanceof Date ? date.toISOString() : date;
  } catch (e) {
    idSuffix = nanoid();
  }
  return `${CUSTOM_MESSAGE_TYPE.date}-${idSuffix}`;
};
var getLastReceived = (messages) => {
  for (let i2 = messages.length - 1; i2 > 0; i2 -= 1) {
    if (messages[i2].status === "received") {
      return messages[i2].id;
    }
  }
  return null;
};
var getReadStates = (messages, read2 = {}, returnAllReadData) => {
  const readData = {};
  Object.values(read2).forEach((readState) => {
    if (!readState.last_read)
      return;
    let userLastReadMsgId;
    messages.forEach((msg) => {
      if (msg.created_at && msg.created_at < readState.last_read) {
        userLastReadMsgId = msg.id;
        if (returnAllReadData) {
          if (!readData[userLastReadMsgId]) {
            readData[userLastReadMsgId] = [];
          }
          readData[userLastReadMsgId].push(readState.user);
        }
      }
    });
    if (userLastReadMsgId && !returnAllReadData) {
      if (!readData[userLastReadMsgId]) {
        readData[userLastReadMsgId] = [];
      }
      readData[userLastReadMsgId].push(readState.user);
    }
  });
  return readData;
};
var insertIntro = (messages, headerPosition) => {
  const newMessages = messages;
  const intro = makeIntroMessage();
  if (!headerPosition) {
    newMessages.unshift(intro);
    return newMessages;
  }
  if (!newMessages.length) {
    newMessages.unshift(intro);
    return newMessages;
  }
  for (let i2 = 0; i2 < messages.length; i2 += 1) {
    const messageTime = isDate(messages[i2].created_at) ? messages[i2].created_at.getTime() : null;
    const nextMessageTime = isDate(messages[i2 + 1].created_at) ? messages[i2 + 1].created_at.getTime() : null;
    if (messageTime && messageTime < headerPosition) {
      if (nextMessageTime && nextMessageTime < headerPosition) {
        if (messages[i2 + 1] && isDateSeparatorMessage(messages[i2 + 1]))
          continue;
        if (!nextMessageTime) {
          newMessages.push(intro);
          return newMessages;
        }
      } else {
        newMessages.splice(i2 + 1, 0, intro);
        return newMessages;
      }
    }
  }
  return newMessages;
};
var getGroupStyles = (message, previousMessage, nextMessage, noGroupByUser, maxTimeBetweenGroupedMessages) => {
  var _a, _b, _c, _d, _e2, _f, _g;
  if (isDateSeparatorMessage(message) || isIntroMessage(message))
    return "";
  if (noGroupByUser || ((_a = message.attachments) == null ? void 0 : _a.length) !== 0)
    return "single";
  const isTopMessage = !previousMessage || isIntroMessage(previousMessage) || isDateSeparatorMessage(previousMessage) || previousMessage.type === "system" || previousMessage.type === "error" || ((_b = previousMessage.attachments) == null ? void 0 : _b.length) !== 0 || ((_c = message.user) == null ? void 0 : _c.id) !== ((_d = previousMessage.user) == null ? void 0 : _d.id) || previousMessage.deleted_at || message.reaction_groups && Object.keys(message.reaction_groups).length > 0 || isMessageEdited(previousMessage) || maxTimeBetweenGroupedMessages !== void 0 && previousMessage.created_at && message.created_at && new Date(message.created_at).getTime() - new Date(previousMessage.created_at).getTime() > maxTimeBetweenGroupedMessages;
  const isBottomMessage = !nextMessage || isIntroMessage(nextMessage) || isDateSeparatorMessage(nextMessage) || nextMessage.type === "system" || nextMessage.type === "error" || ((_e2 = nextMessage.attachments) == null ? void 0 : _e2.length) !== 0 || ((_f = message.user) == null ? void 0 : _f.id) !== ((_g = nextMessage.user) == null ? void 0 : _g.id) || nextMessage.deleted_at || nextMessage.reaction_groups && Object.keys(nextMessage.reaction_groups).length > 0 || isMessageEdited(message) || maxTimeBetweenGroupedMessages !== void 0 && nextMessage.created_at && message.created_at && new Date(nextMessage.created_at).getTime() - new Date(message.created_at).getTime() > maxTimeBetweenGroupedMessages;
  if (!isTopMessage && !isBottomMessage) {
    if (message.deleted_at || message.type === "error")
      return "single";
    return "middle";
  }
  if (isBottomMessage) {
    if (isTopMessage || message.deleted_at || message.type === "error")
      return "single";
    return "bottom";
  }
  if (isTopMessage)
    return "top";
  return "";
};
var hasMoreMessagesProbably = (returnedCountMessages, limit) => returnedCountMessages >= limit;
var hasNotMoreMessages = (returnedCountMessages, limit) => returnedCountMessages < limit;
function isIntroMessage(message) {
  return message.customType === CUSTOM_MESSAGE_TYPE.intro;
}
function isDateSeparatorMessage(message) {
  return message !== null && typeof message === "object" && message.customType === CUSTOM_MESSAGE_TYPE.date && isDate(message.date);
}
function isLocalMessage(message) {
  return !isDateSeparatorMessage(message) && !isIntroMessage(message);
}
var getIsFirstUnreadMessage = ({ firstUnreadMessageId, isFirstMessage, lastReadDate, lastReadMessageId, message, previousMessage, unreadMessageCount = 0 }) => {
  if (message.parent_id)
    return false;
  const createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();
  const lastReadTimestamp = lastReadDate == null ? void 0 : lastReadDate.getTime();
  const messageIsUnread = !!createdAtTimestamp && !!lastReadTimestamp && createdAtTimestamp > lastReadTimestamp;
  const previousMessageIsLastRead = !!lastReadMessageId && lastReadMessageId === (previousMessage == null ? void 0 : previousMessage.id);
  return firstUnreadMessageId === message.id || !!unreadMessageCount && messageIsUnread && (isFirstMessage || previousMessageIsLastRead);
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useEnrichedMessages.js
var useEnrichedMessages = (args) => {
  const { channel, disableDateSeparator, groupStyles, headerPosition, hideDeletedMessages, hideNewMessageSeparator, maxTimeBetweenGroupedMessages, messages, noGroupByUser, reviewProcessedMessage } = args;
  const { client } = useChatContext("useEnrichedMessages");
  const { HeaderComponent } = useComponentContext("useEnrichedMessages");
  const lastRead = (0, import_react202.useMemo)(() => {
    var _a;
    return (_a = channel.lastRead) == null ? void 0 : _a.call(channel);
  }, [channel]);
  const enableDateSeparator = !disableDateSeparator;
  let messagesWithDates = !enableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator ? messages : processMessages({
    enableDateSeparator,
    hideDeletedMessages,
    hideNewMessageSeparator,
    lastRead,
    messages,
    reviewProcessedMessage,
    userId: client.userID || ""
  });
  if (HeaderComponent) {
    messagesWithDates = insertIntro(messagesWithDates, headerPosition);
  }
  const groupStylesFn = groupStyles || getGroupStyles;
  const messageGroupStyles = (0, import_react202.useMemo)(
    () => messagesWithDates.reduce((acc, message, i2) => {
      const style = groupStylesFn(message, messagesWithDates[i2 - 1], messagesWithDates[i2 + 1], noGroupByUser, maxTimeBetweenGroupedMessages);
      if (style)
        acc[message.id] = style;
      return acc;
    }, {}),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [maxTimeBetweenGroupedMessages, messagesWithDates, noGroupByUser]
  );
  return { messageGroupStyles, messages: messagesWithDates };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListElements.js
var import_react204 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/hooks/useLastReadData.js
var import_react203 = __toESM(require_react());
var useLastReadData = (props) => {
  const { messages, read: read2, returnAllReadData, userID } = props;
  return (0, import_react203.useMemo)(() => {
    const ownLocalMessages = messages.filter((msg) => {
      var _a;
      return isLocalMessage(msg) && ((_a = msg.user) == null ? void 0 : _a.id) === userID;
    });
    return getReadStates(ownLocalMessages, read2, returnAllReadData);
  }, [messages, read2, returnAllReadData, userID]);
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListElements.js
var useMessageListElements = (props) => {
  const { channelUnreadUiState, enrichedMessages, internalMessageProps, messageGroupStyles, read: read2, renderMessages, returnAllReadData, threadList } = props;
  const { client, customClasses } = useChatContext("useMessageListElements");
  const components = useComponentContext("useMessageListElements");
  const readData = useLastReadData({
    messages: enrichedMessages,
    read: read2,
    returnAllReadData,
    userID: client.userID
  });
  const lastReceivedMessageId = (0, import_react204.useMemo)(() => getLastReceived(enrichedMessages), [enrichedMessages]);
  const elements = (0, import_react204.useMemo)(
    () => renderMessages({
      channelUnreadUiState,
      components,
      customClasses,
      lastReceivedMessageId,
      messageGroupStyles,
      messages: enrichedMessages,
      readData,
      sharedMessageProps: { ...internalMessageProps, threadList }
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      enrichedMessages,
      internalMessageProps,
      lastReceivedMessageId,
      messageGroupStyles,
      channelUnreadUiState,
      readData,
      renderMessages,
      threadList
    ]
  );
  return elements;
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListScrollManager.js
var import_react205 = __toESM(require_react());
function useMessageListScrollManager(params) {
  const { loadMoreScrollThreshold, onScrollBy, scrollContainerMeasures, scrolledUpThreshold, scrollToBottom, showNewMessages } = params;
  const { client } = useChatContext("useMessageListScrollManager");
  const measures = (0, import_react205.useRef)({
    offsetHeight: 0,
    scrollHeight: 0
  });
  const messages = (0, import_react205.useRef)(void 0);
  const scrollTop = (0, import_react205.useRef)(0);
  (0, import_react205.useLayoutEffect)(() => {
    var _a, _b, _c;
    const prevMeasures = measures.current;
    const prevMessages = messages.current;
    const newMessages = params.messages;
    const lastNewMessage = newMessages[newMessages.length - 1] || {};
    const lastPrevMessage = prevMessages == null ? void 0 : prevMessages[prevMessages.length - 1];
    const newMeasures = scrollContainerMeasures();
    const wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current < scrolledUpThreshold;
    if (typeof prevMessages !== "undefined") {
      if (prevMessages.length < newMessages.length) {
        if ((lastPrevMessage == null ? void 0 : lastPrevMessage.id) === lastNewMessage.id) {
          if (scrollTop.current < loadMoreScrollThreshold) {
            const listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;
            onScrollBy(listHeightDelta);
          }
        } else {
          const lastMessageIsFromCurrentUser = ((_a = lastNewMessage.user) == null ? void 0 : _a.id) === client.userID;
          if (lastMessageIsFromCurrentUser || wasAtBottom) {
            scrollToBottom();
          } else {
            showNewMessages();
          }
        }
      } else {
        const hasNewReactions = ((_b = lastPrevMessage == null ? void 0 : lastPrevMessage.latest_reactions) == null ? void 0 : _b.length) !== ((_c = lastNewMessage.latest_reactions) == null ? void 0 : _c.length);
        const hasNewReplies = (lastPrevMessage == null ? void 0 : lastPrevMessage.reply_count) !== lastNewMessage.reply_count;
        if ((hasNewReactions || hasNewReplies) && wasAtBottom) {
          scrollToBottom();
        }
      }
    }
    messages.current = newMessages;
    measures.current = newMeasures;
  }, [measures, messages, params.messages]);
  return (scrollTopValue) => {
    scrollTop.current = scrollTopValue;
  };
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useScrollLocationLogic.js
var import_react206 = __toESM(require_react());
var useScrollLocationLogic = (params) => {
  const { hasMoreNewer, listElement, loadMoreScrollThreshold, messages = [], scrolledUpThreshold = 200, suppressAutoscroll } = params;
  const [hasNewMessages, setHasNewMessages] = (0, import_react206.useState)(false);
  const [wrapperRect, setWrapperRect] = (0, import_react206.useState)();
  const [isMessageListScrolledToBottom, setIsMessageListScrolledToBottom] = (0, import_react206.useState)(true);
  const closeToBottom = (0, import_react206.useRef)(false);
  const closeToTop = (0, import_react206.useRef)(false);
  const scrollToBottom = (0, import_react206.useCallback)(() => {
    if (!(listElement == null ? void 0 : listElement.scrollTo) || hasMoreNewer || suppressAutoscroll) {
      return;
    }
    listElement.scrollTo({
      top: listElement.scrollHeight
    });
    setHasNewMessages(false);
  }, [listElement, hasMoreNewer, suppressAutoscroll]);
  (0, import_react206.useLayoutEffect)(() => {
    if (listElement) {
      setWrapperRect(listElement.getBoundingClientRect());
      scrollToBottom();
    }
  }, [listElement, hasMoreNewer]);
  const updateScrollTop = useMessageListScrollManager({
    loadMoreScrollThreshold,
    messages,
    onScrollBy: (scrollBy) => {
      listElement == null ? void 0 : listElement.scrollBy({ top: scrollBy });
    },
    scrollContainerMeasures: () => ({
      offsetHeight: (listElement == null ? void 0 : listElement.offsetHeight) || 0,
      scrollHeight: (listElement == null ? void 0 : listElement.scrollHeight) || 0
    }),
    scrolledUpThreshold,
    scrollToBottom,
    showNewMessages: () => setHasNewMessages(true)
  });
  const onScroll = (0, import_react206.useCallback)((event) => {
    const element4 = event.target;
    const scrollTop = element4.scrollTop;
    updateScrollTop(scrollTop);
    const offsetHeight = element4.offsetHeight;
    const scrollHeight = element4.scrollHeight;
    const prevCloseToBottom = closeToBottom.current;
    closeToBottom.current = scrollHeight - (scrollTop + offsetHeight) < scrolledUpThreshold;
    closeToTop.current = scrollTop < scrolledUpThreshold;
    if (closeToBottom.current) {
      setHasNewMessages(false);
    }
    if (prevCloseToBottom && !closeToBottom.current) {
      setIsMessageListScrolledToBottom(false);
    } else if (!prevCloseToBottom && closeToBottom.current) {
      setIsMessageListScrolledToBottom(true);
    }
  }, [updateScrollTop, closeToTop, closeToBottom, scrolledUpThreshold]);
  return {
    hasNewMessages,
    isMessageListScrolledToBottom,
    onScroll,
    scrollToBottom,
    wrapperRect
  };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.js
var import_react209 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/MessageListMainPanel.js
var import_react207 = __toESM(require_react());
var MESSAGE_LIST_MAIN_PANEL_CLASS = "str-chat__main-panel-inner str-chat__message-list-main-panel";
var MessageListMainPanel = ({ children }) => import_react207.default.createElement("div", { className: MESSAGE_LIST_MAIN_PANEL_CLASS }, children);

// node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesSeparator.js
var import_react208 = __toESM(require_react());
var UNREAD_MESSAGE_SEPARATOR_CLASS = "str-chat__unread-messages-separator";
var UnreadMessagesSeparator = ({ showCount, unreadCount }) => {
  const { t: t2 } = useTranslationContext("UnreadMessagesSeparator");
  return import_react208.default.createElement("div", { className: UNREAD_MESSAGE_SEPARATOR_CLASS, "data-testid": "unread-messages-separator" }, unreadCount && showCount ? t2("unreadMessagesSeparatorText", { count: unreadCount }) : t2("Unread messages"));
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.js
var targetScrolledAboveVisibleContainerArea = (element4) => {
  const { bottom: targetBottom } = element4.getBoundingClientRect();
  return targetBottom < 0;
};
var targetScrolledBelowVisibleContainerArea = (element4, container) => {
  const { top: targetTop } = element4.getBoundingClientRect();
  const { top: containerBottom } = container.getBoundingClientRect();
  return targetTop > containerBottom;
};
var useUnreadMessagesNotification = ({ isMessageListScrolledToBottom, showAlways, unreadCount }) => {
  const { messages } = useChannelStateContext("UnreadMessagesNotification");
  const [show, setShow] = (0, import_react209.useState)(false);
  const isScrolledAboveTargetTop = (0, import_react209.useRef)(false);
  const intersectionObserverIsSupported = typeof IntersectionObserver !== "undefined";
  (0, import_react209.useEffect)(() => {
    if (!(unreadCount && intersectionObserverIsSupported)) {
      setShow(false);
      return;
    }
    const [msgListPanel] = document.getElementsByClassName(MESSAGE_LIST_MAIN_PANEL_CLASS);
    if (!msgListPanel)
      return;
    const [observedTarget] = document.getElementsByClassName(UNREAD_MESSAGE_SEPARATOR_CLASS);
    if (!observedTarget) {
      setShow(true);
      return;
    }
    const scrolledBelowSeparator = targetScrolledAboveVisibleContainerArea(observedTarget);
    const scrolledAboveSeparator = targetScrolledBelowVisibleContainerArea(observedTarget, msgListPanel);
    setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);
    const observer = new IntersectionObserver((elements) => {
      if (!elements.length)
        return;
      const { boundingClientRect, isIntersecting } = elements[0];
      if (isIntersecting) {
        setShow(false);
        return;
      }
      const separatorIsAboveContainerTop = boundingClientRect.bottom < 0;
      setShow(showAlways || separatorIsAboveContainerTop);
      isScrolledAboveTargetTop.current = separatorIsAboveContainerTop;
    }, { root: msgListPanel });
    observer.observe(observedTarget);
    return () => {
      observer.disconnect();
    };
  }, [
    intersectionObserverIsSupported,
    isMessageListScrolledToBottom,
    messages,
    showAlways,
    unreadCount
  ]);
  (0, import_react209.useEffect)(() => {
    if (unreadCount && isMessageListScrolledToBottom && isScrolledAboveTargetTop.current) {
      setShow(true);
      isScrolledAboveTargetTop.current = false;
    }
  }, [isMessageListScrolledToBottom, unreadCount]);
  return { show: show && intersectionObserverIsSupported };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/useMarkRead.js
var import_react210 = __toESM(require_react());
var hasReadLastMessage = (channel, userId) => {
  var _a, _b;
  const latestMessageIdInChannel = (_a = channel.state.latestMessages.slice(-1)[0]) == null ? void 0 : _a.id;
  const lastReadMessageIdServer = (_b = channel.state.read[userId]) == null ? void 0 : _b.last_read_message_id;
  return latestMessageIdInChannel === lastReadMessageIdServer;
};
var useMarkRead = ({ isMessageListScrolledToBottom, messageListIsThread, wasMarkedUnread }) => {
  const { client } = useChatContext("useMarkRead");
  const { markRead, setChannelUnreadUiState } = useChannelActionContext("useMarkRead");
  const { channel } = useChannelStateContext("useMarkRead");
  (0, import_react210.useEffect)(() => {
    const shouldMarkRead = () => {
      var _a;
      return !document.hidden && !wasMarkedUnread && !messageListIsThread && isMessageListScrolledToBottom && ((_a = client.user) == null ? void 0 : _a.id) && !hasReadLastMessage(channel, client.user.id);
    };
    const onVisibilityChange = () => {
      if (shouldMarkRead())
        markRead();
    };
    const handleMessageNew = (event) => {
      var _a, _b;
      const mainChannelUpdated = !((_a = event.message) == null ? void 0 : _a.parent_id) || ((_b = event.message) == null ? void 0 : _b.show_in_channel);
      if (!isMessageListScrolledToBottom || wasMarkedUnread || document.hidden) {
        setChannelUnreadUiState((prev) => {
          const previousUnreadCount = (prev == null ? void 0 : prev.unread_messages) ?? 0;
          const previousLastMessage = getPreviousLastMessage(channel.state.messages, event.message);
          return {
            ...prev || {},
            last_read: (prev == null ? void 0 : prev.last_read) ?? (previousUnreadCount === 0 && (previousLastMessage == null ? void 0 : previousLastMessage.created_at) ? new Date(previousLastMessage.created_at) : /* @__PURE__ */ new Date(0)),
            // not having information about the last read message means the whole channel is unread,
            unread_messages: previousUnreadCount + 1
          };
        });
      } else if (mainChannelUpdated && shouldMarkRead()) {
        markRead();
      }
    };
    channel.on("message.new", handleMessageNew);
    document.addEventListener("visibilitychange", onVisibilityChange);
    if (shouldMarkRead()) {
      markRead();
    }
    return () => {
      channel.off("message.new", handleMessageNew);
      document.removeEventListener("visibilitychange", onVisibilityChange);
    };
  }, [
    channel,
    client,
    isMessageListScrolledToBottom,
    markRead,
    messageListIsThread,
    setChannelUnreadUiState,
    wasMarkedUnread
  ]);
};
function getPreviousLastMessage(messages, newMessage) {
  if (!newMessage)
    return;
  let previousLastMessage;
  for (let i2 = messages.length - 1; i2 >= 0; i2--) {
    const msg = messages[i2];
    if (!(msg == null ? void 0 : msg.id))
      break;
    if (msg.id !== newMessage.id) {
      previousLastMessage = msg;
      break;
    }
  }
  return previousLastMessage;
}

// node_modules/stream-chat-react/dist/components/MessageList/MessageNotification.js
var import_react211 = __toESM(require_react());
var UnMemoizedMessageNotification = (props) => {
  const { children, onClick, showNotification = true } = props;
  if (!showNotification)
    return null;
  return import_react211.default.createElement("button", { "aria-live": "polite", className: `str-chat__message-notification`, "data-testid": "message-notification", onClick }, children);
};
var MessageNotification = import_react211.default.memo(UnMemoizedMessageNotification);

// node_modules/stream-chat-react/dist/components/MessageList/MessageListNotifications.js
var import_react212 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Notifications/hooks/useNotifications.js
var selector2 = (state) => ({
  notifications: state.notifications
});
var useNotifications = () => {
  const { client } = useChatContext();
  const result = useStateStore(client.notifications.store, selector2);
  return result.notifications;
};

// node_modules/stream-chat-react/dist/components/MessageList/MessageListNotifications.js
var ClientNotifications = () => {
  const clientNotifications = useNotifications();
  const { t: t2 } = useTranslationContext();
  return import_react212.default.createElement(import_react212.default.Fragment, null, clientNotifications.map((notification) => import_react212.default.createElement(CustomNotification, { active: true, key: notification.id, type: notification.severity }, t2("translationBuilderTopic/notification", { notification }))));
};
var MessageListNotifications = (props) => {
  const { hasNewMessages, isMessageListScrolledToBottom, isNotAtLatestMessageSet, MessageNotification: MessageNotification2, notifications, scrollToBottom, threadList, unreadCount } = props;
  const { t: t2 } = useTranslationContext("MessageListNotifications");
  return import_react212.default.createElement(
    "div",
    { className: "str-chat__list-notifications" },
    notifications.map((notification) => import_react212.default.createElement(CustomNotification, { active: true, key: notification.id, type: notification.type }, notification.text)),
    import_react212.default.createElement(ClientNotifications, null),
    import_react212.default.createElement(ConnectionStatus, null),
    import_react212.default.createElement(MessageNotification2, { isMessageListScrolledToBottom, onClick: scrollToBottom, showNotification: hasNewMessages || isNotAtLatestMessageSet, threadList, unreadCount }, isNotAtLatestMessageSet ? t2("Latest Messages") : t2("New Messages!"))
  );
};

// node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesNotification.js
var import_react214 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/icons.js
var import_react213 = __toESM(require_react());
var ArrowDown = ({ className, color: color2 }) => import_react213.default.createElement(
  "svg",
  { className, "data-testid": "arrow-down", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react213.default.createElement("path", { d: "M7.41 8.29504L12 12.875L16.59 8.29504L18 9.70504L12 15.705L6 9.70504L7.41 8.29504Z", fill: color2 || "var(--primary-color)" })
);
var CloseIcon2 = () => import_react213.default.createElement(
  "svg",
  { fill: "currentColor", viewBox: "0 0 14 13", xmlns: "http://www.w3.org/2000/svg" },
  import_react213.default.createElement("path", { d: "M1.32227 12.3408C0.944336 11.9629 0.953125 11.3213 1.32227 10.9521L5.60254 6.66309L1.32227 2.38281C0.953125 2.01367 0.944336 1.37207 1.32227 0.994141C1.7002 0.616211 2.3418 0.625 2.71094 0.985352L7 5.27441L11.2803 0.994141C11.6494 0.625 12.291 0.616211 12.6689 0.994141C13.0469 1.37207 13.0381 2.01367 12.6689 2.38281L8.38867 6.66309L12.6689 10.9521C13.0381 11.3213 13.0469 11.9629 12.6689 12.3408C12.291 12.7188 11.6494 12.71 11.2803 12.3408L7 8.06055L2.71094 12.3408C2.3418 12.71 1.7002 12.7188 1.32227 12.3408Z" })
);

// node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesNotification.js
var UnreadMessagesNotification = ({ queryMessageLimit, showCount, unreadCount }) => {
  const { jumpToFirstUnreadMessage, markRead } = useChannelActionContext("UnreadMessagesNotification");
  const { t: t2 } = useTranslationContext("UnreadMessagesNotification");
  return import_react214.default.createElement(
    "div",
    { className: "str-chat__unread-messages-notification", "data-testid": "unread-messages-notification" },
    import_react214.default.createElement("button", { onClick: () => jumpToFirstUnreadMessage(queryMessageLimit) }, unreadCount && showCount ? t2("{{count}} unread", { count: unreadCount ?? 0 }) : t2("Unread messages")),
    import_react214.default.createElement(
      "button",
      { onClick: () => markRead() },
      import_react214.default.createElement(CloseIcon2, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/InfiniteScrollPaginator/InfiniteScroll.js
var import_react215 = __toESM(require_react());
var mousewheelListener2 = (event) => {
  if (event instanceof WheelEvent && event.deltaY === 1) {
    event.preventDefault();
  }
};
var InfiniteScroll = (props) => {
  const { children, element: Component2 = "div", hasMore, hasMoreNewer, hasNextPage, hasPreviousPage, head, initialLoad = true, isLoading, listenToScroll, loader, loadMore, loadMoreNewer, loadNextPage, loadPreviousPage, threshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, useCapture = false, ...elementProps } = props;
  const loadNextPageFn = loadNextPage || loadMoreNewer;
  const loadPreviousPageFn = loadPreviousPage || loadMore;
  const hasNextPageFlag = hasNextPage || hasMoreNewer;
  const hasPreviousPageFlag = hasPreviousPage || hasMore;
  const [scrollComponent, setScrollComponent] = (0, import_react215.useState)(null);
  const previousOffset = (0, import_react215.useRef)(void 0);
  const previousReverseOffset = (0, import_react215.useRef)(void 0);
  const scrollListenerRef = (0, import_react215.useRef)(void 0);
  scrollListenerRef.current = () => {
    const element4 = scrollComponent;
    if (!element4 || element4.offsetParent === null) {
      return;
    }
    const parentElement = element4.parentElement;
    const offset2 = element4.scrollHeight - parentElement.scrollTop - parentElement.clientHeight;
    const reverseOffset = parentElement.scrollTop;
    if (listenToScroll) {
      listenToScroll(offset2, reverseOffset, threshold);
    }
    if (isLoading)
      return;
    if (previousOffset.current === offset2 && previousReverseOffset.current === reverseOffset)
      return;
    previousOffset.current = offset2;
    previousReverseOffset.current = reverseOffset;
    if (reverseOffset < Number(threshold) && typeof loadPreviousPageFn === "function" && hasPreviousPageFlag) {
      loadPreviousPageFn();
    }
    if (offset2 < Number(threshold) && typeof loadNextPageFn === "function" && hasNextPageFlag) {
      loadNextPageFn();
    }
  };
  (0, import_react215.useEffect)(() => {
    deprecationAndReplacementWarning([
      [{ hasMoreNewer }, { hasNextPage }],
      [{ loadMoreNewer }, { loadNextPage }],
      [{ hasMore }, { hasPreviousPage }],
      [{ loadMore }, { loadPreviousPage }]
    ], "InfiniteScroll");
  }, []);
  (0, import_react215.useEffect)(() => {
    const scrollElement = scrollComponent == null ? void 0 : scrollComponent.parentNode;
    if (!scrollElement)
      return;
    const scrollListener = () => {
      var _a;
      return (_a = scrollListenerRef.current) == null ? void 0 : _a.call(scrollListenerRef);
    };
    scrollElement.addEventListener("scroll", scrollListener, useCapture);
    scrollElement.addEventListener("resize", scrollListener, useCapture);
    scrollListener();
    return () => {
      scrollElement.removeEventListener("scroll", scrollListener, useCapture);
      scrollElement.removeEventListener("resize", scrollListener, useCapture);
    };
  }, [initialLoad, scrollComponent, useCapture]);
  (0, import_react215.useEffect)(() => {
    const scrollElement = scrollComponent == null ? void 0 : scrollComponent.parentNode;
    if (!scrollElement)
      return;
    scrollElement.addEventListener("wheel", mousewheelListener2, { passive: false });
    return () => {
      scrollElement.removeEventListener("wheel", mousewheelListener2, useCapture);
    };
  }, [scrollComponent, useCapture]);
  return import_react215.default.createElement(
    Component2,
    { ...elementProps, ref: setScrollComponent },
    head,
    loader,
    children
  );
};

// node_modules/stream-chat-react/dist/components/TypingIndicator/TypingIndicator.js
var import_react216 = __toESM(require_react());
var useJoinTypingUsers = (names) => {
  const { t: t2 } = useTranslationContext();
  if (!names.length)
    return null;
  const [name2, ...rest] = names;
  if (names.length === 1)
    return t2("{{ user }} is typing...", {
      user: name2
    });
  const MAX_JOINED_USERS = 3;
  if (names.length > MAX_JOINED_USERS)
    return t2("{{ users }} and more are typing...", {
      users: names.slice(0, MAX_JOINED_USERS).join(", ").trim()
    });
  return t2("{{ users }} and {{ user }} are typing...", {
    user: name2,
    users: rest.join(", ").trim()
  });
};
var UnMemoizedTypingIndicator = (props) => {
  const { threadList } = props;
  const { channelConfig, thread } = useChannelStateContext("TypingIndicator");
  const { client } = useChatContext("TypingIndicator");
  const { typing = {} } = useTypingContext("TypingIndicator");
  const typingInChannel = !threadList ? Object.values(typing).filter(({ parent_id, user }) => {
    var _a;
    return (user == null ? void 0 : user.id) !== ((_a = client.user) == null ? void 0 : _a.id) && !parent_id;
  }) : [];
  const typingInThread = threadList ? Object.values(typing).filter(({ parent_id, user }) => {
    var _a;
    return (user == null ? void 0 : user.id) !== ((_a = client.user) == null ? void 0 : _a.id) && parent_id === (thread == null ? void 0 : thread.id);
  }) : [];
  const typingUserList = (threadList ? typingInThread : typingInChannel).map(({ user }) => (user == null ? void 0 : user.name) || (user == null ? void 0 : user.id)).filter(Boolean);
  const joinedTypingUsers = useJoinTypingUsers(typingUserList);
  const isTypingActive = threadList && typingInThread.length || !threadList && typingInChannel.length;
  if ((channelConfig == null ? void 0 : channelConfig.typing_events) === false) {
    return null;
  }
  if (!isTypingActive)
    return null;
  return import_react216.default.createElement(
    "div",
    { className: clsx_default("str-chat__typing-indicator", {
      "str-chat__typing-indicator--typing": isTypingActive
    }), "data-testid": "typing-indicator" },
    import_react216.default.createElement(
      "div",
      { className: "str-chat__typing-indicator__dots" },
      import_react216.default.createElement("span", { className: "str-chat__typing-indicator__dot" }),
      import_react216.default.createElement("span", { className: "str-chat__typing-indicator__dot" }),
      import_react216.default.createElement("span", { className: "str-chat__typing-indicator__dot" })
    ),
    import_react216.default.createElement("div", { className: "str-chat__typing-indicator__users", "data-testid": "typing-users" }, joinedTypingUsers)
  );
};
var TypingIndicator = import_react216.default.memo(UnMemoizedTypingIndicator);

// node_modules/stream-chat-react/dist/components/MessageList/renderMessages.js
var import_react219 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/DateSeparator/DateSeparator.js
var import_react217 = __toESM(require_react());
var UnMemoizedDateSeparator = (props) => {
  const { calendar: calendar3, date: messageCreatedAt, formatDate, position: position3 = "right", unread, ...restTimestampFormatterOptions } = props;
  const { t: t2, tDateTimeParser } = useTranslationContext("DateSeparator");
  const formattedDate = getDateString({
    calendar: calendar3,
    ...restTimestampFormatterOptions,
    formatDate,
    messageCreatedAt,
    t: t2,
    tDateTimeParser,
    timestampTranslationKey: "timestamp/DateSeparator"
  });
  return import_react217.default.createElement(
    "div",
    { className: "str-chat__date-separator", "data-testid": "date-separator" },
    (position3 === "right" || position3 === "center") && import_react217.default.createElement("hr", { className: "str-chat__date-separator-line" }),
    import_react217.default.createElement("div", { className: "str-chat__date-separator-date" }, unread ? `${t2("New")} - ${formattedDate}` : formattedDate),
    (position3 === "left" || position3 === "center") && import_react217.default.createElement("hr", { className: "str-chat__date-separator-line" })
  );
};
var DateSeparator = import_react217.default.memo(UnMemoizedDateSeparator);

// node_modules/stream-chat-react/dist/components/EventComponent/EventComponent.js
var import_react218 = __toESM(require_react());
var UnMemoizedEventComponent = (props) => {
  var _a, _b, _c;
  const { Avatar: Avatar2 = Avatar, calendar: calendar3, calendarFormats, format, message } = props;
  const { t: t2, tDateTimeParser } = useTranslationContext("EventComponent");
  const { created_at = "", event, text: text8, type } = message;
  const getDateOptions = { messageCreatedAt: created_at.toString(), tDateTimeParser };
  if (type === "system")
    return import_react218.default.createElement(
      "div",
      { className: "str-chat__message--system", "data-testid": "message-system" },
      import_react218.default.createElement(
        "div",
        { className: "str-chat__message--system__text" },
        import_react218.default.createElement("div", { className: "str-chat__message--system__line" }),
        import_react218.default.createElement("p", null, text8),
        import_react218.default.createElement("div", { className: "str-chat__message--system__line" })
      ),
      import_react218.default.createElement(
        "div",
        { className: "str-chat__message--system__date" },
        import_react218.default.createElement("strong", null, getDateString({
          ...getDateOptions,
          calendar: calendar3,
          calendarFormats,
          format,
          t: t2,
          timestampTranslationKey: "timestamp/SystemMessage"
        }))
      )
    );
  if ((event == null ? void 0 : event.type) === "member.removed" || (event == null ? void 0 : event.type) === "member.added") {
    const name2 = ((_a = event.user) == null ? void 0 : _a.name) || ((_b = event.user) == null ? void 0 : _b.id);
    const sentence = `${name2} ${event.type === "member.added" ? "has joined the chat" : "was removed from the chat"}`;
    return import_react218.default.createElement(
      "div",
      { className: "str-chat__event-component__channel-event" },
      import_react218.default.createElement(Avatar2, { image: (_c = event.user) == null ? void 0 : _c.image, name: name2, user: event.user }),
      import_react218.default.createElement(
        "div",
        { className: "str-chat__event-component__channel-event__content" },
        import_react218.default.createElement("em", { className: "str-chat__event-component__channel-event__sentence" }, sentence),
        import_react218.default.createElement("div", { className: "str-chat__event-component__channel-event__date" }, getDateString({ ...getDateOptions, format: "LT" }))
      )
    );
  }
  return null;
};
var EventComponent = import_react218.default.memo(UnMemoizedEventComponent);

// node_modules/stream-chat-react/dist/components/MessageList/renderMessages.js
function defaultRenderMessages({ channelUnreadUiState, components, customClasses, lastReceivedMessageId: lastReceivedId, messageGroupStyles, messages, readData, sharedMessageProps: messageProps }) {
  const { DateSeparator: DateSeparator2 = DateSeparator, HeaderComponent, MessageSystem = EventComponent, UnreadMessagesSeparator: UnreadMessagesSeparator2 = UnreadMessagesSeparator } = components;
  const renderedMessages = [];
  let firstMessage;
  let previousMessage = void 0;
  for (let index4 = 0; index4 < messages.length; index4++) {
    const message = messages[index4];
    if (isDateSeparatorMessage(message)) {
      renderedMessages.push(import_react219.default.createElement(
        "li",
        { key: `${message.date.toISOString()}-i` },
        import_react219.default.createElement(DateSeparator2, { date: message.date, formatDate: messageProps.formatDate, unread: message.unread })
      ));
    } else if (isIntroMessage(message)) {
      if (HeaderComponent) {
        renderedMessages.push(import_react219.default.createElement(
          "li",
          { key: "intro" },
          import_react219.default.createElement(HeaderComponent, null)
        ));
      }
    } else if (message.type === "system") {
      renderedMessages.push(import_react219.default.createElement(
        "li",
        { "data-message-id": message.id, key: message.id || message.created_at.toISOString() },
        import_react219.default.createElement(MessageSystem, { message })
      ));
    } else {
      if (!firstMessage) {
        firstMessage = message;
      }
      const groupStyles = messageGroupStyles[message.id] || "";
      const messageClass = (customClasses == null ? void 0 : customClasses.message) || `str-chat__li str-chat__li--${groupStyles}`;
      const isFirstUnreadMessage = getIsFirstUnreadMessage({
        firstUnreadMessageId: channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id,
        isFirstMessage: !!(firstMessage == null ? void 0 : firstMessage.id) && firstMessage.id === message.id,
        lastReadDate: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read,
        lastReadMessageId: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read_message_id,
        message,
        previousMessage,
        unreadMessageCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages
      });
      renderedMessages.push(import_react219.default.createElement(
        import_react219.Fragment,
        { key: message.id || message.created_at.toISOString() },
        isFirstUnreadMessage && UnreadMessagesSeparator2 && import_react219.default.createElement(
          "li",
          { className: "str-chat__li str-chat__unread-messages-separator-wrapper" },
          import_react219.default.createElement(UnreadMessagesSeparator2, { unreadCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages })
        ),
        import_react219.default.createElement(
          "li",
          { className: messageClass, "data-message-id": message.id, "data-testid": messageClass },
          import_react219.default.createElement(Message, { groupStyles: [groupStyles], lastReceivedId, message, readBy: readData[message.id] || [], ...messageProps })
        )
      ));
      previousMessage = message;
    }
  }
  return renderedMessages;
}

// node_modules/stream-chat-react/dist/components/UtilityComponents/useStableId.js
var import_react220 = __toESM(require_react());
var useStableId = (key) => {
  const id3 = (0, import_react220.useMemo)(() => nanoid(), [key]);
  return id3;
};

// node_modules/stream-chat-react/dist/components/MessageList/MessageList.js
var MessageListWithContext = (props) => {
  const {
    channel,
    channelUnreadUiState,
    disableDateSeparator = false,
    groupStyles,
    hasMoreNewer = false,
    headerPosition,
    hideDeletedMessages = false,
    hideNewMessageSeparator = false,
    highlightedMessageId,
    internalInfiniteScrollProps: { threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, ...restInternalInfiniteScrollProps } = {},
    jumpToLatestMessage = () => Promise.resolve(),
    loadMore: loadMoreCallback,
    loadMoreNewer: loadMoreNewerCallback,
    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
    maxTimeBetweenGroupedMessages,
    messageActions = Object.keys(MESSAGE_ACTIONS),
    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,
    messages = [],
    noGroupByUser = false,
    notifications,
    pinPermissions = defaultPinPermissions,
    reactionDetailsSort,
    read: read2,
    renderMessages = defaultRenderMessages,
    returnAllReadData = false,
    reviewProcessedMessage,
    showUnreadNotificationAlways,
    sortReactionDetails,
    sortReactions,
    suppressAutoscroll,
    threadList = false,
    unsafeHTML = false
  } = props;
  const [listElement, setListElement] = import_react221.default.useState(null);
  const [ulElement, setUlElement] = import_react221.default.useState(null);
  const { customClasses } = useChatContext("MessageList");
  const { EmptyStateIndicator: EmptyStateIndicator2 = EmptyStateIndicator, LoadingIndicator: LoadingIndicator2 = LoadingIndicator, MessageListMainPanel: MessageListMainPanel2 = MessageListMainPanel, MessageListNotifications: MessageListNotifications2 = MessageListNotifications, MessageNotification: MessageNotification2 = MessageNotification, TypingIndicator: TypingIndicator2 = TypingIndicator, UnreadMessagesNotification: UnreadMessagesNotification2 = UnreadMessagesNotification } = useComponentContext("MessageList");
  const { hasNewMessages, isMessageListScrolledToBottom, onScroll, scrollToBottom, wrapperRect } = useScrollLocationLogic({
    hasMoreNewer,
    listElement,
    loadMoreScrollThreshold,
    messages,
    // todo: is it correct to base the scroll logic on an array that does not contain date separators or intro?
    scrolledUpThreshold: props.scrolledUpThreshold,
    suppressAutoscroll
  });
  const { show: showUnreadMessagesNotification } = useUnreadMessagesNotification({
    isMessageListScrolledToBottom,
    showAlways: !!showUnreadNotificationAlways,
    unreadCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages
  });
  useMarkRead({
    isMessageListScrolledToBottom,
    messageListIsThread: threadList,
    wasMarkedUnread: !!(channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id)
  });
  const { messageGroupStyles, messages: enrichedMessages } = useEnrichedMessages({
    channel,
    disableDateSeparator,
    groupStyles,
    headerPosition,
    hideDeletedMessages,
    hideNewMessageSeparator,
    maxTimeBetweenGroupedMessages,
    messages,
    noGroupByUser,
    reviewProcessedMessage
  });
  const elements = useMessageListElements({
    channelUnreadUiState,
    enrichedMessages,
    internalMessageProps: {
      additionalMessageInputProps: props.additionalMessageInputProps,
      closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,
      customMessageActions: props.customMessageActions,
      disableQuotedMessages: props.disableQuotedMessages,
      formatDate: props.formatDate,
      getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,
      getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,
      getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,
      getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,
      getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,
      getMuteUserErrorNotification: props.getMuteUserErrorNotification,
      getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,
      getPinMessageErrorNotification: props.getPinMessageErrorNotification,
      Message: props.Message,
      messageActions,
      messageListRect: wrapperRect,
      onlySenderCanEdit: props.onlySenderCanEdit,
      onMentionsClick: props.onMentionsClick,
      onMentionsHover: props.onMentionsHover,
      onUserClick: props.onUserClick,
      onUserHover: props.onUserHover,
      openThread: props.openThread,
      pinPermissions,
      reactionDetailsSort,
      renderText: props.renderText,
      retrySendMessage: props.retrySendMessage,
      sortReactionDetails,
      sortReactions,
      unsafeHTML
    },
    messageGroupStyles,
    read: read2,
    renderMessages,
    returnAllReadData,
    threadList
  });
  const messageListClass = (customClasses == null ? void 0 : customClasses.messageList) || "str-chat__list";
  const loadMore = import_react221.default.useCallback(() => {
    if (loadMoreCallback) {
      loadMoreCallback(messageLimit);
    }
  }, [loadMoreCallback, messageLimit]);
  const loadMoreNewer = import_react221.default.useCallback(() => {
    if (loadMoreNewerCallback) {
      loadMoreNewerCallback(messageLimit);
    }
  }, [loadMoreNewerCallback, messageLimit]);
  const scrollToBottomFromNotification = import_react221.default.useCallback(async () => {
    if (hasMoreNewer) {
      await jumpToLatestMessage();
    } else {
      scrollToBottom();
    }
  }, [scrollToBottom, hasMoreNewer]);
  import_react221.default.useLayoutEffect(() => {
    if (highlightedMessageId) {
      const element4 = ulElement == null ? void 0 : ulElement.querySelector(`[data-message-id='${highlightedMessageId}']`);
      element4 == null ? void 0 : element4.scrollIntoView({ block: "center" });
    }
  }, [highlightedMessageId]);
  const id3 = useStableId();
  const showEmptyStateIndicator = elements.length === 0 && !threadList;
  const dialogManagerId = threadList ? `message-list-dialog-manager-thread-${id3}` : `message-list-dialog-manager-${id3}`;
  return import_react221.default.createElement(
    MessageListContextProvider,
    { value: { listElement, scrollToBottom } },
    import_react221.default.createElement(
      MessageListMainPanel2,
      null,
      import_react221.default.createElement(
        DialogManagerProvider,
        { id: dialogManagerId },
        !threadList && showUnreadMessagesNotification && import_react221.default.createElement(UnreadMessagesNotification2, { unreadCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages }),
        import_react221.default.createElement("div", { className: clsx_default(messageListClass, customClasses == null ? void 0 : customClasses.threadList), onScroll, ref: setListElement, tabIndex: 0 }, showEmptyStateIndicator ? import_react221.default.createElement(EmptyStateIndicator2, { listType: threadList ? "thread" : "message" }) : import_react221.default.createElement(
          InfiniteScroll,
          { className: "str-chat__message-list-scroll", "data-testid": "reverse-infinite-scroll", hasNextPage: props.hasMoreNewer, hasPreviousPage: props.hasMore, head: props.head, isLoading: props.loadingMore, loader: import_react221.default.createElement("div", { className: "str-chat__list__loading", key: "loading-indicator" }, props.loadingMore && import_react221.default.createElement(LoadingIndicator2, { size: 20 })), loadNextPage: loadMoreNewer, loadPreviousPage: loadMore, threshold: loadMoreScrollThreshold, ...restInternalInfiniteScrollProps },
          import_react221.default.createElement("ul", { className: "str-chat__ul", ref: setUlElement }, elements),
          import_react221.default.createElement(TypingIndicator2, { threadList }),
          import_react221.default.createElement("div", { key: "bottom" })
        ))
      )
    ),
    import_react221.default.createElement(MessageListNotifications2, { hasNewMessages, isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification2, notifications, scrollToBottom: scrollToBottomFromNotification, threadList, unreadCount: threadList ? void 0 : channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages })
  );
};
var MessageList = (props) => {
  const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext("MessageList");
  const {
    members: membersPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    mutes: mutesPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    watchers: watchersPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    ...restChannelStateContext
  } = useChannelStateContext("MessageList");
  return import_react221.default.createElement(MessageListWithContext, { jumpToLatestMessage, loadMore, loadMoreNewer, ...restChannelStateContext, ...props });
};

// node_modules/stream-chat-react/dist/components/MessageList/ScrollToBottomButton.js
var import_react222 = __toESM(require_react());
var UnMemoizedScrollToBottomButton = (props) => {
  const { isMessageListScrolledToBottom, onClick, threadList } = props;
  const { channel: activeChannel, client } = useChatContext();
  const { thread } = useChannelStateContext();
  const [countUnread, setCountUnread] = (0, import_react222.useState)((activeChannel == null ? void 0 : activeChannel.countUnread()) || 0);
  const [replyCount, setReplyCount] = (0, import_react222.useState)((thread == null ? void 0 : thread.reply_count) || 0);
  const observedEvent = threadList ? "message.updated" : "message.new";
  (0, import_react222.useEffect)(() => {
    const handleEvent = (event) => {
      var _a, _b, _c, _d, _e2;
      const newMessageInAnotherChannel = event.cid !== (activeChannel == null ? void 0 : activeChannel.cid);
      const newMessageIsMine = ((_a = event.user) == null ? void 0 : _a.id) === ((_b = client.user) == null ? void 0 : _b.id);
      const isThreadOpen = !!thread;
      const newMessageIsReply = !!((_c = event.message) == null ? void 0 : _c.parent_id);
      const dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;
      if (isMessageListScrolledToBottom || newMessageInAnotherChannel || newMessageIsMine || dontIncreaseMainListCounterOnNewReply) {
        return;
      }
      if (event.type === "message.new") {
        setCountUnread((prev) => prev + 1);
      } else if (((_d = event.message) == null ? void 0 : _d.id) === (thread == null ? void 0 : thread.id)) {
        const newReplyCount = ((_e2 = event.message) == null ? void 0 : _e2.reply_count) || 0;
        setCountUnread(() => newReplyCount - replyCount);
      }
    };
    client.on(observedEvent, handleEvent);
    return () => {
      client.off(observedEvent, handleEvent);
    };
  }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);
  (0, import_react222.useEffect)(() => {
    if (isMessageListScrolledToBottom) {
      setCountUnread(0);
      setReplyCount((thread == null ? void 0 : thread.reply_count) || 0);
    }
  }, [isMessageListScrolledToBottom, thread]);
  if (isMessageListScrolledToBottom)
    return null;
  return import_react222.default.createElement(
    "div",
    { className: "str-chat__jump-to-latest-message" },
    import_react222.default.createElement(
      "button",
      { "aria-live": "polite", className: `
        str-chat__message-notification-scroll-to-latest
        str-chat__circle-fab
      `, "data-testid": "message-notification", onClick },
      import_react222.default.createElement(ArrowDown, null),
      countUnread > 0 && import_react222.default.createElement("div", { className: clsx_default("str-chat__message-notification", "str-chat__jump-to-latest-unread-count"), "data-testid": "unread-message-notification-counter" }, countUnread)
    )
  );
};
var ScrollToBottomButton = import_react222.default.memo(UnMemoizedScrollToBottomButton);

// node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageList.js
var import_react232 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useNewMessageNotification.js
var import_react223 = __toESM(require_react());
function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {
  const [newMessagesNotification, setNewMessagesNotification] = (0, import_react223.useState)(false);
  const [isMessageListScrolledToBottom, setIsMessageListScrolledToBottom] = (0, import_react223.useState)(true);
  const didMount = (0, import_react223.useRef)(false);
  const lastMessageId = (0, import_react223.useRef)("");
  const atBottom = (0, import_react223.useRef)(false);
  (0, import_react223.useEffect)(() => {
    var _a;
    if (hasMoreNewer) {
      setNewMessagesNotification(true);
      return;
    }
    if (!(messages == null ? void 0 : messages.length))
      return;
    const lastMessage = messages[messages.length - 1];
    const prevMessageId = lastMessageId.current;
    lastMessageId.current = lastMessage.id || "";
    if (lastMessage.id === prevMessageId)
      return;
    if (atBottom.current)
      return;
    if (((_a = lastMessage.user) == null ? void 0 : _a.id) !== currentUserId && didMount.current) {
      setNewMessagesNotification(true);
    }
    didMount.current = true;
  }, [currentUserId, messages, hasMoreNewer]);
  return {
    atBottom,
    isMessageListScrolledToBottom,
    newMessagesNotification,
    setIsMessageListScrolledToBottom,
    setNewMessagesNotification
  };
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/usePrependMessagesCount.js
var import_react224 = __toESM(require_react());
var STATUSES_EXCLUDED_FROM_PREPEND = {
  failed: true,
  sending: true
};
function usePrependedMessagesCount(messages, hasDateSeparator) {
  const firstRealMessageIndex = hasDateSeparator ? 1 : 0;
  const firstMessageOnFirstLoadedPage = (0, import_react224.useRef)(void 0);
  const previousFirstMessageOnFirstLoadedPage = (0, import_react224.useRef)(void 0);
  const previousNumItemsPrepended = (0, import_react224.useRef)(0);
  const numItemsPrepended = (0, import_react224.useMemo)(() => {
    var _a, _b;
    if (!messages || !messages.length) {
      previousNumItemsPrepended.current = 0;
      return 0;
    }
    const currentFirstMessage = messages == null ? void 0 : messages[firstRealMessageIndex];
    const noNewMessages = (currentFirstMessage == null ? void 0 : currentFirstMessage.id) === ((_a = previousFirstMessageOnFirstLoadedPage.current) == null ? void 0 : _a.id);
    const currentFirstMessageStatus = isLocalMessage(currentFirstMessage) ? currentFirstMessage.status : void 0;
    const firstMsgMovedAfterMessagesInExcludedStatus = !!(currentFirstMessageStatus && STATUSES_EXCLUDED_FROM_PREPEND[currentFirstMessageStatus]);
    if (noNewMessages || firstMsgMovedAfterMessagesInExcludedStatus) {
      return previousNumItemsPrepended.current;
    }
    if (!firstMessageOnFirstLoadedPage.current) {
      firstMessageOnFirstLoadedPage.current = currentFirstMessage;
    }
    previousFirstMessageOnFirstLoadedPage.current = currentFirstMessage;
    for (let prependedMessageCount = previousNumItemsPrepended.current; prependedMessageCount < messages.length; prependedMessageCount += 1) {
      const messageIsFirstOnFirstLoadedPage = messages[prependedMessageCount].id === ((_b = firstMessageOnFirstLoadedPage.current) == null ? void 0 : _b.id);
      if (messageIsFirstOnFirstLoadedPage) {
        previousNumItemsPrepended.current = prependedMessageCount - firstRealMessageIndex;
        return previousNumItemsPrepended.current;
      }
    }
    firstMessageOnFirstLoadedPage.current = currentFirstMessage;
    previousNumItemsPrepended.current = 0;
    return 0;
  }, [firstRealMessageIndex, messages, messages == null ? void 0 : messages.length]);
  return numItemsPrepended;
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useShouldForceScrollToBottom.js
var import_react225 = __toESM(require_react());
function useShouldForceScrollToBottom(messages, currentUserId) {
  const lastFocusedOwnMessage = (0, import_react225.useRef)("");
  const initialFocusRegistered = (0, import_react225.useRef)(false);
  function recheckForNewOwnMessage() {
    var _a;
    if (messages && messages.length > 0) {
      const lastMessage = messages[messages.length - 1];
      if (((_a = lastMessage.user) == null ? void 0 : _a.id) === currentUserId && lastFocusedOwnMessage.current !== lastMessage.id) {
        lastFocusedOwnMessage.current = lastMessage.id;
        return true;
      }
    }
    return false;
  }
  (0, import_react225.useEffect)(() => {
    if (messages && messages.length && !initialFocusRegistered.current) {
      initialFocusRegistered.current = true;
      recheckForNewOwnMessage();
    }
  }, [messages, messages == null ? void 0 : messages.length]);
  return recheckForNewOwnMessage;
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useGiphyPreview.js
var import_react226 = __toESM(require_react());
var useGiphyPreview = (separateGiphyPreview) => {
  const [giphyPreviewMessage, setGiphyPreviewMessage] = (0, import_react226.useState)();
  const { client } = useChatContext("useGiphyPreview");
  (0, import_react226.useEffect)(() => {
    if (!separateGiphyPreview)
      return;
    const handleEvent = (event) => {
      const { message, user } = event;
      if ((message == null ? void 0 : message.command) === "giphy" && (user == null ? void 0 : user.id) === client.userID) {
        setGiphyPreviewMessage(void 0);
      }
    };
    client.on("message.new", handleEvent);
    return () => client.off("message.new", handleEvent);
  }, [client, separateGiphyPreview]);
  return {
    giphyPreviewMessage,
    setGiphyPreviewMessage: separateGiphyPreview ? setGiphyPreviewMessage : void 0
  };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useMessageSetKey.js
var import_react227 = __toESM(require_react());
var useMessageSetKey = ({ messages }) => {
  const [messageSetKey, setMessageSetKey] = (0, import_react227.useState)(+/* @__PURE__ */ new Date());
  const firstMessageId = (0, import_react227.useRef)(void 0);
  (0, import_react227.useEffect)(() => {
    var _a;
    const continuousSet = messages == null ? void 0 : messages.find((message) => message.id === firstMessageId.current);
    if (!continuousSet) {
      setMessageSetKey(+/* @__PURE__ */ new Date());
    }
    firstMessageId.current = (_a = messages == null ? void 0 : messages[0]) == null ? void 0 : _a.id;
  }, [messages]);
  return {
    messageSetKey
  };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useScrollToBottomOnNewMessage.js
var import_react228 = __toESM(require_react());
var useScrollToBottomOnNewMessage = ({ messages, scrollToBottom, scrollToLatestMessageOnFocus }) => {
  const [newMessagesReceivedInBackground, setNewMessagesReceivedInBackground] = (0, import_react228.useState)(false);
  const scrollToBottomIfConfigured = (0, import_react228.useRef)(void 0);
  scrollToBottomIfConfigured.current = (event) => {
    if (!scrollToLatestMessageOnFocus || !newMessagesReceivedInBackground || event.target !== window) {
      return;
    }
    setTimeout(scrollToBottom, 100);
  };
  (0, import_react228.useEffect)(() => {
    setNewMessagesReceivedInBackground(true);
  }, [messages]);
  (0, import_react228.useEffect)(() => {
    const handleFocus = (event) => {
      var _a;
      (_a = scrollToBottomIfConfigured.current) == null ? void 0 : _a.call(scrollToBottomIfConfigured, event);
    };
    const handleBlur = () => {
      setNewMessagesReceivedInBackground(false);
    };
    if (typeof window !== "undefined") {
      window.addEventListener("focus", handleFocus);
      window.addEventListener("blur", handleBlur);
    }
    return () => {
      window.removeEventListener("focus", handleFocus);
      window.removeEventListener("blur", handleBlur);
    };
  }, []);
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useUnreadMessagesNotificationVirtualized.js
var import_react229 = __toESM(require_react());
var useUnreadMessagesNotificationVirtualized = ({ lastRead, showAlways, unreadCount }) => {
  const [show, setShow] = (0, import_react229.useState)(false);
  const toggleShowUnreadMessagesNotification = (0, import_react229.useCallback)((renderedMessages) => {
    if (!unreadCount)
      return;
    const firstRenderedMessage = renderedMessages[0];
    const lastRenderedMessage = renderedMessages.slice(-1)[0];
    if (!(firstRenderedMessage && lastRenderedMessage))
      return;
    const firstRenderedMessageTime = new Date(firstRenderedMessage.created_at ?? 0).getTime();
    const lastRenderedMessageTime = new Date(lastRenderedMessage.created_at ?? 0).getTime();
    const lastReadTime = new Date(lastRead ?? 0).getTime();
    const scrolledBelowSeparator = !!lastReadTime && firstRenderedMessageTime > lastReadTime;
    const scrolledAboveSeparator = !!lastReadTime && lastRenderedMessageTime < lastReadTime;
    setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);
  }, [lastRead, showAlways, unreadCount]);
  (0, import_react229.useEffect)(() => {
    if (!unreadCount)
      setShow(false);
  }, [unreadCount]);
  return { show, toggleShowUnreadMessagesNotification };
};

// node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageListComponents.js
var import_lodash15 = __toESM(require_lodash());
var import_react230 = __toESM(require_react());
var PREPEND_OFFSET = 10 ** 7;
function calculateItemIndex(virtuosoIndex, numItemsPrepended) {
  return virtuosoIndex + numItemsPrepended - PREPEND_OFFSET;
}
function calculateFirstItemIndex(numItemsPrepended) {
  return PREPEND_OFFSET - numItemsPrepended;
}
var makeItemsRenderedHandler = (renderedItemsActions, processedMessages) => (0, import_lodash15.default)((items) => {
  const renderedMessages = items.map((item) => {
    if (!item.originalIndex)
      return void 0;
    return processedMessages[calculateItemIndex(item.originalIndex, PREPEND_OFFSET)];
  }).filter((msg) => !!msg);
  renderedItemsActions.forEach((action) => action(renderedMessages));
}, 200);
var Item = ({ context, ...props }) => {
  var _a;
  if (!context)
    return import_react230.default.createElement(import_react230.default.Fragment, null);
  const message = context.processedMessages[calculateItemIndex(props["data-item-index"], context.numItemsPrepended)];
  const groupStyles = context.messageGroupStyles[message.id];
  return import_react230.default.createElement("div", { ...props, className: ((_a = context == null ? void 0 : context.customClasses) == null ? void 0 : _a.virtualMessage) || clsx_default("str-chat__virtual-list-message-wrapper str-chat__li", {
    [`str-chat__li--${groupStyles}`]: groupStyles
  }) });
};
var Header = ({ context }) => {
  const { LoadingIndicator: LoadingIndicator2 = LoadingIndicator } = useComponentContext("VirtualizedMessageListHeader");
  return import_react230.default.createElement(
    import_react230.default.Fragment,
    null,
    context == null ? void 0 : context.head,
    (context == null ? void 0 : context.loadingMore) && LoadingIndicator2 && import_react230.default.createElement(
      "div",
      { className: "str-chat__virtual-list__loading" },
      import_react230.default.createElement(LoadingIndicator2, { size: 20 })
    )
  );
};
var EmptyPlaceholder = ({ context }) => {
  const { EmptyStateIndicator: EmptyStateIndicator2 = EmptyStateIndicator } = useComponentContext("VirtualizedMessageList");
  if (typeof (context == null ? void 0 : context.processedMessages) !== "undefined" && context.processedMessages.length > 0)
    return null;
  return import_react230.default.createElement(import_react230.default.Fragment, null, EmptyStateIndicator2 && import_react230.default.createElement(EmptyStateIndicator2, { listType: (context == null ? void 0 : context.threadList) ? "thread" : "message" }));
};
var messageRenderer = (virtuosoIndex, _data, virtuosoContext) => {
  var _a, _b, _c, _d, _e2, _f, _g;
  const { additionalMessageInputProps, closeReactionSelectorOnClick, customMessageActions, customMessageRenderer, DateSeparator: DateSeparator2, firstUnreadMessageId, formatDate, lastReadDate, lastReadMessageId, lastReceivedMessageId, Message: MessageUIComponent, messageActions, messageGroupStyles, MessageSystem, numItemsPrepended, openThread, ownMessagesReadByOthers, processedMessages: messageList, reactionDetailsSort, shouldGroupByUser, sortReactionDetails, sortReactions, threadList, unreadMessageCount = 0, UnreadMessagesSeparator: UnreadMessagesSeparator2, virtuosoRef } = virtuosoContext;
  const streamMessageIndex = calculateItemIndex(virtuosoIndex, numItemsPrepended);
  if (customMessageRenderer) {
    return customMessageRenderer(messageList, streamMessageIndex);
  }
  const message = messageList[streamMessageIndex];
  if (!message || isIntroMessage(message))
    return import_react230.default.createElement("div", { style: { height: "1px" } });
  if (isDateSeparatorMessage(message)) {
    return DateSeparator2 ? import_react230.default.createElement(DateSeparator2, { date: message.date, unread: message.unread }) : null;
  }
  if (message.type === "system") {
    return MessageSystem ? import_react230.default.createElement(MessageSystem, { message }) : null;
  }
  const maybePrevMessage = messageList[streamMessageIndex - 1];
  const maybeNextMessage = messageList[streamMessageIndex + 1];
  const groupedByUser = shouldGroupByUser && streamMessageIndex > 0 && ((_a = message.user) == null ? void 0 : _a.id) === ((_b = maybePrevMessage == null ? void 0 : maybePrevMessage.user) == null ? void 0 : _b.id);
  const firstOfGroup = shouldGroupByUser && (((_c = message.user) == null ? void 0 : _c.id) !== ((_d = maybePrevMessage == null ? void 0 : maybePrevMessage.user) == null ? void 0 : _d.id) || maybePrevMessage && isMessageEdited(maybePrevMessage));
  const endOfGroup = shouldGroupByUser && (((_e2 = message.user) == null ? void 0 : _e2.id) !== ((_f = maybeNextMessage == null ? void 0 : maybeNextMessage.user) == null ? void 0 : _f.id) || isMessageEdited(message));
  const isFirstUnreadMessage = getIsFirstUnreadMessage({
    firstUnreadMessageId,
    isFirstMessage: streamMessageIndex === 0,
    lastReadDate,
    lastReadMessageId,
    message,
    previousMessage: streamMessageIndex ? messageList[streamMessageIndex - 1] : void 0,
    unreadMessageCount
  });
  return import_react230.default.createElement(
    import_react230.default.Fragment,
    null,
    isFirstUnreadMessage && import_react230.default.createElement(
      "div",
      { className: "str-chat__unread-messages-separator-wrapper" },
      import_react230.default.createElement(UnreadMessagesSeparator2, { unreadCount: unreadMessageCount })
    ),
    import_react230.default.createElement(Message, { additionalMessageInputProps, autoscrollToBottom: (_g = virtuosoRef.current) == null ? void 0 : _g.autoscrollToBottom, closeReactionSelectorOnClick, customMessageActions, endOfGroup, firstOfGroup, formatDate, groupedByUser, groupStyles: [messageGroupStyles[message.id] ?? ""], lastReceivedId: lastReceivedMessageId, message, Message: MessageUIComponent, messageActions, openThread, reactionDetailsSort, readBy: ownMessagesReadByOthers[message.id] || [], sortReactionDetails, sortReactions, threadList })
  );
};

// node_modules/stream-chat-react/dist/context/VirtualizedMessageListContext.js
var import_react231 = __toESM(require_react());
var VirtualizedMessageListContext = (0, import_react231.createContext)(void 0);
var VirtualizedMessageListContextProvider = ({ children, value }) => import_react231.default.createElement(VirtualizedMessageListContext.Provider, { value }, children);

// node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageList.js
function captureResizeObserverExceededError(e) {
  if (e.message === "ResizeObserver loop completed with undelivered notifications." || e.message === "ResizeObserver loop limit exceeded") {
    e.stopImmediatePropagation();
  }
}
function useCaptureResizeObserverExceededError() {
  (0, import_react232.useEffect)(() => {
    window.addEventListener("error", captureResizeObserverExceededError);
    return () => {
      window.removeEventListener("error", captureResizeObserverExceededError);
    };
  }, []);
}
function fractionalItemSize(element4) {
  return element4.getBoundingClientRect().height;
}
function findMessageIndex(messages, id3) {
  return messages.findIndex((message) => message.id === id3);
}
function calculateInitialTopMostItemIndex(messages, highlightedMessageId) {
  if (highlightedMessageId) {
    const index4 = findMessageIndex(messages, highlightedMessageId);
    if (index4 !== -1) {
      return { align: "center", index: index4 };
    }
  }
  return messages.length - 1;
}
var VirtualizedMessageListWithContext = (props) => {
  const {
    additionalMessageInputProps,
    additionalVirtuosoProps = {},
    channel,
    channelUnreadUiState,
    closeReactionSelectorOnClick,
    customMessageActions,
    customMessageRenderer,
    defaultItemHeight,
    disableDateSeparator = true,
    formatDate,
    groupStyles,
    hasMoreNewer,
    head,
    hideDeletedMessages = false,
    hideNewMessageSeparator = false,
    highlightedMessageId,
    jumpToLatestMessage,
    loadingMore,
    loadMore,
    loadMoreNewer,
    maxTimeBetweenGroupedMessages,
    Message: MessageUIComponentFromProps,
    messageActions,
    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,
    messages,
    notifications,
    openThread,
    // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component
    overscan = 0,
    reactionDetailsSort,
    read: read2,
    returnAllReadData = false,
    reviewProcessedMessage,
    scrollSeekPlaceHolder,
    scrollToLatestMessageOnFocus = false,
    separateGiphyPreview = false,
    shouldGroupByUser = false,
    showUnreadNotificationAlways,
    sortReactionDetails,
    sortReactions,
    stickToBottomScrollBehavior = "smooth",
    suppressAutoscroll,
    threadList
  } = props;
  const { components: virtuosoComponentsFromProps, ...overridingVirtuosoProps } = additionalVirtuosoProps;
  useCaptureResizeObserverExceededError();
  const { DateSeparator: DateSeparator2 = DateSeparator, GiphyPreviewMessage: GiphyPreviewMessage2 = GiphyPreviewMessage, MessageListMainPanel: MessageListMainPanel2 = MessageListMainPanel, MessageListNotifications: MessageListNotifications2 = MessageListNotifications, MessageNotification: MessageNotification2 = MessageNotification, MessageSystem = EventComponent, TypingIndicator: TypingIndicator2, UnreadMessagesNotification: UnreadMessagesNotification2 = UnreadMessagesNotification, UnreadMessagesSeparator: UnreadMessagesSeparator2 = UnreadMessagesSeparator, VirtualMessage: MessageUIComponentFromContext = MessageSimple } = useComponentContext("VirtualizedMessageList");
  const MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;
  const { client, customClasses } = useChatContext("VirtualizedMessageList");
  const virtuoso = (0, import_react232.useRef)(null);
  const lastRead = (0, import_react232.useMemo)(() => {
    var _a;
    return (_a = channel.lastRead) == null ? void 0 : _a.call(channel);
  }, [channel]);
  const { show: showUnreadMessagesNotification, toggleShowUnreadMessagesNotification } = useUnreadMessagesNotificationVirtualized({
    lastRead: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read,
    showAlways: !!showUnreadNotificationAlways,
    unreadCount: (channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages) ?? 0
  });
  const { giphyPreviewMessage, setGiphyPreviewMessage } = useGiphyPreview(separateGiphyPreview);
  const processedMessages = (0, import_react232.useMemo)(() => {
    if (typeof messages === "undefined") {
      return [];
    }
    if (disableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator && !separateGiphyPreview) {
      return messages;
    }
    return processMessages({
      enableDateSeparator: !disableDateSeparator,
      hideDeletedMessages,
      hideNewMessageSeparator,
      lastRead,
      messages,
      reviewProcessedMessage,
      setGiphyPreviewMessage,
      userId: client.userID || ""
    });
  }, [
    disableDateSeparator,
    hideDeletedMessages,
    hideNewMessageSeparator,
    lastRead,
    messages,
    messages == null ? void 0 : messages.length,
    client.userID
  ]);
  const ownMessagesReadByOthers = useLastReadData({
    messages: processedMessages,
    read: read2,
    returnAllReadData,
    userID: client.userID
  });
  const lastReceivedMessageId = (0, import_react232.useMemo)(() => getLastReceived(processedMessages), [processedMessages]);
  const groupStylesFn = groupStyles || getGroupStyles;
  const messageGroupStyles = (0, import_react232.useMemo)(
    () => processedMessages.reduce((acc, message, i2) => {
      const style = groupStylesFn(message, processedMessages[i2 - 1], processedMessages[i2 + 1], !shouldGroupByUser, maxTimeBetweenGroupedMessages);
      if (style && message.id)
        acc[message.id] = style;
      return acc;
    }, {}),
    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      maxTimeBetweenGroupedMessages,
      processedMessages.length,
      shouldGroupByUser,
      groupStylesFn
    ]
  );
  const { atBottom, isMessageListScrolledToBottom, newMessagesNotification, setIsMessageListScrolledToBottom, setNewMessagesNotification } = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer);
  useMarkRead({
    isMessageListScrolledToBottom,
    messageListIsThread: !!threadList,
    wasMarkedUnread: !!(channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id)
  });
  const scrollToBottom = (0, import_react232.useCallback)(async () => {
    if (hasMoreNewer) {
      await jumpToLatestMessage();
      return;
    }
    if (virtuoso.current) {
      virtuoso.current.scrollToIndex(processedMessages.length - 1);
    }
    setNewMessagesNotification(false);
  }, [
    virtuoso,
    processedMessages,
    setNewMessagesNotification,
    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
    processedMessages.length,
    hasMoreNewer,
    jumpToLatestMessage
  ]);
  useScrollToBottomOnNewMessage({
    messages,
    scrollToBottom,
    scrollToLatestMessageOnFocus
  });
  const numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);
  const { messageSetKey } = useMessageSetKey({ messages });
  const shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);
  const handleItemsRendered = (0, import_react232.useMemo)(() => makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages), [processedMessages, toggleShowUnreadMessagesNotification]);
  const followOutput = (isAtBottom) => {
    if (hasMoreNewer || suppressAutoscroll) {
      return false;
    }
    if (shouldForceScrollToBottom()) {
      return isAtBottom ? stickToBottomScrollBehavior : "auto";
    }
    return isAtBottom ? stickToBottomScrollBehavior : false;
  };
  const computeItemKey2 = (0, import_react232.useCallback)((index4, _2, { numItemsPrepended: numItemsPrepended2, processedMessages: processedMessages2 }) => processedMessages2[calculateItemIndex(index4, numItemsPrepended2)].id, []);
  const atBottomStateChange = (isAtBottom) => {
    atBottom.current = isAtBottom;
    setIsMessageListScrolledToBottom(isAtBottom);
    if (isAtBottom) {
      loadMoreNewer == null ? void 0 : loadMoreNewer(messageLimit);
      setNewMessagesNotification == null ? void 0 : setNewMessagesNotification(false);
    }
  };
  const atTopStateChange = (isAtTop) => {
    if (isAtTop) {
      loadMore == null ? void 0 : loadMore(messageLimit);
    }
  };
  (0, import_react232.useEffect)(() => {
    let scrollTimeout;
    if (highlightedMessageId) {
      const index4 = findMessageIndex(processedMessages, highlightedMessageId);
      if (index4 !== -1) {
        scrollTimeout = setTimeout(() => {
          var _a;
          (_a = virtuoso.current) == null ? void 0 : _a.scrollToIndex({ align: "center", index: index4 });
        }, 0);
      }
    }
    return () => {
      clearTimeout(scrollTimeout);
    };
  }, [highlightedMessageId, processedMessages]);
  const id3 = useStableId();
  if (!processedMessages)
    return null;
  const dialogManagerId = threadList ? `virtualized-message-list-dialog-manager-thread-${id3}` : `virtualized-message-list-dialog-manager-${id3}`;
  return import_react232.default.createElement(
    VirtualizedMessageListContextProvider,
    { value: { scrollToBottom } },
    import_react232.default.createElement(
      MessageListMainPanel2,
      null,
      import_react232.default.createElement(
        DialogManagerProvider,
        { id: dialogManagerId },
        !threadList && showUnreadMessagesNotification && import_react232.default.createElement(UnreadMessagesNotification2, { unreadCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages }),
        import_react232.default.createElement(
          "div",
          { className: (customClasses == null ? void 0 : customClasses.virtualizedMessageList) || "str-chat__virtual-list" },
          import_react232.default.createElement(ln, { atBottomStateChange, atBottomThreshold: 100, atTopStateChange, atTopThreshold: 100, className: "str-chat__message-list-scroll", components: {
            EmptyPlaceholder,
            Header,
            Item,
            ...virtuosoComponentsFromProps
          }, computeItemKey: computeItemKey2, context: {
            additionalMessageInputProps,
            closeReactionSelectorOnClick,
            customClasses,
            customMessageActions,
            customMessageRenderer,
            DateSeparator: DateSeparator2,
            firstUnreadMessageId: channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id,
            formatDate,
            head,
            lastReadDate: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read,
            lastReadMessageId: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read_message_id,
            lastReceivedMessageId,
            loadingMore,
            Message: MessageUIComponent,
            messageActions,
            messageGroupStyles,
            MessageSystem,
            numItemsPrepended,
            openThread,
            ownMessagesReadByOthers,
            processedMessages,
            reactionDetailsSort,
            shouldGroupByUser,
            sortReactionDetails,
            sortReactions,
            threadList,
            unreadMessageCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages,
            UnreadMessagesSeparator: UnreadMessagesSeparator2,
            virtuosoRef: virtuoso
          }, firstItemIndex: calculateFirstItemIndex(numItemsPrepended), followOutput, increaseViewportBy: { bottom: 200, top: 0 }, initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId), itemContent: messageRenderer, itemSize: fractionalItemSize, itemsRendered: handleItemsRendered, key: messageSetKey, overscan, ref: virtuoso, style: { overflowX: "hidden" }, totalCount: processedMessages.length, ...overridingVirtuosoProps, ...scrollSeekPlaceHolder ? { scrollSeek: scrollSeekPlaceHolder } : {}, ...defaultItemHeight ? { defaultItemHeight } : {} })
        )
      ),
      TypingIndicator2 && import_react232.default.createElement(TypingIndicator2, null)
    ),
    import_react232.default.createElement(MessageListNotifications2, { hasNewMessages: newMessagesNotification, isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification2, notifications, scrollToBottom, threadList, unreadCount: threadList ? void 0 : channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages }),
    giphyPreviewMessage && import_react232.default.createElement(GiphyPreviewMessage2, { message: giphyPreviewMessage })
  );
};
function VirtualizedMessageList(props) {
  const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext("VirtualizedMessageList");
  const { channel, channelUnreadUiState, hasMore, hasMoreNewer, highlightedMessageId, loadingMore, loadingMoreNewer, messages: contextMessages, notifications, read: read2, suppressAutoscroll } = useChannelStateContext("VirtualizedMessageList");
  const messages = props.messages || contextMessages;
  return import_react232.default.createElement(VirtualizedMessageListWithContext, { channel, channelUnreadUiState: props.channelUnreadUiState ?? channelUnreadUiState, hasMore: !!hasMore, hasMoreNewer: !!hasMoreNewer, highlightedMessageId, jumpToLatestMessage, loadingMore: !!loadingMore, loadingMoreNewer: !!loadingMoreNewer, loadMore, loadMoreNewer, messages, notifications, read: read2, suppressAutoscroll, ...props });
}

// node_modules/stream-chat-react/dist/components/Message/MessageIsThreadReplyInChannelButtonIndicator.js
var import_react233 = __toESM(require_react());
var MessageIsThreadReplyInChannelButtonIndicator = () => {
  const { client } = useChatContext();
  const { t: t2 } = useTranslationContext();
  const { channel } = useChannelStateContext();
  const { openThread } = useChannelActionContext();
  const { message } = useMessageContext();
  const parentMessageRef = (0, import_react233.useRef)(void 0);
  const querySearchParent = () => channel.getClient().search({ cid: channel.cid }, { id: message.parent_id }).then(({ results }) => {
    if (!results.length) {
      throw new Error("Thread has not been found");
    }
    parentMessageRef.current = formatMessage(results[0].message);
  }).catch((error) => {
    client.notifications.addError({
      message: t2("Thread has not been found"),
      options: {
        originalError: error,
        type: "api:message:search:not-found"
      },
      origin: {
        context: { threadReply: message },
        emitter: "MessageIsThreadReplyInChannelButtonIndicator"
      }
    });
  });
  (0, import_react233.useEffect)(() => {
    if (parentMessageRef.current || parentMessageRef.current === null || !message.parent_id)
      return;
    const localMessage = channel.state.findMessage(message.parent_id);
    if (localMessage) {
      parentMessageRef.current = localMessage;
      return;
    }
  }, [channel, message]);
  if (!message.parent_id)
    return null;
  return import_react233.default.createElement(
    "div",
    { className: "str-chat__message-is-thread-reply-button-wrapper" },
    import_react233.default.createElement("button", { className: "str-chat__message-is-thread-reply-button", "data-testid": "message-is-thread-reply-button", onClick: async () => {
      if (!parentMessageRef.current) {
        await querySearchParent();
        if (parentMessageRef.current) {
          openThread(parentMessageRef.current);
        } else {
          parentMessageRef.current = null;
        }
        return;
      }
      openThread(parentMessageRef.current);
    }, type: "button" }, t2("Thread reply"))
  );
};

// node_modules/stream-chat-react/dist/components/Message/ReminderNotification.js
var import_react234 = __toESM(require_react());
var reminderStateSelector = (state) => ({
  timeLeftMs: state.timeLeftMs
});
var ReminderNotification = ({ reminder }) => {
  const { t: t2 } = useTranslationContext();
  const { timeLeftMs } = useStateStore(reminder == null ? void 0 : reminder.state, reminderStateSelector) ?? {};
  const stopRefreshBoundaryMs = reminder == null ? void 0 : reminder.timer.stopRefreshBoundaryMs;
  const stopRefreshTimeStamp = (reminder == null ? void 0 : reminder.remindAt) && stopRefreshBoundaryMs ? (reminder == null ? void 0 : reminder.remindAt.getTime()) + stopRefreshBoundaryMs : void 0;
  const isBehindRefreshBoundary = !!stopRefreshTimeStamp && (/* @__PURE__ */ new Date()).getTime() > stopRefreshTimeStamp;
  return import_react234.default.createElement(
    "p",
    { className: "str-chat__message-reminder" },
    import_react234.default.createElement("span", null, t2("Saved for later")),
    (reminder == null ? void 0 : reminder.remindAt) && timeLeftMs !== null && import_react234.default.createElement(
      import_react234.default.Fragment,
      null,
      import_react234.default.createElement("span", null, " | "),
      import_react234.default.createElement("span", null, isBehindRefreshBoundary ? t2("Due since {{ dueSince }}", {
        dueSince: t2(`timestamp/ReminderNotification`, {
          timestamp: reminder.remindAt
        })
      }) : t2(`Due {{ timeLeft }}`, {
        timeLeft: t2("duration/Message reminder", {
          milliseconds: timeLeftMs
        })
      }))
    )
  );
};

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsList.js
var import_react238 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsListModal.js
var import_react236 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/hooks/useFetchReactions.js
var import_react235 = __toESM(require_react());
function useFetchReactions(options2) {
  const { handleFetchReactions: contextHandleFetchReactions } = useMessageContext("useFetchReactions");
  const [reactions, setReactions] = (0, import_react235.useState)([]);
  const { handleFetchReactions: propHandleFetchReactions, reactionType, shouldFetch, sort } = options2;
  const [isLoading, setIsLoading] = (0, import_react235.useState)(shouldFetch);
  const handleFetchReactions = propHandleFetchReactions ?? contextHandleFetchReactions;
  (0, import_react235.useEffect)(() => {
    if (!shouldFetch) {
      return;
    }
    let cancel = false;
    (async () => {
      try {
        setIsLoading(true);
        const reactions2 = await handleFetchReactions(reactionType, sort);
        if (!cancel) {
          setReactions(reactions2);
        }
      } catch (e) {
        if (!cancel) {
          setReactions([]);
        }
      } finally {
        if (!cancel) {
          setIsLoading(false);
        }
      }
    })();
    return () => {
      cancel = true;
    };
  }, [handleFetchReactions, reactionType, shouldFetch, sort]);
  return { isLoading, reactions };
}

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsListModal.js
var defaultReactionDetailsSort = { created_at: -1 };
function ReactionsListModal({ handleFetchReactions, onSelectedReactionTypeChange, reactionDetailsSort: propReactionDetailsSort, reactions, selectedReactionType, sortReactionDetails: propSortReactionDetails, ...modalProps }) {
  const { Modal: Modal2 = Modal } = useComponentContext();
  const selectedReaction = reactions.find(({ reactionType }) => reactionType === selectedReactionType);
  const SelectedEmojiComponent = (selectedReaction == null ? void 0 : selectedReaction.EmojiComponent) ?? null;
  const { reactionDetailsSort: contextReactionDetailsSort, sortReactionDetails: contextSortReactionDetails } = useMessageContext("ReactionsListModal");
  const legacySortReactionDetails = propSortReactionDetails ?? contextSortReactionDetails;
  const reactionDetailsSort = propReactionDetailsSort ?? contextReactionDetailsSort ?? defaultReactionDetailsSort;
  const { isLoading: areReactionsLoading, reactions: reactionDetails } = useFetchReactions({
    handleFetchReactions,
    reactionType: selectedReactionType,
    shouldFetch: modalProps.open,
    sort: reactionDetailsSort
  });
  const reactionDetailsWithLegacyFallback = (0, import_react236.useMemo)(() => legacySortReactionDetails ? [...reactionDetails].sort(legacySortReactionDetails) : reactionDetails, [legacySortReactionDetails, reactionDetails]);
  return import_react236.default.createElement(
    Modal2,
    { ...modalProps, className: clsx_default("str-chat__message-reactions-details-modal", modalProps.className) },
    import_react236.default.createElement(
      "div",
      { className: "str-chat__message-reactions-details", "data-testid": "reactions-list-modal" },
      import_react236.default.createElement("div", { className: "str-chat__message-reactions-details-reaction-types" }, reactions.map(({ EmojiComponent, reactionCount, reactionType }) => EmojiComponent && import_react236.default.createElement(
        "div",
        { className: clsx_default("str-chat__message-reactions-details-reaction-type", {
          "str-chat__message-reactions-details-reaction-type--selected": selectedReactionType === reactionType
        }), "data-testid": `reaction-details-selector-${reactionType}`, key: reactionType, onClick: () => onSelectedReactionTypeChange == null ? void 0 : onSelectedReactionTypeChange(reactionType) },
        import_react236.default.createElement(
          "span",
          { className: "str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback" },
          import_react236.default.createElement(EmojiComponent, null)
        ),
        " ",
        import_react236.default.createElement("span", { className: "str-chat__message-reaction-count" }, reactionCount)
      ))),
      SelectedEmojiComponent && import_react236.default.createElement(
        "div",
        { className: "str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback str-chat__message-reaction-emoji-big" },
        import_react236.default.createElement(SelectedEmojiComponent, null)
      ),
      import_react236.default.createElement("div", { className: "str-chat__message-reactions-details-reacting-users", "data-testid": "all-reacting-users" }, areReactionsLoading ? import_react236.default.createElement(LoadingIndicator, null) : reactionDetailsWithLegacyFallback.map(({ user }) => import_react236.default.createElement(
        "div",
        { className: "str-chat__message-reactions-details-reacting-user", key: user == null ? void 0 : user.id },
        import_react236.default.createElement(Avatar, { className: "stream-chat__avatar--reaction", "data-testid": "avatar", image: user == null ? void 0 : user.image, name: (user == null ? void 0 : user.name) || (user == null ? void 0 : user.id) }),
        import_react236.default.createElement("span", { className: "str-chat__user-item--name", "data-testid": "reaction-user-username" }, (user == null ? void 0 : user.name) || (user == null ? void 0 : user.id))
      )))
    )
  );
}

// node_modules/stream-chat-react/dist/components/Reactions/hooks/useProcessReactions.js
var import_react237 = __toESM(require_react());
var defaultReactionsSort = (a2, b2) => {
  if (a2.firstReactionAt && b2.firstReactionAt) {
    return +a2.firstReactionAt - +b2.firstReactionAt;
  }
  return a2.reactionType.localeCompare(b2.reactionType, "en");
};
var useProcessReactions = (params) => {
  const { own_reactions: propOwnReactions, reaction_groups: propReactionGroups, reactionOptions: propReactionOptions, reactions: propReactions, sortReactions: propSortReactions } = params;
  const { message, sortReactions: contextSortReactions } = useMessageContext("useProcessReactions");
  const { reactionOptions: contextReactionOptions = defaultReactionOptions } = useComponentContext("useProcessReactions");
  const reactionOptions = propReactionOptions ?? contextReactionOptions;
  const sortReactions = propSortReactions ?? contextSortReactions ?? defaultReactionsSort;
  const latestReactions = propReactions || message.latest_reactions;
  const ownReactions = propOwnReactions || (message == null ? void 0 : message.own_reactions);
  const reactionGroups = propReactionGroups || (message == null ? void 0 : message.reaction_groups);
  const isOwnReaction = (0, import_react237.useCallback)((reactionType) => (ownReactions == null ? void 0 : ownReactions.some((reaction) => reaction.type === reactionType)) ?? false, [ownReactions]);
  const getEmojiByReactionType = (0, import_react237.useCallback)((reactionType) => {
    var _a;
    return ((_a = reactionOptions.find(({ type }) => type === reactionType)) == null ? void 0 : _a.Component) ?? null;
  }, [reactionOptions]);
  const isSupportedReaction = (0, import_react237.useCallback)((reactionType) => reactionOptions.some((reactionOption) => reactionOption.type === reactionType), [reactionOptions]);
  const getLatestReactedUserNames = (0, import_react237.useCallback)((reactionType) => (latestReactions == null ? void 0 : latestReactions.flatMap((reaction) => {
    var _a, _b;
    if (reactionType && reactionType === reaction.type) {
      const username = ((_a = reaction.user) == null ? void 0 : _a.name) || ((_b = reaction.user) == null ? void 0 : _b.id);
      return username ? [username] : [];
    }
    return [];
  })) ?? [], [latestReactions]);
  const existingReactions = (0, import_react237.useMemo)(() => {
    if (!reactionGroups) {
      return [];
    }
    const unsortedReactions = Object.entries(reactionGroups).flatMap(([reactionType, { count, first_reaction_at, last_reaction_at }]) => {
      if (count === 0 || !isSupportedReaction(reactionType)) {
        return [];
      }
      const latestReactedUserNames = getLatestReactedUserNames(reactionType);
      return [
        {
          EmojiComponent: getEmojiByReactionType(reactionType),
          firstReactionAt: first_reaction_at ? new Date(first_reaction_at) : null,
          isOwnReaction: isOwnReaction(reactionType),
          lastReactionAt: last_reaction_at ? new Date(last_reaction_at) : null,
          latestReactedUserNames,
          reactionCount: count,
          reactionType,
          unlistedReactedUserCount: count - latestReactedUserNames.length
        }
      ];
    });
    return unsortedReactions.sort(sortReactions);
  }, [
    getEmojiByReactionType,
    getLatestReactedUserNames,
    isOwnReaction,
    isSupportedReaction,
    reactionGroups,
    sortReactions
  ]);
  const hasReactions = existingReactions.length > 0;
  const totalReactionCount = (0, import_react237.useMemo)(() => existingReactions.reduce((total, { reactionCount }) => total + reactionCount, 0), [existingReactions]);
  return {
    existingReactions,
    hasReactions,
    totalReactionCount
  };
};

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsList.js
var UnMemoizedReactionsList = (props) => {
  const {
    handleFetchReactions,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    reactionDetailsSort,
    reverse = false,
    sortReactionDetails,
    ...rest
  } = props;
  const { existingReactions, hasReactions, totalReactionCount } = useProcessReactions(rest);
  const [selectedReactionType, setSelectedReactionType] = (0, import_react238.useState)(null);
  const { t: t2 } = useTranslationContext("ReactionsList");
  const { ReactionsListModal: ReactionsListModal2 = ReactionsListModal } = useComponentContext();
  const handleReactionButtonClick = (reactionType) => {
    if (totalReactionCount > MAX_MESSAGE_REACTIONS_TO_FETCH) {
      return;
    }
    setSelectedReactionType(reactionType);
  };
  if (!hasReactions)
    return null;
  return import_react238.default.createElement(
    import_react238.default.Fragment,
    null,
    import_react238.default.createElement(
      "div",
      { "aria-label": t2("aria/Reaction list"), className: clsx_default("str-chat__reaction-list str-chat__message-reactions-container", {
        // we are stuck with both classes as both are used in CSS
        "str-chat__reaction-list--reverse": reverse
      }), "data-testid": "reaction-list", role: "figure" },
      import_react238.default.createElement(
        "ul",
        { className: "str-chat__message-reactions" },
        existingReactions.map(({ EmojiComponent, isOwnReaction, reactionCount, reactionType }) => EmojiComponent && import_react238.default.createElement(
          "li",
          { className: clsx_default("str-chat__message-reaction", {
            "str-chat__message-reaction-own": isOwnReaction
          }), key: reactionType },
          import_react238.default.createElement(
            "button",
            { "aria-label": `Reactions: ${reactionType}`, "data-testid": `reactions-list-button-${reactionType}`, onClick: () => handleReactionButtonClick(reactionType), type: "button" },
            import_react238.default.createElement(
              "span",
              { className: "str-chat__message-reaction-emoji" },
              import_react238.default.createElement(EmojiComponent, null)
            ),
            " ",
            import_react238.default.createElement("span", { className: "str-chat__message-reaction-count", "data-testclass": "reaction-list-reaction-count" }, reactionCount)
          )
        )),
        import_react238.default.createElement(
          "li",
          null,
          import_react238.default.createElement("span", { className: "str-chat__reaction-list--counter" }, totalReactionCount)
        )
      )
    ),
    selectedReactionType !== null && import_react238.default.createElement(ReactionsListModal2, { handleFetchReactions, onClose: () => setSelectedReactionType(null), onSelectedReactionTypeChange: setSelectedReactionType, open: selectedReactionType !== null, reactions: existingReactions, selectedReactionType, sortReactionDetails })
  );
};
var ReactionsList = import_react238.default.memo(UnMemoizedReactionsList);

// node_modules/stream-chat-react/dist/components/Reactions/SimpleReactionsList.js
var import_react239 = __toESM(require_react());
var WithTooltip = ({ children, onMouseEnter, onMouseLeave, title }) => {
  const [referenceElement, setReferenceElement] = (0, import_react239.useState)(null);
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers({
    onMouseEnter,
    onMouseLeave
  });
  return import_react239.default.createElement(
    import_react239.default.Fragment,
    null,
    import_react239.default.createElement(PopperTooltip, { referenceElement, visible: tooltipVisible }, title),
    import_react239.default.createElement("span", { onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement }, children)
  );
};
var UnMemoizedSimpleReactionsList = (props) => {
  const { handleReaction: propHandleReaction, ...rest } = props;
  const { handleReaction: contextHandleReaction } = useMessageContext("SimpleReactionsList");
  const { existingReactions, hasReactions, totalReactionCount } = useProcessReactions(rest);
  const handleReaction = propHandleReaction || contextHandleReaction;
  if (!hasReactions)
    return null;
  return import_react239.default.createElement(
    "div",
    { className: "str-chat__message-reactions-container" },
    import_react239.default.createElement(
      "ul",
      { className: "str-chat__simple-reactions-list str-chat__message-reactions", "data-testid": "simple-reaction-list" },
      existingReactions.map(({ EmojiComponent, isOwnReaction, latestReactedUserNames, reactionType }) => {
        const tooltipContent = latestReactedUserNames.join(", ");
        return EmojiComponent && import_react239.default.createElement(
          "li",
          { className: clsx_default("str-chat__simple-reactions-list-item", {
            "str-chat__message-reaction-own": isOwnReaction
          }), key: reactionType, onClick: (event) => handleReaction(reactionType, event), onKeyUp: (event) => handleReaction(reactionType, event) },
          import_react239.default.createElement(
            WithTooltip,
            { title: tooltipContent },
            import_react239.default.createElement(EmojiComponent, null)
          )
        );
      }),
      import_react239.default.createElement("li", { className: "str-chat__simple-reactions-list-item--last-number" }, totalReactionCount)
    )
  );
};
var SimpleReactionsList = import_react239.default.memo(UnMemoizedSimpleReactionsList);

// node_modules/stream-chat-react/dist/components/Message/MessageEditedTimestamp.js
var import_react240 = __toESM(require_react());
function MessageEditedTimestamp({ message: propMessage, open, ...timestampProps }) {
  const { t: t2 } = useTranslationContext("MessageEditedTimestamp");
  const { message: contextMessage } = useMessageContext("MessageEditedTimestamp");
  const { Timestamp: Timestamp2 = Timestamp } = useComponentContext("MessageEditedTimestamp");
  const message = propMessage || contextMessage;
  if (!isMessageEdited(message)) {
    return null;
  }
  return import_react240.default.createElement(
    "div",
    { className: clsx_default("str-chat__message-edited-timestamp", open ? "str-chat__message-edited-timestamp--open" : "str-chat__message-edited-timestamp--collapsed"), "data-testid": "message-edited-timestamp" },
    t2("Edited"),
    " ",
    import_react240.default.createElement(Timestamp2, { timestamp: message.message_text_updated_at, ...timestampProps })
  );
}

// node_modules/stream-chat-react/dist/components/Message/MessageSimple.js
var MessageSimpleWithContext = (props) => {
  var _a, _b;
  const { additionalMessageInputProps, editing, endOfGroup, firstOfGroup, groupedByUser, handleAction, handleOpenThread, handleRetry, highlighted, isMessageAIGenerated, isMyMessage, message, onUserClick, onUserHover, renderText: renderText2, threadList } = props;
  const { client } = useChatContext("MessageSimple");
  const { t: t2 } = useTranslationContext("MessageSimple");
  const [isBounceDialogOpen, setIsBounceDialogOpen] = (0, import_react241.useState)(false);
  const [isEditedTimestampOpen, setEditedTimestampOpen] = (0, import_react241.useState)(false);
  const reminder = useMessageReminder(message.id);
  const {
    Attachment: Attachment2 = Attachment,
    Avatar: Avatar2 = Avatar,
    MessageOptions: MessageOptions2 = MessageOptions,
    // TODO: remove this "passthrough" in the next
    // major release and use the new default instead
    MessageActions: MessageActions2 = MessageOptions2,
    MessageBlocked: MessageBlocked2 = MessageBlocked,
    MessageBouncePrompt: MessageBouncePrompt2 = MessageBouncePrompt,
    MessageDeleted: MessageDeleted2 = MessageDeleted,
    MessageIsThreadReplyInChannelButtonIndicator: MessageIsThreadReplyInChannelButtonIndicator2 = MessageIsThreadReplyInChannelButtonIndicator,
    MessageRepliesCountButton: MessageRepliesCountButton2 = MessageRepliesCountButton,
    MessageStatus: MessageStatus2 = MessageStatus,
    MessageTimestamp: MessageTimestamp2 = MessageTimestamp,
    ReactionsList: ReactionsList2 = ReactionsList,
    ReminderNotification: ReminderNotification2 = ReminderNotification,
    StreamedMessageText: StreamedMessageText2 = StreamedMessageText,
    PinIndicator: PinIndicator2
  } = useComponentContext("MessageSimple");
  const hasAttachment = messageHasAttachments(message);
  const hasReactions = messageHasReactions(message);
  const isAIGenerated = (0, import_react241.useMemo)(() => isMessageAIGenerated == null ? void 0 : isMessageAIGenerated(message), [isMessageAIGenerated, message]);
  const finalAttachments = (0, import_react241.useMemo)(() => !message.shared_location && !message.attachments ? [] : !message.shared_location ? message.attachments : [message.shared_location, ...message.attachments ?? []], [message]);
  if (isDateSeparatorMessage(message)) {
    return null;
  }
  if (message.deleted_at || message.type === "deleted") {
    return import_react241.default.createElement(MessageDeleted2, { message });
  }
  if (isMessageBlocked(message)) {
    return import_react241.default.createElement(MessageBlocked2, null);
  }
  const showMetadata = !groupedByUser || endOfGroup;
  const showReplyCountButton = !threadList && !!message.reply_count;
  const showIsReplyInChannel = !threadList && message.show_in_channel && message.parent_id;
  const allowRetry = message.status === "failed" && ((_a = message.error) == null ? void 0 : _a.status) !== 403;
  const isBounced = isMessageBounced(message);
  const isEdited = isMessageEdited(message) && !isAIGenerated;
  let handleClick = void 0;
  if (allowRetry) {
    handleClick = () => handleRetry(message);
  } else if (isBounced) {
    handleClick = () => setIsBounceDialogOpen(true);
  } else if (isEdited) {
    handleClick = () => setEditedTimestampOpen((prev) => !prev);
  }
  const rootClassName2 = clsx_default("str-chat__message str-chat__message-simple", `str-chat__message--${message.type}`, `str-chat__message--${message.status}`, isMyMessage() ? "str-chat__message--me str-chat__message-simple--me" : "str-chat__message--other", message.text ? "str-chat__message--has-text" : "has-no-text", {
    "str-chat__message--has-attachment": hasAttachment,
    "str-chat__message--highlighted": highlighted,
    "str-chat__message--pinned pinned-message": message.pinned,
    "str-chat__message--with-reactions": hasReactions,
    "str-chat__message-send-can-be-retried": (message == null ? void 0 : message.status) === "failed" && ((_b = message == null ? void 0 : message.error) == null ? void 0 : _b.status) !== 403,
    "str-chat__message-with-thread-link": showReplyCountButton || showIsReplyInChannel,
    "str-chat__virtual-message__wrapper--end": endOfGroup,
    "str-chat__virtual-message__wrapper--first": firstOfGroup,
    "str-chat__virtual-message__wrapper--group": groupedByUser
  });
  const poll = message.poll_id && client.polls.fromState(message.poll_id);
  return import_react241.default.createElement(
    import_react241.default.Fragment,
    null,
    editing && import_react241.default.createElement(EditMessageModal, { additionalMessageInputProps }),
    isBounceDialogOpen && import_react241.default.createElement(MessageBounceModal, { MessageBouncePrompt: MessageBouncePrompt2, onClose: () => setIsBounceDialogOpen(false), open: isBounceDialogOpen }),
    import_react241.default.createElement(
      "div",
      { className: rootClassName2, key: message.id },
      PinIndicator2 && import_react241.default.createElement(PinIndicator2, null),
      !!reminder && import_react241.default.createElement(ReminderNotification2, { reminder }),
      message.user && import_react241.default.createElement(Avatar2, { image: message.user.image, name: message.user.name || message.user.id, onClick: onUserClick, onMouseOver: onUserHover, user: message.user }),
      import_react241.default.createElement(
        "div",
        { className: clsx_default("str-chat__message-inner", {
          "str-chat__simple-message--error-failed": allowRetry || isBounced
        }), "data-testid": "message-inner", onClick: handleClick, onKeyUp: handleClick },
        import_react241.default.createElement(MessageActions2, null),
        import_react241.default.createElement("div", { className: "str-chat__message-reactions-host" }, hasReactions && import_react241.default.createElement(ReactionsList2, { reverse: true })),
        import_react241.default.createElement(
          "div",
          { className: "str-chat__message-bubble" },
          poll && import_react241.default.createElement(Poll, { poll }),
          (finalAttachments == null ? void 0 : finalAttachments.length) && !message.quoted_message ? import_react241.default.createElement(Attachment2, { actionHandler: handleAction, attachments: finalAttachments }) : null,
          isAIGenerated ? import_react241.default.createElement(StreamedMessageText2, { message, renderText: renderText2 }) : import_react241.default.createElement(MessageText, { message, renderText: renderText2 }),
          import_react241.default.createElement(MessageErrorIcon, null)
        )
      ),
      showReplyCountButton && import_react241.default.createElement(MessageRepliesCountButton2, { onClick: handleOpenThread, reply_count: message.reply_count }),
      showIsReplyInChannel && import_react241.default.createElement(MessageIsThreadReplyInChannelButtonIndicator2, null),
      showMetadata && import_react241.default.createElement(
        "div",
        { className: "str-chat__message-metadata" },
        import_react241.default.createElement(MessageStatus2, null),
        !isMyMessage() && !!message.user && import_react241.default.createElement("span", { className: "str-chat__message-simple-name" }, message.user.name || message.user.id),
        import_react241.default.createElement(MessageTimestamp2, { customClass: "str-chat__message-simple-timestamp" }),
        isEdited && import_react241.default.createElement("span", { className: "str-chat__mesage-simple-edited" }, t2("Edited")),
        isEdited && import_react241.default.createElement(MessageEditedTimestamp, { calendar: true, open: isEditedTimestampOpen })
      )
    )
  );
};
var MemoizedMessageSimple = import_react241.default.memo(MessageSimpleWithContext, areMessageUIPropsEqual);
var MessageSimple = (props) => {
  const messageContext = useMessageContext("MessageSimple");
  return import_react241.default.createElement(MemoizedMessageSimple, { ...messageContext, ...props });
};

// node_modules/stream-chat-react/dist/components/Message/Message.js
var MessageWithContext = (props) => {
  const { canPin, groupedByUser, Message: propMessage, message, messageActions = Object.keys(MESSAGE_ACTIONS), onUserClick: propOnUserClick, onUserHover: propOnUserHover, userRoles } = props;
  const { client, isMessageAIGenerated } = useChatContext("Message");
  const { channelConfig, read: read2 } = useChannelStateContext("Message");
  const { Message: contextMessage } = useComponentContext("Message");
  const actionsEnabled = message.type === "regular" && message.status === "received";
  const MessageUIComponent = propMessage ?? contextMessage ?? MessageSimple;
  const { clearEdit, editing, setEdit } = useEditHandler();
  const { onUserClick, onUserHover } = useUserHandler(message, {
    onUserClickHandler: propOnUserClick,
    onUserHoverHandler: propOnUserHover
  });
  const { canDelete, canEdit, canFlag, canMarkUnread, canMute, canQuote, canReact, canReply, isMyMessage } = userRoles;
  const messageIsUnread = (0, import_react242.useMemo)(() => {
    var _a;
    return !!(!isMyMessage && ((_a = client.user) == null ? void 0 : _a.id) && read2 && (!read2[client.user.id] || (message == null ? void 0 : message.created_at) && new Date(message.created_at).getTime() > read2[client.user.id].last_read.getTime()));
  }, [client, isMyMessage, message.created_at, read2]);
  const messageActionsHandler = (0, import_react242.useCallback)(() => getMessageActions(messageActions, {
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canPin,
    canQuote,
    canReact,
    canReply
  }, channelConfig), [
    messageActions,
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canPin,
    canQuote,
    canReact,
    canReply,
    channelConfig
  ]);
  const {
    canPin: canPinPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    messageActions: messageActionsPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    onlySenderCanEdit: onlySenderCanEditPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    onUserClick: onUserClickPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    onUserHover: onUserHoverPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    userRoles: userRolesPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    ...rest
  } = props;
  const messageContextValue = {
    ...rest,
    actionsEnabled,
    clearEditingState: clearEdit,
    editing,
    getMessageActions: messageActionsHandler,
    handleEdit: setEdit,
    isMessageAIGenerated,
    isMyMessage: () => isMyMessage,
    messageIsUnread,
    onUserClick,
    onUserHover,
    setEditingState: setEdit
  };
  return import_react242.default.createElement(
    MessageProvider,
    { value: messageContextValue },
    import_react242.default.createElement(MessageUIComponent, { groupedByUser })
  );
};
var MemoizedMessage = import_react242.default.memo(MessageWithContext, areMessagePropsEqual);
var Message = (props) => {
  const { closeReactionSelectorOnClick, disableQuotedMessages, getDeleteMessageErrorNotification, getFetchReactionsErrorNotification, getFlagMessageErrorNotification, getFlagMessageSuccessNotification, getMarkMessageUnreadErrorNotification, getMarkMessageUnreadSuccessNotification, getMuteUserErrorNotification, getMuteUserSuccessNotification, getPinMessageErrorNotification, message, onlySenderCanEdit = false, onMentionsClick: propOnMentionsClick, onMentionsHover: propOnMentionsHover, openThread: propOpenThread, pinPermissions, reactionDetailsSort, retrySendMessage: propRetrySendMessage, sortReactionDetails, sortReactions } = props;
  const { addNotification } = useChannelActionContext("Message");
  const { highlightedMessageId, mutes } = useChannelStateContext("Message");
  const handleAction = useActionHandler(message);
  const handleOpenThread = useOpenThreadHandler(message, propOpenThread);
  const handleReaction = useReactionHandler(message);
  const handleRetry = useRetryHandler(propRetrySendMessage);
  const userRoles = useUserRole(message, onlySenderCanEdit, disableQuotedMessages);
  const handleFetchReactions = useReactionsFetcher(message, {
    getErrorNotification: getFetchReactionsErrorNotification,
    notify: addNotification
  });
  const handleDelete2 = useDeleteHandler(message, {
    getErrorNotification: getDeleteMessageErrorNotification,
    notify: addNotification
  });
  const handleFlag = useFlagHandler(message, {
    getErrorNotification: getFlagMessageErrorNotification,
    getSuccessNotification: getFlagMessageSuccessNotification,
    notify: addNotification
  });
  const handleMarkUnread = useMarkUnreadHandler(message, {
    getErrorNotification: getMarkMessageUnreadErrorNotification,
    getSuccessNotification: getMarkMessageUnreadSuccessNotification,
    notify: addNotification
  });
  const handleMute = useMuteHandler(message, {
    getErrorNotification: getMuteUserErrorNotification,
    getSuccessNotification: getMuteUserSuccessNotification,
    notify: addNotification
  });
  const { onMentionsClick, onMentionsHover } = useMentionsHandler(message, {
    onMentionsClick: propOnMentionsClick,
    onMentionsHover: propOnMentionsHover
  });
  const { canPin, handlePin } = usePinHandler(message, pinPermissions, {
    getErrorNotification: getPinMessageErrorNotification,
    notify: addNotification
  });
  const highlighted = highlightedMessageId === message.id;
  return import_react242.default.createElement(MemoizedMessage, { additionalMessageInputProps: props.additionalMessageInputProps, autoscrollToBottom: props.autoscrollToBottom, canPin, closeReactionSelectorOnClick, customMessageActions: props.customMessageActions, disableQuotedMessages: props.disableQuotedMessages, endOfGroup: props.endOfGroup, firstOfGroup: props.firstOfGroup, formatDate: props.formatDate, groupedByUser: props.groupedByUser, groupStyles: props.groupStyles, handleAction, handleDelete: handleDelete2, handleFetchReactions, handleFlag, handleMarkUnread, handleMute, handleOpenThread, handlePin, handleReaction, handleRetry, highlighted, initialMessage: props.initialMessage, lastReceivedId: props.lastReceivedId, message, Message: props.Message, messageActions: props.messageActions, messageListRect: props.messageListRect, mutes, onMentionsClickMessage: onMentionsClick, onMentionsHoverMessage: onMentionsHover, onUserClick: props.onUserClick, onUserHover: props.onUserHover, pinPermissions: props.pinPermissions, reactionDetailsSort, readBy: props.readBy, renderText: props.renderText, sortReactionDetails, sortReactions, threadList: props.threadList, unsafeHTML: props.unsafeHTML, userRoles });
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/utils.js
var remarkPlugins = [
  htmlToTextPlugin,
  [remarkGfm, { singleTilde: false }],
  plusPlusToEmphasis,
  imageToLink
];
var renderPreviewText = (text8) => import_react243.default.createElement(Markdown, { remarkPlugins, skipHtml: true }, text8);
var getLatestPollVote = (latestVotesByOption) => {
  let latestVote;
  for (const optionVotes of Object.values(latestVotesByOption)) {
    optionVotes.forEach((vote) => {
      if (latestVote && new Date(latestVote.updated_at) >= new Date(vote.created_at))
        return;
      latestVote = vote;
    });
  }
  return latestVote;
};
var getLatestMessagePreview = (channel, t2, userLanguage = "en", isMessageAIGenerated) => {
  var _a, _b, _c, _d, _e2, _f;
  const latestMessage = channel.state.latestMessages[channel.state.latestMessages.length - 1];
  const previewTextToRender = ((_a = latestMessage == null ? void 0 : latestMessage.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || (latestMessage == null ? void 0 : latestMessage.text);
  const poll = latestMessage == null ? void 0 : latestMessage.poll;
  if (!latestMessage) {
    return t2("Nothing yet...");
  }
  if (latestMessage.deleted_at) {
    return t2("Message deleted");
  }
  if (poll) {
    if (!poll.vote_count) {
      const createdBy = ((_b = poll.created_by) == null ? void 0 : _b.id) === channel.getClient().userID ? t2("You") : ((_c = poll.created_by) == null ? void 0 : _c.name) ?? t2("Poll");
      return t2("📊 {{createdBy}} created: {{ pollName}}", {
        createdBy,
        pollName: poll.name
      });
    } else {
      const latestVote = getLatestPollVote(poll.latest_votes_by_option);
      const option = latestVote && poll.options.find((opt) => opt.id === latestVote.option_id);
      if (option && latestVote) {
        return t2("📊 {{votedBy}} voted: {{pollOptionText}}", {
          pollOptionText: option.text,
          votedBy: ((_d = latestVote == null ? void 0 : latestVote.user) == null ? void 0 : _d.id) === channel.getClient().userID ? t2("You") : ((_e2 = latestVote.user) == null ? void 0 : _e2.name) ?? t2("Poll")
        });
      }
    }
  }
  if (previewTextToRender) {
    return (isMessageAIGenerated == null ? void 0 : isMessageAIGenerated(latestMessage)) ? previewTextToRender : renderPreviewText(previewTextToRender);
  }
  if (latestMessage.command) {
    return `/${latestMessage.command}`;
  }
  if ((_f = latestMessage.attachments) == null ? void 0 : _f.length) {
    return t2("🏙 Attachment...");
  }
  if (latestMessage.shared_location) {
    return t2("📍Shared location");
  }
  return t2("Empty message...");
};
var getGroupChannelDisplayInfo = (channel) => {
  const members = Object.values(channel.state.members);
  if (members.length <= 2)
    return;
  const info = [];
  for (let i2 = 0; i2 < members.length; i2++) {
    const { user } = members[i2];
    if (!(user == null ? void 0 : user.name) && !(user == null ? void 0 : user.image))
      continue;
    info.push({ image: user.image, name: user.name });
    if (info.length === 4)
      break;
  }
  return info;
};
var getChannelDisplayInfo = (info, channel, currentUser) => {
  var _a, _b;
  if ((_a = channel.data) == null ? void 0 : _a[info])
    return channel.data[info];
  const members = Object.values(channel.state.members);
  if (members.length !== 2)
    return;
  const otherMember = members.find((member) => {
    var _a2;
    return ((_a2 = member.user) == null ? void 0 : _a2.id) !== (currentUser == null ? void 0 : currentUser.id);
  });
  return (_b = otherMember == null ? void 0 : otherMember.user) == null ? void 0 : _b[info];
};
var getDisplayTitle = (channel, currentUser) => getChannelDisplayInfo("name", channel, currentUser);
var getDisplayImage = (channel, currentUser) => getChannelDisplayInfo("image", channel, currentUser);

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useChannelPreviewInfo.js
var useChannelPreviewInfo = (props) => {
  const { channel, overrideImage, overrideTitle } = props;
  const { client } = useChatContext("useChannelPreviewInfo");
  const [displayTitle, setDisplayTitle] = (0, import_react244.useState)(() => overrideTitle || getDisplayTitle(channel, client.user));
  const [displayImage, setDisplayImage] = (0, import_react244.useState)(() => overrideImage || getDisplayImage(channel, client.user));
  const [groupChannelDisplayInfo, setGroupDisplayChannelInfo] = (0, import_react244.useState)(() => getGroupChannelDisplayInfo(channel));
  (0, import_react244.useEffect)(() => {
    if (overrideTitle && overrideImage)
      return;
    const updateInfo = () => {
      if (!overrideTitle)
        setDisplayTitle(getDisplayTitle(channel, client.user));
      if (!overrideImage) {
        setDisplayImage(getDisplayImage(channel, client.user));
        setGroupDisplayChannelInfo(getGroupChannelDisplayInfo(channel));
      }
    };
    updateInfo();
    client.on("user.updated", updateInfo);
    return () => {
      client.off("user.updated", updateInfo);
    };
  }, [channel, channel.data, client, overrideImage, overrideTitle]);
  return {
    displayImage: overrideImage || displayImage,
    displayTitle: overrideTitle || displayTitle,
    groupChannelDisplayInfo
  };
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useMessageDeliveryStatus.js
var import_react245 = __toESM(require_react());
var MessageDeliveryStatus;
(function(MessageDeliveryStatus2) {
  MessageDeliveryStatus2["DELIVERED"] = "delivered";
  MessageDeliveryStatus2["READ"] = "read";
})(MessageDeliveryStatus || (MessageDeliveryStatus = {}));
var useMessageDeliveryStatus = ({ channel, lastMessage }) => {
  const { client } = useChatContext();
  const [messageDeliveryStatus, setMessageDeliveryStatus] = (0, import_react245.useState)();
  const isOwnMessage = (0, import_react245.useCallback)((message) => {
    var _a;
    return client.user && ((_a = message == null ? void 0 : message.user) == null ? void 0 : _a.id) === client.user.id;
  }, [client]);
  (0, import_react245.useEffect)(() => {
    const lastMessageIsOwn = isOwnMessage(lastMessage);
    if (!(lastMessage == null ? void 0 : lastMessage.created_at) || !lastMessageIsOwn)
      return;
    const lastMessageCreatedAtDate = typeof lastMessage.created_at === "string" ? new Date(lastMessage.created_at) : lastMessage.created_at;
    const channelReadByOthersAfterLastMessageUpdate = Object.values(channel.state.read).some(({ last_read: channelLastMarkedReadDate, user }) => {
      const ignoreOwnReadStatus = client.user && user.id !== client.user.id;
      return ignoreOwnReadStatus && lastMessageCreatedAtDate < channelLastMarkedReadDate;
    });
    setMessageDeliveryStatus(channelReadByOthersAfterLastMessageUpdate ? MessageDeliveryStatus.READ : MessageDeliveryStatus.DELIVERED);
  }, [channel.state.read, client, isOwnMessage, lastMessage]);
  (0, import_react245.useEffect)(() => {
    const handleMessageNew = (event) => {
      if (!isOwnMessage(event.message)) {
        return setMessageDeliveryStatus(void 0);
      }
      return setMessageDeliveryStatus(MessageDeliveryStatus.DELIVERED);
    };
    channel.on("message.new", handleMessageNew);
    return () => {
      channel.off("message.new", handleMessageNew);
    };
  }, [channel, client, isOwnMessage]);
  (0, import_react245.useEffect)(() => {
    if (!isOwnMessage(lastMessage))
      return;
    const handleMarkRead = (event) => {
      var _a, _b;
      if (((_a = event.user) == null ? void 0 : _a.id) !== ((_b = client.user) == null ? void 0 : _b.id))
        setMessageDeliveryStatus(MessageDeliveryStatus.READ);
    };
    channel.on("message.read", handleMarkRead);
    return () => {
      channel.off("message.read", handleMarkRead);
    };
  }, [channel, client, lastMessage, isOwnMessage]);
  return {
    messageDeliveryStatus
  };
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js
var ChannelPreview = (props) => {
  const { active, channel, channelUpdateCount, getLatestMessagePreview: getLatestMessagePreview2 = getLatestMessagePreview, Preview = ChannelPreviewMessenger } = props;
  const { channel: activeChannel, client, isMessageAIGenerated, setActiveChannel } = useChatContext("ChannelPreview");
  const { t: t2, userLanguage } = useTranslationContext("ChannelPreview");
  const { displayImage, displayTitle, groupChannelDisplayInfo } = useChannelPreviewInfo({
    channel
  });
  const [lastMessage, setLastMessage] = (0, import_react246.useState)(channel.state.messages[channel.state.messages.length - 1]);
  const [unread, setUnread] = (0, import_react246.useState)(0);
  const { messageDeliveryStatus } = useMessageDeliveryStatus({
    channel,
    lastMessage
  });
  const isActive = typeof active === "undefined" ? (activeChannel == null ? void 0 : activeChannel.cid) === channel.cid : active;
  const { muted } = useIsChannelMuted(channel);
  (0, import_react246.useEffect)(() => {
    const handleEvent = (event) => {
      if (!event.cid)
        return setUnread(0);
      if (channel.cid === event.cid)
        setUnread(0);
    };
    client.on("notification.mark_read", handleEvent);
    return () => client.off("notification.mark_read", handleEvent);
  }, [channel, client]);
  (0, import_react246.useEffect)(() => {
    const handleEvent = (event) => {
      var _a, _b;
      if (channel.cid !== event.cid)
        return;
      if (((_a = event.user) == null ? void 0 : _a.id) !== ((_b = client.user) == null ? void 0 : _b.id))
        return;
      setUnread(channel.countUnread());
    };
    channel.on("notification.mark_unread", handleEvent);
    return () => {
      channel.off("notification.mark_unread", handleEvent);
    };
  }, [channel, client]);
  const refreshUnreadCount = (0, import_react246.useMemo)(() => (0, import_lodash16.default)(() => {
    if (muted) {
      setUnread(0);
    } else {
      setUnread(channel.countUnread());
    }
  }, 400), [channel, muted]);
  (0, import_react246.useEffect)(() => {
    refreshUnreadCount();
    const handleEvent = (event) => {
      const deletedMessagesInAnotherChannel = event.type === "user.messages.deleted" && event.cid && event.cid !== channel.cid;
      if (deletedMessagesInAnotherChannel)
        return;
      setLastMessage(channel.state.latestMessages[channel.state.latestMessages.length - 1]);
      refreshUnreadCount();
    };
    channel.on("message.new", handleEvent);
    channel.on("message.updated", handleEvent);
    channel.on("message.deleted", handleEvent);
    client.on("user.messages.deleted", handleEvent);
    channel.on("message.undeleted", handleEvent);
    channel.on("channel.truncated", handleEvent);
    return () => {
      channel.off("message.new", handleEvent);
      channel.off("message.updated", handleEvent);
      channel.off("message.deleted", handleEvent);
      client.off("user.messages.deleted", handleEvent);
      channel.off("message.undeleted", handleEvent);
      channel.off("channel.truncated", handleEvent);
    };
  }, [channel, client, refreshUnreadCount, channelUpdateCount]);
  if (!Preview)
    return null;
  const latestMessagePreview = getLatestMessagePreview2(channel, t2, userLanguage, isMessageAIGenerated);
  return import_react246.default.createElement(Preview, { ...props, active: isActive, displayImage, displayTitle, groupChannelDisplayInfo, lastMessage, latestMessage: latestMessagePreview, latestMessagePreview, messageDeliveryStatus, setActiveChannel, unread });
};

// node_modules/stream-chat-react/dist/components/ChatView/ChatView.js
var import_react247 = __toESM(require_react());
var ChatViewContext = (0, import_react247.createContext)({
  activeChatView: "channels",
  setActiveChatView: () => void 0
});
var ChatView = ({ children }) => {
  const [activeChatView, setActiveChatView] = (0, import_react247.useState)("channels");
  const { theme } = useChatContext();
  const value = (0, import_react247.useMemo)(() => ({ activeChatView, setActiveChatView }), [activeChatView]);
  return import_react247.default.createElement(
    ChatViewContext.Provider,
    { value },
    import_react247.default.createElement("div", { className: clsx_default("str-chat", theme, "str-chat__chat-view") }, children)
  );
};
var ChannelsView = ({ children }) => {
  const { activeChatView } = (0, import_react247.useContext)(ChatViewContext);
  if (activeChatView !== "channels")
    return null;
  return import_react247.default.createElement("div", { className: "str-chat__chat-view__channels" }, children);
};
var ThreadsViewContext = (0, import_react247.createContext)({
  activeThread: void 0,
  setActiveThread: () => void 0
});
var useThreadsViewContext = () => (0, import_react247.useContext)(ThreadsViewContext);
var ThreadsView = ({ children }) => {
  const { activeChatView } = (0, import_react247.useContext)(ChatViewContext);
  const [activeThread, setActiveThread] = (0, import_react247.useState)(void 0);
  const value = (0, import_react247.useMemo)(() => ({ activeThread, setActiveThread }), [activeThread]);
  if (activeChatView !== "threads")
    return null;
  return import_react247.default.createElement(
    ThreadsViewContext.Provider,
    { value },
    import_react247.default.createElement("div", { className: "str-chat__chat-view__threads" }, children)
  );
};
var useActiveThread = ({ activeThread }) => {
  (0, import_react247.useEffect)(() => {
    if (!activeThread)
      return;
    const handleVisibilityChange = () => {
      if (document.visibilityState === "visible" && document.hasFocus()) {
        activeThread.activate();
      }
      if (document.visibilityState === "hidden" || !document.hasFocus()) {
        activeThread.deactivate();
      }
    };
    handleVisibilityChange();
    window.addEventListener("focus", handleVisibilityChange);
    window.addEventListener("blur", handleVisibilityChange);
    return () => {
      activeThread.deactivate();
      window.addEventListener("blur", handleVisibilityChange);
      window.removeEventListener("focus", handleVisibilityChange);
    };
  }, [activeThread]);
};
var ThreadAdapter = ({ children }) => {
  const { activeThread } = useThreadsViewContext();
  useActiveThread({ activeThread });
  return import_react247.default.createElement(ThreadProvider, { thread: activeThread }, children);
};
var selector3 = ({ unreadThreadCount }) => ({
  unreadThreadCount
});
var ChatViewSelector = () => {
  const { client } = useChatContext();
  const { unreadThreadCount } = useStateStore(client.threads.state, selector3);
  const { activeChatView, setActiveChatView } = (0, import_react247.useContext)(ChatViewContext);
  return import_react247.default.createElement(
    "div",
    { className: "str-chat__chat-view__selector" },
    import_react247.default.createElement(
      "button",
      { "aria-selected": activeChatView === "channels", className: "str-chat__chat-view__selector-button", onPointerDown: () => setActiveChatView("channels"), role: "tab" },
      import_react247.default.createElement(Icon.MessageBubbleEmpty, null),
      import_react247.default.createElement("div", { className: "str-chat__chat-view__selector-button-text" }, "Channels")
    ),
    import_react247.default.createElement(
      "button",
      { "aria-selected": activeChatView === "threads", className: "str-chat__chat-view__selector-button", onPointerDown: () => setActiveChatView("threads"), role: "tab" },
      import_react247.default.createElement(
        UnreadCountBadge,
        { count: unreadThreadCount, position: "top-right" },
        import_react247.default.createElement(Icon.MessageBubble, null)
      ),
      import_react247.default.createElement("div", { className: "str-chat__chat-view__selector-button-text" }, "Threads")
    )
  );
};
ChatView.Channels = ChannelsView;
ChatView.Threads = ThreadsView;
ChatView.ThreadAdapter = ThreadAdapter;
ChatView.Selector = ChatViewSelector;

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItemUI.js
var attachmentTypeIconMap = {
  audio: "🔈",
  file: "📄",
  image: "📷",
  video: "🎥",
  voiceRecording: "🎙️"
};
var getTitleFromMessage = ({ currentUserId, message }) => {
  var _a, _b;
  const attachment = (_a = message == null ? void 0 : message.attachments) == null ? void 0 : _a.at(0);
  let attachmentIcon = "";
  if (attachment) {
    attachmentIcon += attachmentTypeIconMap[attachment.type ?? "file"] ?? attachmentTypeIconMap.file;
  }
  const messageBelongsToCurrentUser = ((_b = message == null ? void 0 : message.user) == null ? void 0 : _b.id) === currentUserId;
  if ((message == null ? void 0 : message.deleted_at) && message.parent_id)
    return clsx_default(messageBelongsToCurrentUser && "You:", "This reply was deleted.");
  if ((message == null ? void 0 : message.deleted_at) && !message.parent_id)
    return clsx_default(messageBelongsToCurrentUser && "You:", "The source message was deleted.");
  if ((attachment == null ? void 0 : attachment.type) === "voiceRecording")
    return clsx_default(attachmentIcon, messageBelongsToCurrentUser && "You:", "Voice message");
  return clsx_default(attachmentIcon, messageBelongsToCurrentUser && "You:", (message == null ? void 0 : message.text) || (attachment == null ? void 0 : attachment.fallback) || "N/A");
};
var ThreadListItemUI = (props) => {
  var _a, _b, _c;
  const { client } = useChatContext();
  const thread = useThreadListItemContext();
  const selector8 = (0, import_react248.useCallback)((nextValue) => {
    var _a2;
    return {
      channel: nextValue.channel,
      deletedAt: nextValue.deletedAt,
      latestReply: nextValue.replies.at(-1),
      ownUnreadMessageCount: client.userID && ((_a2 = nextValue.read[client.userID]) == null ? void 0 : _a2.unreadMessageCount) || 0,
      parentMessage: nextValue.parentMessage
    };
  }, [client]);
  const { channel, deletedAt, latestReply, ownUnreadMessageCount, parentMessage } = useStateStore(thread.state, selector8);
  const { displayTitle: channelDisplayTitle } = useChannelPreviewInfo({ channel });
  const { activeThread, setActiveThread } = useThreadsViewContext();
  const avatarProps = deletedAt ? null : latestReply == null ? void 0 : latestReply.user;
  return import_react248.default.createElement(
    "button",
    { "aria-selected": activeThread === thread, className: "str-chat__thread-list-item", "data-thread-id": thread.id, onClick: () => setActiveThread(thread), role: "option", ...props },
    import_react248.default.createElement(
      "div",
      { className: "str-chat__thread-list-item__channel" },
      import_react248.default.createElement(Icon.MessageBubble, null),
      import_react248.default.createElement("div", { className: "str-chat__thread-list-item__channel-text" }, channelDisplayTitle)
    ),
    import_react248.default.createElement(
      "div",
      { className: "str-chat__thread-list-item__parent-message" },
      import_react248.default.createElement(
        "div",
        { className: "str-chat__thread-list-item__parent-message-text" },
        "replied to: ",
        getTitleFromMessage({ message: parentMessage })
      ),
      !deletedAt && import_react248.default.createElement(UnreadCountBadge, { count: ownUnreadMessageCount })
    ),
    import_react248.default.createElement(
      "div",
      { className: "str-chat__thread-list-item__latest-reply" },
      import_react248.default.createElement(Avatar, { ...avatarProps }),
      import_react248.default.createElement(
        "div",
        { className: "str-chat__thread-list-item__latest-reply-details" },
        !deletedAt && import_react248.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply-created-by" }, ((_a = latestReply == null ? void 0 : latestReply.user) == null ? void 0 : _a.name) || ((_b = latestReply == null ? void 0 : latestReply.user) == null ? void 0 : _b.id) || "Unknown sender"),
        import_react248.default.createElement(
          "div",
          { className: "str-chat__thread-list-item__latest-reply-text-and-timestamp" },
          import_react248.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply-text" }, deletedAt ? "This thread was deleted" : getTitleFromMessage({
            currentUserId: (_c = client.user) == null ? void 0 : _c.id,
            message: latestReply
          })),
          import_react248.default.createElement(
            "div",
            { className: "str-chat__thread-list-item__latest-reply-timestamp" },
            import_react248.default.createElement(Timestamp, { timestamp: deletedAt ?? (latestReply == null ? void 0 : latestReply.created_at) })
          )
        )
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItem.js
var ThreadListItemContext = (0, import_react249.createContext)(void 0);
var useThreadListItemContext = () => (0, import_react249.useContext)(ThreadListItemContext);
var ThreadListItem = ({ thread, threadListItemUIProps }) => {
  const { ThreadListItemUI: ThreadListItemUI2 = ThreadListItemUI } = useComponentContext();
  return import_react249.default.createElement(
    ThreadListItemContext.Provider,
    { value: thread },
    import_react249.default.createElement(ThreadListItemUI2, { ...threadListItemUIProps })
  );
};
{
}

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListEmptyPlaceholder.js
var import_react250 = __toESM(require_react());
var ThreadListEmptyPlaceholder = () => import_react250.default.createElement(
  "div",
  { className: "str-chat__thread-list-empty-placeholder" },
  import_react250.default.createElement(Icon.MessageBubble, null),
  "No threads here yet..."
);

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListUnseenThreadsBanner.js
var import_react251 = __toESM(require_react());
var selector4 = (nextValue) => ({
  unseenThreadIds: nextValue.unseenThreadIds
});
var ThreadListUnseenThreadsBanner = () => {
  const { client } = useChatContext();
  const { unseenThreadIds } = useStateStore(client.threads.state, selector4);
  if (!unseenThreadIds.length)
    return null;
  return import_react251.default.createElement(
    "div",
    { className: "str-chat__unseen-threads-banner" },
    unseenThreadIds.length,
    " unread threads",
    import_react251.default.createElement(
      "button",
      { className: "str-chat__unseen-threads-banner__button", onClick: () => client.threads.reload() },
      import_react251.default.createElement(Icon.Reload, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListLoadingIndicator.js
var import_react252 = __toESM(require_react());
var selector5 = (nextValue) => ({
  isLoadingNext: nextValue.pagination.isLoadingNext
});
var ThreadListLoadingIndicator = () => {
  const { LoadingIndicator: LoadingIndicator2 = LoadingIndicator } = useComponentContext();
  const { client } = useChatContext();
  const { isLoadingNext } = useStateStore(client.threads.state, selector5);
  if (!isLoadingNext)
    return null;
  return import_react252.default.createElement(
    "div",
    { className: "str-chat__thread-list-loading-indicator" },
    import_react252.default.createElement(LoadingIndicator2, null)
  );
};

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadList.js
var selector6 = (nextValue) => ({ threads: nextValue.threads });
var computeItemKey = (_2, item) => item.id;
var useThreadList = () => {
  const { client } = useChatContext();
  (0, import_react253.useEffect)(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === "visible") {
        client.threads.activate();
      }
      if (document.visibilityState === "hidden") {
        client.threads.deactivate();
      }
    };
    handleVisibilityChange();
    document.addEventListener("visibilitychange", handleVisibilityChange);
    return () => {
      client.threads.deactivate();
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [client]);
};
var ThreadList = ({ virtuosoProps }) => {
  const { client } = useChatContext();
  const { ThreadListEmptyPlaceholder: ThreadListEmptyPlaceholder2 = ThreadListEmptyPlaceholder, ThreadListItem: ThreadListItem2 = ThreadListItem, ThreadListLoadingIndicator: ThreadListLoadingIndicator2 = ThreadListLoadingIndicator, ThreadListUnseenThreadsBanner: ThreadListUnseenThreadsBanner2 = ThreadListUnseenThreadsBanner } = useComponentContext();
  const { threads } = useStateStore(client.threads.state, selector6);
  useThreadList();
  return import_react253.default.createElement(
    "div",
    { className: "str-chat__thread-list-container" },
    import_react253.default.createElement(ThreadListUnseenThreadsBanner2, null),
    import_react253.default.createElement(ln, { atBottomStateChange: (atBottom) => atBottom && client.threads.loadNextPage(), className: "str-chat__thread-list", components: {
      EmptyPlaceholder: ThreadListEmptyPlaceholder2,
      Footer: ThreadListLoadingIndicator2
    }, computeItemKey, data: threads, itemContent: (_2, thread) => import_react253.default.createElement(ThreadListItem2, { thread }), ...virtuosoProps })
  );
};

// node_modules/stream-chat-react/dist/components/Thread/Thread.js
var import_react259 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Thread/LegacyThreadContext.js
var import_react254 = __toESM(require_react());
var LegacyThreadContext = import_react254.default.createContext({ legacyThread: void 0 });
var useLegacyThreadContext = () => (0, import_react254.useContext)(LegacyThreadContext);

// node_modules/stream-chat-react/dist/components/Thread/ThreadHeader.js
var import_react256 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Thread/icons.js
var import_react255 = __toESM(require_react());
var CloseIcon3 = ({ title }) => {
  const { t: t2 } = useTranslationContext("CloseIcon");
  return import_react255.default.createElement(
    "svg",
    { "data-testid": "close-no-outline", fill: "none", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
    import_react255.default.createElement("title", null, title ?? t2("Close")),
    import_react255.default.createElement("path", { d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z", fill: "black" })
  );
};

// node_modules/stream-chat-react/dist/components/Thread/ThreadHeader.js
var ThreadHeader = (props) => {
  const { closeThread, overrideImage, overrideTitle } = props;
  const { t: t2 } = useTranslationContext("ThreadHeader");
  const { channel } = useChannelStateContext("");
  const { displayTitle } = useChannelPreviewInfo({
    channel,
    overrideImage,
    overrideTitle
  });
  return import_react256.default.createElement(
    "div",
    { className: "str-chat__thread-header" },
    import_react256.default.createElement(
      "div",
      { className: "str-chat__thread-header-details" },
      import_react256.default.createElement("div", { className: "str-chat__thread-header-title" }, t2("Thread")),
      import_react256.default.createElement("div", { className: "str-chat__thread-header-subtitle" }, displayTitle)
    ),
    import_react256.default.createElement(
      "button",
      { "aria-label": t2("aria/Close thread"), className: "str-chat__close-thread-button", "data-testid": "close-button", onClick: closeThread },
      import_react256.default.createElement(CloseIcon3, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Thread/ThreadHead.js
var import_react258 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Thread/ThreadStart.js
var import_react257 = __toESM(require_react());
var ThreadStart = () => {
  const { thread } = useChannelStateContext("ThreadStart");
  const { t: t2 } = useTranslationContext("ThreadStart");
  if (!(thread == null ? void 0 : thread.reply_count))
    return null;
  return import_react257.default.createElement("div", { className: "str-chat__thread-start" }, t2("replyCount", { count: thread.reply_count }));
};

// node_modules/stream-chat-react/dist/components/Thread/ThreadHead.js
var ThreadHead = (props) => {
  const { ThreadStart: ThreadStart2 = ThreadStart } = useComponentContext("ThreadHead");
  return import_react258.default.createElement(
    "div",
    { className: "str-chat__parent-message-li" },
    import_react258.default.createElement(Message, { initialMessage: true, threadList: true, ...props }),
    import_react258.default.createElement(ThreadStart2, null)
  );
};

// node_modules/stream-chat-react/dist/components/Thread/Thread.js
var Thread = (props) => {
  var _a;
  const { channel, channelConfig, thread } = useChannelStateContext("Thread");
  const threadInstance = useThreadContext();
  if (!thread && !threadInstance)
    return null;
  if ((channelConfig == null ? void 0 : channelConfig.replies) === false)
    return null;
  return (
    // FIXME: TS is having trouble here as at least one of the two would always be defined
    import_react259.default.createElement(ThreadInner, { ...props, key: `thread-${(_a = thread ?? threadInstance) == null ? void 0 : _a.id}-${channel == null ? void 0 : channel.cid}` })
  );
};
var selector7 = (nextValue) => ({
  isLoadingNext: nextValue.pagination.isLoadingNext,
  isLoadingPrev: nextValue.pagination.isLoadingPrev,
  parentMessage: nextValue.parentMessage,
  replies: nextValue.replies
});
var ThreadInner = (props) => {
  const { additionalMessageInputProps, additionalMessageListProps, additionalParentMessageProps, additionalVirtualizedMessageListProps, autoFocus = true, enableDateSeparator = false, Input: PropInput, Message: PropMessage, messageActions = Object.keys(MESSAGE_ACTIONS), virtualized } = props;
  const threadInstance = useThreadContext();
  const { thread, threadHasMore, threadLoadingMore, threadMessages = [], threadSuppressAutoscroll } = useChannelStateContext("Thread");
  const { closeThread, loadMoreThread } = useChannelActionContext("Thread");
  const { customClasses } = useChatContext("Thread");
  const { Message: ContextMessage, ThreadHead: ThreadHead2 = ThreadHead, ThreadHeader: ThreadHeader2 = ThreadHeader, ThreadInput: ContextInput, VirtualMessage } = useComponentContext("Thread");
  const { isLoadingNext, isLoadingPrev, parentMessage, replies } = useStateStore(threadInstance == null ? void 0 : threadInstance.state, selector7) ?? {};
  const ThreadInput = PropInput ?? (additionalMessageInputProps == null ? void 0 : additionalMessageInputProps.Input) ?? ContextInput ?? MessageInputFlat;
  const ThreadMessage = PropMessage || (additionalMessageListProps == null ? void 0 : additionalMessageListProps.Message);
  const FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;
  const MessageUIComponent = ThreadMessage || FallbackMessage;
  const ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;
  (0, import_react259.useEffect)(() => {
    if (threadInstance)
      return;
    if (((thread == null ? void 0 : thread.reply_count) ?? 0) > 0) {
      loadMoreThread();
    }
  }, [thread, loadMoreThread, threadInstance]);
  const threadProps = threadInstance ? {
    loadingMore: isLoadingPrev,
    loadingMoreNewer: isLoadingNext,
    loadMore: threadInstance.loadPrevPage,
    loadMoreNewer: threadInstance.loadNextPage,
    messages: replies
  } : {
    hasMore: threadHasMore,
    loadingMore: threadLoadingMore,
    loadMore: loadMoreThread,
    messages: threadMessages
  };
  const messageAsThread = thread ?? parentMessage;
  if (!messageAsThread)
    return null;
  const threadClass = (customClasses == null ? void 0 : customClasses.thread) || clsx_default("str-chat__thread-container str-chat__thread", {
    "str-chat__thread--virtualized": virtualized
  });
  const head = import_react259.default.createElement(ThreadHead2, { key: messageAsThread.id, message: messageAsThread, Message: MessageUIComponent, ...additionalParentMessageProps });
  return (
    // Thread component needs a context which we can use for message composer
    import_react259.default.createElement(
      LegacyThreadContext.Provider,
      { value: {
        legacyThread: thread ?? void 0
      } },
      import_react259.default.createElement(
        "div",
        { className: threadClass },
        import_react259.default.createElement(ThreadHeader2, { closeThread, thread: messageAsThread }),
        import_react259.default.createElement(ThreadMessageList, { disableDateSeparator: !enableDateSeparator, head, Message: MessageUIComponent, messageActions, suppressAutoscroll: threadSuppressAutoscroll, threadList: true, ...threadProps, ...virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps }),
        import_react259.default.createElement(MessageInput, { focus: autoFocus, Input: ThreadInput, isThreadInput: true, parent: thread ?? parentMessage, ...additionalMessageInputProps })
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageComposer.js
var queueCache = new FixedSizeQueueCache(64);
var useMessageComposer = () => {
  const { client } = useChatContext();
  const { channel } = useChannelStateContext();
  const { editing, message: editedMessage } = useMessageContext();
  const { legacyThread: parentMessage } = useLegacyThreadContext();
  const threadInstance = useThreadContext();
  const cachedEditedMessage = (0, import_react260.useMemo)(() => {
    if (!editedMessage)
      return void 0;
    return editedMessage;
  }, [editedMessage == null ? void 0 : editedMessage.id]);
  const cachedParentMessage = (0, import_react260.useMemo)(() => {
    if (!parentMessage)
      return void 0;
    return parentMessage;
  }, [parentMessage == null ? void 0 : parentMessage.id]);
  const messageComposer = (0, import_react260.useMemo)(() => {
    if (editing && cachedEditedMessage) {
      const tag = MessageComposer.constructTag(cachedEditedMessage);
      const cachedComposer = queueCache.get(tag);
      if (cachedComposer)
        return cachedComposer;
      return new MessageComposer({
        client,
        composition: cachedEditedMessage,
        compositionContext: cachedEditedMessage
      });
    } else if (threadInstance) {
      return threadInstance.messageComposer;
    } else if (cachedParentMessage) {
      const compositionContext = {
        ...cachedParentMessage,
        legacyThreadId: cachedParentMessage.id
      };
      const tag = MessageComposer.constructTag(compositionContext);
      const cachedComposer = queueCache.get(tag);
      if (cachedComposer)
        return cachedComposer;
      return new MessageComposer({
        client,
        compositionContext
      });
    } else {
      return channel.messageComposer;
    }
  }, [
    cachedEditedMessage,
    cachedParentMessage,
    channel,
    client,
    editing,
    threadInstance
  ]);
  if (["legacy_thread", "message"].includes(messageComposer.contextType) && !queueCache.peek(messageComposer.tag)) {
    queueCache.add(messageComposer.tag, messageComposer);
  }
  (0, import_react260.useEffect)(() => {
    const unsubscribe = messageComposer.registerSubscriptions();
    return () => {
      unsubscribe();
    };
  }, [messageComposer]);
  return messageComposer;
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useAttachmentManagerState.js
var stateSelector = (state) => ({
  attachments: state.attachments
});
var useAttachmentManagerState = () => {
  const { attachmentManager } = useMessageComposer();
  const { attachments } = useStateStore(attachmentManager.state, stateSelector);
  return {
    attachments,
    availableUploadSlots: attachmentManager.availableUploadSlots,
    blockedUploadsCount: attachmentManager.blockedUploadsCount,
    failedUploadsCount: attachmentManager.failedUploadsCount,
    isUploadEnabled: attachmentManager.isUploadEnabled,
    pendingUploadsCount: attachmentManager.pendingUploadsCount,
    successfulUploadsCount: attachmentManager.successfulUploadsCount,
    uploadsInProgressCount: attachmentManager.uploadsInProgressCount
  };
};

// node_modules/stream-chat-react/dist/components/Channel/constants.js
var CHANNEL_CONTAINER_ID = "str-chat__channel";

// node_modules/stream-chat-react/dist/components/Dialog/DialogMenu.js
var import_react261 = __toESM(require_react());
var DialogMenuButton = ({ children, className, ...props }) => import_react261.default.createElement(
  "button",
  { className: clsx_default("str-chat__dialog-menu__button", className), ...props },
  import_react261.default.createElement("div", { className: "str-chat__dialog-menu__button-icon" }),
  import_react261.default.createElement("div", { className: "str-chat__dialog-menu__button-text" }, children)
);

// node_modules/stream-chat-react/dist/components/Location/ShareLocationDialog.js
var import_react265 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Form/Dropdown.js
var import_react262 = __toESM(require_react());
var import_react263 = __toESM(require_react());
var import_react264 = __toESM(require_react());
var DropdownContext = import_react264.default.createContext({
  close: () => null
});
var DropdownContextProvider = ({ children, ...props }) => import_react264.default.createElement(DropdownContext.Provider, { value: props }, children);
var useDropdownContext = () => import_react264.default.useContext(DropdownContext);
var Dropdown = (props) => {
  const dropdownDialogId = `dropdown`;
  return import_react264.default.createElement(
    "div",
    { className: "str-chat__dropdown" },
    import_react264.default.createElement(
      DialogManagerProvider,
      { id: dropdownDialogId },
      import_react264.default.createElement(DropdownInner, { ...props, dialogId: dropdownDialogId })
    )
  );
};
var DropdownInner = ({ children, dialogId, openButtonProps, placement = "bottom" }) => {
  const { t: t2 } = useTranslationContext();
  const [openButton, setOpenButton] = (0, import_react264.useState)(null);
  const [dropdownWidth, setDropdownWidth] = (0, import_react264.useState)("");
  const dropdownRef = (0, import_react262.useRef)(null);
  const dialog = useDialog({ id: dialogId });
  const dropdownDialogIsOpen = useDialogIsOpen(dialogId);
  (0, import_react263.useEffect)(() => {
    if (!openButton || typeof ResizeObserver === "undefined")
      return;
    let timeout;
    const observer = new ResizeObserver(([button]) => {
      if (timeout)
        clearTimeout(timeout);
      timeout = setTimeout(() => {
        const width = button.target.getBoundingClientRect().width + "px";
        if (!dropdownRef.current) {
          setDropdownWidth(width);
          return;
        }
        dropdownRef.current.style.width = width;
      }, 100);
    });
    observer.observe(openButton);
    return () => {
      observer.disconnect();
    };
  }, [openButton]);
  return import_react264.default.createElement(
    DropdownContextProvider,
    { close: dialog.close },
    import_react264.default.createElement("button", { "aria-expanded": dropdownDialogIsOpen, "aria-haspopup": "true", "aria-label": t2("aria/Open Menu"), className: "str-chat__dropdown__open-button", "data-testid": "dropdown-open-button", ...openButtonProps, onClick: () => dialog == null ? void 0 : dialog.toggle(), ref: setOpenButton }),
    import_react264.default.createElement(
      DialogAnchor,
      { allowFlip: false, id: dialogId, placement, referenceElement: openButton, tabIndex: -1, trapFocus: true },
      import_react264.default.createElement("div", { className: "str-chat__dropdown__items", ref: dropdownRef, style: { width: dropdownWidth } }, children)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Location/ShareLocationDialog.js
var MIN_LIVE_LOCATION_SHARE_DURATION = 60 * 1e3;
var DEFAULT_SHARE_LOCATION_DURATIONS = [
  15 * 60 * 1e3,
  // 15 minutes
  60 * 60 * 1e3,
  // 1 hour
  8 * 60 * 60 * 1e3
  // 8 hours
];
var DefaultGeolocationMap = () => null;
var ShareLocationDialog = ({ close, GeolocationMap = DefaultGeolocationMap, shareDurations = DEFAULT_SHARE_LOCATION_DURATIONS }) => {
  const { client } = useChatContext();
  const { t: t2 } = useTranslationContext();
  const messageComposer = useMessageComposer();
  const [durations, setDurations] = (0, import_react265.useState)([]);
  const [selectedDuration, setSelectedDuration] = (0, import_react265.useState)(void 0);
  const [geolocationPosition, setGeolocationPosition] = (0, import_react265.useState)(null);
  const [loadingLocation, setLoadingLocation] = (0, import_react265.useState)(false);
  const [geolocationPositionError, setGeolocationPositionError] = (0, import_react265.useState)(void 0);
  const validShareDurations = (0, import_react265.useMemo)(() => shareDurations.filter((d2) => d2 >= MIN_LIVE_LOCATION_SHARE_DURATION), [shareDurations]);
  const openDropdownButtonProps = (0, import_react265.useMemo)(() => ({
    children: (() => import_react265.default.createElement("div", null, t2("duration/Share Location", {
      milliseconds: selectedDuration ?? durations[0]
    })))()
    // todo: make it a component
  }), [durations, selectedDuration, t2]);
  const getPosition = (0, import_react265.useCallback)(() => new Promise((resolve, reject) => {
    navigator.geolocation.getCurrentPosition((position3) => {
      resolve(position3);
    }, (positionError) => {
      console.warn(positionError);
      reject(positionError);
    }, { timeout: 1e3 });
  }), []);
  const setupPositionWatching = (0, import_react265.useCallback)(() => {
    setLoadingLocation(true);
    const watch = navigator.geolocation.watchPosition((position3) => {
      setGeolocationPosition(position3);
      setLoadingLocation(false);
      setGeolocationPositionError(void 0);
    }, (error) => {
      setGeolocationPosition(null);
      setLoadingLocation(false);
      setGeolocationPositionError(error);
    }, { timeout: 1e3 });
    return () => {
      navigator.geolocation.clearWatch(watch);
    };
  }, []);
  (0, import_react265.useEffect)(() => setupPositionWatching(), [setupPositionWatching]);
  return import_react265.default.createElement(
    "div",
    { className: "str-chat__dialog str-chat__share-location-dialog", "data-testid": "share-location-dialog" },
    import_react265.default.createElement(ModalHeader, { close, title: t2("Share Location") }),
    import_react265.default.createElement(
      "div",
      { className: "str-chat__dialog__body" },
      import_react265.default.createElement(GeolocationMap, { geolocationPositionError, latitude: geolocationPosition == null ? void 0 : geolocationPosition.coords.latitude, loadingLocation, longitude: geolocationPosition == null ? void 0 : geolocationPosition.coords.longitude, restartLocationWatching: setupPositionWatching }),
      validShareDurations.length > 0 && import_react265.default.createElement(
        "div",
        { className: "str-chat__live-location-activation" },
        import_react265.default.createElement(SimpleSwitchField, { checked: durations.length > 0, "data-testid": "share-location-dialog-live-location-switch", disabled: !geolocationPosition, labelText: t2("Share live location for"), onChange: (e) => {
          e.stopPropagation();
          if (durations.length > 0) {
            setDurations([]);
            setSelectedDuration(void 0);
          } else {
            setDurations(validShareDurations);
            setSelectedDuration(validShareDurations[0]);
          }
        } }),
        durations.length > 0 && import_react265.default.createElement(
          Dropdown,
          { openButtonProps: openDropdownButtonProps, placement: "bottom-start" },
          import_react265.default.createElement(DurationDropdownItems, { durations, selectDuration: setSelectedDuration })
        )
      )
    ),
    import_react265.default.createElement(
      "div",
      { className: "str-chat__dialog__controls" },
      import_react265.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--cancel", onClick: () => {
        messageComposer.locationComposer.initState();
        close();
      } }, t2("Cancel")),
      import_react265.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--submit", disabled: !geolocationPosition, onClick: async () => {
        let coords = geolocationPosition && {
          latitude: geolocationPosition.coords.latitude,
          longitude: geolocationPosition.coords.longitude
        };
        if (!coords) {
          coords = (await getPosition()).coords;
        }
        messageComposer.locationComposer.setData({
          ...coords,
          durationMs: selectedDuration
        });
        close();
      }, type: "submit" }, t2("Attach")),
      import_react265.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--submit", disabled: !geolocationPosition, onClick: async () => {
        let coords = geolocationPosition && {
          latitude: geolocationPosition.coords.latitude,
          longitude: geolocationPosition.coords.longitude
        };
        if (!coords) {
          try {
            coords = (await getPosition()).coords;
          } catch (e) {
            client.notifications.addError({
              message: t2("Failed to retrieve location"),
              options: {
                originalError: e instanceof Error ? e : void 0,
                type: "browser-api:location:get:failed"
              },
              origin: { emitter: "ShareLocationDialog" }
            });
            return;
          }
        }
        messageComposer.locationComposer.setData({
          ...coords,
          durationMs: selectedDuration
        });
        try {
          await messageComposer.sendLocation();
        } catch (err) {
          client.notifications.addError({
            message: t2("Failed to share location"),
            options: {
              originalError: err instanceof Error ? err : void 0,
              type: "api:location:share:failed"
            },
            origin: { emitter: "ShareLocationDialog" }
          });
          return;
        }
        close();
      }, type: "submit" }, t2("Share"))
    )
  );
};
var DurationDropdownItems = ({ durations, selectDuration }) => {
  const { t: t2 } = useTranslationContext();
  const { close } = useDropdownContext();
  return durations.map((duration2) => import_react265.default.createElement("button", { className: "str-chat__live-location-sharing-duration-option", key: `duration-${duration2}}`, onClick: () => {
    selectDuration(duration2);
    close();
  }, role: "option" }, t2("duration/Share Location", { milliseconds: duration2 })));
};

// node_modules/stream-chat-react/dist/context/AttachmentSelectorContext.js
var import_react266 = __toESM(require_react());
var AttachmentSelectorContext = (0, import_react266.createContext)({
  fileInput: null
});
var AttachmentSelectorContextProvider = ({ children, value }) => import_react266.default.createElement(AttachmentSelectorContext.Provider, { value }, children);
var useAttachmentSelectorContext = () => (0, import_react266.useContext)(AttachmentSelectorContext);

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useAttachmentsForPreview.js
var attachmentManagerStateSelector = (state) => ({
  attachments: state.attachments
});
var pollComposerStateSelector5 = (state) => ({
  poll: state.data
});
var locationComposerStateSelector = (state) => ({
  location: state.location
});
var useAttachmentsForPreview = () => {
  const { attachmentManager, locationComposer, pollComposer } = useMessageComposer();
  const { attachments } = useStateStore(attachmentManager.state, attachmentManagerStateSelector);
  const { poll } = useStateStore(pollComposer.state, pollComposerStateSelector5);
  const { location: location2 } = useStateStore(locationComposer.state, locationComposerStateSelector);
  return {
    attachments,
    location: location2,
    poll
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCanCreatePoll.js
var import_react267 = __toESM(require_react());
var useCanCreatePoll = () => {
  const { pollComposer } = useMessageComposer();
  const [canCreatePoll, setCanCreatePoll] = (0, import_react267.useState)(pollComposer.canCreatePoll);
  (0, import_react267.useEffect)(() => pollComposer.state.subscribe(() => {
    setCanCreatePoll(pollComposer.canCreatePoll);
  }), [pollComposer]);
  return canCreatePoll;
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCooldownTimer.js
var import_react268 = __toESM(require_react());
var useCooldownTimer = () => {
  var _a;
  const { client, latestMessageDatesByChannels } = useChatContext("useCooldownTimer");
  const { channel, messages = [] } = useChannelStateContext("useCooldownTimer");
  const [cooldownRemaining, setCooldownRemaining] = (0, import_react268.useState)();
  const { cooldown: cooldownInterval = 0, own_capabilities } = channel.data || {};
  const skipCooldown = own_capabilities == null ? void 0 : own_capabilities.includes("skip-slow-mode");
  const ownLatestMessageDate = (0, import_react268.useMemo)(() => {
    var _a2;
    return latestMessageDatesByChannels[channel.cid] ?? ((_a2 = [...messages].sort((a2, b2) => {
      var _a3, _b;
      return ((_a3 = b2.created_at) == null ? void 0 : _a3.getTime()) - ((_b = a2.created_at) == null ? void 0 : _b.getTime());
    }).find((v2) => {
      var _a3, _b;
      return ((_a3 = v2.user) == null ? void 0 : _a3.id) === ((_b = client.user) == null ? void 0 : _b.id);
    })) == null ? void 0 : _a2.created_at);
  }, [messages, (_a = client.user) == null ? void 0 : _a.id, latestMessageDatesByChannels, channel.cid]);
  (0, import_react268.useEffect)(() => {
    const timeSinceOwnLastMessage = ownLatestMessageDate ? (
      // prevent negative values
      Math.max(0, ((/* @__PURE__ */ new Date()).getTime() - ownLatestMessageDate.getTime()) / 1e3)
    ) : void 0;
    const remaining = !skipCooldown && typeof timeSinceOwnLastMessage !== "undefined" && cooldownInterval > timeSinceOwnLastMessage ? Math.round(cooldownInterval - timeSinceOwnLastMessage) : 0;
    setCooldownRemaining(remaining);
    if (!remaining)
      return;
    const timeout = setTimeout(() => {
      setCooldownRemaining(0);
    }, remaining * 1e3);
    return () => {
      clearTimeout(timeout);
    };
  }, [cooldownInterval, ownLatestMessageDate, skipCooldown]);
  return {
    cooldownInterval,
    cooldownRemaining,
    setCooldownRemaining
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useTextareaRef.js
var import_react269 = __toESM(require_react());
var useTextareaRef = (props) => {
  const { focus } = props;
  const textareaRef = (0, import_react269.useRef)(void 0);
  (0, import_react269.useEffect)(() => {
    if (focus && textareaRef.current) {
      textareaRef.current.focus();
    }
  }, [focus]);
  return {
    textareaRef
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useSubmitHandler.js
var import_react270 = __toESM(require_react());
var takeStateSnapshot = (messageComposer) => {
  const textComposerState = messageComposer.textComposer.state.getLatestValue();
  const attachmentManagerState = messageComposer.attachmentManager.state.getLatestValue();
  const linkPreviewsManagerState = messageComposer.linkPreviewsManager.state.getLatestValue();
  const pollComposerState = messageComposer.pollComposer.state.getLatestValue();
  const customDataManagerState = messageComposer.customDataManager.state.getLatestValue();
  const state = messageComposer.state.getLatestValue();
  return () => {
    messageComposer.state.next(state);
    messageComposer.textComposer.state.next(textComposerState);
    messageComposer.attachmentManager.state.next(attachmentManagerState);
    messageComposer.linkPreviewsManager.state.next(linkPreviewsManagerState);
    messageComposer.pollComposer.state.next(pollComposerState);
    messageComposer.customDataManager.state.next(customDataManagerState);
  };
};
var useSubmitHandler = (props) => {
  const { clearEditingState, overrideSubmitHandler } = props;
  const { addNotification, editMessage, sendMessage } = useChannelActionContext("useSubmitHandler");
  const { t: t2 } = useTranslationContext("useSubmitHandler");
  const messageComposer = useMessageComposer();
  const handleSubmit = (0, import_react270.useCallback)(async (event) => {
    event == null ? void 0 : event.preventDefault();
    const composition = await messageComposer.compose();
    if (!composition || !composition.message)
      return;
    const { localMessage, message, sendOptions } = composition;
    if (messageComposer.editedMessage && localMessage.type !== "error") {
      try {
        await editMessage(localMessage, sendOptions);
        clearEditingState == null ? void 0 : clearEditingState();
      } catch (err) {
        addNotification(t2("Edit message request failed"), "error");
      }
    } else {
      const restoreComposerStateSnapshot = takeStateSnapshot(messageComposer);
      try {
        const sentPollMessage = !!message.poll_id;
        if (sentPollMessage) {
          messageComposer.state.partialNext({
            id: MessageComposer.generateId(),
            pollId: null
          });
        } else {
          messageComposer.clear();
        }
        if (overrideSubmitHandler) {
          await overrideSubmitHandler({
            cid: messageComposer.channel.cid,
            localMessage,
            message,
            sendOptions
          });
        } else {
          await sendMessage({ localMessage, message, options: sendOptions });
        }
        if (messageComposer.config.text.publishTypingEvents)
          await messageComposer.channel.stopTyping();
      } catch (err) {
        restoreComposerStateSnapshot();
        addNotification(t2("Send message request failed"), "error");
      }
    }
  }, [
    addNotification,
    clearEditingState,
    editMessage,
    messageComposer,
    overrideSubmitHandler,
    sendMessage,
    t2
  ]);
  return { handleSubmit };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/usePasteHandler.js
var import_react271 = __toESM(require_react());
var usePasteHandler = () => {
  const { attachmentManager, textComposer } = useMessageComposer();
  const onPaste = (0, import_react271.useCallback)((clipboardEvent) => {
    (async (event) => {
      const { items } = event.clipboardData;
      event.preventDefault();
      let plainTextPromise = void 0;
      for (let i2 = 0; i2 < items.length; i2++) {
        const item = items[i2];
        if (item.kind === "string" && item.type === "text/plain") {
          plainTextPromise = new Promise((resolve) => {
            item.getAsString((string3) => {
              resolve(string3);
            });
          });
          break;
        }
      }
      const fileLikes = await dataTransferItemsToFiles(Array.from(items));
      if (plainTextPromise) {
        const pastedText = await plainTextPromise;
        textComposer.insertText({ text: pastedText });
      } else {
        attachmentManager.uploadFiles(fileLikes);
      }
    })(clipboardEvent);
  }, [attachmentManager, textComposer]);
  return { onPaste };
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/hooks/useMediaRecorder.js
var import_react272 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Subscription.js
var Subscription = class {
  constructor(unsubscribe) {
    this.closed = false;
    this._unsubscribe = unsubscribe;
  }
  unsubscribe() {
    var _a;
    this.closed = true;
    (_a = this._unsubscribe) == null ? void 0 : _a.call(this);
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Observer.js
function createObserver(observerOrNext) {
  return typeof observerOrNext === "function" ? { next: observerOrNext } : observerOrNext;
}

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Observable.js
var Observable = class {
  constructor(producer) {
    this._closed = false;
    if (producer)
      this._producer = producer;
  }
  get closed() {
    return this._closed;
  }
  subscribe(observerOrNext) {
    var _a;
    const observer = createObserver(observerOrNext);
    if (!this.closed) {
      (_a = this._producer) == null ? void 0 : _a.call(this, observer);
    }
    return new Subscription(() => {
      this._closed = true;
    });
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Subject.js
var Subject = class extends Observable {
  constructor() {
    super();
    this._observers = /* @__PURE__ */ new Map();
    this._observerCounter = 0;
  }
  get observers() {
    return Array.from(this._observers.values());
  }
  next(value) {
    if (this.closed)
      return;
    const observers = this.observers;
    for (let i2 = 0; i2 < observers.length; i2++) {
      observers[i2].next(value);
    }
  }
  error(err) {
    var _a, _b;
    if (this.closed)
      return;
    this.thrownError = err;
    const { observers } = this;
    for (let i2 = 0; i2 < observers.length; i2++) {
      (_b = (_a = observers[i2]).error) == null ? void 0 : _b.call(_a, err);
    }
    this._observers.clear();
  }
  complete() {
    var _a, _b;
    if (this.closed)
      return;
    this._closed = true;
    const { observers } = this;
    for (let i2 = 0; i2 < observers.length; i2++) {
      (_b = (_a = observers[i2]).complete) == null ? void 0 : _b.call(_a);
    }
    this._observers.clear();
  }
  subscribe(observerOrNext) {
    const observer = createObserver(observerOrNext);
    if (this.thrownError || this.closed) {
      const subscription = new Subscription();
      subscription.closed = true;
      return subscription;
    }
    const observerId = this._observerCounter++;
    this._observers.set(observerId, observer);
    return new Subscription(() => {
      this._observers.delete(observerId);
    });
  }
  unsubscribe() {
    this._closed = true;
    this._observers.clear();
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/BehaviorSubject.js
var BehaviorSubject = class extends Subject {
  constructor(_value) {
    super();
    this._value = _value;
  }
  get value() {
    const { _value, thrownError } = this;
    if (thrownError) {
      throw thrownError;
    }
    return _value;
  }
  subscribe(observerOrNext) {
    const observer = createObserver(observerOrNext);
    const subscription = super.subscribe(observerOrNext);
    if (!subscription.closed)
      observer.next(this._value);
    return subscription;
  }
  next(value) {
    super.next(this._value = value);
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/BrowserPermission.js
var RecordingPermission;
(function(RecordingPermission2) {
  RecordingPermission2["CAM"] = "camera";
  RecordingPermission2["MIC"] = "microphone";
})(RecordingPermission || (RecordingPermission = {}));
var MEDIA_TO_PERMISSION = {
  audio: RecordingPermission.MIC,
  video: RecordingPermission.CAM
};
var BrowserPermission = class {
  constructor({ mediaType }) {
    this.state = new BehaviorSubject(void 0);
    this.status = new BehaviorSubject(void 0);
    this.error = new Subject();
    this.changeSubscriptions = [];
    this.name = MEDIA_TO_PERMISSION[mediaType];
  }
  get isWatching() {
    return this.changeSubscriptions.some((subscription) => !subscription.closed);
  }
  async watch() {
    if (!this.status.value) {
      await this.check();
      if (!this.status.value)
        return;
    }
    const status = this.status.value;
    const handlePermissionChange = (e) => {
      const { state } = e.target;
      this.state.next(state);
    };
    status.addEventListener("change", handlePermissionChange);
    this.changeSubscriptions.push(new Subscription(() => {
      status.removeEventListener("change", handlePermissionChange);
    }));
  }
  unwatch() {
    this.changeSubscriptions.forEach((subscription) => subscription.unsubscribe());
  }
  async check() {
    if (!this.name) {
      this.error.next(new Error("Unknown media recording permission"));
      return;
    }
    let permissionState;
    try {
      const permissionStatus = await navigator.permissions.query({
        name: this.name
      });
      permissionState = permissionStatus.state;
      this.status.next(permissionStatus);
    } catch (e) {
      permissionState = "granted";
    }
    this.state.next(permissionState);
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/MediaRecorderController.js
var import_fix_webm_duration = __toESM(require_fix_webm_duration());

// node_modules/stream-chat-react/dist/utils/mergeDeep.js
var import_lodash17 = __toESM(require_lodash4());
var overrideUndefinedOnly = (object, source) => object ?? source;
var mergeDeepUndefined = (target, source) => (0, import_lodash17.default)(target, source, overrideUndefinedOnly);

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/AmplitudeRecorder.js
var MAX_FREQUENCY_AMPLITUDE = 255;
var logError2 = (e) => e && console.error("[AMPLITUDE RECORDER ERROR]", e);
var rootMeanSquare = (values2) => Math.sqrt(values2.reduce((acc, val) => acc + Math.pow(val, 2), 0) / values2.length);
var DEFAULT_AMPLITUDE_RECORDER_CONFIG = {
  analyserConfig: {
    fftSize: 32,
    maxDecibels: 0,
    minDecibels: -100
  },
  sampleCount: 100,
  samplingFrequencyMs: 60
};
var AmplitudeRecorderState;
(function(AmplitudeRecorderState2) {
  AmplitudeRecorderState2["CLOSED"] = "closed";
  AmplitudeRecorderState2["RECORDING"] = "recording";
  AmplitudeRecorderState2["STOPPED"] = "stopped";
})(AmplitudeRecorderState || (AmplitudeRecorderState = {}));
var AmplitudeRecorder = class {
  constructor({ config, stream: stream2 }) {
    this.amplitudes = new BehaviorSubject([]);
    this.state = new BehaviorSubject(void 0);
    this.error = new Subject();
    this.start = () => {
      if (this.state.value === AmplitudeRecorderState.CLOSED)
        return;
      if (!this.stream) {
        throw new Error("Missing MediaStream instance. Cannot to start amplitude recording");
      }
      if (this.state.value === AmplitudeRecorderState.RECORDING)
        this.stop();
      if (!this.analyserNode) {
        if (!this.stream)
          return;
        this.init();
      }
      this.state.next(AmplitudeRecorderState.RECORDING);
      this.amplitudeSamplingInterval = setInterval(() => {
        if (!(this.analyserNode && this.state.value === AmplitudeRecorderState.RECORDING))
          return;
        const frequencyBins = new Uint8Array(this.analyserNode.frequencyBinCount);
        try {
          this.analyserNode.getByteFrequencyData(frequencyBins);
        } catch (e) {
          logError2(e);
          this.error.next(e);
          return;
        }
        const normalizedSignalStrength = rootMeanSquare(frequencyBins) / MAX_FREQUENCY_AMPLITUDE;
        this.amplitudes.next([...this.amplitudes.value, normalizedSignalStrength]);
      }, this.config.samplingFrequencyMs);
    };
    this.config = mergeDeepUndefined({ ...config }, DEFAULT_AMPLITUDE_RECORDER_CONFIG);
    this.stream = stream2;
  }
  init() {
    this.audioContext = new AudioContext();
    this.analyserNode = this.audioContext.createAnalyser();
    const { analyserConfig } = this.config;
    this.analyserNode.fftSize = analyserConfig.fftSize;
    this.analyserNode.maxDecibels = analyserConfig.maxDecibels;
    this.analyserNode.minDecibels = analyserConfig.minDecibels;
    this.microphone = this.audioContext.createMediaStreamSource(this.stream);
    this.microphone.connect(this.analyserNode);
  }
  stop() {
    clearInterval(this.amplitudeSamplingInterval);
    this.amplitudeSamplingInterval = void 0;
    this.state.next(AmplitudeRecorderState.STOPPED);
  }
  close() {
    var _a, _b, _c, _d;
    if (this.state.value !== AmplitudeRecorderState.STOPPED)
      this.stop();
    this.state.next(AmplitudeRecorderState.CLOSED);
    this.amplitudes.next([]);
    (_a = this.microphone) == null ? void 0 : _a.disconnect();
    (_b = this.analyserNode) == null ? void 0 : _b.disconnect();
    if (((_c = this.audioContext) == null ? void 0 : _c.state) !== "closed")
      (_d = this.audioContext) == null ? void 0 : _d.close();
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/audioProcessing.js
var toAudioBuffer = async (file) => {
  const audioCtx = new AudioContext();
  const arrayBuffer = await readFileAsArrayBuffer(file);
  const decodedData = await audioCtx.decodeAudioData(arrayBuffer);
  if (audioCtx.state !== "closed")
    await audioCtx.close();
  return decodedData;
};
var renderAudio = async (audioBuffer, sampleRate) => {
  const offlineAudioCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.duration * sampleRate, sampleRate);
  const source = offlineAudioCtx.createBufferSource();
  source.buffer = audioBuffer;
  source.connect(offlineAudioCtx.destination);
  source.start();
  return await offlineAudioCtx.startRendering();
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/wav.js
var WAV_HEADER_LENGTH_BYTES = 44;
var BYTES_PER_SAMPLE = 2;
var RIFF_FILE_MAX_BYTES = 4294967295;
var HEADER = {
  AUDIO_FORMAT: { offset: 20, value: 1 },
  // PCM = 1
  BITS_PER_SAMPLE: { offset: 34, value: BYTES_PER_SAMPLE * 8 },
  // 16 bits encoding
  BLOCK_ALIGN: { offset: 32 },
  BYTE_RATE: { offset: 28 },
  CHANNEL_COUNT: { offset: 22 },
  // 1 - mono, 2 - stereo
  CHUNK_ID: { offset: 0, value: 1380533830 },
  // hex representation of string "RIFF" (Resource Interchange File Format) - identifies the file structure that defines a class of more specific file formats, e.g. WAVE
  CHUNK_SIZE: { offset: 4 },
  FILE_FORMAT: { offset: 8, value: 1463899717 },
  // hex representation of string "WAVE"
  SAMPLE_RATE: { offset: 24 },
  SUBCHUNK1_ID: { offset: 12, value: 1718449184 },
  // hex representation of string "fmt " - identifies the start of "format" section of the header
  SUBCHUNK1_SIZE: { offset: 16, value: 16 },
  // Subchunk1 Size without SUBCHUNK1_ID and SUBCHUNK1_SIZE fields
  SUBCHUNK2_ID: { offset: 36, value: 1684108385 },
  // hex representation of string "data" - identifies the start of actual audio data section
  SUBCHUNK2_SIZE: { offset: 40 }
  // actual audio data size
};
var fourCharsToInt = (chars2) => chars2.charCodeAt(0) << 24 | chars2.charCodeAt(1) << 16 | chars2.charCodeAt(2) << 8 | chars2.charCodeAt(3);
var WAV_HEADER_FLAGS = {
  data: fourCharsToInt("data"),
  fmt: fourCharsToInt("fmt "),
  RIFF: fourCharsToInt("RIFF"),
  WAVE: fourCharsToInt("WAVE")
};
var writeWavHeader = ({ arrayBuffer, channelCount, sampleRate }) => {
  const byteRate = sampleRate * channelCount * BYTES_PER_SAMPLE;
  const blockAlign = channelCount * BYTES_PER_SAMPLE;
  const dataView = new DataView(arrayBuffer);
  const dataChunkSize = Math.min(dataView.byteLength - WAV_HEADER_LENGTH_BYTES, RIFF_FILE_MAX_BYTES - WAV_HEADER_LENGTH_BYTES);
  dataView.setUint32(HEADER.CHUNK_ID.offset, HEADER.CHUNK_ID.value);
  dataView.setUint32(HEADER.CHUNK_SIZE.offset, arrayBuffer.byteLength - 8, true);
  dataView.setUint32(HEADER.FILE_FORMAT.offset, HEADER.FILE_FORMAT.value);
  dataView.setUint32(HEADER.SUBCHUNK1_ID.offset, HEADER.SUBCHUNK1_ID.value);
  dataView.setUint32(HEADER.SUBCHUNK1_SIZE.offset, HEADER.SUBCHUNK1_SIZE.value, true);
  dataView.setUint16(HEADER.AUDIO_FORMAT.offset, HEADER.AUDIO_FORMAT.value, true);
  dataView.setUint16(HEADER.CHANNEL_COUNT.offset, channelCount, true);
  dataView.setUint32(HEADER.SAMPLE_RATE.offset, sampleRate, true);
  dataView.setUint32(HEADER.BYTE_RATE.offset, byteRate, true);
  dataView.setUint16(HEADER.BLOCK_ALIGN.offset, blockAlign, true);
  dataView.setUint16(HEADER.BITS_PER_SAMPLE.offset, HEADER.BITS_PER_SAMPLE.value, true);
  dataView.setUint32(HEADER.SUBCHUNK2_ID.offset, HEADER.SUBCHUNK2_ID.value);
  dataView.setUint32(HEADER.SUBCHUNK2_SIZE.offset, dataChunkSize, true);
};
var splitDataByChannel = (audioBuffer) => Array.from({ length: audioBuffer.numberOfChannels }, (_2, i2) => audioBuffer.getChannelData(i2));
var writeWavAudioData = ({ arrayBuffer, dataByChannel }) => {
  const dataView = new DataView(arrayBuffer);
  const channelCount = dataByChannel.length;
  dataByChannel.forEach((channelData, channelIndex) => {
    let writeOffset = WAV_HEADER_LENGTH_BYTES + channelCount * channelIndex;
    channelData.forEach((float32Value) => {
      dataView.setInt16(writeOffset, float32Value < 0 ? Math.max(-1, float32Value) * 32768 : Math.min(1, float32Value) * 32767, true);
      writeOffset += channelCount * BYTES_PER_SAMPLE;
    });
  });
};
var encodeToWaw = async (file, sampleRate) => {
  const audioBuffer = await renderAudio(await toAudioBuffer(file), sampleRate);
  const numberOfSamples = audioBuffer.duration * sampleRate;
  const fileSizeBytes = numberOfSamples * audioBuffer.numberOfChannels * BYTES_PER_SAMPLE + WAV_HEADER_LENGTH_BYTES;
  const arrayBuffer = new ArrayBuffer(fileSizeBytes);
  writeWavHeader({ arrayBuffer, channelCount: audioBuffer.numberOfChannels, sampleRate });
  writeWavAudioData({ arrayBuffer, dataByChannel: splitDataByChannel(audioBuffer) });
  return new Blob([arrayBuffer], { type: "audio/wav" });
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/index.js
var transcode = ({ blob, encoder = encodeToWaw, sampleRate }) => encoder(createFileFromBlobs({
  blobsArray: [blob],
  fileName: `audio_recording_${(/* @__PURE__ */ new Date()).toISOString()}.${getExtensionFromMimeType(blob.type)}`,
  mimeType: blob.type
}), sampleRate);

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/MediaRecorderController.js
var RECORDED_MIME_TYPE_BY_BROWSER = {
  audio: {
    others: "audio/webm",
    safari: "audio/mp4;codecs=mp4a.40.2"
  }
};
var DEFAULT_AUDIO_TRANSCODER_CONFIG = {
  sampleRate: 16e3
};
var disposeOfMediaStream = (stream2) => {
  if (!(stream2 == null ? void 0 : stream2.active))
    return;
  stream2.getTracks().forEach((track2) => {
    track2.stop();
    stream2.removeTrack(track2);
  });
};
var logError3 = (e) => e && console.error("[MEDIA RECORDER ERROR]", e);
var MediaRecordingState;
(function(MediaRecordingState2) {
  MediaRecordingState2["PAUSED"] = "paused";
  MediaRecordingState2["RECORDING"] = "recording";
  MediaRecordingState2["STOPPED"] = "stopped";
})(MediaRecordingState || (MediaRecordingState = {}));
var RecordingAttachmentType;
(function(RecordingAttachmentType2) {
  RecordingAttachmentType2["VOICE_RECORDING"] = "voiceRecording";
})(RecordingAttachmentType || (RecordingAttachmentType = {}));
var MediaRecorderController = class {
  constructor({ config, generateRecordingTitle, t: t2 } = {}) {
    this.recordedChunkDurations = [];
    this.recordedData = [];
    this.recordingState = new BehaviorSubject(void 0);
    this.recording = new BehaviorSubject(void 0);
    this.error = new Subject();
    this.notification = new Subject();
    this.generateRecordingTitle = (mimeType) => {
      if (this.customGenerateRecordingTitle) {
        return this.customGenerateRecordingTitle(mimeType);
      }
      return `${this.mediaType}_recording_${(/* @__PURE__ */ new Date()).toISOString()}.${getExtensionFromMimeType(mimeType)}`;
    };
    this.makeVoiceRecording = async () => {
      var _a;
      if (this.recordingUri)
        URL.revokeObjectURL(this.recordingUri);
      if (!this.recordedData.length)
        return;
      const { mimeType } = this.mediaRecorderConfig;
      let blob = new Blob(this.recordedData, { type: mimeType });
      if (mimeType.match("audio/webm")) {
        blob = await (0, import_fix_webm_duration.default)(blob, this.durationMs, {
          logger: () => null
          // prevents polluting the browser console
        });
      }
      if (!mimeType.match("audio/mp4")) {
        blob = await transcode({
          blob,
          ...this.transcoderConfig
        });
      }
      if (!blob)
        return;
      this.recordingUri = URL.createObjectURL(blob);
      const file = createFileFromBlobs({
        blobsArray: [blob],
        fileName: this.generateRecordingTitle(blob.type),
        mimeType: blob.type
      });
      return {
        asset_url: this.recordingUri,
        duration: this.durationMs / 1e3,
        file_size: blob.size,
        localMetadata: {
          file,
          id: nanoid()
        },
        mime_type: blob.type,
        title: file.name,
        type: RecordingAttachmentType.VOICE_RECORDING,
        waveform_data: resampleWaveformData(((_a = this.amplitudeRecorder) == null ? void 0 : _a.amplitudes.value) ?? [], this.amplitudeRecorderConfig.sampleCount)
      };
    };
    this.handleErrorEvent = (e) => {
      const { error } = e;
      logError3(error);
      this.error.next(error);
      this.notification.next({
        text: this.t("An error has occurred during recording"),
        type: "error"
      });
    };
    this.handleDataavailableEvent = async (e) => {
      var _a;
      if (!e.data.size)
        return;
      if (this.mediaType !== "audio")
        return;
      try {
        this.recordedData.push(e.data);
        const recording = await this.makeVoiceRecording();
        if (!recording)
          return;
        (_a = this.signalRecordingReady) == null ? void 0 : _a.call(this, recording);
        this.recording.next(recording);
      } catch (e2) {
        logError3(e2);
        this.error.next(e2);
        this.notification.next({
          text: this.t("An error has occurred during the recording processing"),
          type: "error"
        });
      }
    };
    this.resetRecordingState = () => {
      this.recordedData = [];
      this.recording.next(void 0);
      this.recordingState.next(void 0);
      this.recordedChunkDurations = [];
      this.startTime = void 0;
    };
    this.cleanUp = () => {
      var _a;
      this.resetRecordingState();
      if (this.recordingUri)
        URL.revokeObjectURL(this.recordingUri);
      (_a = this.amplitudeRecorder) == null ? void 0 : _a.close();
      if (this.mediaRecorder) {
        disposeOfMediaStream(this.mediaRecorder.stream);
        this.mediaRecorder.removeEventListener("dataavailable", this.handleDataavailableEvent);
        this.mediaRecorder.removeEventListener("error", this.handleErrorEvent);
      }
    };
    this.start = async () => {
      if ([MediaRecordingState.RECORDING, MediaRecordingState.PAUSED].includes(this.recordingState.value)) {
        const error = new Error("Cannot start recording. Recording already in progress");
        logError3(error);
        this.error.next(error);
        return;
      }
      if (!navigator.mediaDevices) {
        const error = new Error("Media recording is not supported");
        logError3(error);
        this.error.next(error);
        this.notification.next({ text: this.t("Error starting recording"), type: "error" });
        return;
      }
      if (this.mediaType === "video") {
        const error = new Error(`Video recording is not supported. Provided MIME type: ${this.mediaRecorderConfig.mimeType}`);
        logError3(error);
        this.error.next(error);
        this.notification.next({ text: this.t("Error starting recording"), type: "error" });
        return;
      }
      if (!this.permission.state.value) {
        await this.permission.check();
      }
      if (this.permission.state.value === "denied") {
        logError3(new Error("Permission denied"));
        return;
      }
      try {
        const stream2 = await navigator.mediaDevices.getUserMedia({ audio: true });
        this.mediaRecorder = new MediaRecorder(stream2, this.mediaRecorderConfig);
        this.mediaRecorder.addEventListener("dataavailable", this.handleDataavailableEvent);
        this.mediaRecorder.addEventListener("error", this.handleErrorEvent);
        this.startTime = (/* @__PURE__ */ new Date()).getTime();
        this.mediaRecorder.start();
        if (this.mediaType === "audio" && stream2) {
          this.amplitudeRecorder = new AmplitudeRecorder({
            config: this.amplitudeRecorderConfig,
            stream: stream2
          });
          this.amplitudeRecorder.start();
        }
        this.recordingState.next(MediaRecordingState.RECORDING);
      } catch (error) {
        logError3(error);
        this.cancel();
        this.error.next(error);
        this.notification.next({ text: this.t("Error starting recording"), type: "error" });
      }
    };
    this.pause = () => {
      var _a, _b;
      if (this.recordingState.value !== MediaRecordingState.RECORDING)
        return;
      if (this.startTime) {
        this.recordedChunkDurations.push((/* @__PURE__ */ new Date()).getTime() - this.startTime);
        this.startTime = void 0;
      }
      (_a = this.mediaRecorder) == null ? void 0 : _a.pause();
      (_b = this.amplitudeRecorder) == null ? void 0 : _b.stop();
      this.recordingState.next(MediaRecordingState.PAUSED);
    };
    this.resume = () => {
      var _a, _b;
      if (this.recordingState.value !== MediaRecordingState.PAUSED)
        return;
      this.startTime = (/* @__PURE__ */ new Date()).getTime();
      (_a = this.mediaRecorder) == null ? void 0 : _a.resume();
      (_b = this.amplitudeRecorder) == null ? void 0 : _b.start();
      this.recordingState.next(MediaRecordingState.RECORDING);
    };
    this.stop = () => {
      var _a, _b, _c;
      const recording = this.recording.value;
      if (recording)
        return Promise.resolve(recording);
      if (![MediaRecordingState.PAUSED, MediaRecordingState.RECORDING].includes(((_a = this.mediaRecorder) == null ? void 0 : _a.state) || ""))
        return Promise.resolve(void 0);
      if (this.startTime) {
        this.recordedChunkDurations.push((/* @__PURE__ */ new Date()).getTime() - this.startTime);
        this.startTime = void 0;
      }
      const result = new Promise((res) => {
        this.signalRecordingReady = res;
      });
      (_b = this.mediaRecorder) == null ? void 0 : _b.stop();
      (_c = this.amplitudeRecorder) == null ? void 0 : _c.stop();
      this.recordingState.next(MediaRecordingState.STOPPED);
      return result;
    };
    this.cancel = () => {
      this.stop();
      this.cleanUp();
    };
    this.t = t2 || defaultTranslatorFunction;
    this.amplitudeRecorderConfig = mergeDeepUndefined({ ...config == null ? void 0 : config.amplitudeRecorderConfig }, DEFAULT_AMPLITUDE_RECORDER_CONFIG);
    this.mediaRecorderConfig = mergeDeepUndefined({ ...config == null ? void 0 : config.mediaRecorderConfig }, {
      mimeType: MediaRecorder.isTypeSupported("audio/webm") ? RECORDED_MIME_TYPE_BY_BROWSER.audio.others : RECORDED_MIME_TYPE_BY_BROWSER.audio.safari
    });
    this.transcoderConfig = mergeDeepUndefined({ ...config == null ? void 0 : config.transcoderConfig }, DEFAULT_AUDIO_TRANSCODER_CONFIG);
    const mediaType = getRecordedMediaTypeFromMimeType(this.mediaRecorderConfig.mimeType);
    if (!mediaType) {
      throw new Error(`Unsupported media type (supported audio or video only). Provided mimeType: ${this.mediaRecorderConfig.mimeType}`);
    }
    this.mediaType = mediaType;
    this.permission = new BrowserPermission({ mediaType });
    this.customGenerateRecordingTitle = generateRecordingTitle;
  }
  get durationMs() {
    return this.recordedChunkDurations.reduce((acc, val) => acc + val, 0);
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/hooks/useMediaRecorder.js
var useMediaRecorder = ({ asyncMessagesMultiSendEnabled, enabled, generateRecordingTitle, handleSubmit, recordingConfig }) => {
  const { t: t2 } = useTranslationContext("useMediaRecorder");
  const messageComposer = useMessageComposer();
  const [recording, setRecording] = (0, import_react272.useState)();
  const [recordingState, setRecordingState] = (0, import_react272.useState)();
  const [permissionState, setPermissionState] = (0, import_react272.useState)();
  const [isScheduledForSubmit, scheduleForSubmit] = (0, import_react272.useState)(false);
  const recorder = (0, import_react272.useMemo)(() => enabled ? new MediaRecorderController({
    config: recordingConfig ?? {},
    generateRecordingTitle,
    t: t2
  }) : void 0, [recordingConfig, enabled, generateRecordingTitle, t2]);
  const completeRecording = (0, import_react272.useCallback)(async () => {
    if (!recorder)
      return;
    const recording2 = await recorder.stop();
    if (!recording2)
      return;
    await messageComposer.attachmentManager.uploadAttachment(recording2);
    if (!asyncMessagesMultiSendEnabled) {
      scheduleForSubmit(true);
    }
    recorder.cleanUp();
  }, [asyncMessagesMultiSendEnabled, messageComposer, recorder]);
  (0, import_react272.useEffect)(() => {
    if (!isScheduledForSubmit)
      return;
    handleSubmit();
    scheduleForSubmit(false);
  }, [handleSubmit, isScheduledForSubmit]);
  (0, import_react272.useEffect)(() => {
    if (!recorder)
      return;
    recorder.permission.watch();
    const recordingSubscription = recorder.recording.subscribe(setRecording);
    const recordingStateSubscription = recorder.recordingState.subscribe(setRecordingState);
    const permissionStateSubscription = recorder.permission.state.subscribe(setPermissionState);
    return () => {
      recorder.cancel();
      recorder.permission.unwatch();
      recordingSubscription.unsubscribe();
      recordingStateSubscription.unsubscribe();
      permissionStateSubscription.unsubscribe();
    };
  }, [recorder]);
  return {
    completeRecording,
    permissionState,
    recorder,
    recording,
    recordingState
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageInputControls.js
var useMessageInputControls = (props) => {
  const { asyncMessagesMultiSendEnabled, audioRecordingConfig, audioRecordingEnabled } = props;
  const { textareaRef } = useTextareaRef(props);
  const { handleSubmit } = useSubmitHandler(props);
  const recordingController = useMediaRecorder({
    asyncMessagesMultiSendEnabled,
    enabled: !!audioRecordingEnabled,
    handleSubmit,
    recordingConfig: audioRecordingConfig
  });
  const { onPaste } = usePasteHandler();
  return {
    handleSubmit,
    onPaste,
    recordingController,
    textareaRef
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageComposerHasSendableData.js
var editingAuditStateStateSelector = (state) => state;
var useMessageComposerHasSendableData = () => {
  const messageComposer = useMessageComposer();
  useStateStore(messageComposer.editingAuditState, editingAuditStateStateSelector);
  return messageComposer.hasSendableData;
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentSelector.js
var SimpleAttachmentSelector = () => {
  const { AttachmentSelectorInitiationButtonContents, FileUploadIcon = UploadIcon } = useComponentContext();
  const inputRef = (0, import_react273.useRef)(null);
  const [labelElement, setLabelElement] = (0, import_react273.useState)(null);
  const id3 = useStableId();
  (0, import_react273.useEffect)(() => {
    if (!labelElement)
      return;
    const handleKeyUp = (event) => {
      if (![" ", "Enter"].includes(event.key) || !inputRef.current)
        return;
      event.preventDefault();
      inputRef.current.click();
    };
    labelElement.addEventListener("keyup", handleKeyUp);
    return () => {
      labelElement.removeEventListener("keyup", handleKeyUp);
    };
  }, [labelElement]);
  return import_react273.default.createElement(
    "div",
    { className: "str-chat__file-input-container", "data-testid": "file-upload-button" },
    import_react273.default.createElement(UploadFileInput, { id: id3, ref: inputRef }),
    import_react273.default.createElement("label", { className: "str-chat__file-input-label", htmlFor: id3, ref: setLabelElement, tabIndex: 0 }, AttachmentSelectorInitiationButtonContents ? import_react273.default.createElement(AttachmentSelectorInitiationButtonContents, null) : import_react273.default.createElement(FileUploadIcon, null))
  );
};
var AttachmentSelectorMenuInitButtonIcon = () => {
  const { AttachmentSelectorInitiationButtonContents, FileUploadIcon } = useComponentContext("SimpleAttachmentSelector");
  if (AttachmentSelectorInitiationButtonContents) {
    return import_react273.default.createElement(AttachmentSelectorInitiationButtonContents, null);
  }
  if (FileUploadIcon) {
    return import_react273.default.createElement(FileUploadIcon, null);
  }
  return import_react273.default.createElement("div", { className: "str-chat__attachment-selector__menu-button__icon" });
};
var DefaultAttachmentSelectorComponents = {
  File({ closeMenu }) {
    const { t: t2 } = useTranslationContext();
    const { fileInput } = useAttachmentSelectorContext();
    const { isUploadEnabled } = useAttachmentManagerState();
    return import_react273.default.createElement(DialogMenuButton, { className: "str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__upload-file-button", disabled: !isUploadEnabled, onClick: () => {
      if (fileInput)
        fileInput.click();
      closeMenu();
    } }, t2("File"));
  },
  Location({ closeMenu, openModalForAction }) {
    const { t: t2 } = useTranslationContext();
    return import_react273.default.createElement(DialogMenuButton, { className: "str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__add-location-button", onClick: () => {
      openModalForAction("addLocation");
      closeMenu();
    } }, t2("Location"));
  },
  Poll({ closeMenu, openModalForAction }) {
    const { t: t2 } = useTranslationContext();
    return import_react273.default.createElement(DialogMenuButton, { className: "str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__create-poll-button", onClick: () => {
      openModalForAction("createPoll");
      closeMenu();
    } }, t2("Poll"));
  }
};
var defaultAttachmentSelectorActionSet = [
  { ActionButton: DefaultAttachmentSelectorComponents.File, type: "uploadFile" },
  {
    ActionButton: DefaultAttachmentSelectorComponents.Poll,
    type: "createPoll"
  },
  {
    ActionButton: DefaultAttachmentSelectorComponents.Location,
    type: "addLocation"
  }
];
var useAttachmentSelectorActionsFiltered = (original) => {
  const { PollCreationDialog: PollCreationDialog2 = PollCreationDialog, ShareLocationDialog: ShareLocationDialog2 = ShareLocationDialog } = useComponentContext();
  const { channelCapabilities } = useChannelStateContext();
  const messageComposer = useMessageComposer();
  const channelConfig = messageComposer.channel.getConfig();
  return original.filter((action) => {
    if (action.type === "uploadFile")
      return channelCapabilities["upload-file"] && (channelConfig == null ? void 0 : channelConfig.uploads);
    if (action.type === "createPoll")
      return channelCapabilities["send-poll"] && !messageComposer.threadId && (channelConfig == null ? void 0 : channelConfig.polls);
    if (action.type === "addLocation") {
      return (channelConfig == null ? void 0 : channelConfig.shared_locations) && !messageComposer.threadId;
    }
    return true;
  }).map((action) => {
    if (action.type === "createPoll" && !action.ModalContent) {
      return { ...action, ModalContent: PollCreationDialog2 };
    }
    if (action.type === "addLocation" && !action.ModalContent) {
      return { ...action, ModalContent: ShareLocationDialog2 };
    }
    return action;
  });
};
var AttachmentSelector = ({ attachmentSelectorActionSet = defaultAttachmentSelectorActionSet, getModalPortalDestination }) => {
  const { t: t2 } = useTranslationContext();
  const { Modal: Modal2 = Modal } = useComponentContext();
  const { channelCapabilities } = useChannelStateContext();
  const messageComposer = useMessageComposer();
  const actions = useAttachmentSelectorActionsFiltered(attachmentSelectorActionSet);
  const menuDialogId = `attachment-actions-menu${messageComposer.threadId ? "-thread" : ""}`;
  const menuDialog = useDialog({ id: menuDialogId });
  const menuDialogIsOpen = useDialogIsOpen(menuDialogId);
  const [modalContentAction, setModalContentActionAction] = (0, import_react273.useState)();
  const openModal = (0, import_react273.useCallback)((actionType) => {
    const action = actions.find((a2) => a2.type === actionType);
    if (!(action == null ? void 0 : action.ModalContent))
      return;
    setModalContentActionAction(action);
  }, [actions]);
  const closeModal = (0, import_react273.useCallback)(() => setModalContentActionAction(void 0), []);
  const [fileInput, setFileInput] = (0, import_react273.useState)(null);
  const menuButtonRef = (0, import_react273.useRef)(null);
  const getDefaultPortalDestination = (0, import_react273.useCallback)(() => document.getElementById(CHANNEL_CONTAINER_ID), []);
  if (actions.length === 0)
    return null;
  if (actions.length === 1 && actions[0].type === "uploadFile")
    return import_react273.default.createElement(SimpleAttachmentSelector, null);
  const ModalContent = modalContentAction == null ? void 0 : modalContentAction.ModalContent;
  const modalIsOpen = !!ModalContent;
  return import_react273.default.createElement(
    AttachmentSelectorContextProvider,
    { value: { fileInput } },
    import_react273.default.createElement(
      "div",
      { className: "str-chat__attachment-selector" },
      channelCapabilities["upload-file"] && import_react273.default.createElement(UploadFileInput, { ref: setFileInput }),
      import_react273.default.createElement(
        "button",
        { "aria-expanded": menuDialogIsOpen, "aria-haspopup": "true", "aria-label": t2("aria/Open Attachment Selector"), className: "str-chat__attachment-selector__menu-button", "data-testid": "invoke-attachment-selector-button", onClick: () => menuDialog == null ? void 0 : menuDialog.toggle(), ref: menuButtonRef },
        import_react273.default.createElement(AttachmentSelectorMenuInitButtonIcon, null)
      ),
      import_react273.default.createElement(
        DialogAnchor,
        { id: menuDialogId, placement: "top-start", referenceElement: menuButtonRef.current, tabIndex: -1, trapFocus: true },
        import_react273.default.createElement("div", { className: "str-chat__attachment-selector-actions-menu str-chat__dialog-menu", "data-testid": "attachment-selector-actions-menu" }, actions.map(({ ActionButton, type }) => import_react273.default.createElement(ActionButton, { closeMenu: menuDialog.close, key: `attachment-selector-item-${type}`, openModalForAction: openModal })))
      ),
      import_react273.default.createElement(
        Portal,
        { getPortalDestination: getModalPortalDestination ?? getDefaultPortalDestination, isOpen: modalIsOpen },
        import_react273.default.createElement(Modal2, { className: clsx_default({
          "str-chat__create-poll-modal": (modalContentAction == null ? void 0 : modalContentAction.type) === "createPoll",
          "str-chat__share-location-modal": (modalContentAction == null ? void 0 : modalContentAction.type) === "addLocation"
        }), onClose: closeModal, open: modalIsOpen }, ModalContent && import_react273.default.createElement(ModalContent, { close: closeModal }))
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/AttachmentPreviewList.js
var import_react286 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/UnsupportedAttachmentPreview.js
var import_react274 = __toESM(require_react());
var UnsupportedAttachmentPreview = ({ attachment, handleRetry, removeAttachments }) => {
  var _a, _b, _c, _d;
  const { t: t2 } = useTranslationContext("UnsupportedAttachmentPreview");
  const title = attachment.title ?? t2("Unsupported attachment");
  return import_react274.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-unsupported", "data-testid": "attachment-preview-unknown" },
    import_react274.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-icon" },
      import_react274.default.createElement(FileIcon, { filename: title, mimeType: attachment.mime_type })
    ),
    import_react274.default.createElement(
      "button",
      { "aria-label": t2("aria/Remove attachment"), className: "str-chat__attachment-preview-delete", "data-testid": "file-preview-item-delete-button", disabled: ((_a = attachment.localMetadata) == null ? void 0 : _a.uploadState) === "uploading", onClick: () => {
        var _a2, _b2;
        return ((_a2 = attachment.localMetadata) == null ? void 0 : _a2.id) && removeAttachments([(_b2 = attachment.localMetadata) == null ? void 0 : _b2.id]);
      } },
      import_react274.default.createElement(CloseIcon, null)
    ),
    isLocalUploadAttachment(attachment) && ["blocked", "failed"].includes((_b = attachment.localMetadata) == null ? void 0 : _b.uploadState) && !!handleRetry && import_react274.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file", "data-testid": "file-preview-item-retry-button", onClick: () => handleRetry(attachment) },
      import_react274.default.createElement(RetryIcon, null)
    ),
    import_react274.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-metadata" },
      import_react274.default.createElement("div", { className: "str-chat__attachment-preview-title", title }, title),
      ((_c = attachment.localMetadata) == null ? void 0 : _c.uploadState) === "finished" && !!attachment.asset_url && import_react274.default.createElement(
        "a",
        { className: "str-chat__attachment-preview-file-download", download: true, href: attachment.asset_url, rel: "noreferrer", target: "_blank" },
        import_react274.default.createElement(DownloadIcon2, null)
      ),
      ((_d = attachment.localMetadata) == null ? void 0 : _d.uploadState) === "uploading" && import_react274.default.createElement(LoadingIndicatorIcon, { size: 17 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/VoiceRecordingPreview.js
var import_react282 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/RecordingPermissionDeniedNotification.js
var import_react275 = __toESM(require_react());
var RecordingPermissionDeniedNotification = ({ onClose, permissionName }) => {
  const { t: t2 } = useTranslationContext();
  const permissionTranslations = {
    body: {
      camera: t2("To start recording, allow the camera access in your browser"),
      microphone: t2("To start recording, allow the microphone access in your browser")
    },
    heading: {
      camera: t2("Allow access to camera"),
      microphone: t2("Allow access to microphone")
    }
  };
  return import_react275.default.createElement(
    "div",
    { className: "str-chat__recording-permission-denied-notification" },
    import_react275.default.createElement("div", { className: "str-chat__recording-permission-denied-notification__heading" }, permissionTranslations.heading[permissionName]),
    import_react275.default.createElement("p", { className: "str-chat__recording-permission-denied-notification__message" }, permissionTranslations.body[permissionName]),
    import_react275.default.createElement(
      "div",
      { className: "str-chat__recording-permission-denied-notification__dismiss-button-container" },
      import_react275.default.createElement("button", { className: "str-chat__recording-permission-denied-notification__dismiss-button", onClick: onClose }, t2("Ok"))
    )
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecorder.js
var import_react280 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingPreview.js
var import_react277 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/RecordingTimer.js
var import_react276 = __toESM(require_react());
var RecordingTimer = ({ durationSeconds }) => import_react276.default.createElement("div", { className: clsx_default("str-chat__recording-timer", {
  "str-chat__recording-timer--hours": durationSeconds >= 3600
}) }, displayDuration(durationSeconds));

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingPreview.js
var AudioRecordingPreview = ({ durationSeconds, mimeType, waveformData, ...props }) => {
  const { audioRef, isPlaying, progress, secondsElapsed, seek, togglePlay } = useAudioController({
    durationSeconds,
    mimeType
  });
  const displayedDuration = secondsElapsed || durationSeconds;
  return import_react277.default.createElement(
    import_react277.default.Fragment,
    null,
    import_react277.default.createElement(
      "audio",
      { ref: audioRef },
      import_react277.default.createElement("source", { src: props.src, type: mimeType })
    ),
    import_react277.default.createElement("button", { className: "str-chat__audio_recorder__toggle-playback-button", "data-testid": "audio-recording-preview-toggle-play-btn", onClick: togglePlay }, isPlaying ? import_react277.default.createElement(PauseIcon2, null) : import_react277.default.createElement(PlayIcon, null)),
    import_react277.default.createElement(RecordingTimer, { durationSeconds: displayedDuration }),
    import_react277.default.createElement(
      "div",
      { className: "str-chat__wave-progress-bar__track-container" },
      import_react277.default.createElement(WaveProgressBar, { progress, seek, waveformData: waveformData || [] })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingInProgress.js
var import_react279 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/hooks/useTimeElapsed.js
var import_react278 = __toESM(require_react());
var useTimeElapsed = ({ startOnMount } = {}) => {
  const [secondsElapsed, setSecondsElapsed] = (0, import_react278.useState)(0);
  const updateInterval = (0, import_react278.useRef)(void 0);
  const startCounter = (0, import_react278.useCallback)(() => {
    if (updateInterval.current)
      return;
    updateInterval.current = setInterval(() => {
      setSecondsElapsed((prev) => prev + 1);
    }, 1e3);
  }, []);
  const stopCounter = (0, import_react278.useCallback)(() => {
    clearInterval(updateInterval.current);
    updateInterval.current = void 0;
  }, []);
  (0, import_react278.useEffect)(() => {
    if (!startOnMount)
      return;
    startCounter();
    return () => {
      stopCounter();
    };
  }, [startCounter, startOnMount, stopCounter]);
  return {
    secondsElapsed,
    startCounter,
    stopCounter
  };
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingInProgress.js
var AudioRecordingWaveform = ({ maxDataPointsDrawn = 100 }) => {
  const { recordingController: { recorder } } = useMessageInputContext();
  const [amplitudes, setAmplitudes] = (0, import_react279.useState)([]);
  (0, import_react279.useEffect)(() => {
    if (!(recorder == null ? void 0 : recorder.amplitudeRecorder))
      return;
    const amplitudesSubscription = recorder.amplitudeRecorder.amplitudes.subscribe(setAmplitudes);
    return () => {
      amplitudesSubscription.unsubscribe();
    };
  }, [recorder]);
  if (!recorder)
    return null;
  return import_react279.default.createElement(
    "div",
    { className: "str-chat__waveform-box-container" },
    import_react279.default.createElement("div", { className: "str-chat__audio_recorder__waveform-box" }, amplitudes.slice(-maxDataPointsDrawn).map((amplitude, i2) => import_react279.default.createElement("div", { className: "str-chat__wave-progress-bar__amplitude-bar", key: `amplitude-${i2}-voice-recording`, style: {
      "--str-chat__wave-progress-bar__amplitude-bar-height": amplitude ? amplitude * 100 + "%" : "0%"
    } })))
  );
};
var AudioRecordingInProgress = () => {
  const { secondsElapsed, startCounter, stopCounter } = useTimeElapsed();
  const { recordingController: { recorder } } = useMessageInputContext();
  (0, import_react279.useEffect)(() => {
    if (!(recorder == null ? void 0 : recorder.mediaRecorder))
      return;
    const { mediaRecorder } = recorder;
    if (mediaRecorder.state === "recording") {
      startCounter();
    }
    mediaRecorder.addEventListener("start", startCounter);
    mediaRecorder.addEventListener("resume", startCounter);
    mediaRecorder.addEventListener("stop", stopCounter);
    mediaRecorder.addEventListener("pause", stopCounter);
    return () => {
      mediaRecorder.removeEventListener("start", startCounter);
      mediaRecorder.removeEventListener("resume", startCounter);
      mediaRecorder.removeEventListener("stop", stopCounter);
      mediaRecorder.removeEventListener("pause", stopCounter);
    };
  }, [recorder, startCounter, stopCounter]);
  return import_react279.default.createElement(
    import_react279.default.Fragment,
    null,
    import_react279.default.createElement(RecordingTimer, { durationSeconds: secondsElapsed }),
    import_react279.default.createElement(AudioRecordingWaveform, null)
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecorder.js
var AudioRecorder = () => {
  var _a;
  const messageInputContext = useMessageInputContext();
  const { recordingController: { completeRecording, recorder, recording, recordingState } } = messageInputContext;
  const isUploadingFile = ((_a = recording == null ? void 0 : recording.localMetadata) == null ? void 0 : _a.uploadState) === "uploading";
  const state = (0, import_react280.useMemo)(() => ({
    paused: recordingState === MediaRecordingState.PAUSED,
    recording: recordingState === MediaRecordingState.RECORDING,
    stopped: recordingState === MediaRecordingState.STOPPED
  }), [recordingState]);
  if (!recorder)
    return null;
  return import_react280.default.createElement(
    "div",
    { className: "str-chat__audio_recorder-container" },
    import_react280.default.createElement(
      "div",
      { className: "str-chat__audio_recorder", "data-testid": "audio-recorder" },
      import_react280.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__cancel-button", "data-testid": "cancel-recording-audio-button", disabled: isUploadingFile, onClick: recorder.cancel },
        import_react280.default.createElement(BinIcon, null)
      ),
      state.stopped && (recording == null ? void 0 : recording.asset_url) ? import_react280.default.createElement(AudioRecordingPreview, { durationSeconds: recording.duration ?? 0, mimeType: recording.mime_type, src: recording.asset_url, waveformData: recording.waveform_data }) : state.paused || state.recording ? import_react280.default.createElement(AudioRecordingInProgress, null) : null,
      state.paused && import_react280.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__resume-recording-button", onClick: recorder.resume },
        import_react280.default.createElement(MicIcon, null)
      ),
      state.recording && import_react280.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__pause-recording-button", "data-testid": "pause-recording-audio-button", onClick: recorder.pause },
        import_react280.default.createElement(PauseIcon2, null)
      ),
      state.stopped ? import_react280.default.createElement("button", { className: "str-chat__audio_recorder__complete-button", "data-testid": "audio-recorder-complete-button", disabled: isUploadingFile, onClick: completeRecording }, isUploadingFile ? import_react280.default.createElement(LoadingIndicatorIcon, null) : import_react280.default.createElement(SendIcon, null)) : import_react280.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__stop-button", "data-testid": "audio-recorder-stop-button", onClick: recorder.stop },
        import_react280.default.createElement(CheckSignIcon, null)
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingButtons.js
var import_react281 = __toESM(require_react());
var StartRecordingAudioButton = (props) => import_react281.default.createElement(
  "button",
  { "aria-label": "Start recording audio", className: "str-chat__start-recording-audio-button", "data-testid": "start-recording-audio-button", ...props },
  import_react281.default.createElement(MicIcon, null)
);

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/VoiceRecordingPreview.js
var VoiceRecordingPreview = ({ attachment, handleRetry, removeAttachments }) => {
  var _a, _b, _c;
  const { t: t2 } = useTranslationContext();
  const { audioRef, isPlaying, secondsElapsed, togglePlay } = useAudioController({
    mimeType: attachment.mime_type
  });
  return import_react282.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-voice-recording", "data-testid": "attachment-preview-voice-recording" },
    import_react282.default.createElement(
      "audio",
      { ref: audioRef },
      import_react282.default.createElement("source", { "data-testid": "audio-source", src: attachment.asset_url, type: attachment.mime_type })
    ),
    import_react282.default.createElement(PlayButton, { isPlaying, onClick: togglePlay }),
    import_react282.default.createElement(
      "button",
      { "aria-label": t2("aria/Remove attachment"), className: "str-chat__attachment-preview-delete", "data-testid": "file-preview-item-delete-button", disabled: ((_a = attachment.localMetadata) == null ? void 0 : _a.uploadState) === "uploading", onClick: () => {
        var _a2;
        return ((_a2 = attachment.localMetadata) == null ? void 0 : _a2.id) && removeAttachments([attachment.localMetadata.id]);
      } },
      import_react282.default.createElement(CloseIcon, null)
    ),
    ["blocked", "failed"].includes((_b = attachment.localMetadata) == null ? void 0 : _b.uploadState) && !!handleRetry && import_react282.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file", "data-testid": "file-preview-item-retry-button", onClick: () => handleRetry(attachment) },
      import_react282.default.createElement(RetryIcon, null)
    ),
    import_react282.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-metadata" },
      import_react282.default.createElement("div", { className: "str-chat__attachment-preview-file-name", title: attachment.title }, attachment.title),
      typeof attachment.duration !== "undefined" && import_react282.default.createElement(RecordingTimer, { durationSeconds: secondsElapsed || attachment.duration }),
      ((_c = attachment.localMetadata) == null ? void 0 : _c.uploadState) === "uploading" && import_react282.default.createElement(LoadingIndicatorIcon, { size: 17 })
    ),
    import_react282.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-icon" },
      import_react282.default.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/FileAttachmentPreview.js
var import_react283 = __toESM(require_react());
var FileAttachmentPreview = ({ attachment, handleRetry, removeAttachments }) => {
  var _a;
  const { t: t2 } = useTranslationContext("FilePreview");
  const uploadState = (_a = attachment.localMetadata) == null ? void 0 : _a.uploadState;
  return import_react283.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-file", "data-testid": "attachment-preview-file" },
    import_react283.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-icon" },
      import_react283.default.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type })
    ),
    import_react283.default.createElement(
      "button",
      { "aria-label": t2("aria/Remove attachment"), className: "str-chat__attachment-preview-delete", "data-testid": "file-preview-item-delete-button", disabled: uploadState === "uploading", onClick: () => {
        var _a2, _b;
        return ((_a2 = attachment.localMetadata) == null ? void 0 : _a2.id) && removeAttachments([(_b = attachment.localMetadata) == null ? void 0 : _b.id]);
      } },
      import_react283.default.createElement(CloseIcon, null)
    ),
    ["blocked", "failed"].includes(uploadState) && !!handleRetry && import_react283.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file", "data-testid": "file-preview-item-retry-button", onClick: () => {
        handleRetry(attachment);
      } },
      import_react283.default.createElement(RetryIcon, null)
    ),
    import_react283.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-end" },
      import_react283.default.createElement("div", { className: "str-chat__attachment-preview-file-name", title: attachment.title }, attachment.title),
      (typeof uploadState === "undefined" || uploadState === "finished") && !!attachment.asset_url && import_react283.default.createElement(
        "a",
        { "aria-label": t2("aria/Download attachment"), className: "str-chat__attachment-preview-file-download", download: true, href: attachment.asset_url, rel: "noreferrer", target: "_blank", title: t2("Download attachment {{ name }}", { name: attachment.title }) },
        import_react283.default.createElement(DownloadIcon2, null)
      ),
      uploadState === "uploading" && import_react283.default.createElement(LoadingIndicatorIcon, { size: 17 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/ImageAttachmentPreview.js
var import_react284 = __toESM(require_react());
var ImageAttachmentPreview = ({ attachment, handleRetry, removeAttachments }) => {
  const { t: t2 } = useTranslationContext("ImagePreviewItem");
  const { BaseImage: BaseImage3 = BaseImage } = useComponentContext("ImagePreview");
  const [previewError, setPreviewError] = (0, import_react284.useState)(false);
  const { id: id3, uploadState } = attachment.localMetadata ?? {};
  const handleLoadError = (0, import_react284.useCallback)(() => setPreviewError(true), []);
  const assetUrl = attachment.image_url || attachment.localMetadata.previewUri;
  return import_react284.default.createElement(
    "div",
    { className: clsx_default("str-chat__attachment-preview-image", {
      "str-chat__attachment-preview-image--error": previewError
    }), "data-testid": "attachment-preview-image" },
    import_react284.default.createElement(
      "button",
      { "aria-label": t2("aria/Remove attachment"), className: "str-chat__attachment-preview-delete", "data-testid": "image-preview-item-delete-button", disabled: uploadState === "uploading", onClick: () => id3 && removeAttachments([id3]) },
      import_react284.default.createElement(CloseIcon, null)
    ),
    ["blocked", "failed"].includes(uploadState) && import_react284.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-image", "data-testid": "image-preview-item-retry-button", onClick: () => handleRetry(attachment) },
      import_react284.default.createElement(RetryIcon, null)
    ),
    uploadState === "uploading" && import_react284.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-image-loading" },
      import_react284.default.createElement(LoadingIndicatorIcon, { size: 17 })
    ),
    assetUrl && import_react284.default.createElement(BaseImage3, { alt: attachment.fallback, className: "str-chat__attachment-preview-thumbnail", onError: handleLoadError, src: assetUrl, title: attachment.fallback })
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/GeolocationPreview.js
var import_react285 = __toESM(require_react());
var GeolocationPreviewImage = () => import_react285.default.createElement(
  "div",
  { className: "str-chat__location-preview-image" },
  import_react285.default.createElement(GeolocationIcon, null)
);
var GeolocationPreview = ({ location: location2, PreviewImage = GeolocationPreviewImage, remove }) => {
  const { t: t2 } = useTranslationContext();
  return import_react285.default.createElement(
    "div",
    { className: "str-chat__location-preview", "data-testid": "location-preview" },
    import_react285.default.createElement(PreviewImage, { location: location2 }),
    remove && import_react285.default.createElement(
      "button",
      { "aria-label": t2("aria/Remove location attachment"), className: "str-chat__attachment-preview-delete", "data-testid": "location-preview-item-delete-button", onClick: remove },
      import_react285.default.createElement(CloseIcon, null)
    ),
    import_react285.default.createElement("div", { className: "str-chat__attachment-preview-metadata" }, location2.durationMs ? import_react285.default.createElement(
      import_react285.default.Fragment,
      null,
      import_react285.default.createElement("div", { className: "str-chat__attachment-preview-title", title: t2("Shared live location") }, t2("Live location")),
      import_react285.default.createElement("div", { className: "str-chat__attachment-preview-subtitle" }, t2("Live for {{duration}}", {
        duration: t2("duration/Share Location", {
          milliseconds: location2.durationMs
        })
      }))
    ) : import_react285.default.createElement(
      import_react285.default.Fragment,
      null,
      import_react285.default.createElement("div", { className: "str-chat__attachment-preview-title", title: t2("Current location") }, t2("Current location")),
      import_react285.default.createElement(
        "div",
        { className: "str-chat__attachment-preview-subtitle" },
        location2.latitude,
        ", ",
        location2.longitude
      )
    ))
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/AttachmentPreviewList.js
var AttachmentPreviewList = ({ AudioAttachmentPreview = FileAttachmentPreview, FileAttachmentPreview: FileAttachmentPreview2 = FileAttachmentPreview, GeolocationPreview: GeolocationPreview2 = GeolocationPreview, ImageAttachmentPreview: ImageAttachmentPreview2 = ImageAttachmentPreview, UnsupportedAttachmentPreview: UnsupportedAttachmentPreview2 = UnsupportedAttachmentPreview, VideoAttachmentPreview = FileAttachmentPreview, VoiceRecordingPreview: VoiceRecordingPreview2 = VoiceRecordingPreview }) => {
  const messageComposer = useMessageComposer();
  const { attachments, location: location2 } = useAttachmentsForPreview();
  if (!attachments.length && !location2)
    return null;
  return import_react286.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-list" },
    import_react286.default.createElement(
      "div",
      { className: "str-chat__attachment-list-scroll-container", "data-testid": "attachment-list-scroll-container" },
      location2 && import_react286.default.createElement(GeolocationPreview2, {
        location: location2,
        // It is not possible to nullify shared_location field so we do not show a preview when editing
        // to prevent a user from wanting to remove the location
        remove: messageComposer.editedMessage ? void 0 : messageComposer.locationComposer.initState
      }),
      attachments.map((attachment) => {
        if (isScrapedContent(attachment))
          return null;
        if (isLocalVoiceRecordingAttachment(attachment)) {
          return import_react286.default.createElement(VoiceRecordingPreview2, { attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments: messageComposer.attachmentManager.removeAttachments });
        } else if (isLocalAudioAttachment(attachment)) {
          return import_react286.default.createElement(AudioAttachmentPreview, { attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments: messageComposer.attachmentManager.removeAttachments });
        } else if (isLocalVideoAttachment(attachment)) {
          return import_react286.default.createElement(VideoAttachmentPreview, { attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments: messageComposer.attachmentManager.removeAttachments });
        } else if (isLocalImageAttachment(attachment)) {
          return import_react286.default.createElement(ImageAttachmentPreview2, { attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.image_url, removeAttachments: messageComposer.attachmentManager.removeAttachments });
        } else if (isLocalFileAttachment(attachment)) {
          return import_react286.default.createElement(FileAttachmentPreview2, { attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments: messageComposer.attachmentManager.removeAttachments });
        } else if (isLocalAttachment(attachment)) {
          return import_react286.default.createElement(UnsupportedAttachmentPreview2, { attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id, removeAttachments: messageComposer.attachmentManager.removeAttachments });
        }
        return null;
      })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/CooldownTimer.js
var import_react288 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useTimer.js
var import_react287 = __toESM(require_react());
var useTimer = ({ startFrom }) => {
  const [secondsLeft, setSecondsLeft] = (0, import_react287.useState)();
  (0, import_react287.useEffect)(() => {
    let countdownTimeout;
    if (typeof secondsLeft === "number" && secondsLeft > 0) {
      countdownTimeout = setTimeout(() => {
        setSecondsLeft(secondsLeft - 1);
      }, 1e3);
    }
    return () => {
      clearTimeout(countdownTimeout);
    };
  }, [secondsLeft]);
  (0, import_react287.useEffect)(() => {
    setSecondsLeft(startFrom ?? 0);
  }, [startFrom]);
  return secondsLeft;
};

// node_modules/stream-chat-react/dist/components/MessageInput/CooldownTimer.js
var CooldownTimer = ({ cooldownInterval }) => {
  const secondsLeft = useTimer({ startFrom: cooldownInterval });
  return import_react288.default.createElement("div", { className: "str-chat__message-input-cooldown", "data-testid": "cooldown-timer" }, secondsLeft);
};

// node_modules/stream-chat-react/dist/components/MessageInput/EditMessageForm.js
var import_react310 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInput.js
var import_react309 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInputFlat.js
var import_react307 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/SendButton.js
var import_react289 = __toESM(require_react());
var SendButton = ({ sendMessage, ...rest }) => {
  const hasSendableData = useMessageComposerHasSendableData();
  return import_react289.default.createElement(
    "button",
    { "aria-label": "Send", className: "str-chat__send-button", "data-testid": "send-button", disabled: !hasSendableData, onClick: sendMessage, type: "button", ...rest },
    import_react289.default.createElement(SendIcon, null)
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/StopAIGenerationButton.js
var import_react290 = __toESM(require_react());
var StopAIGenerationButton = ({ onClick, ...restProps }) => {
  const { t: t2 } = useTranslationContext();
  return import_react290.default.createElement("button", { "aria-label": t2("aria/Stop AI Generation"), className: "str-chat__stop-ai-generation-button", "data-testid": "stop-ai-generation-button", onClick, ...restProps });
};

// node_modules/stream-chat-react/dist/components/MessageInput/QuotedMessagePreview.js
var import_react291 = __toESM(require_react());
var messageComposerStateStoreSelector = (state) => ({
  quotedMessage: state.quotedMessage
});
var QuotedMessagePreviewHeader = () => {
  const { t: t2 } = useTranslationContext("QuotedMessagePreview");
  const messageComposer = useMessageComposer();
  const { quotedMessage } = useStateStore(messageComposer.state, messageComposerStateStoreSelector);
  if (!quotedMessage)
    return null;
  return import_react291.default.createElement(
    "div",
    { className: "str-chat__quoted-message-preview-header" },
    import_react291.default.createElement("div", { className: "str-chat__quoted-message-reply-to-message" }, t2("Reply to Message")),
    import_react291.default.createElement(
      "button",
      { "aria-label": t2("aria/Cancel Reply"), className: "str-chat__quoted-message-remove", onClick: () => messageComposer.setQuotedMessage(null) },
      import_react291.default.createElement(CloseIcon, null)
    )
  );
};
var QuotedMessagePreview = ({ renderText: renderText2 = renderText }) => {
  const { client } = useChatContext();
  const { Attachment: Attachment2 = Attachment, Avatar: Avatar2 = Avatar } = useComponentContext("QuotedMessagePreview");
  const { userLanguage } = useTranslationContext("QuotedMessagePreview");
  const messageComposer = useMessageComposer();
  const { quotedMessage } = useStateStore(messageComposer.state, messageComposerStateStoreSelector);
  const quotedMessageText = (0, import_react291.useMemo)(() => {
    var _a;
    return ((_a = quotedMessage == null ? void 0 : quotedMessage.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || (quotedMessage == null ? void 0 : quotedMessage.text);
  }, [quotedMessage == null ? void 0 : quotedMessage.i18n, quotedMessage == null ? void 0 : quotedMessage.text, userLanguage]);
  const renderedText = (0, import_react291.useMemo)(() => renderText2(quotedMessageText, quotedMessage == null ? void 0 : quotedMessage.mentioned_users), [quotedMessage, quotedMessageText, renderText2]);
  const quotedMessageAttachments = (0, import_react291.useMemo)(() => {
    var _a;
    return ((_a = quotedMessage == null ? void 0 : quotedMessage.attachments) == null ? void 0 : _a.length) ? quotedMessage.attachments.slice(0, 1) : [];
  }, [quotedMessage]);
  const poll = (quotedMessage == null ? void 0 : quotedMessage.poll_id) && client.polls.fromState(quotedMessage.poll_id);
  if (!quotedMessageText && !quotedMessageAttachments.length && !poll)
    return null;
  return import_react291.default.createElement(
    "div",
    { className: "str-chat__quoted-message-preview", "data-testid": "quoted-message-preview" },
    (quotedMessage == null ? void 0 : quotedMessage.user) && import_react291.default.createElement(Avatar2, { className: "str-chat__avatar--quoted-message-sender", image: quotedMessage.user.image, name: quotedMessage.user.name || quotedMessage.user.id, user: quotedMessage.user }),
    import_react291.default.createElement("div", { className: "str-chat__quoted-message-bubble" }, poll ? import_react291.default.createElement(Poll, { isQuoted: true, poll }) : import_react291.default.createElement(
      import_react291.default.Fragment,
      null,
      !!quotedMessageAttachments.length && import_react291.default.createElement(Attachment2, { attachments: quotedMessageAttachments, isQuoted: true }),
      import_react291.default.createElement("div", { className: "str-chat__quoted-message-text", "data-testid": "quoted-message-text" }, renderedText)
    ))
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/LinkPreviewList.js
var import_react292 = __toESM(require_react());
var linkPreviewsManagerStateSelector = (state) => ({
  linkPreviews: Array.from(state.previews.values()).filter((preview) => LinkPreviewsManager.previewIsLoaded(preview) || LinkPreviewsManager.previewIsLoading(preview))
});
var messageComposerStateSelector = (state) => ({
  quotedMessage: state.quotedMessage
});
var LinkPreviewList = () => {
  const messageComposer = useMessageComposer();
  const { linkPreviewsManager } = messageComposer;
  const { quotedMessage } = useStateStore(messageComposer.state, messageComposerStateSelector);
  const { linkPreviews } = useStateStore(linkPreviewsManager.state, linkPreviewsManagerStateSelector);
  const showLinkPreviews = linkPreviews.length > 0 && !quotedMessage;
  if (!showLinkPreviews)
    return null;
  return import_react292.default.createElement("div", { className: "str-chat__link-preview-list" }, linkPreviews.map((linkPreview) => import_react292.default.createElement(LinkPreviewCard, { key: linkPreview.og_scrape_url, linkPreview })));
};
var LinkPreviewCard = ({ linkPreview }) => {
  const { linkPreviewsManager } = useMessageComposer();
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const [referenceElement, setReferenceElement] = (0, import_react292.useState)(null);
  if (!LinkPreviewsManager.previewIsLoaded(linkPreview) && !LinkPreviewsManager.previewIsLoading(linkPreview))
    return null;
  return import_react292.default.createElement(
    "div",
    { className: clsx_default("str-chat__link-preview-card", {
      "str-chat__link-preview-card--loading": LinkPreviewsManager.previewIsLoading(linkPreview)
    }), "data-testid": "link-preview-card" },
    import_react292.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, linkPreview.og_scrape_url),
    import_react292.default.createElement(
      "div",
      { className: "str-chat__link-preview-card__icon-container", onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
      import_react292.default.createElement(LinkIcon, null)
    ),
    import_react292.default.createElement(
      "div",
      { className: "str-chat__link-preview-card__content" },
      import_react292.default.createElement("div", { className: "str-chat__link-preview-card__content-title" }, linkPreview.title),
      import_react292.default.createElement("div", { className: "str-chat__link-preview-card__content-description" }, linkPreview.text)
    ),
    import_react292.default.createElement(
      "button",
      { className: "str-chat__link-preview-card__dismiss-button", "data-testid": "link-preview-card-dismiss-btn", onClick: () => linkPreviewsManager.dismissPreview(linkPreview.og_scrape_url), type: "button" },
      import_react292.default.createElement(CloseIcon, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/SendToChannelCheckbox.js
var import_react293 = __toESM(require_react());
var stateSelector2 = (state) => ({
  showReplyInChannel: state.showReplyInChannel
});
var SendToChannelCheckbox = () => {
  const { t: t2 } = useTranslationContext();
  const messageComposer = useMessageComposer();
  const { showReplyInChannel } = useStateStore(messageComposer.state, stateSelector2);
  if (messageComposer.editedMessage || !messageComposer.threadId)
    return null;
  return import_react293.default.createElement(
    "div",
    { className: "str-chat__send-to-channel-checkbox__container" },
    import_react293.default.createElement(
      "div",
      { className: "str-chat__send-to-channel-checkbox__field" },
      import_react293.default.createElement("input", { id: "send-to-channel-checkbox", onClick: messageComposer.toggleShowReplyInChannel, type: "checkbox", value: showReplyInChannel.toString() }),
      import_react293.default.createElement("label", { htmlFor: "send-to-channel-checkbox" }, Object.keys(messageComposer.channel.state.members).length === 2 ? t2("Also send as a direct message") : t2("Also send in channel"))
    )
  );
};

// node_modules/stream-chat-react/dist/components/TextareaComposer/SuggestionList/CommandItem.js
var import_react294 = __toESM(require_react());
var CommandItem = (props) => {
  const { entity } = props;
  return import_react294.default.createElement(
    "div",
    { className: "str-chat__slash-command" },
    import_react294.default.createElement(
      "span",
      { className: "str-chat__slash-command-header" },
      import_react294.default.createElement("strong", null, entity.name),
      " ",
      entity.args
    ),
    import_react294.default.createElement("br", null),
    import_react294.default.createElement("span", { className: "str-chat__slash-command-description" }, entity.description)
  );
};

// node_modules/stream-chat-react/dist/components/TextareaComposer/SuggestionList/EmoticonItem.js
var import_react295 = __toESM(require_react());
var EmoticonItem = (props) => {
  const { entity } = props;
  const hasEntity = Object.keys(entity).length;
  if (!hasEntity)
    return null;
  const { parts, token } = entity.tokenizedDisplayName ?? {};
  const renderName = () => (parts == null ? void 0 : parts.map((part, i2) => part.toLowerCase() === token ? import_react295.default.createElement("span", { className: "str-chat__emoji-item--highlight", key: `part-${i2}` }, part) : import_react295.default.createElement("span", { className: "str-chat__emoji-item--part", key: `part-${i2}` }, part))) ?? null;
  return import_react295.default.createElement(
    "div",
    { className: "str-chat__emoji-item" },
    import_react295.default.createElement("span", { className: "str-chat__emoji-item--entity" }, entity.native),
    import_react295.default.createElement("span", { className: "str-chat__emoji-item--name" }, renderName())
  );
};

// node_modules/stream-chat-react/dist/components/TextareaComposer/SuggestionList/SuggestionList.js
var import_react298 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/TextareaComposer/SuggestionList/SuggestionListItem.js
var import_react296 = __toESM(require_react());
var SuggestionListItem = import_react296.default.forwardRef(function SuggestionListItem2({ className, component: Component2, focused, item, onMouseEnter }, innerRef) {
  const { textComposer } = useMessageComposer();
  const { textareaRef } = useMessageInputContext();
  const containerRef = (0, import_react296.useRef)(null);
  const handleSelect = (0, import_react296.useCallback)(() => {
    var _a;
    textComposer.handleSelect(item);
    (_a = textareaRef.current) == null ? void 0 : _a.focus();
  }, [item, textareaRef, textComposer]);
  (0, import_react296.useLayoutEffect)(() => {
    var _a;
    if (!focused)
      return;
    (_a = containerRef.current) == null ? void 0 : _a.scrollIntoView({ behavior: "instant", block: "nearest" });
  }, [focused, containerRef]);
  return import_react296.default.createElement(
    "li",
    { className: clsx_default("str-chat__suggestion-list-item", className, {
      "str-chat__suggestion-item--selected": focused
    }), onMouseEnter, ref: containerRef },
    import_react296.default.createElement(
      "button",
      { onClick: handleSelect, onKeyDown: (event) => {
        if (event.key === "Enter") {
          handleSelect();
        }
      }, ref: innerRef },
      import_react296.default.createElement(Component2, { entity: item, focused })
    )
  );
});

// node_modules/stream-chat-react/dist/components/TextareaComposer/SuggestionList/UserItem.js
var import_react297 = __toESM(require_react());
var UserItem = ({ Avatar: Avatar2 = Avatar, entity }) => {
  const hasEntity = !!Object.keys(entity).length;
  if (!hasEntity)
    return null;
  const { parts, token } = entity.tokenizedDisplayName;
  const renderName = () => parts.map((part, i2) => {
    const matches = part.toLowerCase() === token;
    const partWithHTMLSpacesAround = part.replace(/^\s+|\s+$/g, " ");
    return import_react297.default.createElement("span", { className: clsx_default({
      "str-chat__emoji-item--highlight": matches,
      "str-chat__emoji-item--part": !matches
    }), key: `part-${i2}` }, partWithHTMLSpacesAround);
  });
  return import_react297.default.createElement(
    "div",
    { className: "str-chat__user-item" },
    import_react297.default.createElement(Avatar2, { className: "str-chat__avatar--autocomplete-item", image: entity.image, name: entity.name || entity.id }),
    import_react297.default.createElement("span", { className: "str-chat__user-item--name", "data-testid": "user-item-name" }, renderName()),
    import_react297.default.createElement("div", { className: "str-chat__user-item-at" }, "@")
  );
};

// node_modules/stream-chat-react/dist/components/TextareaComposer/SuggestionList/SuggestionList.js
var textComposerStateSelector = (state) => ({
  suggestions: state.suggestions
});
var searchSourceStateSelector = (nextValue) => ({
  items: nextValue.items ?? []
});
var defaultComponents = {
  "/": (props) => import_react298.default.createElement(CommandItem, { entity: props.entity }),
  ":": (props) => import_react298.default.createElement(EmoticonItem, { entity: props.entity }),
  "@": (props) => import_react298.default.createElement(UserItem, { entity: props.entity })
};
var SuggestionList = ({ className, closeOnClickOutside = true, containerClassName, focusedItemIndex, setFocusedItemIndex, suggestionItemComponents = defaultComponents }) => {
  const { AutocompleteSuggestionItem = SuggestionListItem } = useComponentContext();
  const messageComposer = useMessageComposer();
  const { textComposer } = messageComposer;
  const { suggestions } = useStateStore(textComposer.state, textComposerStateSelector);
  const { items } = useStateStore(suggestions == null ? void 0 : suggestions.searchSource.state, searchSourceStateSelector) ?? {};
  const [container, setContainer] = (0, import_react298.useState)(null);
  const component = (suggestions == null ? void 0 : suggestions.trigger) ? suggestionItemComponents[suggestions == null ? void 0 : suggestions.trigger] : void 0;
  (0, import_react298.useEffect)(() => {
    if (!closeOnClickOutside || !suggestions || !container)
      return;
    const handleClick = (event) => {
      if (container.contains(event.target))
        return;
      textComposer.closeSuggestions();
    };
    document.addEventListener("click", handleClick);
    return () => {
      document.removeEventListener("click", handleClick);
    };
  }, [closeOnClickOutside, suggestions, container, textComposer]);
  if (!suggestions || !(items == null ? void 0 : items.length) || !component)
    return null;
  return import_react298.default.createElement(
    "div",
    { className: clsx_default("str-chat__suggestion-list-container", containerClassName), ref: setContainer },
    import_react298.default.createElement(
      InfiniteScrollPaginator,
      { loadNextOnScrollToBottom: suggestions.searchSource.search, threshold: 100 },
      import_react298.default.createElement("ul", { className: clsx_default("str-chat__suggestion-list str-chat__suggestion-list--react", className) }, items.map((item, i2) => import_react298.default.createElement(AutocompleteSuggestionItem, { component, focused: focusedItemIndex === i2, item, key: item.id.toString(), onMouseEnter: () => setFocusedItemIndex == null ? void 0 : setFocusedItemIndex(i2) })))
    )
  );
};

// node_modules/stream-chat-react/dist/components/TextareaComposer/TextareaComposer.js
var import_react302 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n2) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r2 in t2) ({}).hasOwnProperty.call(t2, r2) && (n2[r2] = t2[r2]);
    }
    return n2;
  }, _extends.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose2(r2, e) {
  if (null == r2) return {};
  var t2 = {};
  for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
    if (-1 !== e.indexOf(n2)) continue;
    t2[n2] = r2[n2];
  }
  return t2;
}

// node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.development.esm.js
var React199 = __toESM(require_react());

// node_modules/use-latest/dist/use-latest.esm.js
var import_react300 = __toESM(require_react());

// node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
var import_react299 = __toESM(require_react());
var index2 = import_react299.useLayoutEffect;

// node_modules/use-latest/dist/use-latest.esm.js
var useLatest = function useLatest2(value) {
  var ref = import_react300.default.useRef(value);
  index2(function() {
    ref.current = value;
  });
  return ref;
};

// node_modules/use-composed-ref/dist/use-composed-ref.esm.js
var import_react301 = __toESM(require_react());
var updateRef = function updateRef2(ref, value) {
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  ref.current = value;
};
var useComposedRef = function useComposedRef2(libRef, userRef) {
  var prevUserRef = import_react301.default.useRef();
  return import_react301.default.useCallback(function(instance2) {
    libRef.current = instance2;
    if (prevUserRef.current) {
      updateRef(prevUserRef.current, null);
    }
    prevUserRef.current = userRef;
    if (!userRef) {
      return;
    }
    updateRef(userRef, instance2);
  }, [userRef]);
};

// node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.development.esm.js
var HIDDEN_TEXTAREA_STYLE = {
  "min-height": "0",
  "max-height": "none",
  height: "0",
  visibility: "hidden",
  overflow: "hidden",
  position: "absolute",
  "z-index": "-1000",
  top: "0",
  right: "0",
  display: "block"
};
var forceHiddenStyles = function forceHiddenStyles2(node2) {
  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function(key) {
    node2.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], "important");
  });
};
var forceHiddenStyles$1 = forceHiddenStyles;
var hiddenTextarea = null;
var getHeight = function getHeight2(node2, sizingData) {
  var height = node2.scrollHeight;
  if (sizingData.sizingStyle.boxSizing === "border-box") {
    return height + sizingData.borderSize;
  }
  return height - sizingData.paddingSize;
};
function calculateNodeHeight(sizingData, value, minRows, maxRows) {
  if (minRows === void 0) {
    minRows = 1;
  }
  if (maxRows === void 0) {
    maxRows = Infinity;
  }
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    hiddenTextarea.setAttribute("tabindex", "-1");
    hiddenTextarea.setAttribute("aria-hidden", "true");
    forceHiddenStyles$1(hiddenTextarea);
  }
  if (hiddenTextarea.parentNode === null) {
    document.body.appendChild(hiddenTextarea);
  }
  var paddingSize = sizingData.paddingSize, borderSize = sizingData.borderSize, sizingStyle = sizingData.sizingStyle;
  var boxSizing = sizingStyle.boxSizing;
  Object.keys(sizingStyle).forEach(function(_key) {
    var key = _key;
    hiddenTextarea.style[key] = sizingStyle[key];
  });
  forceHiddenStyles$1(hiddenTextarea);
  hiddenTextarea.value = value;
  var height = getHeight(hiddenTextarea, sizingData);
  hiddenTextarea.value = value;
  height = getHeight(hiddenTextarea, sizingData);
  hiddenTextarea.value = "x";
  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;
  var minHeight = rowHeight * minRows;
  if (boxSizing === "border-box") {
    minHeight = minHeight + paddingSize + borderSize;
  }
  height = Math.max(minHeight, height);
  var maxHeight = rowHeight * maxRows;
  if (boxSizing === "border-box") {
    maxHeight = maxHeight + paddingSize + borderSize;
  }
  height = Math.min(maxHeight, height);
  return [height, rowHeight];
}
var noop6 = function noop7() {
};
var pick = function pick2(props, obj) {
  return props.reduce(function(acc, prop) {
    acc[prop] = obj[prop];
    return acc;
  }, {});
};
var SIZING_STYLE = [
  "borderBottomWidth",
  "borderLeftWidth",
  "borderRightWidth",
  "borderTopWidth",
  "boxSizing",
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontWeight",
  "letterSpacing",
  "lineHeight",
  "paddingBottom",
  "paddingLeft",
  "paddingRight",
  "paddingTop",
  // non-standard
  "tabSize",
  "textIndent",
  // non-standard
  "textRendering",
  "textTransform",
  "width",
  "wordBreak",
  "wordSpacing",
  "scrollbarGutter"
];
var isIE = !!document.documentElement.currentStyle;
var getSizingData = function getSizingData2(node2) {
  var style = window.getComputedStyle(node2);
  if (style === null) {
    return null;
  }
  var sizingStyle = pick(SIZING_STYLE, style);
  var boxSizing = sizingStyle.boxSizing;
  if (boxSizing === "") {
    return null;
  }
  if (isIE && boxSizing === "border-box") {
    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + "px";
  }
  var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
  var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
  return {
    sizingStyle,
    paddingSize,
    borderSize
  };
};
var getSizingData$1 = getSizingData;
function useListener(target, type, listener) {
  var latestListener = useLatest(listener);
  React199.useLayoutEffect(function() {
    var handler = function handler2(ev) {
      return latestListener.current(ev);
    };
    if (!target) {
      return;
    }
    target.addEventListener(type, handler);
    return function() {
      return target.removeEventListener(type, handler);
    };
  }, []);
}
var useFormResetListener = function useFormResetListener2(libRef, listener) {
  useListener(document.body, "reset", function(ev) {
    if (libRef.current.form === ev.target) {
      listener(ev);
    }
  });
};
var useWindowResizeListener = function useWindowResizeListener2(listener) {
  useListener(window, "resize", listener);
};
var useFontsLoadedListener = function useFontsLoadedListener2(listener) {
  useListener(document.fonts, "loadingdone", listener);
};
var _excluded2 = ["cacheMeasurements", "maxRows", "minRows", "onChange", "onHeightChange"];
var TextareaAutosize = function TextareaAutosize2(_ref, userRef) {
  var cacheMeasurements = _ref.cacheMeasurements, maxRows = _ref.maxRows, minRows = _ref.minRows, _ref$onChange = _ref.onChange, onChange = _ref$onChange === void 0 ? noop6 : _ref$onChange, _ref$onHeightChange = _ref.onHeightChange, onHeightChange = _ref$onHeightChange === void 0 ? noop6 : _ref$onHeightChange, props = _objectWithoutPropertiesLoose2(_ref, _excluded2);
  if (props.style) {
    if ("maxHeight" in props.style) {
      throw new Error("Using `style.maxHeight` for <TextareaAutosize/> is not supported. Please use `maxRows`.");
    }
    if ("minHeight" in props.style) {
      throw new Error("Using `style.minHeight` for <TextareaAutosize/> is not supported. Please use `minRows`.");
    }
  }
  var isControlled = props.value !== void 0;
  var libRef = React199.useRef(null);
  var ref = useComposedRef(libRef, userRef);
  var heightRef = React199.useRef(0);
  var measurementsCacheRef = React199.useRef();
  var resizeTextarea = function resizeTextarea2() {
    var node2 = libRef.current;
    var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData$1(node2);
    if (!nodeSizingData) {
      return;
    }
    measurementsCacheRef.current = nodeSizingData;
    var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node2.value || node2.placeholder || "x", minRows, maxRows), height = _calculateNodeHeight[0], rowHeight = _calculateNodeHeight[1];
    if (heightRef.current !== height) {
      heightRef.current = height;
      node2.style.setProperty("height", height + "px", "important");
      onHeightChange(height, {
        rowHeight
      });
    }
  };
  var handleChange = function handleChange2(event) {
    if (!isControlled) {
      resizeTextarea();
    }
    onChange(event);
  };
  {
    React199.useLayoutEffect(resizeTextarea);
    useFormResetListener(libRef, function() {
      if (!isControlled) {
        var currentValue = libRef.current.value;
        requestAnimationFrame(function() {
          var node2 = libRef.current;
          if (node2 && currentValue !== node2.value) {
            resizeTextarea();
          }
        });
      }
    });
    useWindowResizeListener(resizeTextarea);
    useFontsLoadedListener(resizeTextarea);
    return React199.createElement("textarea", _extends({}, props, {
      onChange: handleChange,
      ref
    }));
  }
};
var index3 = React199.forwardRef(TextareaAutosize);

// node_modules/stream-chat-react/dist/components/TextareaComposer/TextareaComposer.js
var textComposerStateSelector2 = (state) => ({
  selection: state.selection,
  suggestions: state.suggestions,
  text: state.text
});
var searchSourceStateSelector2 = (state) => ({
  isLoadingItems: state.isLoading,
  items: state.items
});
var configStateSelector = (state) => ({
  enabled: state.text.enabled
});
var messageComposerStateSelector2 = (state) => ({
  quotedMessage: state.quotedMessage
});
var attachmentManagerStateSelector2 = (state) => ({
  attachments: state.attachments
});
var defaultShouldSubmit = (event) => event.key === "Enter" && !event.shiftKey && !event.nativeEvent.isComposing;
var TextareaComposer = ({ className, closeSuggestionsOnClickOutside, containerClassName, listClassName, maxRows: maxRowsProp, minRows: minRowsProp, onBlur, onChange, onKeyDown, onScroll, onSelect, placeholder: placeholderProp, shouldSubmit: shouldSubmitProp, ...restTextareaProps }) => {
  const { t: t2 } = useTranslationContext();
  const { AutocompleteSuggestionList = SuggestionList } = useComponentContext();
  const { additionalTextareaProps, cooldownRemaining, focus, handleSubmit, maxRows: maxRowsContext, minRows: minRowsContext, onPaste, shouldSubmit: shouldSubmitContext, textareaRef } = useMessageInputContext();
  const maxRows = maxRowsProp ?? maxRowsContext ?? 1;
  const minRows = minRowsProp ?? minRowsContext;
  const placeholder = placeholderProp ?? (additionalTextareaProps == null ? void 0 : additionalTextareaProps.placeholder);
  const shouldSubmit = shouldSubmitProp ?? shouldSubmitContext ?? defaultShouldSubmit;
  const messageComposer = useMessageComposer();
  const { textComposer } = messageComposer;
  const { selection, suggestions, text: text8 } = useStateStore(textComposer.state, textComposerStateSelector2);
  const { enabled } = useStateStore(messageComposer.configState, configStateSelector);
  const { quotedMessage } = useStateStore(messageComposer.state, messageComposerStateSelector2);
  const { attachments } = useStateStore(messageComposer.attachmentManager.state, attachmentManagerStateSelector2);
  const { isLoadingItems } = useStateStore(suggestions == null ? void 0 : suggestions.searchSource.state, searchSourceStateSelector2) ?? {};
  const containerRef = (0, import_react302.useRef)(null);
  const [focusedItemIndex, setFocusedItemIndex] = (0, import_react302.useState)(0);
  const [isComposing, setIsComposing] = (0, import_react302.useState)(false);
  const changeHandler = (0, import_react302.useCallback)((e) => {
    if (onChange) {
      onChange(e);
      return;
    }
    if (!textareaRef.current)
      return;
    textComposer.handleChange({
      selection: {
        end: textareaRef.current.selectionEnd,
        start: textareaRef.current.selectionStart
      },
      text: e.target.value
    });
  }, [onChange, textComposer, textareaRef]);
  const onCompositionEnd = (0, import_react302.useCallback)(() => {
    setIsComposing(false);
  }, []);
  const onCompositionStart = (0, import_react302.useCallback)(() => {
    setIsComposing(true);
  }, []);
  const keyDownHandler = (0, import_react302.useCallback)((event) => {
    var _a;
    if (onKeyDown) {
      onKeyDown(event);
      return;
    }
    if (textComposer.suggestions && ((_a = textComposer.suggestions.searchSource.items) == null ? void 0 : _a.length)) {
      if (event.key === "Escape")
        return textComposer.closeSuggestions();
      const loadedItems = textComposer.suggestions.searchSource.items;
      if (event.key === "Enter") {
        event.preventDefault();
        textComposer.handleSelect(loadedItems[focusedItemIndex]);
      }
      if (event.key === "ArrowUp") {
        event.preventDefault();
        setFocusedItemIndex((prev) => {
          let nextIndex = prev - 1;
          if (suggestions == null ? void 0 : suggestions.searchSource.hasNext) {
            nextIndex = prev;
          } else if (nextIndex < 0) {
            nextIndex = loadedItems.length - 1;
          }
          return nextIndex;
        });
      }
      if (event.key === "ArrowDown") {
        event.preventDefault();
        setFocusedItemIndex((prev) => {
          let nextIndex = prev + 1;
          if (suggestions == null ? void 0 : suggestions.searchSource.hasNext) {
            nextIndex = prev;
          } else if (nextIndex >= loadedItems.length) {
            nextIndex = 0;
          }
          return nextIndex;
        });
      }
    } else if (shouldSubmit(event) && textareaRef.current) {
      if (event.key === "Enter") {
        event.preventDefault();
      }
      handleSubmit();
    }
  }, [
    focusedItemIndex,
    handleSubmit,
    onKeyDown,
    shouldSubmit,
    suggestions,
    textComposer,
    textareaRef
  ]);
  const scrollHandler = (0, import_react302.useCallback)((event) => {
    if (onScroll) {
      onScroll(event);
    } else {
      textComposer.closeSuggestions();
    }
  }, [onScroll, textComposer]);
  const setSelection = (0, import_react302.useCallback)((e) => {
    onSelect == null ? void 0 : onSelect(e);
    textComposer.setSelection({
      end: e.target.selectionEnd,
      start: e.target.selectionStart
    });
  }, [onSelect, textComposer]);
  (0, import_react302.useEffect)(() => {
    if (textComposer.suggestions) {
      setFocusedItemIndex(0);
    }
  }, [textComposer.suggestions]);
  (0, import_react302.useEffect)(() => {
    var _a;
    const textareaIsFocused = (_a = textareaRef.current) == null ? void 0 : _a.matches(":focus");
    if (!textareaRef.current || textareaIsFocused || !focus)
      return;
    textareaRef.current.focus();
  }, [attachments, focus, quotedMessage, textareaRef]);
  (0, import_react302.useLayoutEffect)(() => {
    const textarea = textareaRef.current;
    if (!textarea || isComposing)
      return;
    if (textarea.value !== text8) {
      textarea.value = text8;
    }
    const length = textarea.value.length;
    const start3 = Math.max(0, Math.min(selection.start, length));
    const end2 = Math.max(start3, Math.min(selection.end, length));
    if (textarea.selectionStart === start3 && textarea.selectionEnd === end2)
      return;
    textarea.setSelectionRange(start3, end2, "forward");
  }, [text8, selection.start, selection.end, isComposing, textareaRef]);
  return import_react302.default.createElement(
    "div",
    { className: clsx_default("rta", "str-chat__textarea str-chat__message-textarea-react-host", containerClassName, {
      ["rta--loading"]: isLoadingItems
    }), ref: containerRef },
    import_react302.default.createElement(index3, { ...additionalTextareaProps, ...restTextareaProps, "aria-label": cooldownRemaining ? t2("Slow Mode ON") : placeholder, className: clsx_default("rta__textarea", "str-chat__textarea__textarea str-chat__message-textarea", className), "data-testid": "message-input", disabled: !enabled || !!cooldownRemaining, maxRows, minRows, onBlur, onChange: changeHandler, onCompositionEnd, onCompositionStart, onKeyDown: keyDownHandler, onPaste, onScroll: scrollHandler, onSelect: setSelection, placeholder: placeholder || t2("Type your message"), ref: (ref) => {
      textareaRef.current = ref;
    } }),
    !isComposing && import_react302.default.createElement(AutocompleteSuggestionList, { className: listClassName, closeOnClickOutside: closeSuggestionsOnClickOutside, focusedItemIndex, setFocusedItemIndex })
  );
};

// node_modules/stream-chat-react/dist/components/AIStateIndicator/AIStateIndicator.js
var import_react304 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/AIStateIndicator/hooks/useAIState.js
var import_react303 = __toESM(require_react());
var AIStates = {
  Error: "AI_STATE_ERROR",
  ExternalSources: "AI_STATE_EXTERNAL_SOURCES",
  Generating: "AI_STATE_GENERATING",
  Idle: "AI_STATE_IDLE",
  Thinking: "AI_STATE_THINKING"
};
var useAIState = (channel) => {
  const [aiState, setAiState] = (0, import_react303.useState)(AIStates.Idle);
  (0, import_react303.useEffect)(() => {
    if (!channel) {
      return;
    }
    const indicatorChangedListener = channel.on("ai_indicator.update", (event) => {
      const { cid } = event;
      const state = event.ai_state;
      if (channel.cid === cid) {
        setAiState(state);
      }
    });
    const indicatorClearedListener = channel.on("ai_indicator.clear", (event) => {
      const { cid } = event;
      if (channel.cid === cid) {
        setAiState(AIStates.Idle);
      }
    });
    return () => {
      indicatorChangedListener.unsubscribe();
      indicatorClearedListener.unsubscribe();
    };
  }, [channel]);
  return { aiState };
};

// node_modules/stream-chat-react/dist/components/AIStateIndicator/AIStateIndicator.js
var AIStateIndicator = ({ channel: channelFromProps }) => {
  const { t: t2 } = useTranslationContext();
  const { channel: channelFromContext } = useChannelStateContext("AIStateIndicator");
  const channel = channelFromProps || channelFromContext;
  const { aiState } = useAIState(channel);
  const allowedStates = {
    [AIStates.Thinking]: t2("Thinking..."),
    [AIStates.Generating]: t2("Generating...")
  };
  return aiState in allowedStates ? import_react304.default.createElement(
    "div",
    { className: "str-chat__ai-state-indicator-container" },
    import_react304.default.createElement("p", { className: "str-chat__ai-state-indicator-text" }, allowedStates[aiState])
  ) : null;
};

// node_modules/stream-chat-react/dist/components/MessageInput/WithDragAndDropUpload.js
var import_react306 = __toESM(require_react());

// node_modules/react-dropzone/dist/es/index.js
var import_react305 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/file-selector/dist/es2015/file.js
var COMMON_MIME_TYPES = /* @__PURE__ */ new Map([
  // https://github.com/guzzle/psr7/blob/2d9260799e713f1c475d3c5fdc3d6561ff7441b2/src/MimeType.php
  ["1km", "application/vnd.1000minds.decision-model+xml"],
  ["3dml", "text/vnd.in3d.3dml"],
  ["3ds", "image/x-3ds"],
  ["3g2", "video/3gpp2"],
  ["3gp", "video/3gp"],
  ["3gpp", "video/3gpp"],
  ["3mf", "model/3mf"],
  ["7z", "application/x-7z-compressed"],
  ["7zip", "application/x-7z-compressed"],
  ["123", "application/vnd.lotus-1-2-3"],
  ["aab", "application/x-authorware-bin"],
  ["aac", "audio/x-acc"],
  ["aam", "application/x-authorware-map"],
  ["aas", "application/x-authorware-seg"],
  ["abw", "application/x-abiword"],
  ["ac", "application/vnd.nokia.n-gage.ac+xml"],
  ["ac3", "audio/ac3"],
  ["acc", "application/vnd.americandynamics.acc"],
  ["ace", "application/x-ace-compressed"],
  ["acu", "application/vnd.acucobol"],
  ["acutc", "application/vnd.acucorp"],
  ["adp", "audio/adpcm"],
  ["aep", "application/vnd.audiograph"],
  ["afm", "application/x-font-type1"],
  ["afp", "application/vnd.ibm.modcap"],
  ["ahead", "application/vnd.ahead.space"],
  ["ai", "application/pdf"],
  ["aif", "audio/x-aiff"],
  ["aifc", "audio/x-aiff"],
  ["aiff", "audio/x-aiff"],
  ["air", "application/vnd.adobe.air-application-installer-package+zip"],
  ["ait", "application/vnd.dvb.ait"],
  ["ami", "application/vnd.amiga.ami"],
  ["amr", "audio/amr"],
  ["apk", "application/vnd.android.package-archive"],
  ["apng", "image/apng"],
  ["appcache", "text/cache-manifest"],
  ["application", "application/x-ms-application"],
  ["apr", "application/vnd.lotus-approach"],
  ["arc", "application/x-freearc"],
  ["arj", "application/x-arj"],
  ["asc", "application/pgp-signature"],
  ["asf", "video/x-ms-asf"],
  ["asm", "text/x-asm"],
  ["aso", "application/vnd.accpac.simply.aso"],
  ["asx", "video/x-ms-asf"],
  ["atc", "application/vnd.acucorp"],
  ["atom", "application/atom+xml"],
  ["atomcat", "application/atomcat+xml"],
  ["atomdeleted", "application/atomdeleted+xml"],
  ["atomsvc", "application/atomsvc+xml"],
  ["atx", "application/vnd.antix.game-component"],
  ["au", "audio/x-au"],
  ["avi", "video/x-msvideo"],
  ["avif", "image/avif"],
  ["aw", "application/applixware"],
  ["azf", "application/vnd.airzip.filesecure.azf"],
  ["azs", "application/vnd.airzip.filesecure.azs"],
  ["azv", "image/vnd.airzip.accelerator.azv"],
  ["azw", "application/vnd.amazon.ebook"],
  ["b16", "image/vnd.pco.b16"],
  ["bat", "application/x-msdownload"],
  ["bcpio", "application/x-bcpio"],
  ["bdf", "application/x-font-bdf"],
  ["bdm", "application/vnd.syncml.dm+wbxml"],
  ["bdoc", "application/x-bdoc"],
  ["bed", "application/vnd.realvnc.bed"],
  ["bh2", "application/vnd.fujitsu.oasysprs"],
  ["bin", "application/octet-stream"],
  ["blb", "application/x-blorb"],
  ["blorb", "application/x-blorb"],
  ["bmi", "application/vnd.bmi"],
  ["bmml", "application/vnd.balsamiq.bmml+xml"],
  ["bmp", "image/bmp"],
  ["book", "application/vnd.framemaker"],
  ["box", "application/vnd.previewsystems.box"],
  ["boz", "application/x-bzip2"],
  ["bpk", "application/octet-stream"],
  ["bpmn", "application/octet-stream"],
  ["bsp", "model/vnd.valve.source.compiled-map"],
  ["btif", "image/prs.btif"],
  ["buffer", "application/octet-stream"],
  ["bz", "application/x-bzip"],
  ["bz2", "application/x-bzip2"],
  ["c", "text/x-c"],
  ["c4d", "application/vnd.clonk.c4group"],
  ["c4f", "application/vnd.clonk.c4group"],
  ["c4g", "application/vnd.clonk.c4group"],
  ["c4p", "application/vnd.clonk.c4group"],
  ["c4u", "application/vnd.clonk.c4group"],
  ["c11amc", "application/vnd.cluetrust.cartomobile-config"],
  ["c11amz", "application/vnd.cluetrust.cartomobile-config-pkg"],
  ["cab", "application/vnd.ms-cab-compressed"],
  ["caf", "audio/x-caf"],
  ["cap", "application/vnd.tcpdump.pcap"],
  ["car", "application/vnd.curl.car"],
  ["cat", "application/vnd.ms-pki.seccat"],
  ["cb7", "application/x-cbr"],
  ["cba", "application/x-cbr"],
  ["cbr", "application/x-cbr"],
  ["cbt", "application/x-cbr"],
  ["cbz", "application/x-cbr"],
  ["cc", "text/x-c"],
  ["cco", "application/x-cocoa"],
  ["cct", "application/x-director"],
  ["ccxml", "application/ccxml+xml"],
  ["cdbcmsg", "application/vnd.contact.cmsg"],
  ["cda", "application/x-cdf"],
  ["cdf", "application/x-netcdf"],
  ["cdfx", "application/cdfx+xml"],
  ["cdkey", "application/vnd.mediastation.cdkey"],
  ["cdmia", "application/cdmi-capability"],
  ["cdmic", "application/cdmi-container"],
  ["cdmid", "application/cdmi-domain"],
  ["cdmio", "application/cdmi-object"],
  ["cdmiq", "application/cdmi-queue"],
  ["cdr", "application/cdr"],
  ["cdx", "chemical/x-cdx"],
  ["cdxml", "application/vnd.chemdraw+xml"],
  ["cdy", "application/vnd.cinderella"],
  ["cer", "application/pkix-cert"],
  ["cfs", "application/x-cfs-compressed"],
  ["cgm", "image/cgm"],
  ["chat", "application/x-chat"],
  ["chm", "application/vnd.ms-htmlhelp"],
  ["chrt", "application/vnd.kde.kchart"],
  ["cif", "chemical/x-cif"],
  ["cii", "application/vnd.anser-web-certificate-issue-initiation"],
  ["cil", "application/vnd.ms-artgalry"],
  ["cjs", "application/node"],
  ["cla", "application/vnd.claymore"],
  ["class", "application/octet-stream"],
  ["clkk", "application/vnd.crick.clicker.keyboard"],
  ["clkp", "application/vnd.crick.clicker.palette"],
  ["clkt", "application/vnd.crick.clicker.template"],
  ["clkw", "application/vnd.crick.clicker.wordbank"],
  ["clkx", "application/vnd.crick.clicker"],
  ["clp", "application/x-msclip"],
  ["cmc", "application/vnd.cosmocaller"],
  ["cmdf", "chemical/x-cmdf"],
  ["cml", "chemical/x-cml"],
  ["cmp", "application/vnd.yellowriver-custom-menu"],
  ["cmx", "image/x-cmx"],
  ["cod", "application/vnd.rim.cod"],
  ["coffee", "text/coffeescript"],
  ["com", "application/x-msdownload"],
  ["conf", "text/plain"],
  ["cpio", "application/x-cpio"],
  ["cpp", "text/x-c"],
  ["cpt", "application/mac-compactpro"],
  ["crd", "application/x-mscardfile"],
  ["crl", "application/pkix-crl"],
  ["crt", "application/x-x509-ca-cert"],
  ["crx", "application/x-chrome-extension"],
  ["cryptonote", "application/vnd.rig.cryptonote"],
  ["csh", "application/x-csh"],
  ["csl", "application/vnd.citationstyles.style+xml"],
  ["csml", "chemical/x-csml"],
  ["csp", "application/vnd.commonspace"],
  ["csr", "application/octet-stream"],
  ["css", "text/css"],
  ["cst", "application/x-director"],
  ["csv", "text/csv"],
  ["cu", "application/cu-seeme"],
  ["curl", "text/vnd.curl"],
  ["cww", "application/prs.cww"],
  ["cxt", "application/x-director"],
  ["cxx", "text/x-c"],
  ["dae", "model/vnd.collada+xml"],
  ["daf", "application/vnd.mobius.daf"],
  ["dart", "application/vnd.dart"],
  ["dataless", "application/vnd.fdsn.seed"],
  ["davmount", "application/davmount+xml"],
  ["dbf", "application/vnd.dbf"],
  ["dbk", "application/docbook+xml"],
  ["dcr", "application/x-director"],
  ["dcurl", "text/vnd.curl.dcurl"],
  ["dd2", "application/vnd.oma.dd2+xml"],
  ["ddd", "application/vnd.fujixerox.ddd"],
  ["ddf", "application/vnd.syncml.dmddf+xml"],
  ["dds", "image/vnd.ms-dds"],
  ["deb", "application/x-debian-package"],
  ["def", "text/plain"],
  ["deploy", "application/octet-stream"],
  ["der", "application/x-x509-ca-cert"],
  ["dfac", "application/vnd.dreamfactory"],
  ["dgc", "application/x-dgc-compressed"],
  ["dic", "text/x-c"],
  ["dir", "application/x-director"],
  ["dis", "application/vnd.mobius.dis"],
  ["disposition-notification", "message/disposition-notification"],
  ["dist", "application/octet-stream"],
  ["distz", "application/octet-stream"],
  ["djv", "image/vnd.djvu"],
  ["djvu", "image/vnd.djvu"],
  ["dll", "application/octet-stream"],
  ["dmg", "application/x-apple-diskimage"],
  ["dmn", "application/octet-stream"],
  ["dmp", "application/vnd.tcpdump.pcap"],
  ["dms", "application/octet-stream"],
  ["dna", "application/vnd.dna"],
  ["doc", "application/msword"],
  ["docm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
  ["dot", "application/msword"],
  ["dotm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"],
  ["dp", "application/vnd.osgi.dp"],
  ["dpg", "application/vnd.dpgraph"],
  ["dra", "audio/vnd.dra"],
  ["drle", "image/dicom-rle"],
  ["dsc", "text/prs.lines.tag"],
  ["dssc", "application/dssc+der"],
  ["dtb", "application/x-dtbook+xml"],
  ["dtd", "application/xml-dtd"],
  ["dts", "audio/vnd.dts"],
  ["dtshd", "audio/vnd.dts.hd"],
  ["dump", "application/octet-stream"],
  ["dvb", "video/vnd.dvb.file"],
  ["dvi", "application/x-dvi"],
  ["dwd", "application/atsc-dwd+xml"],
  ["dwf", "model/vnd.dwf"],
  ["dwg", "image/vnd.dwg"],
  ["dxf", "image/vnd.dxf"],
  ["dxp", "application/vnd.spotfire.dxp"],
  ["dxr", "application/x-director"],
  ["ear", "application/java-archive"],
  ["ecelp4800", "audio/vnd.nuera.ecelp4800"],
  ["ecelp7470", "audio/vnd.nuera.ecelp7470"],
  ["ecelp9600", "audio/vnd.nuera.ecelp9600"],
  ["ecma", "application/ecmascript"],
  ["edm", "application/vnd.novadigm.edm"],
  ["edx", "application/vnd.novadigm.edx"],
  ["efif", "application/vnd.picsel"],
  ["ei6", "application/vnd.pg.osasli"],
  ["elc", "application/octet-stream"],
  ["emf", "image/emf"],
  ["eml", "message/rfc822"],
  ["emma", "application/emma+xml"],
  ["emotionml", "application/emotionml+xml"],
  ["emz", "application/x-msmetafile"],
  ["eol", "audio/vnd.digital-winds"],
  ["eot", "application/vnd.ms-fontobject"],
  ["eps", "application/postscript"],
  ["epub", "application/epub+zip"],
  ["es", "application/ecmascript"],
  ["es3", "application/vnd.eszigno3+xml"],
  ["esa", "application/vnd.osgi.subsystem"],
  ["esf", "application/vnd.epson.esf"],
  ["et3", "application/vnd.eszigno3+xml"],
  ["etx", "text/x-setext"],
  ["eva", "application/x-eva"],
  ["evy", "application/x-envoy"],
  ["exe", "application/octet-stream"],
  ["exi", "application/exi"],
  ["exp", "application/express"],
  ["exr", "image/aces"],
  ["ext", "application/vnd.novadigm.ext"],
  ["ez", "application/andrew-inset"],
  ["ez2", "application/vnd.ezpix-album"],
  ["ez3", "application/vnd.ezpix-package"],
  ["f", "text/x-fortran"],
  ["f4v", "video/mp4"],
  ["f77", "text/x-fortran"],
  ["f90", "text/x-fortran"],
  ["fbs", "image/vnd.fastbidsheet"],
  ["fcdt", "application/vnd.adobe.formscentral.fcdt"],
  ["fcs", "application/vnd.isac.fcs"],
  ["fdf", "application/vnd.fdf"],
  ["fdt", "application/fdt+xml"],
  ["fe_launch", "application/vnd.denovo.fcselayout-link"],
  ["fg5", "application/vnd.fujitsu.oasysgp"],
  ["fgd", "application/x-director"],
  ["fh", "image/x-freehand"],
  ["fh4", "image/x-freehand"],
  ["fh5", "image/x-freehand"],
  ["fh7", "image/x-freehand"],
  ["fhc", "image/x-freehand"],
  ["fig", "application/x-xfig"],
  ["fits", "image/fits"],
  ["flac", "audio/x-flac"],
  ["fli", "video/x-fli"],
  ["flo", "application/vnd.micrografx.flo"],
  ["flv", "video/x-flv"],
  ["flw", "application/vnd.kde.kivio"],
  ["flx", "text/vnd.fmi.flexstor"],
  ["fly", "text/vnd.fly"],
  ["fm", "application/vnd.framemaker"],
  ["fnc", "application/vnd.frogans.fnc"],
  ["fo", "application/vnd.software602.filler.form+xml"],
  ["for", "text/x-fortran"],
  ["fpx", "image/vnd.fpx"],
  ["frame", "application/vnd.framemaker"],
  ["fsc", "application/vnd.fsc.weblaunch"],
  ["fst", "image/vnd.fst"],
  ["ftc", "application/vnd.fluxtime.clip"],
  ["fti", "application/vnd.anser-web-funds-transfer-initiation"],
  ["fvt", "video/vnd.fvt"],
  ["fxp", "application/vnd.adobe.fxp"],
  ["fxpl", "application/vnd.adobe.fxp"],
  ["fzs", "application/vnd.fuzzysheet"],
  ["g2w", "application/vnd.geoplan"],
  ["g3", "image/g3fax"],
  ["g3w", "application/vnd.geospace"],
  ["gac", "application/vnd.groove-account"],
  ["gam", "application/x-tads"],
  ["gbr", "application/rpki-ghostbusters"],
  ["gca", "application/x-gca-compressed"],
  ["gdl", "model/vnd.gdl"],
  ["gdoc", "application/vnd.google-apps.document"],
  ["geo", "application/vnd.dynageo"],
  ["geojson", "application/geo+json"],
  ["gex", "application/vnd.geometry-explorer"],
  ["ggb", "application/vnd.geogebra.file"],
  ["ggt", "application/vnd.geogebra.tool"],
  ["ghf", "application/vnd.groove-help"],
  ["gif", "image/gif"],
  ["gim", "application/vnd.groove-identity-message"],
  ["glb", "model/gltf-binary"],
  ["gltf", "model/gltf+json"],
  ["gml", "application/gml+xml"],
  ["gmx", "application/vnd.gmx"],
  ["gnumeric", "application/x-gnumeric"],
  ["gpg", "application/gpg-keys"],
  ["gph", "application/vnd.flographit"],
  ["gpx", "application/gpx+xml"],
  ["gqf", "application/vnd.grafeq"],
  ["gqs", "application/vnd.grafeq"],
  ["gram", "application/srgs"],
  ["gramps", "application/x-gramps-xml"],
  ["gre", "application/vnd.geometry-explorer"],
  ["grv", "application/vnd.groove-injector"],
  ["grxml", "application/srgs+xml"],
  ["gsf", "application/x-font-ghostscript"],
  ["gsheet", "application/vnd.google-apps.spreadsheet"],
  ["gslides", "application/vnd.google-apps.presentation"],
  ["gtar", "application/x-gtar"],
  ["gtm", "application/vnd.groove-tool-message"],
  ["gtw", "model/vnd.gtw"],
  ["gv", "text/vnd.graphviz"],
  ["gxf", "application/gxf"],
  ["gxt", "application/vnd.geonext"],
  ["gz", "application/gzip"],
  ["gzip", "application/gzip"],
  ["h", "text/x-c"],
  ["h261", "video/h261"],
  ["h263", "video/h263"],
  ["h264", "video/h264"],
  ["hal", "application/vnd.hal+xml"],
  ["hbci", "application/vnd.hbci"],
  ["hbs", "text/x-handlebars-template"],
  ["hdd", "application/x-virtualbox-hdd"],
  ["hdf", "application/x-hdf"],
  ["heic", "image/heic"],
  ["heics", "image/heic-sequence"],
  ["heif", "image/heif"],
  ["heifs", "image/heif-sequence"],
  ["hej2", "image/hej2k"],
  ["held", "application/atsc-held+xml"],
  ["hh", "text/x-c"],
  ["hjson", "application/hjson"],
  ["hlp", "application/winhlp"],
  ["hpgl", "application/vnd.hp-hpgl"],
  ["hpid", "application/vnd.hp-hpid"],
  ["hps", "application/vnd.hp-hps"],
  ["hqx", "application/mac-binhex40"],
  ["hsj2", "image/hsj2"],
  ["htc", "text/x-component"],
  ["htke", "application/vnd.kenameaapp"],
  ["htm", "text/html"],
  ["html", "text/html"],
  ["hvd", "application/vnd.yamaha.hv-dic"],
  ["hvp", "application/vnd.yamaha.hv-voice"],
  ["hvs", "application/vnd.yamaha.hv-script"],
  ["i2g", "application/vnd.intergeo"],
  ["icc", "application/vnd.iccprofile"],
  ["ice", "x-conference/x-cooltalk"],
  ["icm", "application/vnd.iccprofile"],
  ["ico", "image/x-icon"],
  ["ics", "text/calendar"],
  ["ief", "image/ief"],
  ["ifb", "text/calendar"],
  ["ifm", "application/vnd.shana.informed.formdata"],
  ["iges", "model/iges"],
  ["igl", "application/vnd.igloader"],
  ["igm", "application/vnd.insors.igm"],
  ["igs", "model/iges"],
  ["igx", "application/vnd.micrografx.igx"],
  ["iif", "application/vnd.shana.informed.interchange"],
  ["img", "application/octet-stream"],
  ["imp", "application/vnd.accpac.simply.imp"],
  ["ims", "application/vnd.ms-ims"],
  ["in", "text/plain"],
  ["ini", "text/plain"],
  ["ink", "application/inkml+xml"],
  ["inkml", "application/inkml+xml"],
  ["install", "application/x-install-instructions"],
  ["iota", "application/vnd.astraea-software.iota"],
  ["ipfix", "application/ipfix"],
  ["ipk", "application/vnd.shana.informed.package"],
  ["irm", "application/vnd.ibm.rights-management"],
  ["irp", "application/vnd.irepository.package+xml"],
  ["iso", "application/x-iso9660-image"],
  ["itp", "application/vnd.shana.informed.formtemplate"],
  ["its", "application/its+xml"],
  ["ivp", "application/vnd.immervision-ivp"],
  ["ivu", "application/vnd.immervision-ivu"],
  ["jad", "text/vnd.sun.j2me.app-descriptor"],
  ["jade", "text/jade"],
  ["jam", "application/vnd.jam"],
  ["jar", "application/java-archive"],
  ["jardiff", "application/x-java-archive-diff"],
  ["java", "text/x-java-source"],
  ["jhc", "image/jphc"],
  ["jisp", "application/vnd.jisp"],
  ["jls", "image/jls"],
  ["jlt", "application/vnd.hp-jlyt"],
  ["jng", "image/x-jng"],
  ["jnlp", "application/x-java-jnlp-file"],
  ["joda", "application/vnd.joost.joda-archive"],
  ["jp2", "image/jp2"],
  ["jpe", "image/jpeg"],
  ["jpeg", "image/jpeg"],
  ["jpf", "image/jpx"],
  ["jpg", "image/jpeg"],
  ["jpg2", "image/jp2"],
  ["jpgm", "video/jpm"],
  ["jpgv", "video/jpeg"],
  ["jph", "image/jph"],
  ["jpm", "video/jpm"],
  ["jpx", "image/jpx"],
  ["js", "application/javascript"],
  ["json", "application/json"],
  ["json5", "application/json5"],
  ["jsonld", "application/ld+json"],
  // https://jsonlines.org/
  ["jsonl", "application/jsonl"],
  ["jsonml", "application/jsonml+json"],
  ["jsx", "text/jsx"],
  ["jxr", "image/jxr"],
  ["jxra", "image/jxra"],
  ["jxrs", "image/jxrs"],
  ["jxs", "image/jxs"],
  ["jxsc", "image/jxsc"],
  ["jxsi", "image/jxsi"],
  ["jxss", "image/jxss"],
  ["kar", "audio/midi"],
  ["karbon", "application/vnd.kde.karbon"],
  ["kdb", "application/octet-stream"],
  ["kdbx", "application/x-keepass2"],
  ["key", "application/x-iwork-keynote-sffkey"],
  ["kfo", "application/vnd.kde.kformula"],
  ["kia", "application/vnd.kidspiration"],
  ["kml", "application/vnd.google-earth.kml+xml"],
  ["kmz", "application/vnd.google-earth.kmz"],
  ["kne", "application/vnd.kinar"],
  ["knp", "application/vnd.kinar"],
  ["kon", "application/vnd.kde.kontour"],
  ["kpr", "application/vnd.kde.kpresenter"],
  ["kpt", "application/vnd.kde.kpresenter"],
  ["kpxx", "application/vnd.ds-keypoint"],
  ["ksp", "application/vnd.kde.kspread"],
  ["ktr", "application/vnd.kahootz"],
  ["ktx", "image/ktx"],
  ["ktx2", "image/ktx2"],
  ["ktz", "application/vnd.kahootz"],
  ["kwd", "application/vnd.kde.kword"],
  ["kwt", "application/vnd.kde.kword"],
  ["lasxml", "application/vnd.las.las+xml"],
  ["latex", "application/x-latex"],
  ["lbd", "application/vnd.llamagraphics.life-balance.desktop"],
  ["lbe", "application/vnd.llamagraphics.life-balance.exchange+xml"],
  ["les", "application/vnd.hhe.lesson-player"],
  ["less", "text/less"],
  ["lgr", "application/lgr+xml"],
  ["lha", "application/octet-stream"],
  ["link66", "application/vnd.route66.link66+xml"],
  ["list", "text/plain"],
  ["list3820", "application/vnd.ibm.modcap"],
  ["listafp", "application/vnd.ibm.modcap"],
  ["litcoffee", "text/coffeescript"],
  ["lnk", "application/x-ms-shortcut"],
  ["log", "text/plain"],
  ["lostxml", "application/lost+xml"],
  ["lrf", "application/octet-stream"],
  ["lrm", "application/vnd.ms-lrm"],
  ["ltf", "application/vnd.frogans.ltf"],
  ["lua", "text/x-lua"],
  ["luac", "application/x-lua-bytecode"],
  ["lvp", "audio/vnd.lucent.voice"],
  ["lwp", "application/vnd.lotus-wordpro"],
  ["lzh", "application/octet-stream"],
  ["m1v", "video/mpeg"],
  ["m2a", "audio/mpeg"],
  ["m2v", "video/mpeg"],
  ["m3a", "audio/mpeg"],
  ["m3u", "text/plain"],
  ["m3u8", "application/vnd.apple.mpegurl"],
  ["m4a", "audio/x-m4a"],
  ["m4p", "application/mp4"],
  ["m4s", "video/iso.segment"],
  ["m4u", "application/vnd.mpegurl"],
  ["m4v", "video/x-m4v"],
  ["m13", "application/x-msmediaview"],
  ["m14", "application/x-msmediaview"],
  ["m21", "application/mp21"],
  ["ma", "application/mathematica"],
  ["mads", "application/mads+xml"],
  ["maei", "application/mmt-aei+xml"],
  ["mag", "application/vnd.ecowin.chart"],
  ["maker", "application/vnd.framemaker"],
  ["man", "text/troff"],
  ["manifest", "text/cache-manifest"],
  ["map", "application/json"],
  ["mar", "application/octet-stream"],
  ["markdown", "text/markdown"],
  ["mathml", "application/mathml+xml"],
  ["mb", "application/mathematica"],
  ["mbk", "application/vnd.mobius.mbk"],
  ["mbox", "application/mbox"],
  ["mc1", "application/vnd.medcalcdata"],
  ["mcd", "application/vnd.mcd"],
  ["mcurl", "text/vnd.curl.mcurl"],
  ["md", "text/markdown"],
  ["mdb", "application/x-msaccess"],
  ["mdi", "image/vnd.ms-modi"],
  ["mdx", "text/mdx"],
  ["me", "text/troff"],
  ["mesh", "model/mesh"],
  ["meta4", "application/metalink4+xml"],
  ["metalink", "application/metalink+xml"],
  ["mets", "application/mets+xml"],
  ["mfm", "application/vnd.mfmp"],
  ["mft", "application/rpki-manifest"],
  ["mgp", "application/vnd.osgeo.mapguide.package"],
  ["mgz", "application/vnd.proteus.magazine"],
  ["mid", "audio/midi"],
  ["midi", "audio/midi"],
  ["mie", "application/x-mie"],
  ["mif", "application/vnd.mif"],
  ["mime", "message/rfc822"],
  ["mj2", "video/mj2"],
  ["mjp2", "video/mj2"],
  ["mjs", "application/javascript"],
  ["mk3d", "video/x-matroska"],
  ["mka", "audio/x-matroska"],
  ["mkd", "text/x-markdown"],
  ["mks", "video/x-matroska"],
  ["mkv", "video/x-matroska"],
  ["mlp", "application/vnd.dolby.mlp"],
  ["mmd", "application/vnd.chipnuts.karaoke-mmd"],
  ["mmf", "application/vnd.smaf"],
  ["mml", "text/mathml"],
  ["mmr", "image/vnd.fujixerox.edmics-mmr"],
  ["mng", "video/x-mng"],
  ["mny", "application/x-msmoney"],
  ["mobi", "application/x-mobipocket-ebook"],
  ["mods", "application/mods+xml"],
  ["mov", "video/quicktime"],
  ["movie", "video/x-sgi-movie"],
  ["mp2", "audio/mpeg"],
  ["mp2a", "audio/mpeg"],
  ["mp3", "audio/mpeg"],
  ["mp4", "video/mp4"],
  ["mp4a", "audio/mp4"],
  ["mp4s", "application/mp4"],
  ["mp4v", "video/mp4"],
  ["mp21", "application/mp21"],
  ["mpc", "application/vnd.mophun.certificate"],
  ["mpd", "application/dash+xml"],
  ["mpe", "video/mpeg"],
  ["mpeg", "video/mpeg"],
  ["mpg", "video/mpeg"],
  ["mpg4", "video/mp4"],
  ["mpga", "audio/mpeg"],
  ["mpkg", "application/vnd.apple.installer+xml"],
  ["mpm", "application/vnd.blueice.multipass"],
  ["mpn", "application/vnd.mophun.application"],
  ["mpp", "application/vnd.ms-project"],
  ["mpt", "application/vnd.ms-project"],
  ["mpy", "application/vnd.ibm.minipay"],
  ["mqy", "application/vnd.mobius.mqy"],
  ["mrc", "application/marc"],
  ["mrcx", "application/marcxml+xml"],
  ["ms", "text/troff"],
  ["mscml", "application/mediaservercontrol+xml"],
  ["mseed", "application/vnd.fdsn.mseed"],
  ["mseq", "application/vnd.mseq"],
  ["msf", "application/vnd.epson.msf"],
  ["msg", "application/vnd.ms-outlook"],
  ["msh", "model/mesh"],
  ["msi", "application/x-msdownload"],
  ["msl", "application/vnd.mobius.msl"],
  ["msm", "application/octet-stream"],
  ["msp", "application/octet-stream"],
  ["msty", "application/vnd.muvee.style"],
  ["mtl", "model/mtl"],
  ["mts", "model/vnd.mts"],
  ["mus", "application/vnd.musician"],
  ["musd", "application/mmt-usd+xml"],
  ["musicxml", "application/vnd.recordare.musicxml+xml"],
  ["mvb", "application/x-msmediaview"],
  ["mvt", "application/vnd.mapbox-vector-tile"],
  ["mwf", "application/vnd.mfer"],
  ["mxf", "application/mxf"],
  ["mxl", "application/vnd.recordare.musicxml"],
  ["mxmf", "audio/mobile-xmf"],
  ["mxml", "application/xv+xml"],
  ["mxs", "application/vnd.triscape.mxs"],
  ["mxu", "video/vnd.mpegurl"],
  ["n-gage", "application/vnd.nokia.n-gage.symbian.install"],
  ["n3", "text/n3"],
  ["nb", "application/mathematica"],
  ["nbp", "application/vnd.wolfram.player"],
  ["nc", "application/x-netcdf"],
  ["ncx", "application/x-dtbncx+xml"],
  ["nfo", "text/x-nfo"],
  ["ngdat", "application/vnd.nokia.n-gage.data"],
  ["nitf", "application/vnd.nitf"],
  ["nlu", "application/vnd.neurolanguage.nlu"],
  ["nml", "application/vnd.enliven"],
  ["nnd", "application/vnd.noblenet-directory"],
  ["nns", "application/vnd.noblenet-sealer"],
  ["nnw", "application/vnd.noblenet-web"],
  ["npx", "image/vnd.net-fpx"],
  ["nq", "application/n-quads"],
  ["nsc", "application/x-conference"],
  ["nsf", "application/vnd.lotus-notes"],
  ["nt", "application/n-triples"],
  ["ntf", "application/vnd.nitf"],
  ["numbers", "application/x-iwork-numbers-sffnumbers"],
  ["nzb", "application/x-nzb"],
  ["oa2", "application/vnd.fujitsu.oasys2"],
  ["oa3", "application/vnd.fujitsu.oasys3"],
  ["oas", "application/vnd.fujitsu.oasys"],
  ["obd", "application/x-msbinder"],
  ["obgx", "application/vnd.openblox.game+xml"],
  ["obj", "model/obj"],
  ["oda", "application/oda"],
  ["odb", "application/vnd.oasis.opendocument.database"],
  ["odc", "application/vnd.oasis.opendocument.chart"],
  ["odf", "application/vnd.oasis.opendocument.formula"],
  ["odft", "application/vnd.oasis.opendocument.formula-template"],
  ["odg", "application/vnd.oasis.opendocument.graphics"],
  ["odi", "application/vnd.oasis.opendocument.image"],
  ["odm", "application/vnd.oasis.opendocument.text-master"],
  ["odp", "application/vnd.oasis.opendocument.presentation"],
  ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
  ["odt", "application/vnd.oasis.opendocument.text"],
  ["oga", "audio/ogg"],
  ["ogex", "model/vnd.opengex"],
  ["ogg", "audio/ogg"],
  ["ogv", "video/ogg"],
  ["ogx", "application/ogg"],
  ["omdoc", "application/omdoc+xml"],
  ["onepkg", "application/onenote"],
  ["onetmp", "application/onenote"],
  ["onetoc", "application/onenote"],
  ["onetoc2", "application/onenote"],
  ["opf", "application/oebps-package+xml"],
  ["opml", "text/x-opml"],
  ["oprc", "application/vnd.palm"],
  ["opus", "audio/ogg"],
  ["org", "text/x-org"],
  ["osf", "application/vnd.yamaha.openscoreformat"],
  ["osfpvg", "application/vnd.yamaha.openscoreformat.osfpvg+xml"],
  ["osm", "application/vnd.openstreetmap.data+xml"],
  ["otc", "application/vnd.oasis.opendocument.chart-template"],
  ["otf", "font/otf"],
  ["otg", "application/vnd.oasis.opendocument.graphics-template"],
  ["oth", "application/vnd.oasis.opendocument.text-web"],
  ["oti", "application/vnd.oasis.opendocument.image-template"],
  ["otp", "application/vnd.oasis.opendocument.presentation-template"],
  ["ots", "application/vnd.oasis.opendocument.spreadsheet-template"],
  ["ott", "application/vnd.oasis.opendocument.text-template"],
  ["ova", "application/x-virtualbox-ova"],
  ["ovf", "application/x-virtualbox-ovf"],
  ["owl", "application/rdf+xml"],
  ["oxps", "application/oxps"],
  ["oxt", "application/vnd.openofficeorg.extension"],
  ["p", "text/x-pascal"],
  ["p7a", "application/x-pkcs7-signature"],
  ["p7b", "application/x-pkcs7-certificates"],
  ["p7c", "application/pkcs7-mime"],
  ["p7m", "application/pkcs7-mime"],
  ["p7r", "application/x-pkcs7-certreqresp"],
  ["p7s", "application/pkcs7-signature"],
  ["p8", "application/pkcs8"],
  ["p10", "application/x-pkcs10"],
  ["p12", "application/x-pkcs12"],
  ["pac", "application/x-ns-proxy-autoconfig"],
  ["pages", "application/x-iwork-pages-sffpages"],
  ["pas", "text/x-pascal"],
  ["paw", "application/vnd.pawaafile"],
  ["pbd", "application/vnd.powerbuilder6"],
  ["pbm", "image/x-portable-bitmap"],
  ["pcap", "application/vnd.tcpdump.pcap"],
  ["pcf", "application/x-font-pcf"],
  ["pcl", "application/vnd.hp-pcl"],
  ["pclxl", "application/vnd.hp-pclxl"],
  ["pct", "image/x-pict"],
  ["pcurl", "application/vnd.curl.pcurl"],
  ["pcx", "image/x-pcx"],
  ["pdb", "application/x-pilot"],
  ["pde", "text/x-processing"],
  ["pdf", "application/pdf"],
  ["pem", "application/x-x509-user-cert"],
  ["pfa", "application/x-font-type1"],
  ["pfb", "application/x-font-type1"],
  ["pfm", "application/x-font-type1"],
  ["pfr", "application/font-tdpfr"],
  ["pfx", "application/x-pkcs12"],
  ["pgm", "image/x-portable-graymap"],
  ["pgn", "application/x-chess-pgn"],
  ["pgp", "application/pgp"],
  ["php", "application/x-httpd-php"],
  ["php3", "application/x-httpd-php"],
  ["php4", "application/x-httpd-php"],
  ["phps", "application/x-httpd-php-source"],
  ["phtml", "application/x-httpd-php"],
  ["pic", "image/x-pict"],
  ["pkg", "application/octet-stream"],
  ["pki", "application/pkixcmp"],
  ["pkipath", "application/pkix-pkipath"],
  ["pkpass", "application/vnd.apple.pkpass"],
  ["pl", "application/x-perl"],
  ["plb", "application/vnd.3gpp.pic-bw-large"],
  ["plc", "application/vnd.mobius.plc"],
  ["plf", "application/vnd.pocketlearn"],
  ["pls", "application/pls+xml"],
  ["pm", "application/x-perl"],
  ["pml", "application/vnd.ctc-posml"],
  ["png", "image/png"],
  ["pnm", "image/x-portable-anymap"],
  ["portpkg", "application/vnd.macports.portpkg"],
  ["pot", "application/vnd.ms-powerpoint"],
  ["potm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["potx", "application/vnd.openxmlformats-officedocument.presentationml.template"],
  ["ppa", "application/vnd.ms-powerpoint"],
  ["ppam", "application/vnd.ms-powerpoint.addin.macroEnabled.12"],
  ["ppd", "application/vnd.cups-ppd"],
  ["ppm", "image/x-portable-pixmap"],
  ["pps", "application/vnd.ms-powerpoint"],
  ["ppsm", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"],
  ["ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"],
  ["ppt", "application/powerpoint"],
  ["pptm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
  ["pqa", "application/vnd.palm"],
  ["prc", "application/x-pilot"],
  ["pre", "application/vnd.lotus-freelance"],
  ["prf", "application/pics-rules"],
  ["provx", "application/provenance+xml"],
  ["ps", "application/postscript"],
  ["psb", "application/vnd.3gpp.pic-bw-small"],
  ["psd", "application/x-photoshop"],
  ["psf", "application/x-font-linux-psf"],
  ["pskcxml", "application/pskc+xml"],
  ["pti", "image/prs.pti"],
  ["ptid", "application/vnd.pvi.ptid1"],
  ["pub", "application/x-mspublisher"],
  ["pvb", "application/vnd.3gpp.pic-bw-var"],
  ["pwn", "application/vnd.3m.post-it-notes"],
  ["pya", "audio/vnd.ms-playready.media.pya"],
  ["pyv", "video/vnd.ms-playready.media.pyv"],
  ["qam", "application/vnd.epson.quickanime"],
  ["qbo", "application/vnd.intu.qbo"],
  ["qfx", "application/vnd.intu.qfx"],
  ["qps", "application/vnd.publishare-delta-tree"],
  ["qt", "video/quicktime"],
  ["qwd", "application/vnd.quark.quarkxpress"],
  ["qwt", "application/vnd.quark.quarkxpress"],
  ["qxb", "application/vnd.quark.quarkxpress"],
  ["qxd", "application/vnd.quark.quarkxpress"],
  ["qxl", "application/vnd.quark.quarkxpress"],
  ["qxt", "application/vnd.quark.quarkxpress"],
  ["ra", "audio/x-realaudio"],
  ["ram", "audio/x-pn-realaudio"],
  ["raml", "application/raml+yaml"],
  ["rapd", "application/route-apd+xml"],
  ["rar", "application/x-rar"],
  ["ras", "image/x-cmu-raster"],
  ["rcprofile", "application/vnd.ipunplugged.rcprofile"],
  ["rdf", "application/rdf+xml"],
  ["rdz", "application/vnd.data-vision.rdz"],
  ["relo", "application/p2p-overlay+xml"],
  ["rep", "application/vnd.businessobjects"],
  ["res", "application/x-dtbresource+xml"],
  ["rgb", "image/x-rgb"],
  ["rif", "application/reginfo+xml"],
  ["rip", "audio/vnd.rip"],
  ["ris", "application/x-research-info-systems"],
  ["rl", "application/resource-lists+xml"],
  ["rlc", "image/vnd.fujixerox.edmics-rlc"],
  ["rld", "application/resource-lists-diff+xml"],
  ["rm", "audio/x-pn-realaudio"],
  ["rmi", "audio/midi"],
  ["rmp", "audio/x-pn-realaudio-plugin"],
  ["rms", "application/vnd.jcp.javame.midlet-rms"],
  ["rmvb", "application/vnd.rn-realmedia-vbr"],
  ["rnc", "application/relax-ng-compact-syntax"],
  ["rng", "application/xml"],
  ["roa", "application/rpki-roa"],
  ["roff", "text/troff"],
  ["rp9", "application/vnd.cloanto.rp9"],
  ["rpm", "audio/x-pn-realaudio-plugin"],
  ["rpss", "application/vnd.nokia.radio-presets"],
  ["rpst", "application/vnd.nokia.radio-preset"],
  ["rq", "application/sparql-query"],
  ["rs", "application/rls-services+xml"],
  ["rsa", "application/x-pkcs7"],
  ["rsat", "application/atsc-rsat+xml"],
  ["rsd", "application/rsd+xml"],
  ["rsheet", "application/urc-ressheet+xml"],
  ["rss", "application/rss+xml"],
  ["rtf", "text/rtf"],
  ["rtx", "text/richtext"],
  ["run", "application/x-makeself"],
  ["rusd", "application/route-usd+xml"],
  ["rv", "video/vnd.rn-realvideo"],
  ["s", "text/x-asm"],
  ["s3m", "audio/s3m"],
  ["saf", "application/vnd.yamaha.smaf-audio"],
  ["sass", "text/x-sass"],
  ["sbml", "application/sbml+xml"],
  ["sc", "application/vnd.ibm.secure-container"],
  ["scd", "application/x-msschedule"],
  ["scm", "application/vnd.lotus-screencam"],
  ["scq", "application/scvp-cv-request"],
  ["scs", "application/scvp-cv-response"],
  ["scss", "text/x-scss"],
  ["scurl", "text/vnd.curl.scurl"],
  ["sda", "application/vnd.stardivision.draw"],
  ["sdc", "application/vnd.stardivision.calc"],
  ["sdd", "application/vnd.stardivision.impress"],
  ["sdkd", "application/vnd.solent.sdkm+xml"],
  ["sdkm", "application/vnd.solent.sdkm+xml"],
  ["sdp", "application/sdp"],
  ["sdw", "application/vnd.stardivision.writer"],
  ["sea", "application/octet-stream"],
  ["see", "application/vnd.seemail"],
  ["seed", "application/vnd.fdsn.seed"],
  ["sema", "application/vnd.sema"],
  ["semd", "application/vnd.semd"],
  ["semf", "application/vnd.semf"],
  ["senmlx", "application/senml+xml"],
  ["sensmlx", "application/sensml+xml"],
  ["ser", "application/java-serialized-object"],
  ["setpay", "application/set-payment-initiation"],
  ["setreg", "application/set-registration-initiation"],
  ["sfd-hdstx", "application/vnd.hydrostatix.sof-data"],
  ["sfs", "application/vnd.spotfire.sfs"],
  ["sfv", "text/x-sfv"],
  ["sgi", "image/sgi"],
  ["sgl", "application/vnd.stardivision.writer-global"],
  ["sgm", "text/sgml"],
  ["sgml", "text/sgml"],
  ["sh", "application/x-sh"],
  ["shar", "application/x-shar"],
  ["shex", "text/shex"],
  ["shf", "application/shf+xml"],
  ["shtml", "text/html"],
  ["sid", "image/x-mrsid-image"],
  ["sieve", "application/sieve"],
  ["sig", "application/pgp-signature"],
  ["sil", "audio/silk"],
  ["silo", "model/mesh"],
  ["sis", "application/vnd.symbian.install"],
  ["sisx", "application/vnd.symbian.install"],
  ["sit", "application/x-stuffit"],
  ["sitx", "application/x-stuffitx"],
  ["siv", "application/sieve"],
  ["skd", "application/vnd.koan"],
  ["skm", "application/vnd.koan"],
  ["skp", "application/vnd.koan"],
  ["skt", "application/vnd.koan"],
  ["sldm", "application/vnd.ms-powerpoint.slide.macroenabled.12"],
  ["sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"],
  ["slim", "text/slim"],
  ["slm", "text/slim"],
  ["sls", "application/route-s-tsid+xml"],
  ["slt", "application/vnd.epson.salt"],
  ["sm", "application/vnd.stepmania.stepchart"],
  ["smf", "application/vnd.stardivision.math"],
  ["smi", "application/smil"],
  ["smil", "application/smil"],
  ["smv", "video/x-smv"],
  ["smzip", "application/vnd.stepmania.package"],
  ["snd", "audio/basic"],
  ["snf", "application/x-font-snf"],
  ["so", "application/octet-stream"],
  ["spc", "application/x-pkcs7-certificates"],
  ["spdx", "text/spdx"],
  ["spf", "application/vnd.yamaha.smaf-phrase"],
  ["spl", "application/x-futuresplash"],
  ["spot", "text/vnd.in3d.spot"],
  ["spp", "application/scvp-vp-response"],
  ["spq", "application/scvp-vp-request"],
  ["spx", "audio/ogg"],
  ["sql", "application/x-sql"],
  ["src", "application/x-wais-source"],
  ["srt", "application/x-subrip"],
  ["sru", "application/sru+xml"],
  ["srx", "application/sparql-results+xml"],
  ["ssdl", "application/ssdl+xml"],
  ["sse", "application/vnd.kodak-descriptor"],
  ["ssf", "application/vnd.epson.ssf"],
  ["ssml", "application/ssml+xml"],
  ["sst", "application/octet-stream"],
  ["st", "application/vnd.sailingtracker.track"],
  ["stc", "application/vnd.sun.xml.calc.template"],
  ["std", "application/vnd.sun.xml.draw.template"],
  ["stf", "application/vnd.wt.stf"],
  ["sti", "application/vnd.sun.xml.impress.template"],
  ["stk", "application/hyperstudio"],
  ["stl", "model/stl"],
  ["stpx", "model/step+xml"],
  ["stpxz", "model/step-xml+zip"],
  ["stpz", "model/step+zip"],
  ["str", "application/vnd.pg.format"],
  ["stw", "application/vnd.sun.xml.writer.template"],
  ["styl", "text/stylus"],
  ["stylus", "text/stylus"],
  ["sub", "text/vnd.dvb.subtitle"],
  ["sus", "application/vnd.sus-calendar"],
  ["susp", "application/vnd.sus-calendar"],
  ["sv4cpio", "application/x-sv4cpio"],
  ["sv4crc", "application/x-sv4crc"],
  ["svc", "application/vnd.dvb.service"],
  ["svd", "application/vnd.svd"],
  ["svg", "image/svg+xml"],
  ["svgz", "image/svg+xml"],
  ["swa", "application/x-director"],
  ["swf", "application/x-shockwave-flash"],
  ["swi", "application/vnd.aristanetworks.swi"],
  ["swidtag", "application/swid+xml"],
  ["sxc", "application/vnd.sun.xml.calc"],
  ["sxd", "application/vnd.sun.xml.draw"],
  ["sxg", "application/vnd.sun.xml.writer.global"],
  ["sxi", "application/vnd.sun.xml.impress"],
  ["sxm", "application/vnd.sun.xml.math"],
  ["sxw", "application/vnd.sun.xml.writer"],
  ["t", "text/troff"],
  ["t3", "application/x-t3vm-image"],
  ["t38", "image/t38"],
  ["taglet", "application/vnd.mynfc"],
  ["tao", "application/vnd.tao.intent-module-archive"],
  ["tap", "image/vnd.tencent.tap"],
  ["tar", "application/x-tar"],
  ["tcap", "application/vnd.3gpp2.tcap"],
  ["tcl", "application/x-tcl"],
  ["td", "application/urc-targetdesc+xml"],
  ["teacher", "application/vnd.smart.teacher"],
  ["tei", "application/tei+xml"],
  ["teicorpus", "application/tei+xml"],
  ["tex", "application/x-tex"],
  ["texi", "application/x-texinfo"],
  ["texinfo", "application/x-texinfo"],
  ["text", "text/plain"],
  ["tfi", "application/thraud+xml"],
  ["tfm", "application/x-tex-tfm"],
  ["tfx", "image/tiff-fx"],
  ["tga", "image/x-tga"],
  ["tgz", "application/x-tar"],
  ["thmx", "application/vnd.ms-officetheme"],
  ["tif", "image/tiff"],
  ["tiff", "image/tiff"],
  ["tk", "application/x-tcl"],
  ["tmo", "application/vnd.tmobile-livetv"],
  ["toml", "application/toml"],
  ["torrent", "application/x-bittorrent"],
  ["tpl", "application/vnd.groove-tool-template"],
  ["tpt", "application/vnd.trid.tpt"],
  ["tr", "text/troff"],
  ["tra", "application/vnd.trueapp"],
  ["trig", "application/trig"],
  ["trm", "application/x-msterminal"],
  ["ts", "video/mp2t"],
  ["tsd", "application/timestamped-data"],
  ["tsv", "text/tab-separated-values"],
  ["ttc", "font/collection"],
  ["ttf", "font/ttf"],
  ["ttl", "text/turtle"],
  ["ttml", "application/ttml+xml"],
  ["twd", "application/vnd.simtech-mindmapper"],
  ["twds", "application/vnd.simtech-mindmapper"],
  ["txd", "application/vnd.genomatix.tuxedo"],
  ["txf", "application/vnd.mobius.txf"],
  ["txt", "text/plain"],
  ["u8dsn", "message/global-delivery-status"],
  ["u8hdr", "message/global-headers"],
  ["u8mdn", "message/global-disposition-notification"],
  ["u8msg", "message/global"],
  ["u32", "application/x-authorware-bin"],
  ["ubj", "application/ubjson"],
  ["udeb", "application/x-debian-package"],
  ["ufd", "application/vnd.ufdl"],
  ["ufdl", "application/vnd.ufdl"],
  ["ulx", "application/x-glulx"],
  ["umj", "application/vnd.umajin"],
  ["unityweb", "application/vnd.unity"],
  ["uoml", "application/vnd.uoml+xml"],
  ["uri", "text/uri-list"],
  ["uris", "text/uri-list"],
  ["urls", "text/uri-list"],
  ["usdz", "model/vnd.usdz+zip"],
  ["ustar", "application/x-ustar"],
  ["utz", "application/vnd.uiq.theme"],
  ["uu", "text/x-uuencode"],
  ["uva", "audio/vnd.dece.audio"],
  ["uvd", "application/vnd.dece.data"],
  ["uvf", "application/vnd.dece.data"],
  ["uvg", "image/vnd.dece.graphic"],
  ["uvh", "video/vnd.dece.hd"],
  ["uvi", "image/vnd.dece.graphic"],
  ["uvm", "video/vnd.dece.mobile"],
  ["uvp", "video/vnd.dece.pd"],
  ["uvs", "video/vnd.dece.sd"],
  ["uvt", "application/vnd.dece.ttml+xml"],
  ["uvu", "video/vnd.uvvu.mp4"],
  ["uvv", "video/vnd.dece.video"],
  ["uvva", "audio/vnd.dece.audio"],
  ["uvvd", "application/vnd.dece.data"],
  ["uvvf", "application/vnd.dece.data"],
  ["uvvg", "image/vnd.dece.graphic"],
  ["uvvh", "video/vnd.dece.hd"],
  ["uvvi", "image/vnd.dece.graphic"],
  ["uvvm", "video/vnd.dece.mobile"],
  ["uvvp", "video/vnd.dece.pd"],
  ["uvvs", "video/vnd.dece.sd"],
  ["uvvt", "application/vnd.dece.ttml+xml"],
  ["uvvu", "video/vnd.uvvu.mp4"],
  ["uvvv", "video/vnd.dece.video"],
  ["uvvx", "application/vnd.dece.unspecified"],
  ["uvvz", "application/vnd.dece.zip"],
  ["uvx", "application/vnd.dece.unspecified"],
  ["uvz", "application/vnd.dece.zip"],
  ["vbox", "application/x-virtualbox-vbox"],
  ["vbox-extpack", "application/x-virtualbox-vbox-extpack"],
  ["vcard", "text/vcard"],
  ["vcd", "application/x-cdlink"],
  ["vcf", "text/x-vcard"],
  ["vcg", "application/vnd.groove-vcard"],
  ["vcs", "text/x-vcalendar"],
  ["vcx", "application/vnd.vcx"],
  ["vdi", "application/x-virtualbox-vdi"],
  ["vds", "model/vnd.sap.vds"],
  ["vhd", "application/x-virtualbox-vhd"],
  ["vis", "application/vnd.visionary"],
  ["viv", "video/vnd.vivo"],
  ["vlc", "application/videolan"],
  ["vmdk", "application/x-virtualbox-vmdk"],
  ["vob", "video/x-ms-vob"],
  ["vor", "application/vnd.stardivision.writer"],
  ["vox", "application/x-authorware-bin"],
  ["vrml", "model/vrml"],
  ["vsd", "application/vnd.visio"],
  ["vsf", "application/vnd.vsf"],
  ["vss", "application/vnd.visio"],
  ["vst", "application/vnd.visio"],
  ["vsw", "application/vnd.visio"],
  ["vtf", "image/vnd.valve.source.texture"],
  ["vtt", "text/vtt"],
  ["vtu", "model/vnd.vtu"],
  ["vxml", "application/voicexml+xml"],
  ["w3d", "application/x-director"],
  ["wad", "application/x-doom"],
  ["wadl", "application/vnd.sun.wadl+xml"],
  ["war", "application/java-archive"],
  ["wasm", "application/wasm"],
  ["wav", "audio/x-wav"],
  ["wax", "audio/x-ms-wax"],
  ["wbmp", "image/vnd.wap.wbmp"],
  ["wbs", "application/vnd.criticaltools.wbs+xml"],
  ["wbxml", "application/wbxml"],
  ["wcm", "application/vnd.ms-works"],
  ["wdb", "application/vnd.ms-works"],
  ["wdp", "image/vnd.ms-photo"],
  ["weba", "audio/webm"],
  ["webapp", "application/x-web-app-manifest+json"],
  ["webm", "video/webm"],
  ["webmanifest", "application/manifest+json"],
  ["webp", "image/webp"],
  ["wg", "application/vnd.pmi.widget"],
  ["wgt", "application/widget"],
  ["wks", "application/vnd.ms-works"],
  ["wm", "video/x-ms-wm"],
  ["wma", "audio/x-ms-wma"],
  ["wmd", "application/x-ms-wmd"],
  ["wmf", "image/wmf"],
  ["wml", "text/vnd.wap.wml"],
  ["wmlc", "application/wmlc"],
  ["wmls", "text/vnd.wap.wmlscript"],
  ["wmlsc", "application/vnd.wap.wmlscriptc"],
  ["wmv", "video/x-ms-wmv"],
  ["wmx", "video/x-ms-wmx"],
  ["wmz", "application/x-msmetafile"],
  ["woff", "font/woff"],
  ["woff2", "font/woff2"],
  ["word", "application/msword"],
  ["wpd", "application/vnd.wordperfect"],
  ["wpl", "application/vnd.ms-wpl"],
  ["wps", "application/vnd.ms-works"],
  ["wqd", "application/vnd.wqd"],
  ["wri", "application/x-mswrite"],
  ["wrl", "model/vrml"],
  ["wsc", "message/vnd.wfa.wsc"],
  ["wsdl", "application/wsdl+xml"],
  ["wspolicy", "application/wspolicy+xml"],
  ["wtb", "application/vnd.webturbo"],
  ["wvx", "video/x-ms-wvx"],
  ["x3d", "model/x3d+xml"],
  ["x3db", "model/x3d+fastinfoset"],
  ["x3dbz", "model/x3d+binary"],
  ["x3dv", "model/x3d-vrml"],
  ["x3dvz", "model/x3d+vrml"],
  ["x3dz", "model/x3d+xml"],
  ["x32", "application/x-authorware-bin"],
  ["x_b", "model/vnd.parasolid.transmit.binary"],
  ["x_t", "model/vnd.parasolid.transmit.text"],
  ["xaml", "application/xaml+xml"],
  ["xap", "application/x-silverlight-app"],
  ["xar", "application/vnd.xara"],
  ["xav", "application/xcap-att+xml"],
  ["xbap", "application/x-ms-xbap"],
  ["xbd", "application/vnd.fujixerox.docuworks.binder"],
  ["xbm", "image/x-xbitmap"],
  ["xca", "application/xcap-caps+xml"],
  ["xcs", "application/calendar+xml"],
  ["xdf", "application/xcap-diff+xml"],
  ["xdm", "application/vnd.syncml.dm+xml"],
  ["xdp", "application/vnd.adobe.xdp+xml"],
  ["xdssc", "application/dssc+xml"],
  ["xdw", "application/vnd.fujixerox.docuworks"],
  ["xel", "application/xcap-el+xml"],
  ["xenc", "application/xenc+xml"],
  ["xer", "application/patch-ops-error+xml"],
  ["xfdf", "application/vnd.adobe.xfdf"],
  ["xfdl", "application/vnd.xfdl"],
  ["xht", "application/xhtml+xml"],
  ["xhtml", "application/xhtml+xml"],
  ["xhvml", "application/xv+xml"],
  ["xif", "image/vnd.xiff"],
  ["xl", "application/excel"],
  ["xla", "application/vnd.ms-excel"],
  ["xlam", "application/vnd.ms-excel.addin.macroEnabled.12"],
  ["xlc", "application/vnd.ms-excel"],
  ["xlf", "application/xliff+xml"],
  ["xlm", "application/vnd.ms-excel"],
  ["xls", "application/vnd.ms-excel"],
  ["xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"],
  ["xlsm", "application/vnd.ms-excel.sheet.macroEnabled.12"],
  ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  ["xlt", "application/vnd.ms-excel"],
  ["xltm", "application/vnd.ms-excel.template.macroEnabled.12"],
  ["xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"],
  ["xlw", "application/vnd.ms-excel"],
  ["xm", "audio/xm"],
  ["xml", "application/xml"],
  ["xns", "application/xcap-ns+xml"],
  ["xo", "application/vnd.olpc-sugar"],
  ["xop", "application/xop+xml"],
  ["xpi", "application/x-xpinstall"],
  ["xpl", "application/xproc+xml"],
  ["xpm", "image/x-xpixmap"],
  ["xpr", "application/vnd.is-xpr"],
  ["xps", "application/vnd.ms-xpsdocument"],
  ["xpw", "application/vnd.intercon.formnet"],
  ["xpx", "application/vnd.intercon.formnet"],
  ["xsd", "application/xml"],
  ["xsl", "application/xml"],
  ["xslt", "application/xslt+xml"],
  ["xsm", "application/vnd.syncml+xml"],
  ["xspf", "application/xspf+xml"],
  ["xul", "application/vnd.mozilla.xul+xml"],
  ["xvm", "application/xv+xml"],
  ["xvml", "application/xv+xml"],
  ["xwd", "image/x-xwindowdump"],
  ["xyz", "chemical/x-xyz"],
  ["xz", "application/x-xz"],
  ["yaml", "text/yaml"],
  ["yang", "application/yang"],
  ["yin", "application/yin+xml"],
  ["yml", "text/yaml"],
  ["ymp", "text/x-suse-ymp"],
  ["z", "application/x-compress"],
  ["z1", "application/x-zmachine"],
  ["z2", "application/x-zmachine"],
  ["z3", "application/x-zmachine"],
  ["z4", "application/x-zmachine"],
  ["z5", "application/x-zmachine"],
  ["z6", "application/x-zmachine"],
  ["z7", "application/x-zmachine"],
  ["z8", "application/x-zmachine"],
  ["zaz", "application/vnd.zzazz.deck+xml"],
  ["zip", "application/zip"],
  ["zir", "application/vnd.zul"],
  ["zirz", "application/vnd.zul"],
  ["zmm", "application/vnd.handheld-entertainment+xml"],
  ["zsh", "text/x-scriptzsh"]
]);
function toFileWithPath(file, path2, h2) {
  const f2 = withMimeType(file);
  const { webkitRelativePath } = file;
  const p2 = typeof path2 === "string" ? path2 : typeof webkitRelativePath === "string" && webkitRelativePath.length > 0 ? webkitRelativePath : `./${file.name}`;
  if (typeof f2.path !== "string") {
    setObjProp(f2, "path", p2);
  }
  if (h2 !== void 0) {
    Object.defineProperty(f2, "handle", {
      value: h2,
      writable: false,
      configurable: false,
      enumerable: true
    });
  }
  setObjProp(f2, "relativePath", p2);
  return f2;
}
function withMimeType(file) {
  const { name: name2 } = file;
  const hasExtension = name2 && name2.lastIndexOf(".") !== -1;
  if (hasExtension && !file.type) {
    const ext = name2.split(".").pop().toLowerCase();
    const type = COMMON_MIME_TYPES.get(ext);
    if (type) {
      Object.defineProperty(file, "type", {
        value: type,
        writable: false,
        configurable: false,
        enumerable: true
      });
    }
  }
  return file;
}
function setObjProp(f2, key, value) {
  Object.defineProperty(f2, key, {
    value,
    writable: false,
    configurable: false,
    enumerable: true
  });
}

// node_modules/file-selector/dist/es2015/file-selector.js
var FILES_TO_IGNORE = [
  // Thumbnail cache files for macOS and Windows
  ".DS_Store",
  // macOs
  "Thumbs.db"
  // Windows
];
function fromEvent(evt) {
  return __awaiter(this, void 0, void 0, function* () {
    if (isObject(evt) && isDataTransfer(evt.dataTransfer)) {
      return getDataTransferFiles(evt.dataTransfer, evt.type);
    } else if (isChangeEvt(evt)) {
      return getInputFiles(evt);
    } else if (Array.isArray(evt) && evt.every((item) => "getFile" in item && typeof item.getFile === "function")) {
      return getFsHandleFiles(evt);
    }
    return [];
  });
}
function isDataTransfer(value) {
  return isObject(value);
}
function isChangeEvt(value) {
  return isObject(value) && isObject(value.target);
}
function isObject(v2) {
  return typeof v2 === "object" && v2 !== null;
}
function getInputFiles(evt) {
  return fromList(evt.target.files).map((file) => toFileWithPath(file));
}
function getFsHandleFiles(handles) {
  return __awaiter(this, void 0, void 0, function* () {
    const files = yield Promise.all(handles.map((h2) => h2.getFile()));
    return files.map((file) => toFileWithPath(file));
  });
}
function getDataTransferFiles(dt2, type) {
  return __awaiter(this, void 0, void 0, function* () {
    if (dt2.items) {
      const items = fromList(dt2.items).filter((item) => item.kind === "file");
      if (type !== "drop") {
        return items;
      }
      const files = yield Promise.all(items.map(toFilePromises));
      return noIgnoredFiles(flatten(files));
    }
    return noIgnoredFiles(fromList(dt2.files).map((file) => toFileWithPath(file)));
  });
}
function noIgnoredFiles(files) {
  return files.filter((file) => FILES_TO_IGNORE.indexOf(file.name) === -1);
}
function fromList(items) {
  if (items === null) {
    return [];
  }
  const files = [];
  for (let i2 = 0; i2 < items.length; i2++) {
    const file = items[i2];
    files.push(file);
  }
  return files;
}
function toFilePromises(item) {
  if (typeof item.webkitGetAsEntry !== "function") {
    return fromDataTransferItem(item);
  }
  const entry = item.webkitGetAsEntry();
  if (entry && entry.isDirectory) {
    return fromDirEntry(entry);
  }
  return fromDataTransferItem(item, entry);
}
function flatten(items) {
  return items.reduce((acc, files) => [
    ...acc,
    ...Array.isArray(files) ? flatten(files) : [files]
  ], []);
}
function fromDataTransferItem(item, entry) {
  return __awaiter(this, void 0, void 0, function* () {
    var _a;
    if (globalThis.isSecureContext && typeof item.getAsFileSystemHandle === "function") {
      const h2 = yield item.getAsFileSystemHandle();
      if (h2 === null) {
        throw new Error(`${item} is not a File`);
      }
      if (h2 !== void 0) {
        const file2 = yield h2.getFile();
        file2.handle = h2;
        return toFileWithPath(file2);
      }
    }
    const file = item.getAsFile();
    if (!file) {
      throw new Error(`${item} is not a File`);
    }
    const fwp = toFileWithPath(file, (_a = entry === null || entry === void 0 ? void 0 : entry.fullPath) !== null && _a !== void 0 ? _a : void 0);
    return fwp;
  });
}
function fromEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry);
  });
}
function fromDirEntry(entry) {
  const reader = entry.createReader();
  return new Promise((resolve, reject) => {
    const entries = [];
    function readEntries() {
      reader.readEntries((batch) => __awaiter(this, void 0, void 0, function* () {
        if (!batch.length) {
          try {
            const files = yield Promise.all(entries);
            resolve(files);
          } catch (err) {
            reject(err);
          }
        } else {
          const items = Promise.all(batch.map(fromEntry));
          entries.push(items);
          readEntries();
        }
      }), (err) => {
        reject(err);
      });
    }
    readEntries();
  });
}
function fromFileEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      entry.file((file) => {
        const fwp = toFileWithPath(file, entry.fullPath);
        resolve(fwp);
      }, (err) => {
        reject(err);
      });
    });
  });
}

// node_modules/react-dropzone/dist/es/utils/index.js
var import_attr_accept = __toESM(require_es2(), 1);
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
}
function ownKeys(object, enumerableOnly) {
  var keys3 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o2, minLen) {
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray2(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o2, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i2) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e2;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2) break;
    }
  } catch (err) {
    _d = true;
    _e2 = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
var accepts = typeof import_attr_accept.default === "function" ? import_attr_accept.default : import_attr_accept.default.default;
var FILE_INVALID_TYPE = "file-invalid-type";
var FILE_TOO_LARGE = "file-too-large";
var FILE_TOO_SMALL = "file-too-small";
var TOO_MANY_FILES = "too-many-files";
var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr2() {
  var accept = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var acceptArr = accept.split(",");
  var msg = acceptArr.length > 1 ? "one of ".concat(acceptArr.join(", ")) : acceptArr[0];
  return {
    code: FILE_INVALID_TYPE,
    message: "File type must be ".concat(msg)
  };
};
var getTooLargeRejectionErr = function getTooLargeRejectionErr2(maxSize) {
  return {
    code: FILE_TOO_LARGE,
    message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
  };
};
var getTooSmallRejectionErr = function getTooSmallRejectionErr2(minSize) {
  return {
    code: FILE_TOO_SMALL,
    message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
  };
};
var TOO_MANY_FILES_REJECTION = {
  code: TOO_MANY_FILES,
  message: "Too many files"
};
function fileAccepted(file, accept) {
  var isAcceptable = file.type === "application/x-moz-file" || accepts(file, accept);
  return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
}
function fileMatchSize(file, minSize, maxSize) {
  if (isDefined(file.size)) {
    if (isDefined(minSize) && isDefined(maxSize)) {
      if (file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
      if (file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    } else if (isDefined(minSize) && file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    else if (isDefined(maxSize) && file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
  }
  return [true, null];
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function allFilesAccepted(_ref) {
  var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles, validator = _ref.validator;
  if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
    return false;
  }
  return files.every(function(file) {
    var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 1), accepted = _fileAccepted2[0];
    var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];
    var customErrors = validator ? validator(file) : null;
    return accepted && sizeMatch && !customErrors;
  });
}
function isPropagationStopped(event) {
  if (typeof event.isPropagationStopped === "function") {
    return event.isPropagationStopped();
  } else if (typeof event.cancelBubble !== "undefined") {
    return event.cancelBubble;
  }
  return false;
}
function isEvtWithFiles(event) {
  if (!event.dataTransfer) {
    return !!event.target && !!event.target.files;
  }
  return Array.prototype.some.call(event.dataTransfer.types, function(type) {
    return type === "Files" || type === "application/x-moz-file";
  });
}
function onDocumentDragOver(event) {
  event.preventDefault();
}
function isIe(userAgent) {
  return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
}
function isEdge(userAgent) {
  return userAgent.indexOf("Edge/") !== -1;
}
function isIeOrEdge() {
  var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
  return isIe(userAgent) || isEdge(userAgent);
}
function composeEventHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function(event) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return fns.some(function(fn2) {
      if (!isPropagationStopped(event) && fn2) {
        fn2.apply(void 0, [event].concat(args));
      }
      return isPropagationStopped(event);
    });
  };
}
function canUseFileSystemAccessAPI() {
  return "showOpenFilePicker" in window;
}
function pickerOptionsFromAccept(accept) {
  if (isDefined(accept)) {
    var acceptForPicker = Object.entries(accept).filter(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2), mimeType = _ref3[0], ext = _ref3[1];
      var ok3 = true;
      if (!isMIMEType(mimeType)) {
        console.warn('Skipped "'.concat(mimeType, '" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.'));
        ok3 = false;
      }
      if (!Array.isArray(ext) || !ext.every(isExt)) {
        console.warn('Skipped "'.concat(mimeType, '" because an invalid file extension was provided.'));
        ok3 = false;
      }
      return ok3;
    }).reduce(function(agg, _ref4) {
      var _ref5 = _slicedToArray(_ref4, 2), mimeType = _ref5[0], ext = _ref5[1];
      return _objectSpread(_objectSpread({}, agg), {}, _defineProperty({}, mimeType, ext));
    }, {});
    return [{
      // description is required due to https://crbug.com/1264708
      description: "Files",
      accept: acceptForPicker
    }];
  }
  return accept;
}
function acceptPropAsAcceptAttr(accept) {
  if (isDefined(accept)) {
    return Object.entries(accept).reduce(function(a2, _ref6) {
      var _ref7 = _slicedToArray(_ref6, 2), mimeType = _ref7[0], ext = _ref7[1];
      return [].concat(_toConsumableArray(a2), [mimeType], _toConsumableArray(ext));
    }, []).filter(function(v2) {
      return isMIMEType(v2) || isExt(v2);
    }).join(",");
  }
  return void 0;
}
function isAbort(v2) {
  return v2 instanceof DOMException && (v2.name === "AbortError" || v2.code === v2.ABORT_ERR);
}
function isSecurityError(v2) {
  return v2 instanceof DOMException && (v2.name === "SecurityError" || v2.code === v2.SECURITY_ERR);
}
function isMIMEType(v2) {
  return v2 === "audio/*" || v2 === "video/*" || v2 === "image/*" || v2 === "text/*" || v2 === "application/*" || /\w+\/[-+.\w]+/g.test(v2);
}
function isExt(v2) {
  return /^.*\.[\w]+$/.test(v2);
}

// node_modules/react-dropzone/dist/es/index.js
var _excluded3 = ["children"];
var _excluded22 = ["open"];
var _excluded32 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"];
var _excluded4 = ["refKey", "onChange", "onClick"];
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray3(arr);
}
function _slicedToArray2(arr, i2) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray3(arr, i2) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o2, minLen) {
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray3(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray3(o2, minLen);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i2) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e2;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2) break;
    }
  } catch (err) {
    _d = true;
    _e2 = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr)) return arr;
}
function ownKeys2(object, enumerableOnly) {
  var keys3 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key = sourceSymbolKeys[i2];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var Dropzone = (0, import_react305.forwardRef)(function(_ref, ref) {
  var children = _ref.children, params = _objectWithoutProperties(_ref, _excluded3);
  var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, _excluded22);
  (0, import_react305.useImperativeHandle)(ref, function() {
    return {
      open
    };
  }, [open]);
  return import_react305.default.createElement(import_react305.Fragment, null, children(_objectSpread2(_objectSpread2({}, props), {}, {
    open
  })));
});
Dropzone.displayName = "Dropzone";
var defaultProps = {
  disabled: false,
  getFilesFromEvent: fromEvent,
  maxSize: Infinity,
  minSize: 0,
  multiple: true,
  maxFiles: 0,
  preventDropOnDocument: true,
  noClick: false,
  noKeyboard: false,
  noDrag: false,
  noDragEventsBubbling: false,
  validator: null,
  useFsAccessApi: false,
  autoFocus: false
};
Dropzone.defaultProps = defaultProps;
Dropzone.propTypes = {
  /**
   * Render function that exposes the dropzone state and prop getter fns
   *
   * @param {object} params
   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
   * @param {Function} params.open Open the native file selection dialog
   * @param {boolean} params.isFocused Dropzone area is in focus
   * @param {boolean} params.isFileDialogActive File dialog is opened
   * @param {boolean} params.isDragActive Active drag is in progress
   * @param {boolean} params.isDragAccept Dragged files are accepted
   * @param {boolean} params.isDragReject Some dragged files are rejected
   * @param {File[]} params.acceptedFiles Accepted files
   * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
   */
  children: import_prop_types.default.func,
  /**
   * Set accepted file types.
   * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
   * Keep in mind that mime type determination is not reliable across platforms. CSV files,
   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
   * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
   */
  accept: import_prop_types.default.objectOf(import_prop_types.default.arrayOf(import_prop_types.default.string)),
  /**
   * Allow drag 'n' drop (or selection from the file dialog) of multiple files
   */
  multiple: import_prop_types.default.bool,
  /**
   * If false, allow dropped items to take over the current browser window
   */
  preventDropOnDocument: import_prop_types.default.bool,
  /**
   * If true, disables click to open the native file selection dialog
   */
  noClick: import_prop_types.default.bool,
  /**
   * If true, disables SPACE/ENTER to open the native file selection dialog.
   * Note that it also stops tracking the focus state.
   */
  noKeyboard: import_prop_types.default.bool,
  /**
   * If true, disables drag 'n' drop
   */
  noDrag: import_prop_types.default.bool,
  /**
   * If true, stops drag event propagation to parents
   */
  noDragEventsBubbling: import_prop_types.default.bool,
  /**
   * Minimum file size (in bytes)
   */
  minSize: import_prop_types.default.number,
  /**
   * Maximum file size (in bytes)
   */
  maxSize: import_prop_types.default.number,
  /**
   * Maximum accepted number of files
   * The default value is 0 which means there is no limitation to how many files are accepted.
   */
  maxFiles: import_prop_types.default.number,
  /**
   * Enable/disable the dropzone
   */
  disabled: import_prop_types.default.bool,
  /**
   * Use this to provide a custom file aggregator
   *
   * @param {(DragEvent|Event|Array<FileSystemFileHandle>)} event A drag event or input change event (if files were selected via the file dialog)
   */
  getFilesFromEvent: import_prop_types.default.func,
  /**
   * Cb for when closing the file dialog with no selection
   */
  onFileDialogCancel: import_prop_types.default.func,
  /**
   * Cb for when opening the file dialog
   */
  onFileDialogOpen: import_prop_types.default.func,
  /**
   * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
   * to open the file picker instead of using an `<input type="file">` click event.
   */
  useFsAccessApi: import_prop_types.default.bool,
  /**
   * Set to true to focus the root element on render
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * Cb for when the `dragenter` event occurs.
   *
   * @param {DragEvent} event
   */
  onDragEnter: import_prop_types.default.func,
  /**
   * Cb for when the `dragleave` event occurs
   *
   * @param {DragEvent} event
   */
  onDragLeave: import_prop_types.default.func,
  /**
   * Cb for when the `dragover` event occurs
   *
   * @param {DragEvent} event
   */
  onDragOver: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
   *
   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
   * If `multiple` is set to false and additional files are dropped,
   * all files besides the first will be rejected.
   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
   *
   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
   *
   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
   *
   * ```js
   * function onDrop(acceptedFiles) {
   *   const req = request.post('/upload')
   *   acceptedFiles.forEach(file => {
   *     req.attach(file.name, file)
   *   })
   *   req.end(callback)
   * }
   * ```
   *
   * @param {File[]} acceptedFiles
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  onDrop: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are accepted, this callback is not invoked.
   *
   * @param {File[]} files
   * @param {(DragEvent|Event)} event
   */
  onDropAccepted: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are rejected, this callback is not invoked.
   *
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event
   */
  onDropRejected: import_prop_types.default.func,
  /**
   * Cb for when there's some error from any of the promises.
   *
   * @param {Error} error
   */
  onError: import_prop_types.default.func,
  /**
   * Custom validation function. It must return null if there's no errors.
   * @param {File} file
   * @returns {FileError|FileError[]|null}
   */
  validator: import_prop_types.default.func
};
var initialState = {
  isFocused: false,
  isFileDialogActive: false,
  isDragActive: false,
  isDragAccept: false,
  isDragReject: false,
  acceptedFiles: [],
  fileRejections: []
};
function useDropzone() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _defaultProps$props = _objectSpread2(_objectSpread2({}, defaultProps), props), accept = _defaultProps$props.accept, disabled = _defaultProps$props.disabled, getFilesFromEvent = _defaultProps$props.getFilesFromEvent, maxSize = _defaultProps$props.maxSize, minSize = _defaultProps$props.minSize, multiple = _defaultProps$props.multiple, maxFiles = _defaultProps$props.maxFiles, onDragEnter = _defaultProps$props.onDragEnter, onDragLeave = _defaultProps$props.onDragLeave, onDragOver = _defaultProps$props.onDragOver, onDrop = _defaultProps$props.onDrop, onDropAccepted = _defaultProps$props.onDropAccepted, onDropRejected = _defaultProps$props.onDropRejected, onFileDialogCancel = _defaultProps$props.onFileDialogCancel, onFileDialogOpen = _defaultProps$props.onFileDialogOpen, useFsAccessApi = _defaultProps$props.useFsAccessApi, autoFocus = _defaultProps$props.autoFocus, preventDropOnDocument = _defaultProps$props.preventDropOnDocument, noClick = _defaultProps$props.noClick, noKeyboard = _defaultProps$props.noKeyboard, noDrag = _defaultProps$props.noDrag, noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling, onError2 = _defaultProps$props.onError, validator = _defaultProps$props.validator;
  var acceptAttr = (0, import_react305.useMemo)(function() {
    return acceptPropAsAcceptAttr(accept);
  }, [accept]);
  var pickerTypes = (0, import_react305.useMemo)(function() {
    return pickerOptionsFromAccept(accept);
  }, [accept]);
  var onFileDialogOpenCb = (0, import_react305.useMemo)(function() {
    return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop8;
  }, [onFileDialogOpen]);
  var onFileDialogCancelCb = (0, import_react305.useMemo)(function() {
    return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop8;
  }, [onFileDialogCancel]);
  var rootRef = (0, import_react305.useRef)(null);
  var inputRef = (0, import_react305.useRef)(null);
  var _useReducer = (0, import_react305.useReducer)(reducer, initialState), _useReducer2 = _slicedToArray2(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
  var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive;
  var fsAccessApiWorksRef = (0, import_react305.useRef)(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI());
  var onWindowFocus = function onWindowFocus2() {
    if (!fsAccessApiWorksRef.current && isFileDialogActive) {
      setTimeout(function() {
        if (inputRef.current) {
          var files = inputRef.current.files;
          if (!files.length) {
            dispatch({
              type: "closeDialog"
            });
            onFileDialogCancelCb();
          }
        }
      }, 300);
    }
  };
  (0, import_react305.useEffect)(function() {
    window.addEventListener("focus", onWindowFocus, false);
    return function() {
      window.removeEventListener("focus", onWindowFocus, false);
    };
  }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
  var dragTargetsRef = (0, import_react305.useRef)([]);
  var onDocumentDrop = function onDocumentDrop2(event) {
    if (rootRef.current && rootRef.current.contains(event.target)) {
      return;
    }
    event.preventDefault();
    dragTargetsRef.current = [];
  };
  (0, import_react305.useEffect)(function() {
    if (preventDropOnDocument) {
      document.addEventListener("dragover", onDocumentDragOver, false);
      document.addEventListener("drop", onDocumentDrop, false);
    }
    return function() {
      if (preventDropOnDocument) {
        document.removeEventListener("dragover", onDocumentDragOver);
        document.removeEventListener("drop", onDocumentDrop);
      }
    };
  }, [rootRef, preventDropOnDocument]);
  (0, import_react305.useEffect)(function() {
    if (!disabled && autoFocus && rootRef.current) {
      rootRef.current.focus();
    }
    return function() {
    };
  }, [rootRef, autoFocus, disabled]);
  var onErrCb = (0, import_react305.useCallback)(function(e) {
    if (onError2) {
      onError2(e);
    } else {
      console.error(e);
    }
  }, [onError2]);
  var onDragEnterCb = (0, import_react305.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [].concat(_toConsumableArray2(dragTargetsRef.current), [event.target]);
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        var fileCount = files.length;
        var isDragAccept = fileCount > 0 && allFilesAccepted({
          files,
          accept: acceptAttr,
          minSize,
          maxSize,
          multiple,
          maxFiles,
          validator
        });
        var isDragReject = fileCount > 0 && !isDragAccept;
        dispatch({
          isDragAccept,
          isDragReject,
          isDragActive: true,
          type: "setDraggedFiles"
        });
        if (onDragEnter) {
          onDragEnter(event);
        }
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
  }, [getFilesFromEvent, onDragEnter, onErrCb, noDragEventsBubbling, acceptAttr, minSize, maxSize, multiple, maxFiles, validator]);
  var onDragOverCb = (0, import_react305.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var hasFiles = isEvtWithFiles(event);
    if (hasFiles && event.dataTransfer) {
      try {
        event.dataTransfer.dropEffect = "copy";
      } catch (_unused) {
      }
    }
    if (hasFiles && onDragOver) {
      onDragOver(event);
    }
    return false;
  }, [onDragOver, noDragEventsBubbling]);
  var onDragLeaveCb = (0, import_react305.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var targets = dragTargetsRef.current.filter(function(target) {
      return rootRef.current && rootRef.current.contains(target);
    });
    var targetIdx = targets.indexOf(event.target);
    if (targetIdx !== -1) {
      targets.splice(targetIdx, 1);
    }
    dragTargetsRef.current = targets;
    if (targets.length > 0) {
      return;
    }
    dispatch({
      type: "setDraggedFiles",
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false
    });
    if (isEvtWithFiles(event) && onDragLeave) {
      onDragLeave(event);
    }
  }, [rootRef, onDragLeave, noDragEventsBubbling]);
  var setFiles = (0, import_react305.useCallback)(function(files, event) {
    var acceptedFiles = [];
    var fileRejections = [];
    files.forEach(function(file) {
      var _fileAccepted = fileAccepted(file, acceptAttr), _fileAccepted2 = _slicedToArray2(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];
      var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray2(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];
      var customErrors = validator ? validator(file) : null;
      if (accepted && sizeMatch && !customErrors) {
        acceptedFiles.push(file);
      } else {
        var errors = [acceptError, sizeError];
        if (customErrors) {
          errors = errors.concat(customErrors);
        }
        fileRejections.push({
          file,
          errors: errors.filter(function(e) {
            return e;
          })
        });
      }
    });
    if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
      acceptedFiles.forEach(function(file) {
        fileRejections.push({
          file,
          errors: [TOO_MANY_FILES_REJECTION]
        });
      });
      acceptedFiles.splice(0);
    }
    dispatch({
      acceptedFiles,
      fileRejections,
      isDragReject: fileRejections.length > 0,
      type: "setFiles"
    });
    if (onDrop) {
      onDrop(acceptedFiles, fileRejections, event);
    }
    if (fileRejections.length > 0 && onDropRejected) {
      onDropRejected(fileRejections, event);
    }
    if (acceptedFiles.length > 0 && onDropAccepted) {
      onDropAccepted(acceptedFiles, event);
    }
  }, [dispatch, multiple, acceptAttr, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
  var onDropCb = (0, import_react305.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [];
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        setFiles(files, event);
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
    dispatch({
      type: "reset"
    });
  }, [getFilesFromEvent, setFiles, onErrCb, noDragEventsBubbling]);
  var openFileDialog = (0, import_react305.useCallback)(function() {
    if (fsAccessApiWorksRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      var opts = {
        multiple,
        types: pickerTypes
      };
      window.showOpenFilePicker(opts).then(function(handles) {
        return getFilesFromEvent(handles);
      }).then(function(files) {
        setFiles(files, null);
        dispatch({
          type: "closeDialog"
        });
      }).catch(function(e) {
        if (isAbort(e)) {
          onFileDialogCancelCb(e);
          dispatch({
            type: "closeDialog"
          });
        } else if (isSecurityError(e)) {
          fsAccessApiWorksRef.current = false;
          if (inputRef.current) {
            inputRef.current.value = null;
            inputRef.current.click();
          } else {
            onErrCb(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."));
          }
        } else {
          onErrCb(e);
        }
      });
      return;
    }
    if (inputRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      inputRef.current.value = null;
      inputRef.current.click();
    }
  }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, onErrCb, pickerTypes, multiple]);
  var onKeyDownCb = (0, import_react305.useCallback)(function(event) {
    if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
      return;
    }
    if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
      event.preventDefault();
      openFileDialog();
    }
  }, [rootRef, openFileDialog]);
  var onFocusCb = (0, import_react305.useCallback)(function() {
    dispatch({
      type: "focus"
    });
  }, []);
  var onBlurCb = (0, import_react305.useCallback)(function() {
    dispatch({
      type: "blur"
    });
  }, []);
  var onClickCb = (0, import_react305.useCallback)(function() {
    if (noClick) {
      return;
    }
    if (isIeOrEdge()) {
      setTimeout(openFileDialog, 0);
    } else {
      openFileDialog();
    }
  }, [noClick, openFileDialog]);
  var composeHandler = function composeHandler2(fn2) {
    return disabled ? null : fn2;
  };
  var composeKeyboardHandler = function composeKeyboardHandler2(fn2) {
    return noKeyboard ? null : composeHandler(fn2);
  };
  var composeDragHandler = function composeDragHandler2(fn2) {
    return noDrag ? null : composeHandler(fn2);
  };
  var stopPropagation = function stopPropagation2(event) {
    if (noDragEventsBubbling) {
      event.stopPropagation();
    }
  };
  var getRootProps = (0, import_react305.useMemo)(function() {
    return function() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey, role = _ref2.role, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter2 = _ref2.onDragEnter, onDragOver2 = _ref2.onDragOver, onDragLeave2 = _ref2.onDragLeave, onDrop2 = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, _excluded32);
      return _objectSpread2(_objectSpread2(_defineProperty2({
        onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
        onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
        onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
        onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter2, onDragEnterCb)),
        onDragOver: composeDragHandler(composeEventHandlers(onDragOver2, onDragOverCb)),
        onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave2, onDragLeaveCb)),
        onDrop: composeDragHandler(composeEventHandlers(onDrop2, onDropCb)),
        role: typeof role === "string" && role !== "" ? role : "presentation"
      }, refKey, rootRef), !disabled && !noKeyboard ? {
        tabIndex: 0
      } : {}), rest);
    };
  }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
  var onInputElementClick = (0, import_react305.useCallback)(function(event) {
    event.stopPropagation();
  }, []);
  var getInputProps = (0, import_react305.useMemo)(function() {
    return function() {
      var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, _excluded4);
      var inputProps = _defineProperty2({
        accept: acceptAttr,
        multiple,
        type: "file",
        style: {
          border: 0,
          clip: "rect(0, 0, 0, 0)",
          clipPath: "inset(50%)",
          height: "1px",
          margin: "0 -1px -1px 0",
          overflow: "hidden",
          padding: 0,
          position: "absolute",
          width: "1px",
          whiteSpace: "nowrap"
        },
        onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
        tabIndex: -1
      }, refKey, inputRef);
      return _objectSpread2(_objectSpread2({}, inputProps), rest);
    };
  }, [inputRef, accept, multiple, onDropCb, disabled]);
  return _objectSpread2(_objectSpread2({}, state), {}, {
    isFocused: isFocused && !disabled,
    getRootProps,
    getInputProps,
    rootRef,
    inputRef,
    open: composeHandler(openFileDialog)
  });
}
function reducer(state, action) {
  switch (action.type) {
    case "focus":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFocused: true
      });
    case "blur":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFocused: false
      });
    case "openDialog":
      return _objectSpread2(_objectSpread2({}, initialState), {}, {
        isFileDialogActive: true
      });
    case "closeDialog":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFileDialogActive: false
      });
    case "setDraggedFiles":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isDragActive: action.isDragActive,
        isDragAccept: action.isDragAccept,
        isDragReject: action.isDragReject
      });
    case "setFiles":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        acceptedFiles: action.acceptedFiles,
        fileRejections: action.fileRejections,
        isDragReject: action.isDragReject
      });
    case "reset":
      return _objectSpread2({}, initialState);
    default:
      return state;
  }
}
function noop8() {
}

// node_modules/stream-chat-react/dist/components/MessageInput/WithDragAndDropUpload.js
var DragAndDropUploadContext = import_react306.default.createContext({
  subscribeToDrop: null
});
var useDragAndDropUploadContext = () => (0, import_react306.useContext)(DragAndDropUploadContext);
var useRegisterDropHandlers = () => {
  const { subscribeToDrop } = useDragAndDropUploadContext();
  const messageComposer = useMessageComposer();
  (0, import_react306.useEffect)(() => {
    const unsubscribe = subscribeToDrop == null ? void 0 : subscribeToDrop(messageComposer.attachmentManager.uploadFiles);
    return unsubscribe;
  }, [subscribeToDrop, messageComposer]);
};
var attachmentManagerConfigStateSelector = (state) => ({
  acceptedFiles: state.attachments.acceptedFiles,
  multipleUploads: state.attachments.maxNumberOfFilesPerMessage > 1
});
var WithDragAndDropUpload = ({ children, className, component: Component2 = "div", style }) => {
  const dropHandlersRef = (0, import_react306.useRef)(/* @__PURE__ */ new Set());
  const { t: t2 } = useTranslationContext();
  const messageInputContext = useMessageInputContext();
  const dragAndDropUploadContext = useDragAndDropUploadContext();
  const messageComposer = useMessageComposer();
  const { isUploadEnabled } = useAttachmentManagerState();
  const { acceptedFiles, multipleUploads } = useStateStore(messageComposer.configState, attachmentManagerConfigStateSelector);
  const isWithinMessageInputContext = Object.keys(messageInputContext).length > 0;
  const accept = (0, import_react306.useMemo)(() => acceptedFiles.reduce((mediaTypeMap, mediaType) => {
    mediaTypeMap[mediaType] ?? (mediaTypeMap[mediaType] = []);
    return mediaTypeMap;
  }, {}), [acceptedFiles]);
  const subscribeToDrop = (0, import_react306.useCallback)((fn2) => {
    dropHandlersRef.current.add(fn2);
    return () => {
      dropHandlersRef.current.delete(fn2);
    };
  }, []);
  const handleDrop = (0, import_react306.useCallback)((files) => {
    dropHandlersRef.current.forEach((fn2) => fn2(files));
  }, []);
  const { getRootProps, isDragActive, isDragReject } = useDropzone({
    accept,
    // apply `disabled` rules if available, otherwise allow anything and
    // let the `uploadNewFiles` handle the limitations internally
    disabled: isWithinMessageInputContext ? !isUploadEnabled || (messageInputContext.cooldownRemaining ?? 0) > 0 : false,
    multiple: multipleUploads,
    noClick: true,
    onDrop: isWithinMessageInputContext ? messageComposer.attachmentManager.uploadFiles : handleDrop
  });
  if (dragAndDropUploadContext.subscribeToDrop !== null) {
    return import_react306.default.createElement(Component2, { className }, children);
  }
  return import_react306.default.createElement(
    DragAndDropUploadContext.Provider,
    { value: {
      subscribeToDrop
    } },
    import_react306.default.createElement(
      Component2,
      { ...getRootProps({ className, style }) },
      isDragActive && import_react306.default.createElement(
        "div",
        { className: clsx_default("str-chat__dropzone-container", {
          "str-chat__dropzone-container--not-accepted": isDragReject
        }) },
        !isDragReject && import_react306.default.createElement("p", null, t2("Drag your files here")),
        isDragReject && import_react306.default.createElement("p", null, t2("Some of the files will not be accepted"))
      ),
      children
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInputFlat.js
var MessageInputFlat = () => {
  const { message } = useMessageContext();
  const { asyncMessagesMultiSendEnabled, cooldownRemaining, handleSubmit, hideSendButton, recordingController, setCooldownRemaining } = useMessageInputContext("MessageInputFlat");
  const { AttachmentPreviewList: AttachmentPreviewList2 = AttachmentPreviewList, AttachmentSelector: AttachmentSelector2 = message ? SimpleAttachmentSelector : AttachmentSelector, AudioRecorder: AudioRecorder2 = AudioRecorder, CooldownTimer: CooldownTimer2 = CooldownTimer, EmojiPicker, LinkPreviewList: LinkPreviewList2 = LinkPreviewList, QuotedMessagePreview: QuotedMessagePreview2 = QuotedMessagePreview, RecordingPermissionDeniedNotification: RecordingPermissionDeniedNotification2 = RecordingPermissionDeniedNotification, SendButton: SendButton2 = SendButton, SendToChannelCheckbox: SendToChannelCheckbox2 = SendToChannelCheckbox, StartRecordingAudioButton: StartRecordingAudioButton2 = StartRecordingAudioButton, StopAIGenerationButton: StopAIGenerationButtonOverride, TextareaComposer: TextareaComposer2 = TextareaComposer } = useComponentContext();
  const { channel } = useChatContext("MessageInputFlat");
  const { aiState } = useAIState(channel);
  const stopGenerating = (0, import_react307.useCallback)(() => channel == null ? void 0 : channel.stopAIResponse(), [channel]);
  const [showRecordingPermissionDeniedNotification, setShowRecordingPermissionDeniedNotification] = (0, import_react307.useState)(false);
  const closePermissionDeniedNotification = (0, import_react307.useCallback)(() => {
    setShowRecordingPermissionDeniedNotification(false);
  }, []);
  const { attachments } = useAttachmentManagerState();
  if (recordingController.recordingState)
    return import_react307.default.createElement(AudioRecorder2, null);
  const recordingEnabled = !!(recordingController.recorder && navigator.mediaDevices);
  const isRecording = !!recordingController.recordingState;
  const StopAIGenerationButton2 = StopAIGenerationButtonOverride === void 0 ? StopAIGenerationButton : StopAIGenerationButtonOverride;
  const shouldDisplayStopAIGeneration = [AIStates.Thinking, AIStates.Generating].includes(aiState) && !!StopAIGenerationButton2;
  return import_react307.default.createElement(
    WithDragAndDropUpload,
    { className: "str-chat__message-input", component: "div" },
    recordingEnabled && recordingController.permissionState === "denied" && showRecordingPermissionDeniedNotification && import_react307.default.createElement(RecordingPermissionDeniedNotification2, { onClose: closePermissionDeniedNotification, permissionName: RecordingPermission.MIC }),
    import_react307.default.createElement(LinkPreviewList2, null),
    import_react307.default.createElement(QuotedMessagePreviewHeader, null),
    import_react307.default.createElement(
      "div",
      { className: "str-chat__message-input-inner" },
      import_react307.default.createElement(AttachmentSelector2, null),
      import_react307.default.createElement(
        "div",
        { className: "str-chat__message-textarea-container" },
        import_react307.default.createElement(QuotedMessagePreview2, null),
        import_react307.default.createElement(AttachmentPreviewList2, null),
        import_react307.default.createElement(
          "div",
          { className: "str-chat__message-textarea-with-emoji-picker" },
          import_react307.default.createElement(TextareaComposer2, null),
          EmojiPicker && import_react307.default.createElement(EmojiPicker, null)
        )
      ),
      shouldDisplayStopAIGeneration ? import_react307.default.createElement(StopAIGenerationButton2, { onClick: stopGenerating }) : !hideSendButton && import_react307.default.createElement(import_react307.default.Fragment, null, cooldownRemaining ? import_react307.default.createElement(CooldownTimer2, { cooldownInterval: cooldownRemaining, setCooldownRemaining }) : import_react307.default.createElement(
        import_react307.default.Fragment,
        null,
        import_react307.default.createElement(SendButton2, { sendMessage: handleSubmit }),
        recordingEnabled && import_react307.default.createElement(StartRecordingAudioButton2, { disabled: isRecording || !asyncMessagesMultiSendEnabled && attachments.some((a2) => a2.type === RecordingAttachmentType.VOICE_RECORDING), onClick: () => {
          var _a;
          (_a = recordingController.recorder) == null ? void 0 : _a.start();
          setShowRecordingPermissionDeniedNotification(true);
        } })
      ))
    ),
    import_react307.default.createElement(SendToChannelCheckbox2, null)
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCreateMessageInputContext.js
var import_react308 = __toESM(require_react());
var useCreateMessageInputContext = (value) => {
  const { additionalTextareaProps, asyncMessagesMultiSendEnabled, audioRecordingEnabled, clearEditingState, cooldownInterval, cooldownRemaining, emojiSearchIndex, focus, handleSubmit, hideSendButton, isThreadInput, maxRows, minRows, onPaste, parent, recordingController, setCooldownRemaining, shouldSubmit, textareaRef } = value;
  const parentId = parent == null ? void 0 : parent.id;
  const messageInputContext = (0, import_react308.useMemo)(
    () => ({
      additionalTextareaProps,
      asyncMessagesMultiSendEnabled,
      audioRecordingEnabled,
      clearEditingState,
      cooldownInterval,
      cooldownRemaining,
      emojiSearchIndex,
      focus,
      handleSubmit,
      hideSendButton,
      isThreadInput,
      maxRows,
      minRows,
      onPaste,
      parent,
      recordingController,
      setCooldownRemaining,
      shouldSubmit,
      textareaRef
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      asyncMessagesMultiSendEnabled,
      audioRecordingEnabled,
      cooldownInterval,
      cooldownRemaining,
      emojiSearchIndex,
      handleSubmit,
      hideSendButton,
      isThreadInput,
      minRows,
      parentId,
      recordingController
    ]
  );
  return messageInputContext;
};

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInput.js
var MessageInputProvider = (props) => {
  const cooldownTimerState = useCooldownTimer();
  const messageInputUiApi = useMessageInputControls(props);
  const { emojiSearchIndex } = useComponentContext("MessageInput");
  const messageInputContextValue = useCreateMessageInputContext({
    ...cooldownTimerState,
    ...messageInputUiApi,
    ...props,
    emojiSearchIndex: props.emojiSearchIndex ?? emojiSearchIndex
  });
  const messageComposer = useMessageComposer();
  (0, import_react309.useEffect)(() => () => {
    messageComposer.createDraft();
  }, [messageComposer]);
  (0, import_react309.useEffect)(() => {
    const threadId = messageComposer.threadId;
    if (!threadId || !messageComposer.channel || !messageComposer.compositionIsEmpty || !messageComposer.config.drafts.enabled)
      return;
    messageComposer.channel.getDraft({ parent_id: threadId }).then(({ draft }) => {
      if (draft) {
        messageComposer.initState({ composition: draft });
      }
    }).catch(console.error);
  }, [messageComposer]);
  useRegisterDropHandlers();
  return import_react309.default.createElement(MessageInputContextProvider, { value: messageInputContextValue }, props.children);
};
var UnMemoizedMessageInput = (props) => {
  const { Input: PropInput } = props;
  const { Input: ContextInput } = useComponentContext("MessageInput");
  const messageComposer = useMessageComposer();
  const id3 = useStableId();
  const Input = PropInput || ContextInput || MessageInputFlat;
  const dialogManagerId = messageComposer.threadId ? `message-input-dialog-manager-thread-${id3}` : `message-input-dialog-manager-${id3}`;
  return import_react309.default.createElement(
    DialogManagerProvider,
    { id: dialogManagerId },
    import_react309.default.createElement(
      MessageInputProvider,
      { ...props },
      import_react309.default.createElement(Input, null)
    )
  );
};
var MessageInput = import_react309.default.memo(UnMemoizedMessageInput);

// node_modules/stream-chat-react/dist/components/MessageInput/EditMessageForm.js
var EditMessageFormSendButton = () => {
  const { t: t2 } = useTranslationContext();
  const hasSendableData = useMessageComposerHasSendableData();
  return import_react310.default.createElement("button", { className: "str-chat__edit-message-send", "data-testid": "send-button-edit-form", disabled: !hasSendableData, type: "submit" }, t2("Send"));
};
var EditMessageForm = () => {
  const { t: t2 } = useTranslationContext("EditMessageForm");
  const messageComposer = useMessageComposer();
  const { clearEditingState, handleSubmit } = useMessageInputContext("EditMessageForm");
  const cancel = (0, import_react310.useCallback)(() => {
    clearEditingState == null ? void 0 : clearEditingState();
    messageComposer.restore();
  }, [clearEditingState, messageComposer]);
  (0, import_react310.useEffect)(() => {
    const onKeyDown = (event) => {
      if (event.key === "Escape")
        cancel();
    };
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [cancel]);
  return import_react310.default.createElement(
    "form",
    { autoComplete: "off", className: "str-chat__edit-message-form", onSubmit: handleSubmit },
    import_react310.default.createElement(MessageInputFlat, null),
    import_react310.default.createElement(
      "div",
      { className: "str-chat__edit-message-form-options" },
      import_react310.default.createElement("button", { className: "str-chat__edit-message-cancel", "data-testid": "cancel-button", onClick: cancel, type: "button" }, t2("Cancel")),
      import_react310.default.createElement(EditMessageFormSendButton, null)
    )
  );
};
var EditMessageModal = ({ additionalMessageInputProps }) => {
  const { EditMessageInput = EditMessageForm, Modal: Modal2 = Modal } = useComponentContext();
  const { clearEditingState } = useMessageContext();
  const messageComposer = useMessageComposer();
  const onEditModalClose = (0, import_react310.useCallback)(() => {
    clearEditingState();
    messageComposer.restore();
  }, [clearEditingState, messageComposer]);
  return import_react310.default.createElement(
    Modal2,
    { className: "str-chat__edit-message-modal", onClose: onEditModalClose, open: true },
    import_react310.default.createElement(MessageInput, { clearEditingState, focus: true, hideSendButton: true, Input: EditMessageInput, ...additionalMessageInputProps })
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/UploadButton.js
var attachmentManagerConfigStateSelector2 = (state) => ({
  acceptedFiles: state.attachments.acceptedFiles,
  maxNumberOfFilesPerMessage: state.attachments.maxNumberOfFilesPerMessage
});
var UploadButton = (0, import_react311.forwardRef)(function UploadButton2({ onFileChange, resetOnChange = true, ...rest }, ref) {
  const handleInputChange = useHandleFileChangeWrapper(resetOnChange, onFileChange);
  return import_react311.default.createElement("input", { onChange: handleInputChange, ref, type: "file", ...rest });
});
var FileInput = UploadButton;
var UploadFileInput = (0, import_react311.forwardRef)(function UploadFileInput2({ className, onFileChange: onFileChangeCustom, ...props }, ref) {
  const { t: t2 } = useTranslationContext("UploadFileInput");
  const { cooldownRemaining, textareaRef } = useMessageInputContext();
  const messageComposer = useMessageComposer();
  const { attachmentManager } = messageComposer;
  const { isUploadEnabled } = useAttachmentManagerState();
  const { acceptedFiles, maxNumberOfFilesPerMessage } = useStateStore(messageComposer.configState, attachmentManagerConfigStateSelector2);
  const id3 = (0, import_react311.useMemo)(() => nanoid(), []);
  const onFileChange = (0, import_react311.useCallback)((files) => {
    var _a;
    attachmentManager.uploadFiles(files);
    (_a = textareaRef.current) == null ? void 0 : _a.focus();
    onFileChangeCustom == null ? void 0 : onFileChangeCustom(files);
  }, [onFileChangeCustom, attachmentManager, textareaRef]);
  return import_react311.default.createElement(FileInput, { accept: acceptedFiles == null ? void 0 : acceptedFiles.join(","), "aria-label": t2("aria/File upload"), "data-testid": "file-input", disabled: !isUploadEnabled || !!cooldownRemaining, id: id3, multiple: maxNumberOfFilesPerMessage > 1, ...props, className: clsx_default("str-chat__file-input", className), onFileChange, ref });
});

// node_modules/stream-chat-react/dist/components/Attachment/VoiceRecording.js
var rootClassName = "str-chat__message-attachment__voice-recording-widget";
var VoiceRecordingPlayer = ({ attachment, playbackRates }) => {
  const { t: t2 } = useTranslationContext("VoiceRecordingPlayer");
  const { asset_url, duration: duration2 = 0, mime_type, title = t2("Voice message"), waveform_data } = attachment;
  const { audioRef, increasePlaybackRate, isPlaying, playbackRate, progress, secondsElapsed, seek, togglePlay } = useAudioController({
    durationSeconds: duration2 ?? 0,
    mimeType: mime_type,
    playbackRates
  });
  if (!asset_url)
    return null;
  const displayedDuration = secondsElapsed || duration2;
  return import_react312.default.createElement(
    "div",
    { className: rootClassName, "data-testid": "voice-recording-widget" },
    import_react312.default.createElement(
      "audio",
      { ref: audioRef },
      import_react312.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: mime_type })
    ),
    import_react312.default.createElement(PlayButton, { isPlaying, onClick: togglePlay }),
    import_react312.default.createElement(
      "div",
      { className: "str-chat__message-attachment__voice-recording-widget__metadata" },
      import_react312.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__title", "data-testid": "voice-recording-title", title }, title),
      import_react312.default.createElement(
        "div",
        { className: "str-chat__message-attachment__voice-recording-widget__audio-state" },
        import_react312.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__timer" }, attachment.duration ? displayDuration(displayedDuration) : import_react312.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size, maximumFractionDigits: 0 })),
        import_react312.default.createElement(WaveProgressBar, { progress, seek, waveformData: waveform_data || [] })
      )
    ),
    import_react312.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__right-section" }, isPlaying ? import_react312.default.createElement(
      PlaybackRateButton,
      { disabled: !audioRef.current, onClick: increasePlaybackRate },
      playbackRate.toFixed(1),
      "x"
    ) : import_react312.default.createElement(FileIcon, { big: true, mimeType: mime_type, size: 40 }))
  );
};
var QuotedVoiceRecording = ({ attachment }) => {
  const { t: t2 } = useTranslationContext();
  const title = attachment.title || t2("Voice message");
  return import_react312.default.createElement(
    "div",
    { className: rootClassName, "data-testid": "quoted-voice-recording-widget" },
    import_react312.default.createElement(
      "div",
      { className: "str-chat__message-attachment__voice-recording-widget__metadata" },
      title && import_react312.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__title", "data-testid": "voice-recording-title", title }, title),
      import_react312.default.createElement(
        "div",
        { className: "str-chat__message-attachment__voice-recording-widget__audio-state" },
        import_react312.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__timer" }, attachment.duration ? displayDuration(attachment.duration) : import_react312.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size, maximumFractionDigits: 0 }))
      )
    ),
    import_react312.default.createElement(FileIcon, { big: true, mimeType: attachment.mime_type, size: 34 })
  );
};
var VoiceRecording = ({ attachment, isQuoted }) => isQuoted ? import_react312.default.createElement(QuotedVoiceRecording, { attachment }) : import_react312.default.createElement(VoiceRecordingPlayer, { attachment });

// node_modules/stream-chat-react/dist/components/Attachment/Card.js
var import_react313 = __toESM(require_react());
var import_react_player = __toESM(require_lib());
var getHostFromURL = (url) => {
  if (url !== void 0 && url !== null) {
    const [trimmedUrl] = url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, "").split("/");
    return trimmedUrl;
  }
  return null;
};
var UnableToRenderCard = ({ type }) => {
  const { t: t2 } = useTranslationContext("Card");
  return import_react313.default.createElement(
    "div",
    { className: clsx_default("str-chat__message-attachment-card", {
      [`str-chat__message-attachment-card--${type}`]: type
    }) },
    import_react313.default.createElement(
      "div",
      { className: "str-chat__message-attachment-card--content" },
      import_react313.default.createElement("div", { className: "str-chat__message-attachment-card--text" }, t2("this content could not be displayed"))
    )
  );
};
var SourceLink = ({ author_name, url }) => import_react313.default.createElement(
  "div",
  { className: "str-chat__message-attachment-card--source-link", "data-testid": "card-source-link" },
  import_react313.default.createElement(SafeAnchor, { className: "str-chat__message-attachment-card--url", href: url, rel: "noopener noreferrer", target: "_blank" }, author_name || getHostFromURL(url))
);
var CardHeader = (props) => {
  const { asset_url, dimensions, image: image3, image_url, thumb_url, title, type } = props;
  let visual = null;
  if (asset_url && type === "video") {
    visual = import_react313.default.createElement(import_react_player.default, { className: "react-player", controls: true, height: "100%", url: asset_url, width: "100%" });
  } else if (image3) {
    visual = import_react313.default.createElement(ImageComponent, { dimensions, fallback: title || image3, image_url, thumb_url });
  }
  return visual ? import_react313.default.createElement("div", { className: "str-chat__message-attachment-card--header str-chat__message-attachment-card-react--header", "data-testid": "card-header" }, visual) : null;
};
var CardContent = (props) => {
  const { author_name, og_scrape_url, text: text8, title, title_link, type } = props;
  const url = title_link || og_scrape_url;
  return import_react313.default.createElement("div", { className: "str-chat__message-attachment-card--content" }, type === "audio" ? import_react313.default.createElement(CardAudio, { og: props }) : import_react313.default.createElement(
    "div",
    { className: "str-chat__message-attachment-card--flex" },
    url && import_react313.default.createElement(SourceLink, { author_name, url }),
    title && import_react313.default.createElement("div", { className: "str-chat__message-attachment-card--title" }, title),
    text8 && import_react313.default.createElement("div", { className: "str-chat__message-attachment-card--text" }, text8)
  ));
};
var CardAudio = ({ og: { asset_url, author_name, mime_type, og_scrape_url, text: text8, title, title_link } }) => {
  const { audioRef, isPlaying, progress, seek, togglePlay } = useAudioController({
    mimeType: mime_type
  });
  const url = title_link || og_scrape_url;
  const dataTestId = "card-audio-widget";
  const rootClassName2 = "str-chat__message-attachment-card-audio-widget";
  return import_react313.default.createElement(
    "div",
    { className: rootClassName2, "data-testid": dataTestId },
    asset_url && import_react313.default.createElement(
      import_react313.default.Fragment,
      null,
      import_react313.default.createElement(
        "audio",
        { ref: audioRef },
        import_react313.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: "audio/mp3" })
      ),
      import_react313.default.createElement(
        "div",
        { className: "str-chat__message-attachment-card-audio-widget--first-row" },
        import_react313.default.createElement(
          "div",
          { className: "str-chat__message-attachment-audio-widget--play-controls" },
          import_react313.default.createElement(PlayButton, { isPlaying, onClick: togglePlay })
        ),
        import_react313.default.createElement(ProgressBar, { onClick: seek, progress })
      )
    ),
    import_react313.default.createElement(
      "div",
      { className: "str-chat__message-attachment-audio-widget--second-row" },
      url && import_react313.default.createElement(SourceLink, { author_name, url }),
      title && import_react313.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--title" }, title),
      text8 && import_react313.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--description" }, text8)
    )
  );
};
var UnMemoizedCard = (props) => {
  const { asset_url, giphy, image_url, thumb_url, title, title_link, type } = props;
  const { giphyVersion: giphyVersionName } = useChannelStateContext("CardHeader");
  let image3 = thumb_url || image_url;
  const dimensions = {};
  if (type === "giphy" && typeof giphy !== "undefined") {
    const giphyVersion = giphy[giphyVersionName];
    image3 = giphyVersion.url;
    dimensions.height = giphyVersion.height;
    dimensions.width = giphyVersion.width;
  }
  if (!title && !title_link && !asset_url && !image3) {
    return import_react313.default.createElement(UnableToRenderCard, null);
  }
  return import_react313.default.createElement(
    "div",
    { className: `str-chat__message-attachment-card str-chat__message-attachment-card--${type}` },
    import_react313.default.createElement(CardHeader, { ...props, dimensions, image: image3 }),
    import_react313.default.createElement(CardContent, { ...props })
  );
};
var Card = import_react313.default.memo(UnMemoizedCard);

// node_modules/stream-chat-react/dist/components/Attachment/FileAttachment.js
var import_react314 = __toESM(require_react());
var UnMemoizedFileAttachment = ({ attachment }) => import_react314.default.createElement(
  "div",
  { className: "str-chat__message-attachment-file--item", "data-testid": "attachment-file" },
  import_react314.default.createElement(FileIcon, { className: "str-chat__file-icon", mimeType: attachment.mime_type }),
  import_react314.default.createElement(
    "div",
    { className: "str-chat__message-attachment-file--item-text" },
    import_react314.default.createElement(
      "div",
      { className: "str-chat__message-attachment-file--item-first-row" },
      import_react314.default.createElement("div", { className: "str-chat__message-attachment-file--item-name", "data-testid": "file-title" }, attachment.title),
      import_react314.default.createElement(DownloadButton, { assetUrl: attachment.asset_url })
    ),
    import_react314.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size })
  )
);
var FileAttachment = import_react314.default.memo(UnMemoizedFileAttachment);

// node_modules/stream-chat-react/dist/components/Attachment/Geolocation.js
var import_react315 = __toESM(require_react());
var import_react316 = __toESM(require_react());
var import_react317 = __toESM(require_react());
var Geolocation = ({ GeolocationAttachmentMapPlaceholder = DefaultGeolocationAttachmentMapPlaceholder, GeolocationMap, location: location2 }) => {
  const { channel, client } = useChatContext();
  const { t: t2 } = useTranslationContext();
  const [stoppedSharing, setStoppedSharing] = (0, import_react316.useState)(!!location2.end_at && new Date(location2.end_at).getTime() < (/* @__PURE__ */ new Date()).getTime());
  const timeoutRef = (0, import_react316.useRef)(void 0);
  const isMyLocation = location2.user_id === client.userID;
  const isLiveLocation = !!location2.end_at;
  (0, import_react315.useEffect)(() => {
    if (!location2.end_at)
      return;
    clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(() => setStoppedSharing(true), new Date(location2.end_at).getTime() - Date.now());
  }, [location2.end_at]);
  return import_react317.default.createElement(
    "div",
    { className: "str-chat__message-attachment-geolocation", "data-testid": "attachment-geolocation" },
    import_react317.default.createElement("div", { className: "str-chat__message-attachment-geolocation__location-preview" }, GeolocationMap ? import_react317.default.createElement(GeolocationMap, { latitude: location2.latitude, longitude: location2.longitude }) : import_react317.default.createElement(GeolocationAttachmentMapPlaceholder, { location: location2 })),
    import_react317.default.createElement("div", { className: "str-chat__message-attachment-geolocation__status" }, isLiveLocation ? stoppedSharing ? t2("Location sharing ended") : isMyLocation ? import_react317.default.createElement(
      "div",
      { className: "str-chat__message-attachment-geolocation__status--active" },
      import_react317.default.createElement("button", { className: "str-chat__message-attachment-geolocation__stop-sharing-button", onClick: () => channel == null ? void 0 : channel.stopLiveLocationSharing(location2) }, t2("Stop sharing")),
      import_react317.default.createElement("div", { className: "str-chat__message-attachment-geolocation__status--active-until" }, t2("Live until {{ timestamp }}", {
        timestamp: t2("timestamp/LiveLocation", { timestamp: location2.end_at })
      }))
    ) : import_react317.default.createElement(
      "div",
      { className: "str-chat__message-attachment-geolocation__status--active" },
      import_react317.default.createElement("div", { className: "str-chat__message-attachment-geolocation__status--active-status" }, t2("Live location")),
      import_react317.default.createElement("div", { className: "str-chat__message-attachment-geolocation__status--active-until" }, t2("Live until {{ timestamp }}", {
        timestamp: t2("timestamp/LiveLocation", { timestamp: location2.end_at })
      }))
    ) : t2("Current location"))
  );
};
var DefaultGeolocationAttachmentMapPlaceholder = ({ location: location2 }) => import_react317.default.createElement(
  "div",
  { className: "str-chat__message-attachment-geolocation__placeholder", "data-testid": "geolocation-attachment-map-placeholder" },
  import_react317.default.createElement(GeolocationIcon, null),
  import_react317.default.createElement(
    "a",
    { className: "str-chat__message-attachment-geolocation__placeholder-link", href: `https://maps.google.com?q=${[location2.latitude, location2.longitude].join()}`, rel: "noreferrer", target: "_blank" },
    import_react317.default.createElement(ExternalLinkIcon, null)
  )
);

// node_modules/stream-chat-react/dist/components/Attachment/UnsupportedAttachment.js
var import_react318 = __toESM(require_react());
var UnsupportedAttachment = ({ attachment }) => {
  const { t: t2 } = useTranslationContext("UnsupportedAttachment");
  return import_react318.default.createElement(
    "div",
    { className: "str-chat__message-attachment-unsupported", "data-testid": "attachment-unsupported" },
    import_react318.default.createElement(FileIcon, { className: "str-chat__file-icon" }),
    import_react318.default.createElement(
      "div",
      { className: "str-chat__message-attachment-unsupported__metadata" },
      import_react318.default.createElement("div", { className: "str-chat__message-attachment-unsupported__title", "data-testid": "unsupported-attachment-title" }, attachment.title || t2("Unsupported attachment"))
    )
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentContainer.js
var AttachmentWithinContainer = ({ attachment, children, componentType }) => {
  var _a;
  const isGAT = isGalleryAttachmentType(attachment);
  let extra = "";
  if (!isGAT && !isSharedLocationResponse(attachment)) {
    extra = componentType === "card" && !(attachment == null ? void 0 : attachment.image_url) && !(attachment == null ? void 0 : attachment.thumb_url) ? "no-image" : ((_a = attachment == null ? void 0 : attachment.actions) == null ? void 0 : _a.length) ? "actions" : "";
  }
  const classNames = clsx_default("str-chat__message-attachment str-chat__message-attachment-dynamic-size", {
    [`str-chat__message-attachment--${componentType}`]: componentType,
    [`str-chat__message-attachment--${attachment == null ? void 0 : attachment.type}`]: attachment == null ? void 0 : attachment.type,
    [`str-chat__message-attachment--${componentType}--${extra}`]: componentType && extra,
    "str-chat__message-attachment--svg-image": isSvgAttachment(attachment),
    "str-chat__message-attachment-with-actions": extra === "actions"
  });
  return import_react319.default.createElement("div", { className: classNames }, children);
};
var AttachmentActionsContainer = ({ actionHandler, attachment, AttachmentActions: AttachmentActions2 = AttachmentActions }) => {
  var _a, _b;
  if (!((_a = attachment.actions) == null ? void 0 : _a.length))
    return null;
  return import_react319.default.createElement(AttachmentActions2, { ...attachment, actionHandler, actions: attachment.actions, id: ((_b = attachment.localMetadata) == null ? void 0 : _b.id) || "", text: attachment.text || "" });
};
function getCssDimensionsVariables(url) {
  const cssVars = {
    "--original-height": 1e6,
    "--original-width": 1e6
  };
  if (test(url, "url")) {
    const urlParams = new URL(url).searchParams;
    const oh = Number(urlParams.get("oh"));
    const ow = Number(urlParams.get("ow"));
    const originalHeight = oh > 1 ? oh : 1e6;
    const originalWidth = ow > 1 ? ow : 1e6;
    cssVars["--original-width"] = originalWidth;
    cssVars["--original-height"] = originalHeight;
  }
  return cssVars;
}
var GalleryContainer = ({ attachment, Gallery: Gallery2 = Gallery }) => {
  const imageElements = (0, import_react319.useRef)([]);
  const { imageAttachmentSizeHandler } = useChannelStateContext();
  const [attachmentConfigurations, setAttachmentConfigurations] = (0, import_react319.useState)([]);
  (0, import_react319.useLayoutEffect)(() => {
    if (!imageElements.current || !imageAttachmentSizeHandler)
      return;
    const newConfigurations = [];
    const nonNullImageElements = imageElements.current.filter((e) => !!e);
    if (nonNullImageElements.length < imageElements.current.length) {
      imageElements.current = nonNullImageElements;
    }
    imageElements.current.forEach((element4, i2) => {
      if (!element4)
        return;
      const config = imageAttachmentSizeHandler(attachment.images[i2], element4);
      newConfigurations.push(config);
    });
    setAttachmentConfigurations(newConfigurations);
  }, [imageAttachmentSizeHandler, attachment]);
  const images = attachment.images.map((image3, i2) => {
    var _a, _b, _c;
    return {
      ...image3,
      previewUrl: ((_a = attachmentConfigurations[i2]) == null ? void 0 : _a.url) || "about:blank",
      style: getCssDimensionsVariables(((_b = attachment.images[i2]) == null ? void 0 : _b.image_url) || ((_c = attachment.images[i2]) == null ? void 0 : _c.thumb_url) || "")
    };
  });
  return import_react319.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType: "gallery" },
    import_react319.default.createElement(Gallery2, { images: images || [], innerRefs: imageElements, key: "gallery" })
  );
};
var ImageContainer = (props) => {
  const { attachment, Image: Image2 = ImageComponent } = props;
  const componentType = "image";
  const imageElement = (0, import_react319.useRef)(null);
  const { imageAttachmentSizeHandler } = useChannelStateContext();
  const [attachmentConfiguration, setAttachmentConfiguration] = (0, import_react319.useState)(void 0);
  (0, import_react319.useLayoutEffect)(() => {
    if (imageElement.current && imageAttachmentSizeHandler) {
      const config = imageAttachmentSizeHandler(attachment, imageElement.current);
      setAttachmentConfiguration(config);
    }
  }, [imageElement, imageAttachmentSizeHandler, attachment]);
  const imageConfig = {
    ...attachment,
    previewUrl: (attachmentConfiguration == null ? void 0 : attachmentConfiguration.url) || "about:blank",
    style: getCssDimensionsVariables(attachment.image_url || attachment.thumb_url || "")
  };
  if (attachment.actions && attachment.actions.length) {
    return import_react319.default.createElement(
      AttachmentWithinContainer,
      { attachment, componentType },
      import_react319.default.createElement(
        "div",
        { className: "str-chat__attachment" },
        import_react319.default.createElement(Image2, { ...imageConfig, innerRef: imageElement }),
        import_react319.default.createElement(AttachmentActionsContainer, { ...props })
      )
    );
  }
  return import_react319.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType },
    import_react319.default.createElement(Image2, { ...imageConfig, innerRef: imageElement })
  );
};
var CardContainer = (props) => {
  const { attachment, Card: Card2 = Card } = props;
  const componentType = "card";
  if (attachment.actions && attachment.actions.length) {
    return import_react319.default.createElement(
      AttachmentWithinContainer,
      { attachment, componentType },
      import_react319.default.createElement(
        "div",
        { className: "str-chat__attachment" },
        import_react319.default.createElement(Card2, { ...attachment }),
        import_react319.default.createElement(AttachmentActionsContainer, { ...props })
      )
    );
  }
  return import_react319.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType },
    import_react319.default.createElement(Card2, { ...attachment })
  );
};
var FileContainer = ({ attachment, File: File2 = FileAttachment }) => {
  if (!attachment.asset_url)
    return null;
  return import_react319.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType: "file" },
    import_react319.default.createElement(File2, { attachment })
  );
};
var AudioContainer = ({ attachment, Audio: Audio2 = Audio }) => import_react319.default.createElement(
  AttachmentWithinContainer,
  { attachment, componentType: "audio" },
  import_react319.default.createElement(
    "div",
    { className: "str-chat__attachment" },
    import_react319.default.createElement(Audio2, { og: attachment })
  )
);
var VoiceRecordingContainer = ({ attachment, isQuoted, VoiceRecording: VoiceRecording2 = VoiceRecording }) => import_react319.default.createElement(
  AttachmentWithinContainer,
  { attachment, componentType: "voiceRecording" },
  import_react319.default.createElement(
    "div",
    { className: "str-chat__attachment" },
    import_react319.default.createElement(VoiceRecording2, { attachment, isQuoted })
  )
);
var MediaContainer = (props) => {
  var _a;
  const { attachment, Media = import_react_player2.default } = props;
  const componentType = "media";
  const { shouldGenerateVideoThumbnail, videoAttachmentSizeHandler } = useChannelStateContext();
  const videoElement = (0, import_react319.useRef)(null);
  const [attachmentConfiguration, setAttachmentConfiguration] = (0, import_react319.useState)();
  (0, import_react319.useLayoutEffect)(() => {
    if (videoElement.current && videoAttachmentSizeHandler) {
      const config = videoAttachmentSizeHandler(attachment, videoElement.current, shouldGenerateVideoThumbnail);
      setAttachmentConfiguration(config);
    }
  }, [videoElement, videoAttachmentSizeHandler, attachment]);
  const content3 = import_react319.default.createElement(
    "div",
    { className: "str-chat__player-wrapper", "data-testid": "video-wrapper", ref: videoElement, style: getCssDimensionsVariables(attachment.thumb_url || "") },
    import_react319.default.createElement(Media, { className: "react-player", config: { file: { attributes: { poster: attachmentConfiguration == null ? void 0 : attachmentConfiguration.thumbUrl } } }, controls: true, height: "100%", url: attachmentConfiguration == null ? void 0 : attachmentConfiguration.url, width: "100%" })
  );
  return ((_a = attachment.actions) == null ? void 0 : _a.length) ? import_react319.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType },
    import_react319.default.createElement(
      "div",
      { className: "str-chat__attachment" },
      content3,
      import_react319.default.createElement(AttachmentActionsContainer, { ...props })
    )
  ) : import_react319.default.createElement(AttachmentWithinContainer, { attachment, componentType }, content3);
};
var GeolocationContainer = ({ Geolocation: Geolocation2 = Geolocation, location: location2 }) => import_react319.default.createElement(
  AttachmentWithinContainer,
  { attachment: location2, componentType: "geolocation" },
  import_react319.default.createElement(Geolocation2, { location: location2 })
);
var UnsupportedAttachmentContainer = ({ attachment, UnsupportedAttachment: UnsupportedAttachment2 = UnsupportedAttachment }) => import_react319.default.createElement(
  import_react319.default.Fragment,
  null,
  import_react319.default.createElement(UnsupportedAttachment2, { attachment })
);

// node_modules/stream-chat-react/dist/components/Attachment/Attachment.js
var CONTAINER_MAP = {
  audio: AudioContainer,
  card: CardContainer,
  file: FileContainer,
  media: MediaContainer,
  unsupported: UnsupportedAttachmentContainer,
  voiceRecording: VoiceRecordingContainer
};
var ATTACHMENT_GROUPS_ORDER = [
  "card",
  "gallery",
  "image",
  "media",
  "audio",
  "voiceRecording",
  "file",
  "geolocation",
  "unsupported"
];
var Attachment = (props) => {
  const { attachments } = props;
  const groupedAttachments = (0, import_react320.useMemo)(
    () => renderGroupedAttachments(props),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [attachments]
  );
  return import_react320.default.createElement("div", { className: "str-chat__attachment-list" }, ATTACHMENT_GROUPS_ORDER.reduce((acc, groupName) => [...acc, ...groupedAttachments[groupName]], []));
};
var renderGroupedAttachments = ({ attachments, ...rest }) => {
  const uploadedImages = attachments.filter((attachment) => isImageAttachment(attachment));
  const containers = attachments.filter((attachment) => !isImageAttachment(attachment)).reduce((typeMap, attachment) => {
    if (isSharedLocationResponse(attachment)) {
      typeMap.geolocation.push(import_react320.default.createElement(GeolocationContainer, { ...rest, key: "geolocation-container", location: attachment }));
    } else {
      const attachmentType = getAttachmentType(attachment);
      const Container = CONTAINER_MAP[attachmentType];
      typeMap[attachmentType].push(import_react320.default.createElement(Container, { key: `${attachmentType}-${typeMap[attachmentType].length}`, ...rest, attachment }));
    }
    return typeMap;
  }, {
    audio: [],
    card: [],
    file: [],
    media: [],
    unsupported: [],
    // not used in reduce
    // eslint-disable-next-line sort-keys
    image: [],
    // eslint-disable-next-line sort-keys
    gallery: [],
    geolocation: [],
    voiceRecording: []
  });
  if (uploadedImages.length > 1) {
    containers["gallery"] = [
      import_react320.default.createElement(GalleryContainer, { key: "gallery-container", ...rest, attachment: {
        images: uploadedImages,
        type: "gallery"
      } })
    ];
  } else if (uploadedImages.length === 1) {
    containers["image"] = [
      import_react320.default.createElement(ImageContainer, { key: "image-container", ...rest, attachment: uploadedImages[0] })
    ];
  }
  return containers;
};
var getAttachmentType = (attachment) => {
  if (isScrapedContent(attachment)) {
    return "card";
  } else if (isVideoAttachment(attachment, SUPPORTED_VIDEO_FORMATS)) {
    return "media";
  } else if (isAudioAttachment(attachment)) {
    return "audio";
  } else if (isVoiceRecordingAttachment(attachment)) {
    return "voiceRecording";
  } else if (isFileAttachment(attachment, SUPPORTED_VIDEO_FORMATS)) {
    return "file";
  }
  return "unsupported";
};

// node_modules/stream-chat-react/dist/components/Location/hooks/useLiveLocationSharingManager.js
var import_react321 = __toESM(require_react());
var isMobile = () => /Mobi/i.test(navigator.userAgent);
var isSafari = () => {
  if (typeof navigator === "undefined")
    return false;
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || "");
};
var isFirefox = () => {
  var _a;
  if (typeof navigator === "undefined")
    return false;
  return (_a = navigator.userAgent) == null ? void 0 : _a.includes("Firefox");
};
var isChrome = () => {
  var _a;
  if (typeof navigator === "undefined")
    return false;
  return (_a = navigator.userAgent) == null ? void 0 : _a.includes("Chrome");
};
var browser = () => {
  if (isChrome())
    return "chrome";
  if (isFirefox())
    return "firefox";
  if (isSafari())
    return "safari";
  return "other";
};
var useLiveLocationSharingManager = ({ client, getDeviceId, watchLocation }) => {
  const manager = (0, import_react321.useMemo)(() => {
    if (!client)
      return null;
    return new LiveLocationManager({
      client,
      getDeviceId: getDeviceId ?? (() => `web-${isMobile() ? "mobile" : "desktop"}-${browser()}-${client.userID}`),
      watchLocation
    });
  }, [client, getDeviceId, watchLocation]);
  (0, import_react321.useEffect)(() => {
    if (!manager)
      return;
    manager.init();
    return () => {
      manager.unregisterSubscriptions();
    };
  }, [manager]);
  return manager;
};

// node_modules/stream-chat-react/dist/components/Channel/Channel.js
var import_react327 = __toESM(require_react());
var import_lodash18 = __toESM(require_lodash3());
var import_lodash19 = __toESM(require_lodash5());
var import_lodash20 = __toESM(require_lodash());

// node_modules/stream-chat-react/dist/components/Channel/channelState.js
var makeChannelReducer = () => (state, action) => {
  var _a;
  switch (action.type) {
    case "closeThread": {
      return {
        ...state,
        thread: null,
        threadLoadingMore: false,
        threadMessages: []
      };
    }
    case "copyMessagesFromChannel": {
      const { channel, parentId } = action;
      return {
        ...state,
        messages: [...channel.state.messages],
        pinnedMessages: [...channel.state.pinnedMessages],
        // copying messages from channel happens with new message - this resets the suppressAutoscroll
        suppressAutoscroll: false,
        threadMessages: parentId ? { ...channel.state.threads }[parentId] || [] : state.threadMessages
      };
    }
    case "copyStateFromChannelOnEvent": {
      const { channel } = action;
      return {
        ...state,
        members: { ...channel.state.members },
        messages: [...channel.state.messages],
        pinnedMessages: [...channel.state.pinnedMessages],
        read: { ...channel.state.read },
        watcherCount: channel.state.watcher_count,
        watchers: { ...channel.state.watchers }
      };
    }
    case "initStateFromChannel": {
      const { channel, hasMore } = action;
      return {
        ...state,
        hasMore,
        loading: false,
        members: { ...channel.state.members },
        messages: [...channel.state.messages],
        pinnedMessages: [...channel.state.pinnedMessages],
        read: { ...channel.state.read },
        watcherCount: channel.state.watcher_count,
        watchers: { ...channel.state.watchers }
      };
    }
    case "jumpToLatestMessage": {
      return {
        ...state,
        hasMoreNewer: false,
        highlightedMessageId: void 0,
        loading: false,
        suppressAutoscroll: false
      };
    }
    case "jumpToMessageFinished": {
      return {
        ...state,
        hasMoreNewer: action.channel.state.messagePagination.hasNext,
        highlightedMessageId: action.highlightedMessageId,
        messages: action.channel.state.messages
      };
    }
    case "clearHighlightedMessage": {
      return {
        ...state,
        highlightedMessageId: void 0
      };
    }
    case "loadMoreFinished": {
      const { hasMore, messages } = action;
      return {
        ...state,
        hasMore,
        loadingMore: false,
        messages,
        suppressAutoscroll: false
      };
    }
    case "loadMoreNewerFinished": {
      const { hasMoreNewer, messages } = action;
      return {
        ...state,
        hasMoreNewer,
        loadingMoreNewer: false,
        messages
      };
    }
    case "loadMoreThreadFinished": {
      const { threadHasMore, threadMessages } = action;
      return {
        ...state,
        threadHasMore,
        threadLoadingMore: false,
        threadMessages
      };
    }
    case "openThread": {
      const { channel, message } = action;
      return {
        ...state,
        thread: message,
        threadHasMore: true,
        threadMessages: message.id ? { ...channel.state.threads }[message.id] || [] : [],
        threadSuppressAutoscroll: false
      };
    }
    case "setError": {
      const { error } = action;
      return { ...state, error };
    }
    case "setLoadingMore": {
      const { loadingMore } = action;
      return { ...state, loadingMore, suppressAutoscroll: loadingMore };
    }
    case "setLoadingMoreNewer": {
      const { loadingMoreNewer } = action;
      return { ...state, loadingMoreNewer };
    }
    case "setThread": {
      const { message } = action;
      return { ...state, thread: message };
    }
    case "setTyping": {
      const { channel } = action;
      return {
        ...state,
        typing: { ...channel.state.typing }
      };
    }
    case "startLoadingThread": {
      return {
        ...state,
        threadLoadingMore: true,
        threadSuppressAutoscroll: true
      };
    }
    case "updateThreadOnEvent": {
      const { channel, message } = action;
      if (!state.thread)
        return state;
      return {
        ...state,
        thread: (message == null ? void 0 : message.id) === state.thread.id ? channel.state.formatMessage(message) : state.thread,
        threadMessages: ((_a = state.thread) == null ? void 0 : _a.id) ? { ...channel.state.threads }[state.thread.id] || [] : []
      };
    }
    default:
      return state;
  }
};
var initialState2 = {
  error: null,
  hasMore: true,
  hasMoreNewer: false,
  loading: true,
  loadingMore: false,
  members: {},
  messages: [],
  pinnedMessages: [],
  read: {},
  suppressAutoscroll: false,
  thread: null,
  threadHasMore: true,
  threadLoadingMore: false,
  threadMessages: [],
  threadSuppressAutoscroll: false,
  typing: {},
  watcherCount: 0,
  watchers: {}
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useCreateChannelStateContext.js
var import_react322 = __toESM(require_react());
var useCreateChannelStateContext = (value) => {
  var _a, _b;
  const { channel, channelCapabilitiesArray = [], channelConfig, channelUnreadUiState, error, giphyVersion, hasMore, hasMoreNewer, highlightedMessageId, imageAttachmentSizeHandler, loading, loadingMore, members, messages = [], mutes, notifications, pinnedMessages, read: read2 = {}, shouldGenerateVideoThumbnail, skipMessageDataMemoization, suppressAutoscroll, thread, threadHasMore, threadLoadingMore, threadMessages = [], videoAttachmentSizeHandler, watcher_count, watcherCount, watchers } = value;
  const channelId = channel.cid;
  const lastRead = channel.initialized && ((_a = channel.lastRead()) == null ? void 0 : _a.getTime());
  const membersLength = Object.keys(members || []).length;
  const notificationsLength = notifications.length;
  const readUsers = Object.values(read2);
  const readUsersLength = readUsers.length;
  const readUsersLastReads = readUsers.map(({ last_read }) => last_read.toISOString()).join();
  const threadMessagesLength = threadMessages == null ? void 0 : threadMessages.length;
  const channelCapabilities = {};
  channelCapabilitiesArray.forEach((capability) => {
    channelCapabilities[capability] = true;
  });
  const memoizedMessageData = skipMessageDataMemoization ? messages : messages.map(({ deleted_at, latest_reactions, pinned, reply_count, status, updated_at, user }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({ type }) => type).join() : ""}${pinned}${reply_count}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || ""}${user == null ? void 0 : user.updated_at}`).join();
  const memoizedThreadMessageData = threadMessages.map(({ deleted_at, latest_reactions, pinned, status, updated_at, user }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({ type }) => type).join() : ""}${pinned}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || ""}${user == null ? void 0 : user.updated_at}`).join();
  const channelStateContext = (0, import_react322.useMemo)(
    () => ({
      channel,
      channelCapabilities,
      channelConfig,
      channelUnreadUiState,
      error,
      giphyVersion,
      hasMore,
      hasMoreNewer,
      highlightedMessageId,
      imageAttachmentSizeHandler,
      loading,
      loadingMore,
      members,
      messages,
      mutes,
      notifications,
      pinnedMessages,
      read: read2,
      shouldGenerateVideoThumbnail,
      suppressAutoscroll,
      thread,
      threadHasMore,
      threadLoadingMore,
      threadMessages,
      videoAttachmentSizeHandler,
      watcher_count,
      watcherCount,
      watchers
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      (_b = channel.data) == null ? void 0 : _b.name,
      // otherwise ChannelHeader will not be updated
      channelId,
      channelUnreadUiState,
      error,
      hasMore,
      hasMoreNewer,
      highlightedMessageId,
      lastRead,
      loading,
      loadingMore,
      membersLength,
      memoizedMessageData,
      memoizedThreadMessageData,
      notificationsLength,
      readUsersLength,
      readUsersLastReads,
      shouldGenerateVideoThumbnail,
      skipMessageDataMemoization,
      suppressAutoscroll,
      thread,
      threadHasMore,
      threadLoadingMore,
      threadMessagesLength,
      watcherCount
    ]
  );
  return channelStateContext;
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useCreateTypingContext.js
var import_react323 = __toESM(require_react());
var useCreateTypingContext = (value) => {
  const { typing } = value;
  const typingValue = Object.keys(typing || {}).join();
  const typingContext = (0, import_react323.useMemo)(
    () => ({
      typing
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [typingValue]
  );
  return typingContext;
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useEditMessageHandler.js
var useEditMessageHandler = (doUpdateMessageRequest) => {
  const { channel, client } = useChatContext("useEditMessageHandler");
  return (updatedMessage, options2) => {
    if (doUpdateMessageRequest && channel) {
      return Promise.resolve(doUpdateMessageRequest(channel.cid, updatedMessage, options2));
    }
    return client.updateMessage(updatedMessage, void 0, options2);
  };
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useIsMounted.js
var import_react324 = __toESM(require_react());
var useIsMounted = () => {
  const isMounted = (0, import_react324.useRef)(false);
  (0, import_react324.useEffect)(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useMentionsHandlers.js
var import_react325 = __toESM(require_react());
var useMentionsHandlers = (onMentionsHover, onMentionsClick) => (0, import_react325.useCallback)((event, mentioned_users) => {
  if (!onMentionsHover && !onMentionsClick || !(event.target instanceof HTMLElement)) {
    return;
  }
  const target = event.target;
  const textContent = target.innerHTML.replace("*", "");
  if (textContent[0] === "@") {
    const userName = textContent.replace("@", "");
    const user = mentioned_users == null ? void 0 : mentioned_users.find(({ id: id3, name: name2 }) => name2 === userName || id3 === userName);
    if (onMentionsHover && typeof onMentionsHover === "function" && event.type === "mouseover") {
      onMentionsHover(event, user);
    }
    if (onMentionsClick && event.type === "click" && typeof onMentionsClick === "function") {
      onMentionsClick(event, user);
    }
  }
}, [onMentionsClick, onMentionsHover]);

// node_modules/stream-chat-react/dist/components/Channel/hooks/useChannelContainerClasses.js
var useImageFlagEmojisOnWindowsClass = () => {
  const { useImageFlagEmojisOnWindows } = useChatContext("Channel");
  return useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/) ? "str-chat--windows-flags" : "";
};
var getChatContainerClass = (customClass) => customClass ?? "str-chat__container";
var useChannelContainerClasses = ({ customClasses }) => {
  const windowsEmojiClass = useImageFlagEmojisOnWindowsClass();
  return {
    channelClass: (customClasses == null ? void 0 : customClasses.channel) ?? "str-chat__channel",
    chatClass: (customClasses == null ? void 0 : customClasses.chat) ?? "str-chat",
    chatContainerClass: getChatContainerClass(customClasses == null ? void 0 : customClasses.chatContainer),
    windowsEmojiClass
  };
};

// node_modules/stream-chat-react/dist/components/Channel/utils.js
var makeAddNotifications = (setNotifications, notificationTimeouts) => (text8, type) => {
  if (typeof text8 !== "string" || type !== "success" && type !== "error") {
    return;
  }
  const id3 = nanoid();
  setNotifications((prevNotifications) => [...prevNotifications, { id: id3, text: text8, type }]);
  const timeout = setTimeout(() => setNotifications((prevNotifications) => prevNotifications.filter((notification) => notification.id !== id3)), 5e3);
  notificationTimeouts.push(timeout);
};
var findInMsgSetById = (targetId, msgSet) => {
  for (let i2 = msgSet.length - 1; i2 >= 0; i2--) {
    const item = msgSet[i2];
    if (item.id === targetId) {
      return {
        index: i2,
        target: item
      };
    }
  }
  return {
    index: -1
  };
};
var findInMsgSetByDate = (targetDate, msgSet, exact = false) => {
  var _a, _b;
  const targetTimestamp = targetDate.getTime();
  let left2 = 0;
  let middle = 0;
  let right2 = msgSet.length - 1;
  while (left2 <= right2) {
    middle = Math.floor((right2 + left2) / 2);
    const middleTimestamp = new Date(msgSet[middle].created_at).getTime();
    const middleLeftTimestamp = ((_a = msgSet[middle - 1]) == null ? void 0 : _a.created_at) && new Date(msgSet[middle - 1].created_at).getTime();
    const middleRightTimestamp = ((_b = msgSet[middle + 1]) == null ? void 0 : _b.created_at) && new Date(msgSet[middle + 1].created_at).getTime();
    if (middleTimestamp === targetTimestamp || middleLeftTimestamp && middleRightTimestamp && middleLeftTimestamp < targetTimestamp && targetTimestamp < middleRightTimestamp) {
      return { index: middle, target: msgSet[middle] };
    }
    if (middleTimestamp < targetTimestamp)
      left2 = middle + 1;
    else
      right2 = middle - 1;
  }
  if (!exact || new Date(msgSet[left2].created_at).getTime() === targetTimestamp) {
    return { index: left2, target: msgSet[left2] };
  }
  return { index: -1 };
};

// node_modules/stream-chat-react/dist/components/Attachment/attachment-sizing.js
var getImageAttachmentConfiguration = (attachment, element4) => {
  let newUrl = void 0;
  const urlToTest = attachment.image_url || attachment.thumb_url || "";
  if (test(urlToTest, "url")) {
    const url = new URL(urlToTest);
    const resizeDimensions = getSizingRestrictions(url, element4);
    if (resizeDimensions) {
      resizeDimensions.height *= 2;
      resizeDimensions.width *= 2;
      addResizingParamsToUrl(resizeDimensions, url);
    }
    newUrl = url.href;
  }
  return {
    url: newUrl || ""
  };
};
var getVideoAttachmentConfiguration = (attachment, element4, shouldGenerateVideoThumbnail) => {
  let thumbUrl = void 0;
  if (attachment.thumb_url && shouldGenerateVideoThumbnail && test(attachment.thumb_url, "url")) {
    const url = new URL(attachment.thumb_url);
    const resizeDimensions = getSizingRestrictions(url, element4);
    if (resizeDimensions) {
      resizeDimensions.height *= 2;
      resizeDimensions.width *= 2;
      addResizingParamsToUrl(resizeDimensions, url);
    }
    thumbUrl = url.href;
  }
  return {
    thumbUrl,
    url: attachment.asset_url || ""
  };
};
var getSizingRestrictions = (url, htmlElement) => {
  const urlParams = url.searchParams;
  const originalHeight = Number(urlParams.get("oh")) || 1;
  const originalWidth = Number(urlParams.get("ow")) || 1;
  const cssSizeRestriction = getCSSSizeRestrictions(htmlElement);
  let resizeDimensions;
  if ((cssSizeRestriction.maxHeight || cssSizeRestriction.height) && cssSizeRestriction.maxWidth) {
    resizeDimensions = getResizeDimensions(
      originalHeight,
      originalWidth,
      /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
      cssSizeRestriction.maxHeight || cssSizeRestriction.height,
      cssSizeRestriction.maxWidth
    );
  } else {
    resizeDimensions = void 0;
  }
  return resizeDimensions;
};
var getResizeDimensions = (originalHeight, originalWidth, maxHeight, maxWidth) => ({
  height: Math.round(Math.max(maxHeight, maxWidth / originalWidth * originalHeight)),
  width: Math.round(Math.max(maxHeight, maxWidth / originalHeight * originalWidth))
});
var getCSSSizeRestrictions = (htmlElement) => {
  const computedStylesheet = getComputedStyle(htmlElement);
  const height = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("height"));
  const maxHeight = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("max-height"));
  const maxWidth = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("max-width"));
  if (!((height || maxHeight) && maxWidth)) {
    console.warn(`Invalid value set for height/max-height and/or max-width for HTML element, this can cause scrolling issues inside the message list, more info https://getstream.io/chat/docs/sdk/react/message-components/attachment/#image-and-video-sizing`);
  }
  return { height, maxHeight, maxWidth };
};
var getValueRepresentationOfCSSProperty = (property) => {
  if (!property.endsWith("px")) {
    return void 0;
  }
  const number2 = parseFloat(property);
  return isNaN(number2) ? void 0 : number2;
};
var addResizingParamsToUrl = (resizeDimensions, url) => {
  url.searchParams.set("h", resizeDimensions.height.toString());
  url.searchParams.set("w", resizeDimensions.width.toString());
};

// node_modules/stream-chat-react/dist/experimental/Search/hooks/useSearchFocusedMessage.js
var searchControllerStateSelector2 = (nextValue) => ({
  focusedMessage: nextValue.focusedMessage
});
var useSearchFocusedMessage = () => {
  const { searchController } = useChatContext("Channel");
  const { focusedMessage } = useStateStore(searchController._internalState, searchControllerStateSelector2);
  return focusedMessage;
};

// node_modules/stream-chat-react/dist/experimental/Search/hooks/useSearchQueriesInProgress.js
var import_react326 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Channel/Channel.js
var ChannelContainer = ({ children, className: additionalClassName, ...props }) => {
  const { customClasses, theme } = useChatContext("Channel");
  const { channelClass, chatClass } = useChannelContainerClasses({
    customClasses
  });
  const className = clsx_default(chatClass, theme, channelClass, additionalClassName);
  return import_react327.default.createElement("div", { id: CHANNEL_CONTAINER_ID, ...props, className }, children);
};
var UnMemoizedChannel = (props) => {
  const { channel: propsChannel, EmptyPlaceholder: EmptyPlaceholder2 = null, LoadingErrorIndicator: LoadingErrorIndicator2, LoadingIndicator: LoadingIndicator2 = LoadingChannel } = props;
  const { channel: contextChannel, channelsQueryState } = useChatContext("Channel");
  const channel = propsChannel || contextChannel;
  if (channelsQueryState.queryInProgress === "reload" && LoadingIndicator2) {
    return import_react327.default.createElement(
      ChannelContainer,
      null,
      import_react327.default.createElement(LoadingIndicator2, null)
    );
  }
  if (channelsQueryState.error && LoadingErrorIndicator2) {
    return import_react327.default.createElement(
      ChannelContainer,
      null,
      import_react327.default.createElement(LoadingErrorIndicator2, { error: channelsQueryState.error })
    );
  }
  if (!(channel == null ? void 0 : channel.cid)) {
    return import_react327.default.createElement(ChannelContainer, null, EmptyPlaceholder2);
  }
  return import_react327.default.createElement(ChannelInner, { ...props, channel, key: channel.cid });
};
var ChannelInner = (props) => {
  var _a;
  const { activeUnreadHandler, channel, channelQueryOptions: propChannelQueryOptions, children, doDeleteMessageRequest, doMarkReadRequest, doSendMessageRequest, doUpdateMessageRequest, initializeOnMount = true, LoadingErrorIndicator: LoadingErrorIndicator2 = LoadingErrorIndicator, LoadingIndicator: LoadingIndicator2 = LoadingChannel, markReadOnMount = true, onMentionsClick, onMentionsHover, skipMessageDataMemoization } = props;
  const channelQueryOptions = (0, import_react327.useMemo)(() => (0, import_lodash19.default)(propChannelQueryOptions, {
    messages: { limit: DEFAULT_INITIAL_CHANNEL_PAGE_SIZE }
  }), [propChannelQueryOptions]);
  const { client, customClasses, latestMessageDatesByChannels, mutes, searchController } = useChatContext("Channel");
  const { t: t2 } = useTranslationContext("Channel");
  const chatContainerClass = getChatContainerClass(customClasses == null ? void 0 : customClasses.chatContainer);
  const windowsEmojiClass = useImageFlagEmojisOnWindowsClass();
  const thread = useThreadContext();
  const [channelConfig, setChannelConfig] = (0, import_react327.useState)(channel.getConfig());
  const [notifications, setNotifications] = (0, import_react327.useState)([]);
  const notificationTimeouts = (0, import_react327.useRef)([]);
  const [channelUnreadUiState, _setChannelUnreadUiState] = (0, import_react327.useState)();
  const channelReducer = (0, import_react327.useMemo)(() => makeChannelReducer(), []);
  const [state, dispatch] = (0, import_react327.useReducer)(
    channelReducer,
    // channel.initialized === false if client.channel().query() was not called, e.g. ChannelList is not used
    // => Channel will call channel.watch() in useLayoutEffect => state.loading is used to signal the watch() call state
    {
      ...initialState2,
      hasMore: channel.state.messagePagination.hasPrev,
      loading: !channel.initialized,
      messages: channel.state.messages
    }
  );
  const jumpToMessageFromSearch = useSearchFocusedMessage();
  const isMounted = useIsMounted();
  const originalTitle = (0, import_react327.useRef)("");
  const lastRead = (0, import_react327.useRef)(void 0);
  const online = (0, import_react327.useRef)(true);
  const clearHighlightedMessageTimeoutId = (0, import_react327.useRef)(null);
  const channelCapabilitiesArray = (_a = channel.data) == null ? void 0 : _a.own_capabilities;
  const throttledCopyStateFromChannel = (0, import_lodash20.default)(() => dispatch({ channel, type: "copyStateFromChannelOnEvent" }), 500, {
    leading: true,
    trailing: true
  });
  const setChannelUnreadUiState = (0, import_react327.useMemo)(() => (0, import_lodash20.default)(_setChannelUnreadUiState, 200, {
    leading: true,
    trailing: false
  }), []);
  const markRead = (0, import_react327.useMemo)(() => (0, import_lodash20.default)(async (options2) => {
    const { updateChannelUiUnreadState = true } = options2 ?? {};
    if (channel.disconnected || !(channelConfig == null ? void 0 : channelConfig.read_events)) {
      return;
    }
    lastRead.current = /* @__PURE__ */ new Date();
    try {
      if (doMarkReadRequest) {
        doMarkReadRequest(channel, updateChannelUiUnreadState ? setChannelUnreadUiState : void 0);
      } else {
        const markReadResponse = await channel.markRead();
        if (updateChannelUiUnreadState && (markReadResponse == null ? void 0 : markReadResponse.event)) {
          _setChannelUnreadUiState({
            last_read: lastRead.current,
            last_read_message_id: markReadResponse.event.last_read_message_id,
            unread_messages: 0
          });
        }
      }
      if (activeUnreadHandler) {
        activeUnreadHandler(0, originalTitle.current);
      } else if (originalTitle.current) {
        document.title = originalTitle.current;
      }
    } catch (e) {
      console.error(t2("Failed to mark channel as read"));
    }
  }, 500, { leading: true, trailing: false }), [
    activeUnreadHandler,
    channel,
    channelConfig,
    doMarkReadRequest,
    setChannelUnreadUiState,
    t2
  ]);
  const handleEvent = async (event) => {
    var _a2, _b, _c, _d, _e2, _f, _g, _h, _i;
    if (event.message) {
      dispatch({
        channel,
        message: event.message,
        type: "updateThreadOnEvent"
      });
    }
    if (event.type === "user.messages.deleted" && event.cid && event.cid !== channel.cid)
      return;
    if (event.type === "user.watching.start" || event.type === "user.watching.stop")
      return;
    if (event.type === "typing.start" || event.type === "typing.stop") {
      return dispatch({ channel, type: "setTyping" });
    }
    if (event.type === "connection.changed" && typeof event.online === "boolean") {
      online.current = event.online;
    }
    if (event.type === "message.new") {
      const mainChannelUpdated = !((_a2 = event.message) == null ? void 0 : _a2.parent_id) || ((_b = event.message) == null ? void 0 : _b.show_in_channel);
      if (mainChannelUpdated) {
        if (document.hidden && (channelConfig == null ? void 0 : channelConfig.read_events) && !channel.muteStatus().muted) {
          const unread = channel.countUnread(lastRead.current);
          if (activeUnreadHandler) {
            activeUnreadHandler(unread, originalTitle.current);
          } else {
            document.title = `(${unread}) ${originalTitle.current}`;
          }
        }
      }
      if (((_d = (_c = event.message) == null ? void 0 : _c.user) == null ? void 0 : _d.id) === client.userID && ((_e2 = event == null ? void 0 : event.message) == null ? void 0 : _e2.created_at) && ((_f = event == null ? void 0 : event.message) == null ? void 0 : _f.cid)) {
        const messageDate = new Date(event.message.created_at);
        const cid = event.message.cid;
        if (!latestMessageDatesByChannels[cid] || latestMessageDatesByChannels[cid].getTime() < messageDate.getTime()) {
          latestMessageDatesByChannels[cid] = messageDate;
        }
      }
    }
    if (event.type === "user.deleted") {
      const oldestID = (_i = (_h = (_g = channel.state) == null ? void 0 : _g.messages) == null ? void 0 : _h[0]) == null ? void 0 : _i.id;
      await channel.query({
        messages: { id_lt: oldestID, limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE },
        watchers: { limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE }
      });
    }
    if (event.type === "notification.mark_unread")
      _setChannelUnreadUiState((prev) => {
        if (!(event.last_read_at && event.user))
          return prev;
        return {
          first_unread_message_id: event.first_unread_message_id,
          last_read: new Date(event.last_read_at),
          last_read_message_id: event.last_read_message_id,
          unread_messages: event.unread_messages ?? 0
        };
      });
    if (event.type === "channel.truncated" && event.cid === channel.cid) {
      _setChannelUnreadUiState(void 0);
    }
    throttledCopyStateFromChannel();
  };
  (0, import_react327.useLayoutEffect)(() => {
    let errored = false;
    let done = false;
    (async () => {
      var _a2, _b;
      if (!channel.initialized && initializeOnMount) {
        try {
          const members = [];
          if (!channel.id && ((_a2 = channel.data) == null ? void 0 : _a2.members)) {
            for (const member of channel.data.members) {
              let userId;
              if (typeof member === "string") {
                userId = member;
              } else if (typeof member === "object") {
                const { user, user_id } = member;
                userId = user_id || (user == null ? void 0 : user.id);
              }
              if (userId) {
                members.push(userId);
              }
            }
          }
          await getChannel({ channel, client, members, options: channelQueryOptions });
          const config = channel.getConfig();
          setChannelConfig(config);
        } catch (e) {
          dispatch({ error: e, type: "setError" });
          errored = true;
        }
      }
      done = true;
      originalTitle.current = document.title;
      if (!errored) {
        dispatch({
          channel,
          hasMore: channel.state.messagePagination.hasPrev,
          type: "initStateFromChannel"
        });
        if (((_b = client.user) == null ? void 0 : _b.id) && channel.state.read[client.user.id]) {
          const { user, ...ownReadState } = channel.state.read[client.user.id];
          _setChannelUnreadUiState(ownReadState);
        }
        if (channel.countUnread() > 0 && markReadOnMount)
          markRead({ updateChannelUiUnreadState: false });
        client.on("connection.changed", handleEvent);
        client.on("connection.recovered", handleEvent);
        client.on("user.updated", handleEvent);
        client.on("user.deleted", handleEvent);
        client.on("user.messages.deleted", handleEvent);
        channel.on(handleEvent);
      }
    })();
    const notificationTimeoutsRef = notificationTimeouts.current;
    return () => {
      if (errored || !done)
        return;
      channel == null ? void 0 : channel.off(handleEvent);
      client.off("connection.changed", handleEvent);
      client.off("connection.recovered", handleEvent);
      client.off("user.deleted", handleEvent);
      notificationTimeoutsRef.forEach(clearTimeout);
    };
  }, [
    channel.cid,
    channelQueryOptions,
    doMarkReadRequest,
    channelConfig == null ? void 0 : channelConfig.read_events,
    initializeOnMount
  ]);
  (0, import_react327.useEffect)(() => {
    var _a2;
    if (!state.thread)
      return;
    const message = (_a2 = state.messages) == null ? void 0 : _a2.find((m2) => {
      var _a3;
      return m2.id === ((_a3 = state.thread) == null ? void 0 : _a3.id);
    });
    if (message)
      dispatch({ message, type: "setThread" });
  }, [state.messages, state.thread]);
  const handleHighlightedMessageChange = (0, import_react327.useCallback)(({ highlightDuration, highlightedMessageId }) => {
    dispatch({
      channel,
      highlightedMessageId,
      type: "jumpToMessageFinished"
    });
    if (clearHighlightedMessageTimeoutId.current) {
      clearTimeout(clearHighlightedMessageTimeoutId.current);
    }
    clearHighlightedMessageTimeoutId.current = setTimeout(() => {
      if (searchController._internalState.getLatestValue().focusedMessage) {
        searchController._internalState.partialNext({ focusedMessage: void 0 });
      }
      clearHighlightedMessageTimeoutId.current = null;
      dispatch({ type: "clearHighlightedMessage" });
    }, highlightDuration ?? DEFAULT_HIGHLIGHT_DURATION);
  }, [channel, searchController]);
  (0, import_react327.useEffect)(() => {
    if (!(jumpToMessageFromSearch == null ? void 0 : jumpToMessageFromSearch.id))
      return;
    handleHighlightedMessageChange({ highlightedMessageId: jumpToMessageFromSearch.id });
  }, [jumpToMessageFromSearch, handleHighlightedMessageChange]);
  const addNotification = (0, import_react327.useMemo)(() => makeAddNotifications(setNotifications, notificationTimeouts.current), []);
  const loadMoreFinished = (0, import_react327.useCallback)((0, import_lodash18.default)((hasMore, messages) => {
    if (!isMounted.current)
      return;
    dispatch({ hasMore, messages, type: "loadMoreFinished" });
  }, 2e3, { leading: true, trailing: true }), []);
  const loadMore = async (limit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE) => {
    var _a2;
    if (!online.current || !window.navigator.onLine || !channel.state.messagePagination.hasPrev)
      return 0;
    const oldestMessage = (_a2 = state == null ? void 0 : state.messages) == null ? void 0 : _a2[0];
    if (state.loadingMore || state.loadingMoreNewer || (oldestMessage == null ? void 0 : oldestMessage.status) !== "received") {
      return 0;
    }
    dispatch({ loadingMore: true, type: "setLoadingMore" });
    const oldestID = oldestMessage == null ? void 0 : oldestMessage.id;
    const perPage = limit;
    let queryResponse;
    try {
      queryResponse = await channel.query({
        messages: { id_lt: oldestID, limit: perPage },
        watchers: { limit: perPage }
      });
    } catch (e) {
      console.warn("message pagination request failed with error", e);
      dispatch({ loadingMore: false, type: "setLoadingMore" });
      return 0;
    }
    loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
    return queryResponse.messages.length;
  };
  const loadMoreNewer = async (limit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE) => {
    var _a2, _b;
    if (!online.current || !window.navigator.onLine || !channel.state.messagePagination.hasNext)
      return 0;
    const newestMessage = (_b = state == null ? void 0 : state.messages) == null ? void 0 : _b[((_a2 = state == null ? void 0 : state.messages) == null ? void 0 : _a2.length) - 1];
    if (state.loadingMore || state.loadingMoreNewer)
      return 0;
    dispatch({ loadingMoreNewer: true, type: "setLoadingMoreNewer" });
    const newestId = newestMessage == null ? void 0 : newestMessage.id;
    const perPage = limit;
    let queryResponse;
    try {
      queryResponse = await channel.query({
        messages: { id_gt: newestId, limit: perPage },
        watchers: { limit: perPage }
      });
    } catch (e) {
      console.warn("message pagination request failed with error", e);
      dispatch({ loadingMoreNewer: false, type: "setLoadingMoreNewer" });
      return 0;
    }
    dispatch({
      hasMoreNewer: channel.state.messagePagination.hasNext,
      messages: channel.state.messages,
      type: "loadMoreNewerFinished"
    });
    return queryResponse.messages.length;
  };
  const jumpToMessage = (0, import_react327.useCallback)(async (messageId, messageLimit = DEFAULT_JUMP_TO_PAGE_SIZE, highlightDuration = DEFAULT_HIGHLIGHT_DURATION) => {
    dispatch({ loadingMore: true, type: "setLoadingMore" });
    await channel.state.loadMessageIntoState(messageId, void 0, messageLimit);
    loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
    handleHighlightedMessageChange({
      highlightDuration,
      highlightedMessageId: messageId
    });
  }, [channel, handleHighlightedMessageChange, loadMoreFinished]);
  const jumpToLatestMessage = (0, import_react327.useCallback)(async () => {
    await channel.state.loadMessageIntoState("latest");
    loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
    dispatch({
      type: "jumpToLatestMessage"
    });
  }, [channel, loadMoreFinished]);
  const jumpToFirstUnreadMessage = (0, import_react327.useCallback)(async (queryMessageLimit = DEFAULT_JUMP_TO_PAGE_SIZE, highlightDuration = DEFAULT_HIGHLIGHT_DURATION) => {
    var _a2, _b, _c, _d;
    if (!(channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages))
      return;
    let lastReadMessageId = channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read_message_id;
    let firstUnreadMessageId = channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id;
    let isInCurrentMessageSet = false;
    if (firstUnreadMessageId) {
      const result = findInMsgSetById(firstUnreadMessageId, channel.state.messages);
      isInCurrentMessageSet = result.index !== -1;
    } else if (lastReadMessageId) {
      const result = findInMsgSetById(lastReadMessageId, channel.state.messages);
      isInCurrentMessageSet = !!result.target;
      firstUnreadMessageId = result.index > -1 ? (_a2 = channel.state.messages[result.index + 1]) == null ? void 0 : _a2.id : void 0;
    } else {
      const lastReadTimestamp = channelUnreadUiState.last_read.getTime();
      const { index: lastReadMessageIndex, target: lastReadMessage } = findInMsgSetByDate(channelUnreadUiState.last_read, channel.state.messages, true);
      if (lastReadMessage) {
        firstUnreadMessageId = (_b = channel.state.messages[lastReadMessageIndex + 1]) == null ? void 0 : _b.id;
        isInCurrentMessageSet = !!firstUnreadMessageId;
        lastReadMessageId = lastReadMessage.id;
      } else {
        dispatch({ loadingMore: true, type: "setLoadingMore" });
        let messages;
        try {
          messages = (await channel.query({
            messages: {
              created_at_around: channelUnreadUiState.last_read.toISOString(),
              limit: queryMessageLimit
            }
          }, "new")).messages;
        } catch (e) {
          addNotification(t2("Failed to jump to the first unread message"), "error");
          loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
          return;
        }
        const firstMessageWithCreationDate = messages.find((msg) => msg.created_at);
        if (!firstMessageWithCreationDate) {
          addNotification(t2("Failed to jump to the first unread message"), "error");
          loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
          return;
        }
        const firstMessageTimestamp = new Date(firstMessageWithCreationDate.created_at).getTime();
        if (lastReadTimestamp < firstMessageTimestamp) {
          firstUnreadMessageId = firstMessageWithCreationDate.id;
        } else {
          const result = findInMsgSetByDate(channelUnreadUiState.last_read, messages);
          lastReadMessageId = (_c = result.target) == null ? void 0 : _c.id;
        }
        loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
      }
    }
    if (!firstUnreadMessageId && !lastReadMessageId) {
      addNotification(t2("Failed to jump to the first unread message"), "error");
      return;
    }
    if (!isInCurrentMessageSet) {
      dispatch({ loadingMore: true, type: "setLoadingMore" });
      try {
        const targetId = firstUnreadMessageId ?? lastReadMessageId;
        await channel.state.loadMessageIntoState(targetId, void 0, queryMessageLimit);
        const indexOfTarget = channel.state.messages.findIndex((message) => message.id === targetId);
        loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
        firstUnreadMessageId = firstUnreadMessageId ?? ((_d = channel.state.messages[indexOfTarget + 1]) == null ? void 0 : _d.id);
      } catch (e) {
        addNotification(t2("Failed to jump to the first unread message"), "error");
        loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
        return;
      }
    }
    if (!firstUnreadMessageId) {
      addNotification(t2("Failed to jump to the first unread message"), "error");
      return;
    }
    if (!channelUnreadUiState.first_unread_message_id)
      _setChannelUnreadUiState({
        ...channelUnreadUiState,
        first_unread_message_id: firstUnreadMessageId,
        last_read_message_id: lastReadMessageId
      });
    handleHighlightedMessageChange({
      highlightDuration,
      highlightedMessageId: firstUnreadMessageId
    });
  }, [
    addNotification,
    channel,
    handleHighlightedMessageChange,
    loadMoreFinished,
    t2,
    channelUnreadUiState
  ]);
  const deleteMessage = (0, import_react327.useCallback)(async (message) => {
    if (!(message == null ? void 0 : message.id)) {
      throw new Error("Cannot delete a message - missing message ID.");
    }
    let deletedMessage;
    if (doDeleteMessageRequest) {
      deletedMessage = await doDeleteMessageRequest(message);
    } else {
      const result = await client.deleteMessage(message.id);
      deletedMessage = result.message;
    }
    return deletedMessage;
  }, [client, doDeleteMessageRequest]);
  const updateMessage = (updatedMessage) => {
    channel.state.addMessageSorted(updatedMessage, true);
    dispatch({
      channel,
      parentId: state.thread && updatedMessage.parent_id,
      type: "copyMessagesFromChannel"
    });
  };
  const doSendMessage = async ({ localMessage, message, options: options2 }) => {
    var _a2, _b;
    try {
      let messageResponse;
      if (doSendMessageRequest) {
        messageResponse = await doSendMessageRequest(channel, message, options2);
      } else {
        messageResponse = await channel.sendMessage(message, options2);
      }
      let existingMessage = void 0;
      for (let i2 = channel.state.messages.length - 1; i2 >= 0; i2--) {
        const msg = channel.state.messages[i2];
        if (msg.id && msg.id === message.id) {
          existingMessage = msg;
          break;
        }
      }
      const responseTimestamp = new Date(((_a2 = messageResponse == null ? void 0 : messageResponse.message) == null ? void 0 : _a2.updated_at) || 0).getTime();
      const existingMessageTimestamp = ((_b = existingMessage == null ? void 0 : existingMessage.updated_at) == null ? void 0 : _b.getTime()) || 0;
      const responseIsTheNewest = responseTimestamp > existingMessageTimestamp;
      if ((messageResponse == null ? void 0 : messageResponse.message) && (responseIsTheNewest || (existingMessage == null ? void 0 : existingMessage.status) === "sending")) {
        updateMessage({
          ...messageResponse.message,
          status: "received"
        });
      }
    } catch (error) {
      const stringError = JSON.stringify(error);
      const parsedError = stringError ? JSON.parse(stringError) : {};
      if (parsedError.code === 4 && error instanceof Error && error.message.includes("already exists")) {
        updateMessage({
          ...localMessage,
          status: "received"
        });
      } else {
        updateMessage({
          ...localMessage,
          error: parsedError,
          status: "failed"
        });
        thread == null ? void 0 : thread.upsertReplyLocally({
          message: {
            ...localMessage,
            error: parsedError,
            status: "failed"
          }
        });
      }
    }
  };
  const sendMessage = async ({ localMessage, message, options: options2 }) => {
    channel.state.filterErrorMessages();
    thread == null ? void 0 : thread.upsertReplyLocally({
      message: localMessage
    });
    updateMessage(localMessage);
    await doSendMessage({ localMessage, message, options: options2 });
  };
  const retrySendMessage = async (localMessage) => {
    updateMessage({
      ...localMessage,
      error: void 0,
      status: "sending"
    });
    await doSendMessage({
      localMessage,
      message: localMessageToNewMessagePayload(localMessage)
    });
  };
  const removeMessage = (message) => {
    channel.state.removeMessage(message);
    dispatch({
      channel,
      parentId: state.thread && message.parent_id,
      type: "copyMessagesFromChannel"
    });
  };
  const openThread = (message, event) => {
    event == null ? void 0 : event.preventDefault();
    dispatch({ channel, message, type: "openThread" });
  };
  const closeThread = (event) => {
    event == null ? void 0 : event.preventDefault();
    dispatch({ type: "closeThread" });
  };
  const loadMoreThreadFinished = (0, import_react327.useCallback)((0, import_lodash18.default)((threadHasMore, threadMessages) => {
    dispatch({
      threadHasMore,
      threadMessages,
      type: "loadMoreThreadFinished"
    });
  }, 2e3, { leading: true, trailing: true }), []);
  const loadMoreThread = async (limit = DEFAULT_THREAD_PAGE_SIZE) => {
    var _a2;
    if (state.threadLoadingMore || !state.thread || !state.threadHasMore)
      return;
    dispatch({ type: "startLoadingThread" });
    const parentId = state.thread.id;
    if (!parentId) {
      return dispatch({ type: "closeThread" });
    }
    const oldMessages = channel.state.threads[parentId] || [];
    const oldestMessageId = (_a2 = oldMessages[0]) == null ? void 0 : _a2.id;
    try {
      const queryResponse = await channel.getReplies(parentId, {
        id_lt: oldestMessageId,
        limit
      });
      const threadHasMoreMessages = hasMoreMessagesProbably(queryResponse.messages.length, limit);
      const newThreadMessages = channel.state.threads[parentId] || [];
      loadMoreThreadFinished(threadHasMoreMessages, newThreadMessages);
    } catch (e) {
      loadMoreThreadFinished(false, oldMessages);
    }
  };
  const onMentionsHoverOrClick = useMentionsHandlers(onMentionsHover, onMentionsClick);
  const editMessage = useEditMessageHandler(doUpdateMessageRequest);
  const { typing, ...restState } = state;
  const channelStateContextValue = useCreateChannelStateContext({
    ...restState,
    channel,
    channelCapabilitiesArray,
    channelConfig,
    channelUnreadUiState,
    giphyVersion: props.giphyVersion || "fixed_height",
    imageAttachmentSizeHandler: props.imageAttachmentSizeHandler || getImageAttachmentConfiguration,
    mutes,
    notifications,
    shouldGenerateVideoThumbnail: props.shouldGenerateVideoThumbnail || true,
    videoAttachmentSizeHandler: props.videoAttachmentSizeHandler || getVideoAttachmentConfiguration,
    watcher_count: state.watcherCount
  });
  const channelActionContextValue = (0, import_react327.useMemo)(
    () => ({
      addNotification,
      closeThread,
      deleteMessage,
      dispatch,
      editMessage,
      jumpToFirstUnreadMessage,
      jumpToLatestMessage,
      jumpToMessage,
      loadMore,
      loadMoreNewer,
      loadMoreThread,
      markRead,
      onMentionsClick: onMentionsHoverOrClick,
      onMentionsHover: onMentionsHoverOrClick,
      openThread,
      removeMessage,
      retrySendMessage,
      sendMessage,
      setChannelUnreadUiState,
      skipMessageDataMemoization,
      updateMessage
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      channel.cid,
      deleteMessage,
      loadMore,
      loadMoreNewer,
      markRead,
      jumpToFirstUnreadMessage,
      jumpToMessage,
      jumpToLatestMessage,
      setChannelUnreadUiState
    ]
  );
  const componentContextValue = (0, import_react327.useMemo)(() => ({
    Attachment: props.Attachment,
    AttachmentPreviewList: props.AttachmentPreviewList,
    AttachmentSelector: props.AttachmentSelector,
    AttachmentSelectorInitiationButtonContents: props.AttachmentSelectorInitiationButtonContents,
    AudioRecorder: props.AudioRecorder,
    AutocompleteSuggestionItem: props.AutocompleteSuggestionItem,
    AutocompleteSuggestionList: props.AutocompleteSuggestionList,
    Avatar: props.Avatar,
    BaseImage: props.BaseImage,
    CooldownTimer: props.CooldownTimer,
    CustomMessageActionsList: props.CustomMessageActionsList,
    DateSeparator: props.DateSeparator,
    EditMessageInput: props.EditMessageInput,
    EmojiPicker: props.EmojiPicker,
    emojiSearchIndex: props.emojiSearchIndex,
    EmptyStateIndicator: props.EmptyStateIndicator,
    FileUploadIcon: props.FileUploadIcon,
    GiphyPreviewMessage: props.GiphyPreviewMessage,
    HeaderComponent: props.HeaderComponent,
    Input: props.Input,
    LinkPreviewList: props.LinkPreviewList,
    LoadingIndicator: props.LoadingIndicator,
    Message: props.Message,
    MessageActions: props.MessageActions,
    MessageBlocked: props.MessageBlocked,
    MessageBouncePrompt: props.MessageBouncePrompt,
    MessageDeleted: props.MessageDeleted,
    MessageIsThreadReplyInChannelButtonIndicator: props.MessageIsThreadReplyInChannelButtonIndicator,
    MessageListNotifications: props.MessageListNotifications,
    MessageNotification: props.MessageNotification,
    MessageOptions: props.MessageOptions,
    MessageRepliesCountButton: props.MessageRepliesCountButton,
    MessageStatus: props.MessageStatus,
    MessageSystem: props.MessageSystem,
    MessageTimestamp: props.MessageTimestamp,
    Modal: props.Modal,
    ModalGallery: props.ModalGallery,
    PinIndicator: props.PinIndicator,
    PollActions: props.PollActions,
    PollContent: props.PollContent,
    PollCreationDialog: props.PollCreationDialog,
    PollHeader: props.PollHeader,
    PollOptionSelector: props.PollOptionSelector,
    QuotedMessage: props.QuotedMessage,
    QuotedMessagePreview: props.QuotedMessagePreview,
    QuotedPoll: props.QuotedPoll,
    reactionOptions: props.reactionOptions,
    ReactionSelector: props.ReactionSelector,
    ReactionsList: props.ReactionsList,
    ReactionsListModal: props.ReactionsListModal,
    ReminderNotification: props.ReminderNotification,
    SendButton: props.SendButton,
    SendToChannelCheckbox: props.SendToChannelCheckbox,
    ShareLocationDialog: props.ShareLocationDialog,
    StartRecordingAudioButton: props.StartRecordingAudioButton,
    StopAIGenerationButton: props.StopAIGenerationButton,
    StreamedMessageText: props.StreamedMessageText,
    TextareaComposer: props.TextareaComposer,
    ThreadHead: props.ThreadHead,
    ThreadHeader: props.ThreadHeader,
    ThreadStart: props.ThreadStart,
    Timestamp: props.Timestamp,
    TypingIndicator: props.TypingIndicator,
    UnreadMessagesNotification: props.UnreadMessagesNotification,
    UnreadMessagesSeparator: props.UnreadMessagesSeparator,
    VirtualMessage: props.VirtualMessage
  }), [
    props.Attachment,
    props.AttachmentPreviewList,
    props.AttachmentSelector,
    props.AttachmentSelectorInitiationButtonContents,
    props.AudioRecorder,
    props.AutocompleteSuggestionItem,
    props.AutocompleteSuggestionList,
    props.Avatar,
    props.BaseImage,
    props.CooldownTimer,
    props.CustomMessageActionsList,
    props.DateSeparator,
    props.EditMessageInput,
    props.EmojiPicker,
    props.emojiSearchIndex,
    props.EmptyStateIndicator,
    props.FileUploadIcon,
    props.GiphyPreviewMessage,
    props.HeaderComponent,
    props.Input,
    props.LinkPreviewList,
    props.LoadingIndicator,
    props.Message,
    props.MessageActions,
    props.MessageBlocked,
    props.MessageBouncePrompt,
    props.MessageDeleted,
    props.MessageIsThreadReplyInChannelButtonIndicator,
    props.MessageListNotifications,
    props.MessageNotification,
    props.MessageOptions,
    props.MessageRepliesCountButton,
    props.MessageStatus,
    props.MessageSystem,
    props.MessageTimestamp,
    props.Modal,
    props.ModalGallery,
    props.PinIndicator,
    props.PollActions,
    props.PollContent,
    props.PollCreationDialog,
    props.PollHeader,
    props.PollOptionSelector,
    props.QuotedMessage,
    props.QuotedMessagePreview,
    props.QuotedPoll,
    props.reactionOptions,
    props.ReactionSelector,
    props.ReactionsList,
    props.ReactionsListModal,
    props.ReminderNotification,
    props.SendButton,
    props.SendToChannelCheckbox,
    props.ShareLocationDialog,
    props.StartRecordingAudioButton,
    props.StopAIGenerationButton,
    props.StreamedMessageText,
    props.TextareaComposer,
    props.ThreadHead,
    props.ThreadHeader,
    props.ThreadStart,
    props.Timestamp,
    props.TypingIndicator,
    props.UnreadMessagesNotification,
    props.UnreadMessagesSeparator,
    props.VirtualMessage
  ]);
  const typingContextValue = useCreateTypingContext({
    typing
  });
  if (state.error) {
    return import_react327.default.createElement(
      ChannelContainer,
      null,
      import_react327.default.createElement(LoadingErrorIndicator2, { error: state.error })
    );
  }
  if (state.loading) {
    return import_react327.default.createElement(
      ChannelContainer,
      null,
      import_react327.default.createElement(LoadingIndicator2, null)
    );
  }
  if (!channel.watch) {
    return import_react327.default.createElement(
      ChannelContainer,
      null,
      import_react327.default.createElement("div", null, t2("Channel Missing"))
    );
  }
  return import_react327.default.createElement(
    ChannelContainer,
    { className: windowsEmojiClass },
    import_react327.default.createElement(
      ChannelStateProvider,
      { value: channelStateContextValue },
      import_react327.default.createElement(
        ChannelActionProvider,
        { value: channelActionContextValue },
        import_react327.default.createElement(
          WithComponents,
          { overrides: componentContextValue },
          import_react327.default.createElement(
            TypingProvider,
            { value: typingContextValue },
            import_react327.default.createElement("div", { className: clsx_default(chatContainerClass) }, children)
          )
        )
      )
    )
  );
};
var Channel = import_react327.default.memo(UnMemoizedChannel);

// node_modules/stream-chat-react/dist/components/ChannelHeader/ChannelHeader.js
var import_react329 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelHeader/icons.js
var import_react328 = __toESM(require_react());
var MenuIcon2 = ({ title }) => {
  const { t: t2 } = useTranslationContext("MenuIcon");
  return import_react328.default.createElement(
    "svg",
    { "data-testid": "menu-icon", viewBox: "0 0 448 512", xmlns: "http://www.w3.org/2000/svg" },
    import_react328.default.createElement("title", null, title ?? t2("Menu")),
    import_react328.default.createElement("path", { d: "M0 88C0 74.75 10.75 64 24 64H424C437.3 64 448 74.75 448 88C448 101.3 437.3 112 424 112H24C10.75 112 0 101.3 0 88zM0 248C0 234.7 10.75 224 24 224H424C437.3 224 448 234.7 448 248C448 261.3 437.3 272 424 272H24C10.75 272 0 261.3 0 248zM424 432H24C10.75 432 0 421.3 0 408C0 394.7 10.75 384 24 384H424C437.3 384 448 394.7 448 408C448 421.3 437.3 432 424 432z", fill: "currentColor" })
  );
};

// node_modules/stream-chat-react/dist/components/ChannelHeader/ChannelHeader.js
var ChannelHeader = (props) => {
  const { Avatar: Avatar2 = Avatar, image: overrideImage, live, MenuIcon: MenuIcon3 = MenuIcon2, title: overrideTitle } = props;
  const { channel, watcher_count } = useChannelStateContext("ChannelHeader");
  const { openMobileNav } = useChatContext("ChannelHeader");
  const { t: t2 } = useTranslationContext("ChannelHeader");
  const { displayImage, displayTitle, groupChannelDisplayInfo } = useChannelPreviewInfo({
    channel,
    overrideImage,
    overrideTitle
  });
  const { member_count, subtitle } = (channel == null ? void 0 : channel.data) || {};
  return import_react329.default.createElement(
    "div",
    { className: "str-chat__channel-header" },
    import_react329.default.createElement(
      "button",
      { "aria-label": t2("aria/Menu"), className: "str-chat__header-hamburger", onClick: openMobileNav },
      import_react329.default.createElement(MenuIcon3, null)
    ),
    import_react329.default.createElement(Avatar2, { className: "str-chat__avatar--channel-header", groupChannelDisplayInfo, image: displayImage, name: displayTitle }),
    import_react329.default.createElement(
      "div",
      { className: "str-chat__channel-header-end" },
      import_react329.default.createElement(
        "p",
        { className: "str-chat__channel-header-title" },
        displayTitle,
        " ",
        live && import_react329.default.createElement("span", { className: "str-chat__header-livestream-livelabel" }, t2("live"))
      ),
      subtitle && import_react329.default.createElement("p", { className: "str-chat__channel-header-subtitle" }, subtitle),
      import_react329.default.createElement(
        "p",
        { className: "str-chat__channel-header-info" },
        !live && !!member_count && member_count > 0 && import_react329.default.createElement(
          import_react329.default.Fragment,
          null,
          t2("{{ memberCount }} members", {
            memberCount: member_count
          }),
          ",",
          " "
        ),
        t2("{{ watcherCount }} online", { watcherCount: watcher_count })
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/Chat/Chat.js
var import_react333 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Chat/hooks/useChat.js
var import_react330 = __toESM(require_react());
var useChat = ({ client, defaultLanguage = "en", i18nInstance, initialNavOpen }) => {
  var _a, _b;
  const [translators, setTranslators] = (0, import_react330.useState)({
    t: defaultTranslatorFunction,
    tDateTimeParser: defaultDateTimeParser,
    userLanguage: "en"
  });
  const [channel, setChannel] = (0, import_react330.useState)();
  const [mutes, setMutes] = (0, import_react330.useState)([]);
  const [navOpen, setNavOpen] = (0, import_react330.useState)(initialNavOpen);
  const [latestMessageDatesByChannels, setLatestMessageDatesByChannels] = (0, import_react330.useState)({});
  const clientMutes = ((_a = client.user) == null ? void 0 : _a.mutes) ?? [];
  const closeMobileNav = () => setNavOpen(false);
  const openMobileNav = () => setTimeout(() => setNavOpen(true), 100);
  const appSettings = (0, import_react330.useRef)(null);
  const getAppSettings = () => {
    if (appSettings.current) {
      return appSettings.current;
    }
    appSettings.current = client.getAppSettings();
    return appSettings.current;
  };
  (0, import_react330.useEffect)(() => {
    if (!client)
      return;
    const version = "13.7.0";
    const userAgent = client.getUserAgent();
    if (!userAgent.includes("stream-chat-react")) {
      client.setUserAgent(`stream-chat-react-${version}-${userAgent}`);
    }
    client.threads.registerSubscriptions();
    client.polls.registerSubscriptions();
    client.reminders.registerSubscriptions();
    client.reminders.initTimers();
    return () => {
      client.threads.unregisterSubscriptions();
      client.polls.unregisterSubscriptions();
      client.reminders.unregisterSubscriptions();
      client.reminders.clearTimers();
    };
  }, [client]);
  (0, import_react330.useEffect)(() => {
    setMutes(clientMutes);
    const handleEvent = (event) => {
      var _a2;
      setMutes(((_a2 = event.me) == null ? void 0 : _a2.mutes) || []);
    };
    client.on("notification.mutes_updated", handleEvent);
    return () => client.off("notification.mutes_updated", handleEvent);
  }, [clientMutes == null ? void 0 : clientMutes.length]);
  (0, import_react330.useEffect)(() => {
    var _a2;
    let userLanguage = (_a2 = client.user) == null ? void 0 : _a2.language;
    if (!userLanguage) {
      const browserLanguage = window.navigator.language.slice(0, 2);
      userLanguage = isLanguageSupported(browserLanguage) ? browserLanguage : defaultLanguage;
    }
    const streami18n = i18nInstance || new Streami18n({ language: userLanguage });
    streami18n.registerSetLanguageCallback((t2) => setTranslators((prevTranslator) => ({ ...prevTranslator, t: t2 })));
    streami18n.getTranslators().then((translator) => {
      setTranslators({
        ...translator,
        userLanguage: userLanguage || defaultLanguage
      });
    });
  }, [i18nInstance]);
  const setActiveChannel = (0, import_react330.useCallback)(async (activeChannel, watchers = {}, event) => {
    if (event && event.preventDefault)
      event.preventDefault();
    if (activeChannel && Object.keys(watchers).length) {
      await activeChannel.query({ watch: true, watchers });
    }
    setChannel(activeChannel);
    closeMobileNav();
  }, []);
  (0, import_react330.useEffect)(() => {
    setLatestMessageDatesByChannels({});
  }, [(_b = client.user) == null ? void 0 : _b.id]);
  return {
    channel,
    closeMobileNav,
    getAppSettings,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    setActiveChannel,
    translators
  };
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useCreateChatContext.js
var import_react331 = __toESM(require_react());
var useCreateChatContext = (value) => {
  var _a;
  const { channel, channelsQueryState, client, closeMobileNav, customClasses, getAppSettings, isMessageAIGenerated, latestMessageDatesByChannels, mutes, navOpen, openMobileNav, searchController, setActiveChannel, theme, useImageFlagEmojisOnWindows } = value;
  const channelCid = channel == null ? void 0 : channel.cid;
  const channelsQueryError = channelsQueryState.error;
  const channelsQueryInProgress = channelsQueryState.queryInProgress;
  const clientValues = `${client.clientID}${Object.keys(client.activeChannels).length}${Object.keys(client.listeners).length}${client.mutedChannels.length}
  ${(_a = client.user) == null ? void 0 : _a.id}`;
  const mutedUsersLength = mutes.length;
  const chatContext = (0, import_react331.useMemo)(
    () => ({
      channel,
      channelsQueryState,
      client,
      closeMobileNav,
      customClasses,
      getAppSettings,
      isMessageAIGenerated,
      latestMessageDatesByChannels,
      mutes,
      navOpen,
      openMobileNav,
      searchController,
      setActiveChannel,
      theme,
      useImageFlagEmojisOnWindows
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      channelCid,
      channelsQueryError,
      channelsQueryInProgress,
      clientValues,
      getAppSettings,
      searchController,
      mutedUsersLength,
      navOpen,
      isMessageAIGenerated
    ]
  );
  return chatContext;
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useChannelsQueryState.js
var import_react332 = __toESM(require_react());
var useChannelsQueryState = () => {
  const [error, setError] = (0, import_react332.useState)(null);
  const [queryInProgress, setQueryInProgress] = (0, import_react332.useState)("uninitialized");
  return {
    error,
    queryInProgress,
    setError,
    setQueryInProgress
  };
};

// node_modules/stream-chat-react/dist/components/Chat/Chat.js
var Chat = (props) => {
  const { children, client, customClasses, defaultLanguage, i18nInstance, initialNavOpen = true, isMessageAIGenerated, searchController: customChannelSearchController, theme = "messaging light", useImageFlagEmojisOnWindows = false } = props;
  const { channel, closeMobileNav, getAppSettings, latestMessageDatesByChannels, mutes, navOpen, openMobileNav, setActiveChannel, translators } = useChat({ client, defaultLanguage, i18nInstance, initialNavOpen });
  const channelsQueryState = useChannelsQueryState();
  const searchController = (0, import_react333.useMemo)(() => customChannelSearchController ?? new SearchController({
    sources: [
      new ChannelSearchSource(client),
      new UserSearchSource(client),
      new MessageSearchSource(client)
    ]
  }), [client, customChannelSearchController]);
  const chatContextValue = useCreateChatContext({
    channel,
    channelsQueryState,
    client,
    closeMobileNav,
    customClasses,
    getAppSettings,
    isMessageAIGenerated,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    searchController,
    setActiveChannel,
    theme,
    useImageFlagEmojisOnWindows
  });
  if (!translators.t)
    return null;
  return import_react333.default.createElement(
    ChatProvider,
    { value: chatContextValue },
    import_react333.default.createElement(
      TranslationProvider,
      { value: translators },
      import_react333.default.createElement(ModalDialogManagerProvider, null, children)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useCreateChatClient.js
var import_react334 = __toESM(require_react());
var useCreateChatClient = ({ apiKey, options: options2, tokenOrProvider, userData }) => {
  const [chatClient, setChatClient] = (0, import_react334.useState)(null);
  const [cachedUserData, setCachedUserData] = (0, import_react334.useState)(userData);
  if (userData.id !== cachedUserData.id) {
    setCachedUserData(userData);
  }
  const [cachedOptions] = (0, import_react334.useState)(options2);
  (0, import_react334.useEffect)(() => {
    const client = new StreamChat(apiKey, void 0, cachedOptions);
    let didUserConnectInterrupt = false;
    const connectionPromise = client.connectUser(cachedUserData, tokenOrProvider).then(() => {
      if (!didUserConnectInterrupt)
        setChatClient(client);
    });
    return () => {
      didUserConnectInterrupt = true;
      setChatClient(null);
      connectionPromise.then(() => client.disconnectUser()).then(() => {
        console.log(`Connection for user "${cachedUserData.id}" has been closed`);
      });
    };
  }, [apiKey, cachedUserData, cachedOptions, tokenOrProvider]);
  return chatClient;
};

// node_modules/stream-chat-react/dist/components/Window/Window.js
var import_react335 = __toESM(require_react());
var UnMemoizedWindow = (props) => {
  const { children, thread: propThread } = props;
  const { thread: contextThread } = useChannelStateContext("Window");
  return import_react335.default.createElement("div", { className: clsx_default("str-chat__main-panel", {
    "str-chat__main-panel--thread-open": contextThread || propThread
  }) }, children);
};
var Window = import_react335.default.memo(UnMemoizedWindow);
export {
  ACTIONS_NOT_WORKING_IN_THREAD,
  AIStateIndicator,
  AIStates,
  ATTACHMENT_GROUPS_ORDER,
  ActionsIcon,
  AddCommentForm,
  AmountBar,
  Attachment,
  AttachmentActions,
  AttachmentActionsContainer,
  AttachmentPreviewList,
  AttachmentSelector,
  AttachmentWithinContainer,
  Audio,
  AudioContainer,
  AudioRecorder,
  Avatar,
  BaseImage,
  BinIcon,
  ButtonWithSubmenu,
  Card,
  CardAudio,
  CardContainer,
  Channel,
  ChannelActionContext,
  ChannelActionProvider,
  ChannelAvatar,
  ChannelHeader,
  ChannelList,
  ChannelListContext,
  ChannelListContextProvider,
  ChannelListMessenger,
  ChannelPreview,
  ChannelPreviewActionButtons,
  ChannelPreviewMessenger,
  ChannelSearch,
  ChannelStateContext,
  ChannelStateProvider,
  Chat,
  ChatContext,
  ChatProvider,
  ChatView,
  CheckSignIcon,
  Checkmark,
  CloseIcon,
  CommandItem,
  ComponentContext,
  ComponentProvider,
  ConnectionStatus,
  CooldownTimer,
  CustomMessageActionsList,
  DateSeparator,
  DefaultAttachmentSelectorComponents,
  DialogAnchor,
  DialogManager,
  DialogManagerProvider,
  DialogPortalDestination,
  DialogPortalEntry,
  DownloadButton,
  DownloadIcon2 as DownloadIcon,
  EditMessageForm,
  EditMessageModal,
  EmoticonItem,
  EmptyStateIndicator,
  EndPollDialog,
  EventComponent,
  FileAttachment,
  FileContainer,
  FileSizeIndicator,
  FixedHeightMessage,
  Gallery,
  GalleryContainer,
  Geolocation,
  GeolocationContainer,
  GiphyPreviewMessage,
  GlobalModal,
  GroupAvatar,
  ImageComponent,
  ImageContainer,
  InfiniteScroll,
  LinkIcon,
  LinkPreviewCard,
  LinkPreviewList,
  LoadMoreButton,
  LoadMorePaginator,
  LoadingChannel,
  LoadingChannels,
  LoadingErrorIndicator,
  LoadingIndicator,
  LoadingIndicatorIcon,
  MAX_MESSAGE_REACTIONS_TO_FETCH,
  MAX_QUERY_CHANNELS_LIMIT,
  MESSAGE_ACTIONS,
  MediaContainer,
  MediaRecordingState,
  Message,
  MessageActions,
  MessageActionsBox,
  MessageActionsWrapper,
  MessageBlocked,
  MessageBounceModal,
  MessageBouncePrompt,
  MessageBounceProvider,
  MessageContext,
  MessageDeleted,
  MessageDeliveredIcon,
  MessageDeliveryStatus,
  MessageEditedTimestamp,
  MessageErrorIcon,
  MessageInput,
  MessageInputContext,
  MessageInputContextProvider,
  MessageInputFlat,
  MessageIsThreadReplyInChannelButtonIndicator,
  MessageList,
  MessageListContext,
  MessageListContextProvider,
  MessageListNotifications,
  MessageNotification,
  MessageOptions,
  MessageProvider,
  MessageRepliesCountButton,
  MessageSimple,
  MessageStatus,
  MessageText,
  MessageTimestamp,
  MicIcon,
  Modal,
  ModalDialogManagerProvider,
  ModalGallery,
  NotificationTranslationTopic,
  PauseIcon2 as PauseIcon,
  PinIcon,
  PinIndicator,
  PlayButton,
  PlayIcon,
  PlaybackRateButton,
  Poll,
  PollActions,
  PollAnswerList,
  PollContent,
  PollContext,
  PollCreationDialog,
  PollHeader,
  PollOptionList,
  PollOptionSelector,
  PollOptionsFullList,
  PollProvider,
  PollResults,
  PollVote,
  PollVoteListing,
  PopperTooltip,
  ProgressBar,
  QuotedMessage,
  QuotedMessagePreview,
  QuotedMessagePreviewHeader,
  QuotedPoll,
  ReactionIcon,
  ReactionSelector,
  ReactionsList,
  ReactionsListModal,
  RecordingPermission,
  RecordingPermissionDeniedNotification,
  RecordingTimer,
  ReminderNotification,
  RetryIcon,
  SUPPORTED_VIDEO_FORMATS,
  SafeAnchor,
  ScrollToBottomButton,
  SearchBar,
  SearchInput,
  SearchResults,
  SendButton,
  SendIcon,
  ShareLocationDialog,
  SimpleAttachmentSelector,
  SimpleReactionsList,
  SpriteImage,
  StartRecordingAudioButton,
  StreamEmoji,
  StreamedMessageText,
  Streami18n,
  SuggestPollOptionForm,
  SuggestionList,
  SuggestionListItem,
  TextareaComposer,
  Thread,
  ThreadContext,
  ThreadHeader,
  ThreadIcon,
  ThreadList,
  ThreadListItem,
  ThreadListItemUI,
  ThreadProvider,
  ThreadStart,
  Tooltip,
  TranslationBuilder,
  TranslationContext,
  TranslationProvider,
  TranslationTopic,
  TypingContext,
  TypingIndicator,
  TypingProvider,
  UNREAD_MESSAGE_SEPARATOR_CLASS,
  UnMemoizedLoadMorePaginator,
  UnreadMessagesNotification,
  UnreadMessagesSeparator,
  UnsupportedAttachment,
  UnsupportedAttachmentContainer,
  UploadButton,
  UploadIcon,
  UserItem,
  VirtualizedMessageList,
  VoiceRecordingContainer,
  WaveProgressBar,
  Window,
  WithComponents,
  WithDragAndDropUpload,
  areMessagePropsEqual,
  areMessageUIPropsEqual,
  attachmentTypeIconMap,
  de_default as deTranslations,
  defaultAllowedTagNames,
  defaultAttachmentSelectorActionSet,
  defaultComponents,
  defaultDateTimeParser,
  defaultPinPermissions,
  defaultReactionOptions,
  defaultRenderMessages,
  defaultTranslatorFunction,
  displayDuration,
  divMod,
  downSample,
  emojiMarkdownPlugin,
  en_default as enTranslations,
  es_default as esTranslations,
  escapeRegExp,
  extractSortValue,
  findLastPinnedChannelIndex,
  fr_default as frTranslations,
  getChannel,
  getDisplayImage,
  getDisplayTitle,
  getGroupChannelDisplayInfo,
  getGroupStyles,
  getImages,
  getIsFirstUnreadMessage,
  getLastReceived,
  getLatestMessagePreview,
  getMessageActions,
  getNonImageAttachments,
  getReadByTooltipText,
  getReadStates,
  getWholeChar,
  handleActionWarning,
  hasMoreMessagesProbably,
  hasNotMoreMessages,
  hi_default as hiTranslations,
  htmlToTextPlugin,
  imageToLink,
  insertIntro,
  isChannel,
  isChannelArchived,
  isChannelPinned,
  isChrome,
  isDate,
  isDateSeparatorMessage,
  isDayOrMoment,
  isFirefox,
  isGalleryAttachmentType,
  isIntroMessage,
  isLanguageSupported,
  isLocalMessage,
  isMessageBlocked,
  isMessageBounced,
  isMessageEdited,
  isNumberOrString,
  isOnlyEmojis,
  isSafari,
  isSvgAttachment,
  isUserMuted,
  it_default as itTranslations,
  ja_default as jaTranslations,
  keepLineBreaksPlugin,
  ko_default as koTranslations,
  makeDateMessageId,
  makeIntroMessage,
  mapToUserNameOrId,
  markDownRenderers,
  matchMarkdownLinks,
  mentionsMarkdownPlugin,
  messageCodeBlocks,
  messageHasAttachments,
  messageHasReactions,
  missingUseFlagHandlerParameterWarning,
  missingUseMuteHandlerParamsWarning,
  modalDialogId,
  modalDialogManagerId,
  moveChannelUp,
  moveChannelUpwards,
  nl_default as nlTranslations,
  plusPlusToEmphasis,
  processMessages,
  pt_default as ptTranslations,
  reactionHandlerWarning,
  renderPreviewText,
  renderText,
  resampleWaveformData,
  ru_default as ruTranslations,
  shouldConsiderArchivedChannels,
  shouldConsiderPinnedChannels,
  shouldRenderMessageActions,
  showMessageActionsBox,
  tr_default as trTranslations,
  upSample,
  useAIState,
  useActionHandler,
  useActiveThread,
  useAttachmentManagerState,
  useAttachmentsForPreview,
  useAudioController,
  useCanCreatePoll,
  useChannelActionContext,
  useChannelDeletedListener,
  useEditMessageHandler as useChannelEditMessageHandler,
  useChannelHiddenListener,
  useChannelListContext,
  useChannelMembershipState,
  useMentionsHandlers as useChannelMentionsHandler,
  useChannelPreviewInfo,
  useChannelStateContext,
  useChannelTruncatedListener,
  useChannelUpdatedListener,
  useChannelVisibleListener,
  useChat,
  useChatContext,
  useComponentContext,
  useConnectionRecoveredListener,
  useCooldownTimer,
  useCreateChatClient,
  useDeleteHandler,
  useDialog,
  useDialogAnchor,
  useDialogIsOpen,
  useDialogManager,
  useEditHandler,
  useEnrichedMessages,
  useFlagHandler,
  useLastReadData,
  useLegacyThreadContext,
  useLiveLocationSharingManager,
  useMarkUnreadHandler,
  useMentionsHandler,
  useMessageBounceContext,
  useMessageComposer,
  useMessageComposerHasSendableData,
  useMessageContext,
  useMessageInputContext,
  useMessageInputControls,
  useMessageListContext,
  useMessageListElements,
  useMessageListScrollManager,
  useMessageNewListener,
  useMessageReminder,
  useMessageTextStreaming,
  useMobileNavigation,
  useModalDialog,
  useModalDialogIsOpen,
  useModalDialogManager,
  useMuteHandler,
  useNewMessageNotification,
  useNotificationAddedToChannelListener,
  useNotificationMessageNewListener,
  useNotificationRemovedFromChannelListener,
  useNotifications,
  useOpenThreadHandler,
  useOpenedDialogCount,
  usePaginatedChannels,
  usePinHandler,
  usePollAnswerPagination,
  usePollContext,
  usePollOptionVotesPagination,
  usePrependedMessagesCount,
  useReactionHandler,
  useReactionsFetcher,
  useRetryHandler,
  useScrollLocationLogic,
  useShouldForceScrollToBottom,
  useStateStore,
  useThreadContext,
  useThreadList,
  useThreadListItemContext,
  useThreadsViewContext,
  useTranslationContext,
  useTypingContext,
  useUserHandler,
  useUserPresenceChangedListener,
  useUserRole,
  validateAndGetMessage,
  withChannelActionContext,
  withChannelStateContext,
  withChatContext,
  withComponentContext,
  withMessageContext,
  withTranslationContext,
  withTypingContext
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=stream-chat-react.js.map
