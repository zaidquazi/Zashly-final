'use strict';

var videoClient = require('@stream-io/video-client');
var videoReactBindings = require('@stream-io/video-react-bindings');
var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var react$1 = require('@floating-ui/react');
var clsx = require('clsx');
var reactDom = require('react-dom');
var videoFiltersWeb = require('@stream-io/video-filters-web');

const Audio = ({ participant, trackType = 'audioTrack', ...rest }) => {
    const call = videoReactBindings.useCall();
    const [audioElement, setAudioElement] = react.useState(null);
    const { userId, sessionId } = participant;
    react.useEffect(() => {
        if (!call || !audioElement)
            return;
        const cleanup = call.bindAudioElement(audioElement, sessionId, trackType);
        return () => {
            cleanup?.();
        };
    }, [call, sessionId, audioElement, trackType]);
    return (jsxRuntime.jsx("audio", { autoPlay: true, ...rest, ref: setAudioElement, "data-user-id": userId, "data-session-id": sessionId, "data-track-type": trackType }));
};
Audio.displayName = 'Audio';

const ParticipantsAudio = (props) => {
    const { participants, audioProps } = props;
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: participants.map((participant) => {
            if (participant.isLocalParticipant)
                return null;
            const { audioStream, screenShareAudioStream, sessionId } = participant;
            const hasAudioTrack = videoClient.hasAudio(participant);
            const audioTrackElement = hasAudioTrack && audioStream && (jsxRuntime.jsx(Audio, { ...audioProps, trackType: "audioTrack", participant: participant }));
            const hasScreenShareAudioTrack = videoClient.hasScreenShareAudio(participant);
            const screenShareAudioTrackElement = hasScreenShareAudioTrack &&
                screenShareAudioStream && (jsxRuntime.jsx(Audio, { ...audioProps, trackType: "screenShareAudioTrack", participant: participant }));
            return (jsxRuntime.jsxs(react.Fragment, { children: [audioTrackElement, screenShareAudioTrackElement] }, sessionId));
        }) }));
};
ParticipantsAudio.displayName = 'ParticipantsAudio';

const ParticipantViewContext = react.createContext(undefined);
const useParticipantViewContext = () => react.useContext(ParticipantViewContext);

const useFloatingUIPreset = ({ middleware = [], placement, strategy, offset: offsetInPx = 10, }) => {
    const { refs, x, y, update, elements: { domReference, floating }, context, } = react$1.useFloating({
        placement,
        strategy,
        middleware: [
            react$1.offset(offsetInPx),
            react$1.shift(),
            react$1.flip(),
            react$1.size({
                padding: 10,
                apply: ({ availableHeight, elements }) => {
                    Object.assign(elements.floating.style, {
                        maxHeight: `${availableHeight}px`,
                    });
                },
            }),
            ...middleware,
        ],
    });
    // handle window resizing
    react.useEffect(() => {
        if (!domReference || !floating)
            return;
        const cleanup = react$1.autoUpdate(domReference, floating, update);
        return () => cleanup();
    }, [domReference, floating, update]);
    return { refs, x, y, domReference, floating, strategy, context };
};

const defaultDevice = 'default';
/**
 * This hook will apply and persist the device preferences from local storage.
 *
 * @param key the key to use for local storage.
 */
const usePersistedDevicePreferences = (key = '@stream-io/device-preferences') => {
    const { useCallSettings, useCameraState, useMicrophoneState, useSpeakerState, } = videoReactBindings.useCallStateHooks();
    const settings = useCallSettings();
    usePersistedDevicePreference(key, 'camera', useCameraState(), settings ? !settings.video.camera_default_on : undefined);
    usePersistedDevicePreference(key, 'microphone', useMicrophoneState(), settings ? !settings.audio.mic_default_on : undefined);
    usePersistedDevicePreference(key, 'speaker', useSpeakerState(), false);
};
const usePersistedDevicePreference = (key, deviceKey, state, defaultMuted) => {
    const { useCallCallingState } = videoReactBindings.useCallStateHooks();
    const callingState = useCallCallingState();
    const [applyingState, setApplyingState] = react.useState('idle');
    const manager = state[deviceKey];
    react.useEffect(function apply() {
        if (callingState === videoClient.CallingState.LEFT ||
            !state.devices?.length ||
            typeof defaultMuted !== 'boolean' ||
            applyingState !== 'idle') {
            return;
        }
        const preferences = parseLocalDevicePreferences(key);
        const preference = preferences[deviceKey];
        setApplyingState('applying');
        if (!manager.state.selectedDevice) {
            const applyPromise = preference
                ? applyLocalDevicePreference(manager, [preference].flat(), state.devices)
                : applyMutedState(manager, defaultMuted);
            applyPromise
                .catch((err) => {
                console.warn(`Failed to apply ${deviceKey} device preferences`, err);
            })
                .finally(() => setApplyingState('applied'));
        }
        else {
            setApplyingState('applied');
        }
    }, [
        applyingState,
        callingState,
        defaultMuted,
        deviceKey,
        key,
        manager,
        state.devices,
    ]);
    react.useEffect(function persist() {
        if (callingState === videoClient.CallingState.LEFT ||
            !state.devices?.length ||
            applyingState !== 'applied') {
            return;
        }
        try {
            patchLocalDevicePreference(key, deviceKey, {
                devices: state.devices,
                selectedDevice: state.selectedDevice,
                isMute: state.isMute,
            });
        }
        catch (err) {
            console.warn(`Failed to save ${deviceKey} device preferences`, err);
        }
    }, [
        applyingState,
        callingState,
        deviceKey,
        key,
        state.devices,
        state.isMute,
        state.selectedDevice,
    ]);
};
const parseLocalDevicePreferences = (key) => {
    const preferencesStr = window.localStorage.getItem(key);
    let preferences = {};
    if (preferencesStr) {
        try {
            preferences = JSON.parse(preferencesStr);
            if (Object.hasOwn(preferences, 'mic')) {
                // for backwards compatibility
                preferences.microphone = preferences.mic;
            }
        }
        catch {
            /* assume preferences are empty */
        }
    }
    return preferences;
};
const patchLocalDevicePreference = (key, deviceKey, state) => {
    const preferences = parseLocalDevicePreferences(key);
    const nextPreference = getSelectedDevicePreference(state.devices, state.selectedDevice);
    const preferenceHistory = [preferences[deviceKey] ?? []]
        .flat()
        .filter((p) => p.selectedDeviceId !== nextPreference.selectedDeviceId &&
        (p.selectedDeviceLabel === '' ||
            p.selectedDeviceLabel !== nextPreference.selectedDeviceLabel));
    window.localStorage.setItem(key, JSON.stringify({
        ...preferences,
        mic: undefined, // for backwards compatibility
        [deviceKey]: [
            {
                ...nextPreference,
                muted: state.isMute,
            },
            ...preferenceHistory,
        ].slice(0, 3),
    }));
};
const applyLocalDevicePreference = async (manager, preference, devices) => {
    let muted;
    for (const p of preference) {
        muted ?? (muted = p.muted);
        if (p.selectedDeviceId === defaultDevice) {
            break;
        }
        const device = devices.find((d) => d.deviceId === p.selectedDeviceId) ??
            devices.find((d) => d.label === p.selectedDeviceLabel);
        if (device) {
            await manager.select(device.deviceId);
            muted = p.muted;
            break;
        }
    }
    if (typeof muted === 'boolean') {
        await applyMutedState(manager, muted);
    }
};
const applyMutedState = async (manager, muted) => {
    await manager[muted ? 'disable' : 'enable']?.();
};
const getSelectedDevicePreference = (devices, selectedDevice) => ({
    selectedDeviceId: selectedDevice || defaultDevice,
    selectedDeviceLabel: devices?.find((d) => d.deviceId === selectedDevice)?.label ?? '',
});

const SCROLL_THRESHOLD = 10;
/**
 * Hook which observes element's scroll position and returns text value based on the
 * position of the scrollbar (`top`, `bottom`, `between` and `null` if no scrollbar is available)
 */
const useVerticalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {
    const [scrollPosition, setScrollPosition] = react.useState(null);
    react.useEffect(() => {
        if (!scrollElement)
            return;
        const scrollHandler = () => {
            const element = scrollElement;
            const hasVerticalScrollbar = element.scrollHeight > element.clientHeight;
            if (!hasVerticalScrollbar)
                return setScrollPosition(null);
            const isAtTheTop = element.scrollTop <= threshold;
            if (isAtTheTop)
                return setScrollPosition('top');
            const isAtTheBottom = Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) <= threshold;
            if (isAtTheBottom)
                return setScrollPosition('bottom');
            setScrollPosition('between');
        };
        const resizeObserver = new ResizeObserver(scrollHandler);
        resizeObserver.observe(scrollElement);
        scrollElement.addEventListener('scroll', scrollHandler);
        return () => {
            scrollElement.removeEventListener('scroll', scrollHandler);
            resizeObserver.disconnect();
        };
    }, [scrollElement, threshold]);
    return scrollPosition;
};
const useHorizontalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {
    const [scrollPosition, setScrollPosition] = react.useState(null);
    react.useEffect(() => {
        if (!scrollElement)
            return;
        const scrollHandler = () => {
            const element = scrollElement;
            const hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;
            if (!hasHorizontalScrollbar)
                return setScrollPosition(null);
            const isAtTheStart = element.scrollLeft <= threshold;
            if (isAtTheStart)
                return setScrollPosition('start');
            const isAtTheEnd = Math.abs(element.scrollWidth - element.scrollLeft - element.clientWidth) <= threshold;
            if (isAtTheEnd)
                return setScrollPosition('end');
            setScrollPosition('between');
        };
        const resizeObserver = new ResizeObserver(scrollHandler);
        resizeObserver.observe(scrollElement);
        scrollElement.addEventListener('scroll', scrollHandler);
        return () => {
            scrollElement.removeEventListener('scroll', scrollHandler);
            resizeObserver.disconnect();
        };
    }, [scrollElement, threshold]);
    return scrollPosition;
};

const useRequestPermission = (permission) => {
    const call = videoReactBindings.useCall();
    const { useHasPermissions } = videoReactBindings.useCallStateHooks();
    const hasPermission = useHasPermissions(permission);
    const [isAwaitingPermission, setIsAwaitingPermission] = react.useState(false); // TODO: load with possibly pending state
    react.useEffect(() => {
        const reset = () => setIsAwaitingPermission(false);
        if (hasPermission)
            reset();
    }, [hasPermission]);
    const requestPermission = react.useCallback(async () => {
        if (hasPermission)
            return true;
        const canRequestPermission = !!call?.permissionsContext.canRequest(permission);
        if (isAwaitingPermission || !canRequestPermission)
            return false;
        setIsAwaitingPermission(true);
        try {
            await call?.requestPermissions({
                permissions: [permission],
            });
        }
        catch (error) {
            setIsAwaitingPermission(false);
            throw new Error(`requestPermission failed: ${error}`);
        }
        return false;
    }, [call, hasPermission, isAwaitingPermission, permission]);
    return {
        requestPermission,
        hasPermission,
        canRequestPermission: !!call?.permissionsContext.canRequest(permission),
        isAwaitingPermission,
    };
};

/**
 * Utility hook that helps render a list of devices or implement a device selector.
 * Compared to someting like `useCameraState().devices`, it has some handy features:
 * 1. Adds the "Default" device to the list if applicable (either the user did not
 * select a device, or a previously selected device is no longer available).
 * 2. Maps the device list to a format more suitable for rendering.
 */
function useDeviceList(devices, selectedDeviceId) {
    const { t } = videoReactBindings.useI18n();
    return react.useMemo(() => {
        let selectedDeviceInfo = null;
        let selectedIndex = null;
        const deviceList = devices.map((d, i) => {
            const isSelected = d.deviceId === selectedDeviceId;
            const device = { deviceId: d.deviceId, label: d.label, isSelected };
            if (isSelected) {
                selectedDeviceInfo = device;
                selectedIndex = i;
            }
            return device;
        });
        if (selectedDeviceInfo === null || selectedIndex === null) {
            const defaultDevice = {
                deviceId: 'default',
                label: t('Default'),
                isSelected: true,
            };
            selectedDeviceInfo = defaultDevice;
            selectedIndex = 0;
            deviceList.unshift(defaultDevice);
        }
        return { deviceList, selectedDeviceInfo, selectedIndex };
    }, [devices, selectedDeviceId, t]);
}

exports.MenuVisualType = void 0;
(function (MenuVisualType) {
    MenuVisualType["PORTAL"] = "portal";
    MenuVisualType["MENU"] = "menu";
})(exports.MenuVisualType || (exports.MenuVisualType = {}));
/**
 * Used to provide utility APIs to the components rendered inside the portal.
 */
const MenuContext = react.createContext({});
/**
 * Access to the closes MenuContext.
 */
const useMenuContext = () => {
    return react.useContext(MenuContext);
};
const MenuPortal = ({ children, refs, }) => {
    const portalId = react.useMemo(() => `str-video-portal-${Math.random().toString(36).substring(2, 9)}`, []);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("div", { id: portalId, className: "str-video__portal" }), jsxRuntime.jsx(react$1.FloatingOverlay, { children: jsxRuntime.jsx(react$1.FloatingPortal, { id: portalId, children: jsxRuntime.jsx("div", { className: "str-video__portal-content", ref: refs.setFloating, children: children }) }) })] }));
};
const MenuToggle = ({ ToggleButton, placement = 'top-start', strategy = 'absolute', offset, visualType = exports.MenuVisualType.MENU, children, onToggle, }) => {
    const [menuShown, setMenuShown] = react.useState(false);
    const toggleHandler = react.useRef(onToggle);
    toggleHandler.current = onToggle;
    const { floating, domReference, refs, x, y } = useFloatingUIPreset({
        placement,
        strategy,
        offset,
    });
    react.useEffect(() => {
        const parentDocument = domReference?.ownerDocument;
        const handleClick = (event) => {
            if (!floating && domReference?.contains(event.target)) {
                setMenuShown(true);
                toggleHandler.current?.(true);
            }
            else if (floating && !floating?.contains(event.target)) {
                setMenuShown(false);
                toggleHandler.current?.(false);
            }
        };
        const handleKeyDown = (event) => {
            if (event.key && // key can be undefined in some browsers
                event.key.toLowerCase() === 'escape' &&
                !event.altKey &&
                !event.ctrlKey) {
                setMenuShown(false);
                toggleHandler.current?.(false);
            }
        };
        parentDocument?.addEventListener('click', handleClick, { capture: true });
        parentDocument?.addEventListener('keydown', handleKeyDown);
        return () => {
            parentDocument?.removeEventListener('click', handleClick, {
                capture: true,
            });
            parentDocument?.removeEventListener('keydown', handleKeyDown);
        };
    }, [floating, domReference]);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [menuShown && (jsxRuntime.jsx(MenuContext.Provider, { value: { close: () => setMenuShown(false) }, children: visualType === exports.MenuVisualType.PORTAL ? (jsxRuntime.jsx(MenuPortal, { refs: refs, children: children })) : visualType === exports.MenuVisualType.MENU ? (jsxRuntime.jsx("div", { className: "str-video__menu-container", ref: refs.setFloating, style: {
                        position: strategy,
                        top: y ?? 0,
                        left: x ?? 0,
                        overflowY: 'auto',
                    }, role: "menu", children: children })) : null })), jsxRuntime.jsx(ToggleButton, { menuShown: menuShown, ref: refs.setReference })] }));
};

const GenericMenu = ({ children, onItemClick, }) => {
    const ref = react.useRef(null);
    return (jsxRuntime.jsx("ul", { className: "str-video__generic-menu", ref: ref, onClick: (e) => {
            if (onItemClick &&
                e.target !== ref.current &&
                ref.current?.contains(e.target)) {
                onItemClick(e);
            }
        }, children: children }));
};
const GenericMenuButtonItem = ({ children, ...rest }) => {
    return (jsxRuntime.jsx("li", { className: "str-video__generic-menu--item", children: jsxRuntime.jsx("button", { ...rest, children: children }) }));
};

const Icon = ({ className, icon }) => (jsxRuntime.jsx("span", { className: clsx('str-video__icon', icon && `str-video__icon--${icon}`, className) }));

function usePictureInPictureState(videoElement) {
    const [isPiP, setIsPiP] = react.useState(document.pictureInPictureElement === videoElement);
    if (!videoElement && isPiP)
        setIsPiP(false);
    react.useEffect(() => {
        if (!videoElement)
            return;
        const handlePiP = () => {
            setIsPiP(document.pictureInPictureElement === videoElement);
        };
        videoElement.addEventListener('enterpictureinpicture', handlePiP);
        videoElement.addEventListener('leavepictureinpicture', handlePiP);
        return () => {
            videoElement.removeEventListener('enterpictureinpicture', handlePiP);
            videoElement.removeEventListener('leavepictureinpicture', handlePiP);
        };
    }, [videoElement]);
    return isPiP;
}

const ParticipantActionsContextMenu = () => {
    const { participant, participantViewElement, videoElement } = useParticipantViewContext();
    const [fullscreenModeOn, setFullscreenModeOn] = react.useState(!!document.fullscreenElement);
    const call = videoReactBindings.useCall();
    const isPiP = usePictureInPictureState(videoElement ?? undefined);
    const { t } = videoReactBindings.useI18n();
    const { pin, sessionId, userId } = participant;
    const hasAudioTrack = videoClient.hasAudio(participant);
    const hasVideoTrack = videoClient.hasVideo(participant);
    const hasScreenShareTrack = videoClient.hasScreenShare(participant);
    const hasScreenShareAudioTrack = videoClient.hasScreenShareAudio(participant);
    const blockUser = () => call?.blockUser(userId);
    const muteAudio = () => call?.muteUser(userId, 'audio');
    const muteVideo = () => call?.muteUser(userId, 'video');
    const muteScreenShare = () => call?.muteUser(userId, 'screenshare');
    const muteScreenShareAudio = () => call?.muteUser(userId, 'screenshare_audio');
    const grantPermission = (permission) => () => {
        call?.updateUserPermissions({
            user_id: userId,
            grant_permissions: [permission],
        });
    };
    const revokePermission = (permission) => () => {
        call?.updateUserPermissions({
            user_id: userId,
            revoke_permissions: [permission],
        });
    };
    const toggleParticipantPin = () => {
        if (pin) {
            call?.unpin(sessionId);
        }
        else {
            call?.pin(sessionId);
        }
    };
    const pinForEveryone = () => {
        call
            ?.pinForEveryone({
            user_id: userId,
            session_id: sessionId,
        })
            .catch((err) => {
            console.error(`Failed to pin participant ${userId}`, err);
        });
    };
    const unpinForEveryone = () => {
        call
            ?.unpinForEveryone({
            user_id: userId,
            session_id: sessionId,
        })
            .catch((err) => {
            console.error(`Failed to unpin participant ${userId}`, err);
        });
    };
    const toggleFullscreenMode = () => {
        if (!fullscreenModeOn) {
            return participantViewElement?.requestFullscreen().catch(console.error);
        }
        return document.exitFullscreen().catch(console.error);
    };
    react.useEffect(() => {
        // handles the case when fullscreen mode is toggled externally,
        // e.g., by pressing ESC key or some other keyboard shortcut
        const handleFullscreenChange = () => {
            setFullscreenModeOn(!!document.fullscreenElement);
        };
        document.addEventListener('fullscreenchange', handleFullscreenChange);
        return () => {
            document.removeEventListener('fullscreenchange', handleFullscreenChange);
        };
    }, []);
    const togglePictureInPicture = () => {
        if (videoElement && !isPiP) {
            return videoElement
                .requestPictureInPicture()
                .catch(console.error);
        }
        return document.exitPictureInPicture().catch(console.error);
    };
    const { close } = useMenuContext() || {};
    return (jsxRuntime.jsxs(GenericMenu, { onItemClick: close, children: [jsxRuntime.jsxs(GenericMenuButtonItem, { onClick: toggleParticipantPin, disabled: pin && !pin.isLocalPin, children: [jsxRuntime.jsx(Icon, { icon: "pin" }), pin ? t('Unpin') : t('Pin')] }), jsxRuntime.jsxs(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.PIN_FOR_EVERYONE], children: [jsxRuntime.jsxs(GenericMenuButtonItem, { onClick: pinForEveryone, disabled: pin && !pin.isLocalPin, children: [jsxRuntime.jsx(Icon, { icon: "pin" }), t('Pin for everyone')] }), jsxRuntime.jsxs(GenericMenuButtonItem, { onClick: unpinForEveryone, disabled: !pin || pin.isLocalPin, children: [jsxRuntime.jsx(Icon, { icon: "pin" }), t('Unpin for everyone')] })] }), jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.BLOCK_USERS], children: jsxRuntime.jsxs(GenericMenuButtonItem, { onClick: blockUser, children: [jsxRuntime.jsx(Icon, { icon: "not-allowed" }), t('Block')] }) }), jsxRuntime.jsxs(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.MUTE_USERS], children: [hasVideoTrack && (jsxRuntime.jsxs(GenericMenuButtonItem, { onClick: muteVideo, children: [jsxRuntime.jsx(Icon, { icon: "camera-off-outline" }), t('Turn off video')] })), hasScreenShareTrack && (jsxRuntime.jsxs(GenericMenuButtonItem, { onClick: muteScreenShare, children: [jsxRuntime.jsx(Icon, { icon: "screen-share-off" }), t('Turn off screen share')] })), hasAudioTrack && (jsxRuntime.jsxs(GenericMenuButtonItem, { onClick: muteAudio, children: [jsxRuntime.jsx(Icon, { icon: "no-audio" }), t('Mute audio')] })), hasScreenShareAudioTrack && (jsxRuntime.jsxs(GenericMenuButtonItem, { onClick: muteScreenShareAudio, children: [jsxRuntime.jsx(Icon, { icon: "no-audio" }), t('Mute screen share audio')] }))] }), participantViewElement &&
                typeof participantViewElement.requestFullscreen !== 'undefined' && (jsxRuntime.jsx(GenericMenuButtonItem, { onClick: toggleFullscreenMode, children: t('{{ direction }} fullscreen', {
                    direction: fullscreenModeOn ? t('Leave') : t('Enter'),
                }) })), videoElement && document.pictureInPictureEnabled && (jsxRuntime.jsx(GenericMenuButtonItem, { onClick: togglePictureInPicture, children: t('{{ direction }} picture-in-picture', {
                    direction: isPiP ? t('Leave') : t('Enter'),
                }) })), jsxRuntime.jsxs(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.UPDATE_CALL_PERMISSIONS], children: [jsxRuntime.jsx(GenericMenuButtonItem, { onClick: grantPermission(videoClient.OwnCapability.SEND_AUDIO), children: t('Allow audio') }), jsxRuntime.jsx(GenericMenuButtonItem, { onClick: grantPermission(videoClient.OwnCapability.SEND_VIDEO), children: t('Allow video') }), jsxRuntime.jsx(GenericMenuButtonItem, { onClick: grantPermission(videoClient.OwnCapability.SCREENSHARE), children: t('Allow screen sharing') }), jsxRuntime.jsx(GenericMenuButtonItem, { onClick: revokePermission(videoClient.OwnCapability.SEND_AUDIO), children: t('Disable audio') }), jsxRuntime.jsx(GenericMenuButtonItem, { onClick: revokePermission(videoClient.OwnCapability.SEND_VIDEO), children: t('Disable video') }), jsxRuntime.jsx(GenericMenuButtonItem, { onClick: revokePermission(videoClient.OwnCapability.SCREENSHARE), children: t('Disable screen sharing') })] })] }));
};

const isComponentType = (elementOrComponent) => {
    return elementOrComponent === null
        ? false
        : !react.isValidElement(elementOrComponent);
};

const chunk = (array, size) => {
    const chunkCount = Math.ceil(array.length / size);
    return Array.from({ length: chunkCount }, (_, index) => array.slice(size * index, size * index + size));
};

const applyElementToRef = (ref, element) => {
    if (!ref)
        return;
    if (typeof ref === 'function')
        return ref(element);
    ref.current = element;
};

/**
 * @description Extends video element with `stream` property
 * (`srcObject`) to reactively handle stream changes
 */
const BaseVideo = react.forwardRef(function BaseVideo({ stream, ...rest }, ref) {
    const [videoElement, setVideoElement] = react.useState(null);
    react.useEffect(() => {
        if (!videoElement || !stream)
            return;
        if (stream === videoElement.srcObject)
            return;
        videoElement.srcObject = stream;
        if (videoClient.Browsers.isSafari() || videoClient.Browsers.isFirefox()) {
            // Firefox and Safari have some timing issue
            setTimeout(() => {
                videoElement.srcObject = stream;
                videoElement.play().catch((e) => {
                    console.error(`Failed to play stream`, e);
                });
            }, 0);
        }
        return () => {
            videoElement.pause();
            videoElement.srcObject = null;
        };
    }, [stream, videoElement]);
    return (jsxRuntime.jsx("video", { autoPlay: true, playsInline: true, ...rest, ref: (element) => {
            applyElementToRef(ref, element);
            setVideoElement(element);
        } }));
});

const BaseVideoPlaceholder = react.forwardRef(function DefaultVideoPlaceholder({ participant, style, children }, ref) {
    const [error, setError] = react.useState(false);
    const name = participant.name || participant.userId;
    return (jsxRuntime.jsxs("div", { className: "str-video__video-placeholder", style: style, ref: ref, children: [(!participant.image || error) &&
                (name ? (jsxRuntime.jsx(InitialsFallback, { name: name })) : (jsxRuntime.jsx("div", { className: "str-video__video-placeholder__no-video-label", children: children }))), participant.image && !error && (jsxRuntime.jsx("img", { onError: () => setError(true), alt: name, className: "str-video__video-placeholder__avatar", src: participant.image }))] }));
});
const InitialsFallback = (props) => {
    const { name } = props;
    const initials = name
        .split(' ')
        .slice(0, 2)
        .map((n) => n[0])
        .join('');
    return (jsxRuntime.jsx("div", { className: "str-video__video-placeholder__initials-fallback", children: initials }));
};

const DefaultVideoPlaceholder = react.forwardRef(function DefaultVideoPlaceholder(props, ref) {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx(BaseVideoPlaceholder, { ref: ref, ...props, children: t('Video is disabled') }));
});

const DefaultPictureInPicturePlaceholder = react.forwardRef(function DefaultPictureInPicturePlaceholder(props, ref) {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx(BaseVideoPlaceholder, { ref: ref, ...props, children: t('Video is playing in a popup') }));
});

const Video$1 = ({ enabled = true, mirror, trackType, participant, className, VideoPlaceholder = DefaultVideoPlaceholder, PictureInPicturePlaceholder = DefaultPictureInPicturePlaceholder, refs, ...rest }) => {
    const { sessionId, videoStream, screenShareStream, viewportVisibilityState, isLocalParticipant, userId, } = participant;
    const call = videoReactBindings.useCall();
    const [videoElement, setVideoElement] = react.useState(null);
    // start with true, will flip once the video starts playing
    const [isVideoPaused, setIsVideoPaused] = react.useState(true);
    const [isWideMode, setIsWideMode] = react.useState(true);
    const isPiP = usePictureInPictureState(videoElement ?? undefined);
    const stream = trackType === 'videoTrack'
        ? videoStream
        : trackType === 'screenShareTrack'
            ? screenShareStream
            : undefined;
    react.useLayoutEffect(() => {
        if (!call || !videoElement || trackType === 'none')
            return;
        const cleanup = call.bindVideoElement(videoElement, sessionId, trackType);
        return () => {
            cleanup?.();
        };
    }, [call, trackType, sessionId, videoElement]);
    react.useEffect(() => {
        if (!stream || !videoElement)
            return;
        const [track] = stream.getVideoTracks();
        if (!track)
            return;
        const handlePlayPause = () => {
            setIsVideoPaused(videoElement.paused);
            const { width = 0, height = 0 } = track.getSettings();
            setIsWideMode(width >= height);
        };
        // playback may have started before we had a chance to
        // attach the 'play/pause' event listener, so we set the state
        // here to make sure it's in sync
        setIsVideoPaused(videoElement.paused);
        videoElement.addEventListener('play', handlePlayPause);
        videoElement.addEventListener('pause', handlePlayPause);
        track.addEventListener('unmute', handlePlayPause);
        return () => {
            videoElement.removeEventListener('play', handlePlayPause);
            videoElement.removeEventListener('pause', handlePlayPause);
            track.removeEventListener('unmute', handlePlayPause);
            // reset the 'pause' state once we unmount the video element
            setIsVideoPaused(true);
        };
    }, [stream, videoElement]);
    if (!call)
        return null;
    const isPublishingTrack = trackType === 'videoTrack'
        ? videoClient.hasVideo(participant)
        : trackType === 'screenShareTrack'
            ? videoClient.hasScreenShare(participant)
            : false;
    const isInvisible = trackType === 'none' ||
        viewportVisibilityState?.[trackType] === videoClient.VisibilityState.INVISIBLE;
    const hasNoVideoOrInvisible = !enabled || !isPublishingTrack || isInvisible;
    const mirrorVideo = mirror === undefined
        ? isLocalParticipant && trackType === 'videoTrack'
        : mirror;
    const isScreenShareTrack = trackType === 'screenShareTrack';
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [!hasNoVideoOrInvisible && (jsxRuntime.jsx("video", { ...rest, className: clsx('str-video__video', className, {
                    'str-video__video--not-playing': isVideoPaused,
                    'str-video__video--tall': !isWideMode,
                    'str-video__video--mirror': mirrorVideo,
                    'str-video__video--screen-share': isScreenShareTrack,
                }), "data-user-id": userId, "data-session-id": sessionId, ref: (element) => {
                    setVideoElement(element);
                    refs?.setVideoElement?.(element);
                } })), isPiP && PictureInPicturePlaceholder && (jsxRuntime.jsx(PictureInPicturePlaceholder, { style: { position: 'absolute' }, participant: participant })), (hasNoVideoOrInvisible || isVideoPaused) && VideoPlaceholder && (jsxRuntime.jsx(VideoPlaceholder, { style: { position: 'absolute' }, participant: participant, ref: refs?.setVideoPlaceholderElement }))] }));
};
Video$1.displayName = 'Video';

const useTrackElementVisibility = ({ trackedElement, dynascaleManager: propsDynascaleManager, sessionId, trackType, }) => {
    const call = videoReactBindings.useCall();
    const manager = propsDynascaleManager ?? call?.dynascaleManager;
    react.useEffect(() => {
        if (!trackedElement || !manager || !call || trackType === 'none')
            return;
        const unobserve = manager.trackElementVisibility(trackedElement, sessionId, trackType);
        return () => {
            unobserve();
        };
    }, [trackedElement, manager, call, sessionId, trackType]);
};

const Avatar = ({ imageSrc, name, style, className, ...rest }) => {
    const [error, setError] = react.useState(false);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [(!imageSrc || error) && name && (jsxRuntime.jsx(AvatarFallback, { className: className, style: style, names: [name] })), imageSrc && !error && (jsxRuntime.jsx("img", { onError: () => setError(true), alt: "avatar", className: clsx('str-video__avatar', className), src: imageSrc, style: style, ...rest }))] }));
};
const AvatarFallback = ({ className, names, style, }) => {
    return (jsxRuntime.jsx("div", { className: clsx('str-video__avatar--initials-fallback', className), style: style, children: jsxRuntime.jsxs("div", { children: [names[0][0], names[1]?.[0]] }) }));
};

/**
 * The context for the background filters.
 */
const BackgroundFiltersContext = react.createContext(undefined);
/**
 * A hook to access the background filters context API.
 */
const useBackgroundFilters = () => {
    const context = react.useContext(BackgroundFiltersContext);
    if (!context) {
        throw new Error('useBackgroundFilters must be used within a BackgroundFiltersProvider');
    }
    return context;
};
/**
 * A provider component that enables the use of background filters in your app.
 *
 * Please make sure you have the `@stream-io/video-filters-web` package installed
 * in your project before using this component.
 */
const BackgroundFiltersProvider = (props) => {
    const { children, backgroundImages = [], backgroundFilter: bgFilterFromProps = undefined, backgroundImage: bgImageFromProps = undefined, backgroundBlurLevel: bgBlurLevelFromProps = undefined, tfFilePath, modelFilePath, basePath, onError, } = props;
    const [backgroundFilter, setBackgroundFilter] = react.useState(bgFilterFromProps);
    const [backgroundImage, setBackgroundImage] = react.useState(bgImageFromProps);
    const [backgroundBlurLevel, setBackgroundBlurLevel] = react.useState(bgBlurLevelFromProps);
    const applyBackgroundImageFilter = react.useCallback((imageUrl) => {
        setBackgroundFilter('image');
        setBackgroundImage(imageUrl);
    }, []);
    const applyBackgroundBlurFilter = react.useCallback((blurLevel = 'high') => {
        setBackgroundFilter('blur');
        setBackgroundBlurLevel(blurLevel);
    }, []);
    const disableBackgroundFilter = react.useCallback(() => {
        setBackgroundFilter(undefined);
        setBackgroundImage(undefined);
        setBackgroundBlurLevel(undefined);
    }, []);
    const [isSupported, setIsSupported] = react.useState(false);
    react.useEffect(() => {
        videoFiltersWeb.isPlatformSupported().then(setIsSupported);
    }, []);
    const [tfLite, setTfLite] = react.useState();
    react.useEffect(() => {
        // don't try to load TFLite if the platform is not supported
        if (!isSupported)
            return;
        videoFiltersWeb.loadTFLite({ basePath, modelFilePath, tfFilePath })
            .then(setTfLite)
            .catch((err) => console.error('Failed to load TFLite', err));
    }, [basePath, isSupported, modelFilePath, tfFilePath]);
    const handleError = react.useCallback((error) => {
        videoClient.getLogger(['filters'])('warn', 'Filter encountered an error and will be disabled');
        disableBackgroundFilter();
        onError?.(error);
    }, [disableBackgroundFilter, onError]);
    return (jsxRuntime.jsxs(BackgroundFiltersContext.Provider, { value: {
            isSupported,
            isReady: !!tfLite,
            backgroundImage,
            backgroundBlurLevel,
            backgroundFilter,
            disableBackgroundFilter,
            applyBackgroundBlurFilter,
            applyBackgroundImageFilter,
            backgroundImages,
            tfFilePath,
            modelFilePath,
            basePath,
            onError: handleError,
        }, children: [children, tfLite && jsxRuntime.jsx(BackgroundFilters, { tfLite: tfLite })] }));
};
const BackgroundFilters = (props) => {
    const call = videoReactBindings.useCall();
    const { children, start } = useRenderer(props.tfLite);
    const { backgroundFilter, onError } = useBackgroundFilters();
    const handleErrorRef = react.useRef(undefined);
    handleErrorRef.current = onError;
    react.useEffect(() => {
        if (!call || !backgroundFilter)
            return;
        const { unregister } = call.camera.registerFilter((ms) => start(ms, (error) => handleErrorRef.current?.(error)));
        return () => {
            unregister();
        };
    }, [backgroundFilter, call, start]);
    return children;
};
const useRenderer = (tfLite) => {
    const { backgroundFilter, backgroundBlurLevel, backgroundImage } = useBackgroundFilters();
    const videoRef = react.useRef(null);
    const canvasRef = react.useRef(null);
    const bgImageRef = react.useRef(null);
    const [videoSize, setVideoSize] = react.useState({
        width: 1920,
        height: 1080,
    });
    const start = react.useCallback((ms, onError) => {
        let outputStream;
        let renderer;
        const output = new Promise((resolve, reject) => {
            if (!backgroundFilter) {
                reject(new Error('No filter specified'));
                return;
            }
            const videoEl = videoRef.current;
            const canvasEl = canvasRef.current;
            const bgImageEl = bgImageRef.current;
            if (!videoEl || !canvasEl || (backgroundImage && !bgImageEl)) {
                // You should start renderer in effect or event handlers
                reject(new Error('Renderer started before elements are ready'));
                return;
            }
            videoEl.srcObject = ms;
            videoEl.play().then(() => {
                const [track] = ms.getVideoTracks();
                if (!track) {
                    reject(new Error('No video tracks in input media stream'));
                    return;
                }
                const trackSettings = track.getSettings();
                reactDom.flushSync(() => setVideoSize({
                    width: trackSettings.width ?? 0,
                    height: trackSettings.height ?? 0,
                }));
                renderer = videoFiltersWeb.createRenderer(tfLite, videoEl, canvasEl, {
                    backgroundFilter,
                    backgroundBlurLevel,
                    backgroundImage: bgImageEl ?? undefined,
                }, onError);
                outputStream = canvasEl.captureStream();
                resolve(outputStream);
            }, () => {
                reject(new Error('Could not play the source video stream'));
            });
        });
        return {
            output,
            stop: () => {
                renderer?.dispose();
                if (videoRef.current)
                    videoRef.current.srcObject = null;
                if (outputStream)
                    videoClient.disposeOfMediaStream(outputStream);
            },
        };
    }, [backgroundBlurLevel, backgroundFilter, backgroundImage, tfLite]);
    const children = (jsxRuntime.jsxs("div", { className: "str-video__background-filters", children: [jsxRuntime.jsx("video", { className: clsx('str-video__background-filters__video', videoSize.height > videoSize.width &&
                    'str-video__background-filters__video--tall'), ref: videoRef, playsInline: true, muted: true, controls: false, ...videoSize }), backgroundImage && (jsxRuntime.jsx("img", { className: "str-video__background-filters__background-image", alt: "Background", ref: bgImageRef, src: backgroundImage, ...videoSize })), jsxRuntime.jsx("canvas", { className: "str-video__background-filters__target-canvas", ...videoSize, ref: canvasRef })] }));
    return {
        start,
        children,
    };
};

const IconButton = react.forwardRef(function IconButton(props, ref) {
    const { icon, enabled, variant, onClick, className, ...rest } = props;
    return (jsxRuntime.jsx("button", { className: clsx('str-video__call-controls__button', className, {
            [`str-video__call-controls__button--variant-${variant}`]: variant,
            'str-video__call-controls__button--enabled': enabled,
        }), onClick: (e) => {
            e.preventDefault();
            onClick?.(e);
        }, ref: ref, ...rest, children: jsxRuntime.jsx(Icon, { icon: icon }) }));
});

const CompositeButton = react.forwardRef(function CompositeButton({ disabled, caption, children, className, active, Menu, menuPlacement, menuOffset, title, ToggleMenuButton = DefaultToggleMenuButton, variant, onClick, onMenuToggle, ...restButtonProps }, ref) {
    return (jsxRuntime.jsxs("div", { className: clsx('str-video__composite-button', className, {
            'str-video__composite-button--caption': caption,
            'str-video__composite-button--menu': Menu,
        }), title: title, ref: ref, children: [jsxRuntime.jsxs("div", { className: clsx('str-video__composite-button__button-group', {
                    'str-video__composite-button__button-group--active': active,
                    'str-video__composite-button__button-group--active-primary': active && variant === 'primary',
                    'str-video__composite-button__button-group--active-secondary': active && variant === 'secondary',
                    'str-video__composite-button__button-group--disabled': disabled,
                }), children: [jsxRuntime.jsx("button", { type: "button", className: "str-video__composite-button__button", onClick: (e) => {
                            e.preventDefault();
                            onClick?.(e);
                        }, disabled: disabled, ...restButtonProps, children: children }), Menu && (jsxRuntime.jsx(MenuToggle, { offset: menuOffset, placement: menuPlacement, ToggleButton: ToggleMenuButton, onToggle: onMenuToggle, children: isComponentType(Menu) ? jsxRuntime.jsx(Menu, {}) : Menu }))] }), caption && (jsxRuntime.jsx("div", { className: "str-video__composite-button__caption", children: caption }))] }));
});
const DefaultToggleMenuButton = react.forwardRef(function DefaultToggleMenuButton({ menuShown }, ref) {
    return (jsxRuntime.jsx(IconButton, { className: clsx('str-video__menu-toggle-button', {
            'str-video__menu-toggle-button--active': menuShown,
        }), icon: menuShown ? 'caret-down' : 'caret-up', ref: ref }));
});

const TextButton = ({ children, ...rest }) => {
    return (jsxRuntime.jsx("button", { ...rest, className: "str-video__text-button", children: children }));
};

const AcceptCallButton = ({ disabled, onAccept, onClick, }) => {
    const call = videoReactBindings.useCall();
    const handleClick = react.useCallback(async (e) => {
        if (onClick) {
            onClick(e);
        }
        else if (call) {
            await call.join();
            onAccept?.();
        }
    }, [onClick, onAccept, call]);
    return (jsxRuntime.jsx(IconButton, { disabled: disabled, icon: "call-accept", variant: "success", "data-testid": "accept-call-button", onClick: handleClick }));
};

const Notification = (props) => {
    const { isVisible, message, children, visibilityTimeout, resetIsVisible, placement = 'top', iconClassName = 'str-video__notification__icon', close, } = props;
    const { refs, x, y, strategy } = useFloatingUIPreset({
        placement,
        strategy: 'absolute',
    });
    react.useEffect(() => {
        if (!isVisible || !visibilityTimeout || !resetIsVisible)
            return;
        const timeout = setTimeout(() => {
            resetIsVisible();
        }, visibilityTimeout);
        return () => clearTimeout(timeout);
    }, [isVisible, resetIsVisible, visibilityTimeout]);
    return (jsxRuntime.jsxs("div", { ref: refs.setReference, children: [isVisible && (jsxRuntime.jsxs("div", { className: "str-video__notification", ref: refs.setFloating, style: {
                    position: strategy,
                    top: y ?? 0,
                    left: x ?? 0,
                    overflowY: 'auto',
                }, children: [iconClassName && jsxRuntime.jsx("i", { className: iconClassName }), jsxRuntime.jsx("span", { className: "str-video__notification__message", children: message }), close ? (jsxRuntime.jsx("i", { className: "str-video__icon str-video__icon--close str-video__notification__close", onClick: close })) : null] })), children] }));
};

const PermissionNotification = (props) => {
    const { permission, isAwaitingApproval, messageApproved, messageAwaitingApproval, messageRevoked, visibilityTimeout = 3500, children, } = props;
    const { useHasPermissions } = videoReactBindings.useCallStateHooks();
    const hasPermission = useHasPermissions(permission);
    const prevHasPermission = react.useRef(hasPermission);
    const [showNotification, setShowNotification] = react.useState();
    react.useEffect(() => {
        if (hasPermission && !prevHasPermission.current) {
            setShowNotification('granted');
            prevHasPermission.current = true;
        }
        else if (!hasPermission && prevHasPermission.current) {
            setShowNotification('revoked');
            prevHasPermission.current = false;
        }
    }, [hasPermission]);
    const resetIsVisible = react.useCallback(() => setShowNotification(undefined), []);
    if (isAwaitingApproval) {
        return (jsxRuntime.jsx(Notification, { isVisible: isAwaitingApproval && !hasPermission, message: messageAwaitingApproval, children: children }));
    }
    return (jsxRuntime.jsx(Notification, { isVisible: !!showNotification, visibilityTimeout: visibilityTimeout, resetIsVisible: resetIsVisible, message: showNotification === 'granted' ? messageApproved : messageRevoked, children: children }));
};

const SpeakingWhileMutedNotification = ({ children, text, placement, }) => {
    const { useMicrophoneState } = videoReactBindings.useCallStateHooks();
    const { isSpeakingWhileMuted } = useMicrophoneState();
    const { t } = videoReactBindings.useI18n();
    const message = text ?? t('You are muted. Unmute to speak.');
    return (jsxRuntime.jsx(Notification, { message: message, isVisible: isSpeakingWhileMuted, placement: placement || 'top-start', children: children }));
};

const RecordingInProgressNotification = ({ children, text, }) => {
    const { t } = videoReactBindings.useI18n();
    const { isCallRecordingInProgress } = videoReactBindings.useToggleCallRecording();
    const [isVisible, setVisible] = react.useState(false);
    const message = text ?? t('Recording in progress...');
    react.useEffect(() => {
        if (isCallRecordingInProgress) {
            setVisible(true);
        }
        else {
            setVisible(false);
        }
    }, [isCallRecordingInProgress]);
    return (jsxRuntime.jsx(Notification, { message: message, iconClassName: "str-video__icon str-video__icon--recording-on", isVisible: isVisible, placement: "top-start", close: () => setVisible(false), children: children }));
};

const LoadingIndicator = ({ className, type = 'spinner', text, tooltip, }) => {
    return (jsxRuntime.jsxs("div", { className: clsx('str-video__loading-indicator', className), title: tooltip, children: [jsxRuntime.jsx("div", { className: clsx('str-video__loading-indicator__icon', type) }), text && jsxRuntime.jsx("p", { className: "str-video__loading-indicator-text", children: text })] }));
};

const Tooltip = ({ children, referenceElement, tooltipClassName, tooltipPlacement = 'top', visible = false, }) => {
    const arrowRef = react.useRef(null);
    const { refs, x, y, strategy, context } = useFloatingUIPreset({
        placement: tooltipPlacement,
        strategy: 'absolute',
        middleware: [react$1.arrow({ element: arrowRef })],
    });
    react.useEffect(() => {
        refs.setReference(referenceElement);
    }, [referenceElement, refs]);
    if (!visible)
        return null;
    return (jsxRuntime.jsxs("div", { className: clsx('str-video__tooltip', tooltipClassName), ref: refs.setFloating, style: {
            position: strategy,
            top: y ?? 0,
            left: x ?? 0,
        }, children: [jsxRuntime.jsx(react$1.FloatingArrow, { ref: arrowRef, context: context, fill: "var(--str-video__tooltip--background-color)" }), children] }));
};

const useEnterLeaveHandlers = ({ onMouseEnter, onMouseLeave, } = {}) => {
    const [tooltipVisible, setTooltipVisible] = react.useState(false);
    const handleMouseEnter = react.useCallback((e) => {
        setTooltipVisible(true);
        onMouseEnter?.(e);
    }, [onMouseEnter]);
    const handleMouseLeave = react.useCallback((e) => {
        setTooltipVisible(false);
        onMouseLeave?.(e);
    }, [onMouseLeave]);
    return { handleMouseEnter, handleMouseLeave, tooltipVisible };
};

// todo: duplicate of CallParticipantList.tsx#MediaIndicator - refactor to a single component
const WithTooltip = ({ title, tooltipClassName, tooltipPlacement, tooltipDisabled, ...props }) => {
    const { handleMouseEnter, handleMouseLeave, tooltipVisible } = useEnterLeaveHandlers();
    const [tooltipAnchor, setTooltipAnchor] = react.useState(null);
    const tooltipActuallyVisible = !tooltipDisabled && Boolean(title) && tooltipVisible;
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(Tooltip, { referenceElement: tooltipAnchor, visible: tooltipActuallyVisible, tooltipClassName: tooltipClassName, tooltipPlacement: tooltipPlacement, children: title || '' }), jsxRuntime.jsx("div", { ref: setTooltipAnchor, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, ...props })] }));
};

const RecordEndConfirmation = () => {
    const { t } = videoReactBindings.useI18n();
    const { toggleCallRecording, isAwaitingResponse } = videoReactBindings.useToggleCallRecording();
    const { close } = useMenuContext();
    return (jsxRuntime.jsxs("div", { className: "str-video__end-recording__confirmation", children: [jsxRuntime.jsxs("div", { className: "str-video__end-recording__header", children: [jsxRuntime.jsx(Icon, { icon: "recording-on" }), jsxRuntime.jsx("h2", { className: "str-video__end-recording__heading", children: t('End recording') })] }), jsxRuntime.jsx("p", { className: "str-video__end-recording__description", children: t('Are you sure you want end the recording?') }), jsxRuntime.jsxs("div", { className: "str-video__end-recording__actions", children: [jsxRuntime.jsx(CompositeButton, { variant: "secondary", onClick: close, children: t('Cancel') }), jsxRuntime.jsx(CompositeButton, { variant: "primary", onClick: toggleCallRecording, children: isAwaitingResponse ? jsxRuntime.jsx(LoadingIndicator, {}) : t('End recording') })] })] }));
};
const ToggleEndRecordingMenuButton = react.forwardRef(function ToggleEndRecordingMenuButton(props, ref) {
    return (jsxRuntime.jsx(CompositeButton, { ref: ref, active: true, variant: "secondary", "data-testid": "recording-stop-button", children: jsxRuntime.jsx(Icon, { icon: "recording-off" }) }));
});
const RecordCallConfirmationButton = ({ caption, }) => {
    const { t } = videoReactBindings.useI18n();
    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = videoReactBindings.useToggleCallRecording();
    if (isCallRecordingInProgress) {
        return (jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [
                videoClient.OwnCapability.START_RECORD_CALL,
                videoClient.OwnCapability.STOP_RECORD_CALL,
            ], children: jsxRuntime.jsx(MenuToggle, { ToggleButton: ToggleEndRecordingMenuButton, visualType: exports.MenuVisualType.PORTAL, children: jsxRuntime.jsx(RecordEndConfirmation, {}) }) }));
    }
    const title = isAwaitingResponse
        ? t('Waiting for recording to start...')
        : (caption ?? t('Record call'));
    return (jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [
            videoClient.OwnCapability.START_RECORD_CALL,
            videoClient.OwnCapability.STOP_RECORD_CALL,
        ], children: jsxRuntime.jsx(WithTooltip, { title: title, children: jsxRuntime.jsx(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: "secondary", "data-testid": "recording-start-button", onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? (jsxRuntime.jsx(LoadingIndicator, {})) : (jsxRuntime.jsx(Icon, { icon: "recording-off" })) }) }) }));
};
const RecordCallButton = ({ caption }) => {
    const { t } = videoReactBindings.useI18n();
    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = videoReactBindings.useToggleCallRecording();
    let title = caption ?? t('Record call');
    if (isAwaitingResponse) {
        title = isCallRecordingInProgress
            ? t('Waiting for recording to stop...')
            : t('Waiting for recording to start...');
    }
    return (jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [
            videoClient.OwnCapability.START_RECORD_CALL,
            videoClient.OwnCapability.STOP_RECORD_CALL,
        ], children: jsxRuntime.jsx(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: "secondary", "data-testid": isCallRecordingInProgress
                ? 'recording-stop-button'
                : 'recording-start-button', title: title, onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? (jsxRuntime.jsx(LoadingIndicator, {})) : (jsxRuntime.jsx(Icon, { icon: isCallRecordingInProgress ? 'recording-on' : 'recording-off' })) }) }));
};

const defaultEmojiReactionMap = {
    ':like:': '👍',
    ':raise-hand:': '✋',
    ':fireworks:': '🎉',
    ':dislike:': '👎',
    ':heart:': '❤️',
    ':smile:': '😀',
};
const Reaction = ({ participant: { reaction, sessionId }, hideAfterTimeoutInMs = 5500, emojiReactionMap = defaultEmojiReactionMap, }) => {
    const call = videoReactBindings.useCall();
    react.useEffect(() => {
        if (!call || !reaction)
            return;
        const timeoutId = setTimeout(() => {
            call.resetReaction(sessionId);
        }, hideAfterTimeoutInMs);
        return () => {
            clearTimeout(timeoutId);
        };
    }, [call, hideAfterTimeoutInMs, reaction, sessionId]);
    if (!reaction)
        return null;
    const { emoji_code: emojiCode } = reaction;
    return (jsxRuntime.jsx("div", { className: "str-video__reaction", children: jsxRuntime.jsx("span", { className: "str-video__reaction__emoji", children: emojiCode && emojiReactionMap[emojiCode] }) }));
};

const defaultReactions = [
    {
        type: 'reaction',
        emoji_code: ':like:',
    },
    {
        // TODO OL: use `prompt` type?
        type: 'raised-hand',
        emoji_code: ':raise-hand:',
    },
    {
        type: 'reaction',
        emoji_code: ':fireworks:',
    },
    {
        type: 'reaction',
        emoji_code: ':dislike:',
    },
    {
        type: 'reaction',
        emoji_code: ':heart:',
    },
    {
        type: 'reaction',
        emoji_code: ':smile:',
    },
];
const ReactionsButton = ({ reactions = defaultReactions, }) => {
    return (jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.CREATE_REACTION], children: jsxRuntime.jsx(MenuToggle, { placement: "top", ToggleButton: ToggleReactionsMenuButton, visualType: exports.MenuVisualType.MENU, children: jsxRuntime.jsx(DefaultReactionsMenu, { reactions: reactions }) }) }));
};
const ToggleReactionsMenuButton = react.forwardRef(function ToggleReactionsMenuButton({ menuShown }, ref) {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx(WithTooltip, { title: t('Reactions'), tooltipDisabled: menuShown, children: jsxRuntime.jsx(CompositeButton, { ref: ref, active: menuShown, variant: "primary", children: jsxRuntime.jsx(Icon, { icon: "reactions" }) }) }));
});
const DefaultReactionsMenu = ({ reactions, layout = 'horizontal', }) => {
    const call = videoReactBindings.useCall();
    const { close } = useMenuContext();
    return (jsxRuntime.jsx("div", { className: clsx('str-video__reactions-menu', {
            'str-video__reactions-menu--horizontal': layout === 'horizontal',
            'str-video__reactions-menu--vertical': layout === 'vertical',
        }), children: reactions.map((reaction) => (jsxRuntime.jsx("button", { type: "button", className: "str-video__reactions-menu__button", onClick: () => {
                call?.sendReaction(reaction);
                close?.();
            }, children: reaction.emoji_code && defaultEmojiReactionMap[reaction.emoji_code] }, reaction.emoji_code))) }));
};

/**
 * Wraps an event handler, silencing and logging exceptions (excluding the NotAllowedError
 * DOMException, which is a normal situation handled by the SDK)
 *
 * @param props component props, including the onError callback
 * @param handler event handler to wrap
 */
const createCallControlHandler = (props, handler) => {
    const logger = videoClient.getLogger(['react-sdk']);
    return async () => {
        try {
            await handler();
        }
        catch (error) {
            if (props.onError) {
                props.onError(error);
                return;
            }
            if (!isNotAllowedError(error)) {
                logger('error', 'Call control handler failed', error);
            }
        }
    };
};
function isNotAllowedError(error) {
    return error instanceof DOMException && error.name === 'NotAllowedError';
}

const ScreenShareButton = (props) => {
    const { t } = videoReactBindings.useI18n();
    const { caption } = props;
    const { useHasOngoingScreenShare, useScreenShareState, useCallSettings } = videoReactBindings.useCallStateHooks();
    const isSomeoneScreenSharing = useHasOngoingScreenShare();
    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(videoClient.OwnCapability.SCREENSHARE);
    const callSettings = useCallSettings();
    const isScreenSharingAllowed = callSettings?.screensharing.enabled;
    const { screenShare, optimisticIsMute } = useScreenShareState();
    const amIScreenSharing = !optimisticIsMute;
    const disableScreenShareButton = !amIScreenSharing &&
        (isSomeoneScreenSharing || isScreenSharingAllowed === false);
    const handleClick = createCallControlHandler(props, async () => {
        if (!hasPermission) {
            await requestPermission();
        }
        else {
            await screenShare.toggle();
        }
    });
    return (jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.SCREENSHARE], children: jsxRuntime.jsx(PermissionNotification, { permission: videoClient.OwnCapability.SCREENSHARE, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your screen.'), messageAwaitingApproval: t('Awaiting for an approval to share screen.'), messageRevoked: t('You can no longer share your screen.'), children: jsxRuntime.jsx(WithTooltip, { title: caption ?? t('Share screen'), children: jsxRuntime.jsx(CompositeButton, { active: isSomeoneScreenSharing || amIScreenSharing, caption: caption, variant: "primary", "data-testid": isSomeoneScreenSharing
                        ? 'screen-share-stop-button'
                        : 'screen-share-start-button', disabled: disableScreenShareButton, onClick: handleClick, children: jsxRuntime.jsx(Icon, { icon: isSomeoneScreenSharing ? 'screen-share-on' : 'screen-share-off' }) }) }) }) }));
};

const SelectContext = react.createContext({});
const Select = (props) => {
    const { children, icon, defaultSelectedLabel, defaultSelectedIndex, handleSelect: handleSelectProp, } = props;
    const [isOpen, setIsOpen] = react.useState(false);
    const [activeIndex, setActiveIndex] = react.useState(null);
    const [selectedIndex, setSelectedIndex] = react.useState(defaultSelectedIndex);
    const [selectedLabel, setSelectedLabel] = react.useState(defaultSelectedLabel);
    const { refs, context } = react$1.useFloating({
        placement: 'bottom-start',
        open: isOpen,
        onOpenChange: setIsOpen,
        whileElementsMounted: react$1.autoUpdate,
        middleware: [react$1.flip()],
    });
    const elementsRef = react.useRef([]);
    const labelsRef = react.useRef([]);
    const handleSelect = react.useCallback((index) => {
        setSelectedIndex(index);
        handleSelectProp(index || 0);
        setIsOpen(false);
        if (index !== null) {
            setSelectedLabel(labelsRef.current[index]);
        }
    }, [handleSelectProp]);
    const handleTypeaheadMatch = (index) => {
        if (isOpen) {
            setActiveIndex(index);
        }
        else {
            handleSelect(index);
        }
    };
    const listNav = react$1.useListNavigation(context, {
        listRef: elementsRef,
        activeIndex,
        selectedIndex,
        onNavigate: setActiveIndex,
    });
    const typeahead = react$1.useTypeahead(context, {
        listRef: labelsRef,
        activeIndex,
        selectedIndex,
        onMatch: handleTypeaheadMatch,
    });
    const click = react$1.useClick(context);
    const dismiss = react$1.useDismiss(context);
    const role = react$1.useRole(context, { role: 'listbox' });
    const { getReferenceProps, getFloatingProps, getItemProps } = react$1.useInteractions([listNav, typeahead, click, dismiss, role]);
    const selectContext = react.useMemo(() => ({
        activeIndex,
        selectedIndex,
        getItemProps,
        handleSelect,
    }), [activeIndex, selectedIndex, getItemProps, handleSelect]);
    return (jsxRuntime.jsxs("div", { className: "str-video__dropdown", children: [jsxRuntime.jsxs("div", { className: "str-video__dropdown-selected", ref: refs.setReference, tabIndex: 0, ...getReferenceProps(), children: [jsxRuntime.jsxs("label", { className: "str-video__dropdown-selected__label", children: [icon && (jsxRuntime.jsx(Icon, { className: "str-video__dropdown-selected__icon", icon: icon })), selectedLabel] }), jsxRuntime.jsx(Icon, { className: "str-video__dropdown-selected__chevron", icon: isOpen ? 'chevron-up' : 'chevron-down' })] }), jsxRuntime.jsx(SelectContext.Provider, { value: selectContext, children: isOpen && (jsxRuntime.jsx(react$1.FloatingFocusManager, { context: context, modal: false, children: jsxRuntime.jsx("div", { className: "str-video__dropdown-list", ref: refs.setFloating, ...getFloatingProps(), children: jsxRuntime.jsx(react$1.FloatingList, { elementsRef: elementsRef, labelsRef: labelsRef, children: children }) }) })) })] }));
};
const DropDownSelectOption = (props) => {
    const { selected, label, icon } = props;
    const { getItemProps, handleSelect } = react.useContext(SelectContext);
    const { ref, index } = react$1.useListItem();
    return (jsxRuntime.jsxs("div", { className: clsx('str-video__dropdown-option', {
            'str-video__dropdown-option--selected': selected,
        }), ref: ref, ...getItemProps({
            onClick: () => handleSelect(index),
        }), children: [icon && jsxRuntime.jsx(Icon, { className: "str-video__dropdown-icon", icon: icon }), jsxRuntime.jsx("span", { className: "str-video__dropdown-label", children: label })] }));
};
const DropDownSelect = (props) => {
    const { children, icon, handleSelect, defaultSelectedLabel, defaultSelectedIndex, } = props;
    return (jsxRuntime.jsx(Select, { icon: icon, handleSelect: handleSelect, defaultSelectedIndex: defaultSelectedIndex, defaultSelectedLabel: defaultSelectedLabel, children: children }));
};

const DeviceSelectorOption = ({ disabled, id, label, onChange, name, selected, defaultChecked, value, }) => {
    return (jsxRuntime.jsxs("label", { className: clsx('str-video__device-settings__option', {
            'str-video__device-settings__option--selected': selected,
            'str-video__device-settings__option--disabled': disabled,
        }), htmlFor: id, children: [jsxRuntime.jsx("input", { type: "radio", name: name, onChange: onChange, value: value, id: id, checked: selected, defaultChecked: defaultChecked, disabled: disabled }), label] }));
};
const DeviceSelectorList = (props) => {
    const { devices = [], selectedDeviceId, title, type, onChange } = props;
    const { close } = useMenuContext();
    const { deviceList } = useDeviceList(devices, selectedDeviceId);
    return (jsxRuntime.jsxs("div", { className: "str-video__device-settings__device-kind", children: [title && (jsxRuntime.jsx("div", { className: "str-video__device-settings__device-selector-title", children: title })), deviceList.map((device) => {
                return (jsxRuntime.jsx(DeviceSelectorOption, { id: `${type}--${device.deviceId}`, value: device.deviceId, label: device.label, onChange: (e) => {
                        const deviceId = e.target.value;
                        if (deviceId !== 'default') {
                            onChange?.(deviceId);
                        }
                        close?.();
                    }, name: type, selected: device.isSelected }, device.deviceId));
            })] }));
};
const DeviceSelectorDropdown = (props) => {
    const { devices = [], selectedDeviceId, title, onChange, icon } = props;
    const { deviceList, selectedDeviceInfo, selectedIndex } = useDeviceList(devices, selectedDeviceId);
    const handleSelect = react.useCallback((index) => {
        const deviceId = deviceList[index].deviceId;
        if (deviceId !== 'default') {
            onChange?.(deviceId);
        }
    }, [deviceList, onChange]);
    return (jsxRuntime.jsxs("div", { className: "str-video__device-settings__device-kind", children: [jsxRuntime.jsx("div", { className: "str-video__device-settings__device-selector-title", children: title }), jsxRuntime.jsx(DropDownSelect, { icon: icon, defaultSelectedIndex: selectedIndex, defaultSelectedLabel: selectedDeviceInfo.label, handleSelect: handleSelect, children: deviceList.map((device) => (jsxRuntime.jsx(DropDownSelectOption, { icon: icon, label: device.label, selected: device.isSelected }, device.deviceId))) })] }));
};
const DeviceSelector = (props) => {
    const { visualType = 'list', icon, ...rest } = props;
    if (visualType === 'list') {
        return jsxRuntime.jsx(DeviceSelectorList, { ...rest });
    }
    return jsxRuntime.jsx(DeviceSelectorDropdown, { ...rest, icon: icon });
};

const DeviceSelectorAudioInput = ({ title, visualType, }) => {
    const { useMicrophoneState } = videoReactBindings.useCallStateHooks();
    const { microphone, selectedDevice, devices } = useMicrophoneState();
    return (jsxRuntime.jsx(DeviceSelector, { devices: devices || [], selectedDeviceId: selectedDevice, type: "audioinput", onChange: async (deviceId) => {
            await microphone.select(deviceId);
        }, title: title, visualType: visualType, icon: "mic" }));
};
const DeviceSelectorAudioOutput = ({ title, visualType, }) => {
    const { useSpeakerState } = videoReactBindings.useCallStateHooks();
    const { speaker, selectedDevice, devices, isDeviceSelectionSupported } = useSpeakerState();
    if (!isDeviceSelectionSupported)
        return null;
    return (jsxRuntime.jsx(DeviceSelector, { devices: devices, type: "audiooutput", selectedDeviceId: selectedDevice, onChange: (deviceId) => {
            speaker.select(deviceId);
        }, title: title, visualType: visualType, icon: "speaker" }));
};

const DeviceSelectorVideo = ({ title, visualType, }) => {
    const { useCameraState } = videoReactBindings.useCallStateHooks();
    const { camera, devices, selectedDevice } = useCameraState();
    return (jsxRuntime.jsx(DeviceSelector, { devices: devices || [], type: "videoinput", selectedDeviceId: selectedDevice, onChange: async (deviceId) => {
            await camera.select(deviceId);
        }, title: title, visualType: visualType, icon: "camera" }));
};

const DeviceSettings = ({ visualType = exports.MenuVisualType.MENU, }) => {
    return (jsxRuntime.jsx(MenuToggle, { placement: "bottom-end", ToggleButton: ToggleDeviceSettingsMenuButton, visualType: visualType, children: jsxRuntime.jsx(Menu, {}) }));
};
const Menu = () => {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsxs("div", { className: "str-video__device-settings", children: [jsxRuntime.jsx(DeviceSelectorVideo, { title: t('Select a Camera') }), jsxRuntime.jsx(DeviceSelectorAudioInput, { title: t('Select a Mic') }), jsxRuntime.jsx(DeviceSelectorAudioOutput, { title: t('Select Speakers') })] }));
};
const ToggleDeviceSettingsMenuButton = react.forwardRef(function ToggleDeviceSettingsMenuButton({ menuShown }, ref) {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx(IconButton, { className: clsx('str-video__device-settings__button', {
            'str-video__device-settings__button--active': menuShown,
        }), title: t('Toggle device menu'), icon: "device-settings", ref: ref }));
});

const ToggleAudioPreviewButton = (props) => {
    const { caption, onMenuToggle, ...restCompositeButtonProps } = props;
    const { t } = videoReactBindings.useI18n();
    const { useMicrophoneState } = videoReactBindings.useCallStateHooks();
    const { microphone, optimisticIsMute, hasBrowserPermission, isPromptingPermission, } = useMicrophoneState();
    const [tooltipDisabled, setTooltipDisabled] = react.useState(false);
    const handleClick = createCallControlHandler(props, () => microphone.toggle());
    return (jsxRuntime.jsx(WithTooltip, { title: !hasBrowserPermission
            ? t('Check your browser audio permissions')
            : (caption ?? t('Mic')), tooltipDisabled: tooltipDisabled, children: jsxRuntime.jsxs(CompositeButton, { active: optimisticIsMute, caption: caption, className: clsx(!hasBrowserPermission && 'str-video__device-unavailable'), variant: "secondary", disabled: !hasBrowserPermission, "data-testid": optimisticIsMute
                ? 'preview-audio-unmute-button'
                : 'preview-audio-mute-button', onClick: handleClick, ...restCompositeButtonProps, onMenuToggle: (shown) => {
                setTooltipDisabled(shown);
                onMenuToggle?.(shown);
            }, children: [jsxRuntime.jsx(Icon, { icon: !optimisticIsMute ? 'mic' : 'mic-off' }), !hasBrowserPermission && (jsxRuntime.jsx("span", { className: "str-video__no-media-permission", title: t('Check your browser audio permissions'), children: "!" })), isPromptingPermission && (jsxRuntime.jsx("span", { className: "str-video__pending-permission", title: t('Waiting for permission'), children: "?" }))] }) }));
};
const ToggleAudioPublishingButton = (props) => {
    const { t } = videoReactBindings.useI18n();
    const { caption, Menu = jsxRuntime.jsx(DeviceSelectorAudioInput, { visualType: "list" }), menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;
    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(videoClient.OwnCapability.SEND_AUDIO);
    const { useMicrophoneState } = videoReactBindings.useCallStateHooks();
    const { microphone, optimisticIsMute, hasBrowserPermission, isPromptingPermission, } = useMicrophoneState();
    const [tooltipDisabled, setTooltipDisabled] = react.useState(false);
    const handleClick = createCallControlHandler(props, async () => {
        if (!hasPermission) {
            await requestPermission();
        }
        else {
            await microphone.toggle();
        }
    });
    return (jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.SEND_AUDIO], children: jsxRuntime.jsx(PermissionNotification, { permission: videoClient.OwnCapability.SEND_AUDIO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now speak.'), messageAwaitingApproval: t('Awaiting for an approval to speak.'), messageRevoked: t('You can no longer speak.'), children: jsxRuntime.jsx(WithTooltip, { title: !hasPermission
                    ? t('You have no permission to share your audio')
                    : !hasBrowserPermission
                        ? t('Check your browser mic permissions')
                        : (caption ?? t('Mic')), tooltipDisabled: tooltipDisabled, children: jsxRuntime.jsxs(CompositeButton, { active: optimisticIsMute, caption: caption, variant: "secondary", disabled: !hasBrowserPermission || !hasPermission, "data-testid": optimisticIsMute ? 'audio-unmute-button' : 'audio-mute-button', onClick: handleClick, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, onMenuToggle: (shown) => {
                        setTooltipDisabled(shown);
                        onMenuToggle?.(shown);
                    }, children: [jsxRuntime.jsx(Icon, { icon: optimisticIsMute ? 'mic-off' : 'mic' }), (!hasBrowserPermission || !hasPermission) && (jsxRuntime.jsx("span", { className: "str-video__no-media-permission", children: "!" })), isPromptingPermission && (jsxRuntime.jsx("span", { className: "str-video__pending-permission", title: t('Waiting for permission'), children: "?" }))] }) }) }) }));
};

const ToggleVideoPreviewButton = (props) => {
    const { caption, Menu = DeviceSelectorVideo, menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;
    const { t } = videoReactBindings.useI18n();
    const { useCameraState } = videoReactBindings.useCallStateHooks();
    const { camera, optimisticIsMute, hasBrowserPermission, isPromptingPermission, } = useCameraState();
    const [tooltipDisabled, setTooltipDisabled] = react.useState(false);
    const handleClick = createCallControlHandler(props, () => camera.toggle());
    return (jsxRuntime.jsx(WithTooltip, { title: !hasBrowserPermission
            ? t('Check your browser video permissions')
            : (caption ?? t('Video')), tooltipDisabled: tooltipDisabled, children: jsxRuntime.jsxs(CompositeButton, { active: optimisticIsMute, caption: caption, className: clsx(!hasBrowserPermission && 'str-video__device-unavailable'), variant: "secondary", "data-testid": optimisticIsMute
                ? 'preview-video-unmute-button'
                : 'preview-video-mute-button', onClick: handleClick, disabled: !hasBrowserPermission, Menu: Menu, menuPlacement: menuPlacement, ...restCompositeButtonProps, onMenuToggle: (shown) => {
                setTooltipDisabled(shown);
                onMenuToggle?.(shown);
            }, children: [jsxRuntime.jsx(Icon, { icon: !optimisticIsMute ? 'camera' : 'camera-off' }), !hasBrowserPermission && (jsxRuntime.jsx("span", { className: "str-video__no-media-permission", title: t('Check your browser video permissions'), children: "!" })), isPromptingPermission && (jsxRuntime.jsx("span", { className: "str-video__pending-permission", title: t('Waiting for permission'), children: "?" }))] }) }));
};
const ToggleVideoPublishingButton = (props) => {
    const { t } = videoReactBindings.useI18n();
    const { caption, Menu = jsxRuntime.jsx(DeviceSelectorVideo, { visualType: "list" }), menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;
    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(videoClient.OwnCapability.SEND_VIDEO);
    const { useCameraState, useCallSettings } = videoReactBindings.useCallStateHooks();
    const { camera, optimisticIsMute, hasBrowserPermission, isPromptingPermission, } = useCameraState();
    const callSettings = useCallSettings();
    const isPublishingVideoAllowed = callSettings?.video.enabled;
    const [tooltipDisabled, setTooltipDisabled] = react.useState(false);
    const handleClick = createCallControlHandler(props, async () => {
        if (!hasPermission) {
            await requestPermission();
        }
        else {
            await camera.toggle();
        }
    });
    return (jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.SEND_VIDEO], children: jsxRuntime.jsx(PermissionNotification, { permission: videoClient.OwnCapability.SEND_VIDEO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your video.'), messageAwaitingApproval: t('Awaiting for an approval to share your video.'), messageRevoked: t('You can no longer share your video.'), children: jsxRuntime.jsx(WithTooltip, { title: !hasPermission
                    ? t('You have no permission to share your video')
                    : !hasBrowserPermission
                        ? t('Check your browser video permissions')
                        : !isPublishingVideoAllowed
                            ? t('Video publishing is disabled by the system')
                            : caption || t('Video'), tooltipDisabled: tooltipDisabled, children: jsxRuntime.jsxs(CompositeButton, { active: optimisticIsMute, caption: caption, variant: "secondary", disabled: !hasBrowserPermission ||
                        !hasPermission ||
                        !isPublishingVideoAllowed, "data-testid": optimisticIsMute ? 'video-unmute-button' : 'video-mute-button', onClick: handleClick, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, onMenuToggle: (shown) => {
                        setTooltipDisabled(shown);
                        onMenuToggle?.(shown);
                    }, children: [jsxRuntime.jsx(Icon, { icon: optimisticIsMute ? 'camera-off' : 'camera' }), (!hasBrowserPermission ||
                            !hasPermission ||
                            !isPublishingVideoAllowed) && (jsxRuntime.jsx("span", { className: "str-video__no-media-permission", children: "!" })), isPromptingPermission && (jsxRuntime.jsx("span", { className: "str-video__pending-permission", title: t('Waiting for permission'), children: "?" }))] }) }) }) }));
};

const EndCallMenu = (props) => {
    const { onLeave, onEnd } = props;
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsxs("div", { className: "str-video__end-call__confirmation", children: [jsxRuntime.jsxs("button", { className: "str-video__button str-video__end-call__leave", type: "button", "data-testid": "leave-call-button", onClick: onLeave, children: [jsxRuntime.jsx(Icon, { className: "str-video__button__icon str-video__end-call__leave-icon", icon: "logout" }), t('Leave call')] }), jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.END_CALL], children: jsxRuntime.jsxs("button", { className: "str-video__button str-video__end-call__end", type: "button", "data-testid": "end-call-for-all-button", onClick: onEnd, children: [jsxRuntime.jsx(Icon, { className: "str-video__button__icon str-video__end-call__end-icon", icon: "call-end" }), t('End call for all')] }) })] }));
};
const CancelCallToggleMenuButton = react.forwardRef(function CancelCallToggleMenuButton({ menuShown }, ref) {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx(WithTooltip, { title: t('Leave call'), tooltipDisabled: menuShown, children: jsxRuntime.jsx(IconButton, { icon: menuShown ? 'close' : 'call-end', variant: menuShown ? 'active' : 'danger', "data-testid": "leave-call-button", ref: ref }) }));
});
const CancelCallConfirmButton = ({ onClick, onLeave, }) => {
    const call = videoReactBindings.useCall();
    const handleLeave = react.useCallback(async (e) => {
        if (onClick) {
            onClick(e);
        }
        else if (call) {
            await call.leave();
            onLeave?.();
        }
    }, [onClick, onLeave, call]);
    const handleEndCall = react.useCallback(async (e) => {
        if (onClick) {
            onClick(e);
        }
        else if (call) {
            await call.endCall();
            onLeave?.();
        }
    }, [onClick, onLeave, call]);
    return (jsxRuntime.jsx(MenuToggle, { placement: "top-start", ToggleButton: CancelCallToggleMenuButton, children: jsxRuntime.jsx(EndCallMenu, { onEnd: handleEndCall, onLeave: handleLeave }) }));
};
const CancelCallButton = ({ disabled, caption, onClick, onLeave, }) => {
    const call = videoReactBindings.useCall();
    const { t } = videoReactBindings.useI18n();
    const handleClick = react.useCallback(async (e) => {
        if (onClick) {
            onClick(e);
        }
        else if (call) {
            await call.leave();
            onLeave?.();
        }
    }, [onClick, onLeave, call]);
    return (jsxRuntime.jsx(IconButton, { disabled: disabled, icon: "call-end", variant: "danger", title: caption ?? t('Leave call'), "data-testid": "cancel-call-button", onClick: handleClick }));
};

const CallControls = ({ onLeave }) => (jsxRuntime.jsxs("div", { className: "str-video__call-controls", children: [jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.SEND_AUDIO], children: jsxRuntime.jsx(SpeakingWhileMutedNotification, { children: jsxRuntime.jsx(ToggleAudioPublishingButton, {}) }) }), jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.SEND_VIDEO], children: jsxRuntime.jsx(ToggleVideoPublishingButton, {}) }), jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.CREATE_REACTION], children: jsxRuntime.jsx(ReactionsButton, {}) }), jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.SCREENSHARE], children: jsxRuntime.jsx(ScreenShareButton, {}) }), jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [
                videoClient.OwnCapability.START_RECORD_CALL,
                videoClient.OwnCapability.STOP_RECORD_CALL,
            ], children: jsxRuntime.jsx(RecordCallButton, {}) }), jsxRuntime.jsx(CancelCallButton, { onLeave: onLeave })] }));

const CallStatsLatencyChart = react.lazy(() => Promise.resolve().then(function () { return require('./latency-chart-CpL1M_s0.cjs.js'); }));
var Status;
(function (Status) {
    Status["GOOD"] = "Good";
    Status["OK"] = "Ok";
    Status["BAD"] = "Bad";
})(Status || (Status = {}));
const CallStats = (props) => {
    const { latencyLowBound = 75, latencyHighBound = 400, showCodecInfo = false, LatencyChartSuspenseFallback = null, } = props;
    const [latencyBuffer, setLatencyBuffer] = react.useState(() => {
        const now = Date.now();
        return Array.from({ length: 20 }, (_, i) => ({ x: now + i, y: 0 }));
    });
    const { t } = videoReactBindings.useI18n();
    const [publishBitrate, setPublishBitrate] = react.useState('-');
    const [subscribeBitrate, setSubscribeBitrate] = react.useState('-');
    const previousStats = react.useRef();
    const { useCallStatsReport } = videoReactBindings.useCallStateHooks();
    const callStatsReport = useCallStatsReport();
    react.useEffect(() => {
        if (!callStatsReport)
            return;
        if (!previousStats.current) {
            previousStats.current = callStatsReport;
            return;
        }
        const previousCallStatsReport = previousStats.current;
        setPublishBitrate(() => {
            return calculatePublishBitrate(previousCallStatsReport, callStatsReport);
        });
        setSubscribeBitrate(() => {
            return calculateSubscribeBitrate(previousCallStatsReport, callStatsReport);
        });
        setLatencyBuffer((latencyBuf) => {
            const newLatencyBuffer = latencyBuf.slice(-19);
            newLatencyBuffer.push({
                x: callStatsReport.timestamp,
                y: callStatsReport.publisherStats.averageRoundTripTimeInMs,
            });
            return newLatencyBuffer;
        });
        previousStats.current = callStatsReport;
    }, [callStatsReport]);
    const latencyComparison = {
        lowBound: latencyLowBound,
        highBound: latencyHighBound,
        value: callStatsReport?.publisherStats.averageRoundTripTimeInMs || 0,
    };
    return (jsxRuntime.jsx("div", { className: "str-video__call-stats", children: callStatsReport && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsxs("div", { className: "str-video__call-stats__header", children: [jsxRuntime.jsxs("h3", { className: "str-video__call-stats__heading", children: [jsxRuntime.jsx(Icon, { className: "str-video__call-stats__icon", icon: "call-latency" }), t('Call Latency')] }), jsxRuntime.jsx("p", { className: "str-video__call-stats__description", children: t('Very high latency values may reduce call quality, cause lag, and make the call less enjoyable.') })] }), jsxRuntime.jsx("div", { className: "str-video__call-stats__latencychart", children: jsxRuntime.jsx(react.Suspense, { fallback: LatencyChartSuspenseFallback, children: jsxRuntime.jsx(CallStatsLatencyChart, { values: latencyBuffer }) }) }), jsxRuntime.jsxs("div", { className: "str-video__call-stats__header", children: [jsxRuntime.jsxs("h3", { className: "str-video__call-stats__heading", children: [jsxRuntime.jsx(Icon, { className: "str-video__call-stats__icon", icon: "network-quality" }), t('Call performance')] }), jsxRuntime.jsx("p", { className: "str-video__call-stats__description", children: t('Review the key data points below to assess call performance') })] }), jsxRuntime.jsxs("div", { className: "str-video__call-stats__card-container", children: [jsxRuntime.jsx(StatCard, { label: t('Region'), value: callStatsReport.datacenter }), jsxRuntime.jsx(StatCard, { label: t('Latency'), value: `${callStatsReport.publisherStats.averageRoundTripTimeInMs} ms.`, comparison: latencyComparison }), jsxRuntime.jsx(StatCard, { label: t('Receive jitter'), value: `${callStatsReport.subscriberStats.averageJitterInMs} ms.`, comparison: {
                                ...latencyComparison,
                                value: callStatsReport.subscriberStats.averageJitterInMs,
                            } }), jsxRuntime.jsx(StatCard, { label: t('Publish jitter'), value: `${callStatsReport.publisherStats.averageJitterInMs} ms.`, comparison: {
                                ...latencyComparison,
                                value: callStatsReport.publisherStats.averageJitterInMs,
                            } }), jsxRuntime.jsx(StatCard, { label: `${t('Publish resolution')}${showCodecInfo ? formatCodec(callStatsReport) : ''}`, value: toFrameSize(callStatsReport.publisherStats) }), jsxRuntime.jsx(StatCard, { label: t('Publish quality drop reason'), value: callStatsReport.publisherStats.qualityLimitationReasons }), jsxRuntime.jsx(StatCard, { label: t('Receiving resolution'), value: toFrameSize(callStatsReport.subscriberStats) }), jsxRuntime.jsx(StatCard, { label: t('Receive quality drop reason'), value: callStatsReport.subscriberStats.qualityLimitationReasons }), jsxRuntime.jsx(StatCard, { label: t('Publish bitrate'), value: publishBitrate }), jsxRuntime.jsx(StatCard, { label: t('Receiving bitrate'), value: subscribeBitrate })] })] })) }));
};
const StatCardExplanation = (props) => {
    const { description } = props;
    const [isOpen, setIsOpen] = react.useState(false);
    const { refs, floatingStyles, context } = react$1.useFloating({
        open: isOpen,
        onOpenChange: setIsOpen,
    });
    const hover = react$1.useHover(context);
    const { getReferenceProps, getFloatingProps } = react$1.useInteractions([hover]);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("div", { className: "str-video__call-explanation", ref: refs.setReference, ...getReferenceProps(), children: jsxRuntime.jsx(Icon, { className: "str-video__call-explanation__icon", icon: "info" }) }), isOpen && (jsxRuntime.jsx("div", { className: "str-video__call-explanation__description", ref: refs.setFloating, style: floatingStyles, ...getFloatingProps(), children: description }))] }));
};
const StatsTag = (props) => {
    const { children, status } = props;
    return (jsxRuntime.jsx("div", { className: clsx('str-video__call-stats__tag', {
            'str-video__call-stats__tag--good': status === Status.GOOD,
            'str-video__call-stats__tag--ok': status === Status.OK,
            'str-video__call-stats__tag--bad': status === Status.BAD,
        }), children: jsxRuntime.jsx("div", { className: "str-video__call-stats__tag__text", children: children }) }));
};
const StatCard = (props) => {
    const { label, value, description, comparison } = props;
    const { t } = videoReactBindings.useI18n();
    const status = comparison ? toStatus(comparison) : undefined;
    return (jsxRuntime.jsxs("div", { className: "str-video__call-stats__card", children: [jsxRuntime.jsxs("div", { className: "str-video__call-stats__card-content", children: [jsxRuntime.jsxs("div", { className: "str-video__call-stats__card-label", children: [label, description && jsxRuntime.jsx(StatCardExplanation, { description: description })] }), jsxRuntime.jsx("div", { className: "str-video__call-stats__card-value", children: value })] }), status && jsxRuntime.jsx(StatsTag, { status: status, children: t(status) })] }));
};
const toStatus = (config) => {
    const { value, lowBound, highBound } = config;
    if (value <= lowBound)
        return Status.GOOD;
    if (value >= lowBound && value <= highBound)
        return Status.OK;
    if (value >= highBound)
        return Status.BAD;
    return Status.GOOD;
};
const toFrameSize = (stats) => {
    const { highestFrameWidth: w, highestFrameHeight: h, highestFramesPerSecond: fps, } = stats;
    let size = `-`;
    if (w && h) {
        size = `${w}x${h}`;
        if (fps) {
            size += `@${fps}fps.`;
        }
    }
    return size;
};
const formatCodec = (callStatsReport) => {
    const { codecPerTrackType } = callStatsReport.publisherStats;
    if (!codecPerTrackType || !codecPerTrackType[videoClient.SfuModels.TrackType.VIDEO]) {
        return '';
    }
    const [, name] = codecPerTrackType[videoClient.SfuModels.TrackType.VIDEO].split('/');
    return name ? ` (${name})` : '';
};
const calculatePublishBitrate = (previousCallStatsReport, callStatsReport) => {
    const { publisherStats: { totalBytesSent: previousTotalBytesSent, timestamp: previousTimestamp, }, } = previousCallStatsReport;
    const { publisherStats: { totalBytesSent, timestamp }, } = callStatsReport;
    const bytesSent = totalBytesSent - previousTotalBytesSent;
    const timeElapsed = timestamp - previousTimestamp;
    return `${((bytesSent * 8) / timeElapsed).toFixed(2)} kbps`;
};
const calculateSubscribeBitrate = (previousCallStatsReport, callStatsReport) => {
    const { subscriberStats: { totalBytesReceived: previousTotalBytesReceived, timestamp: previousTimestamp, }, } = previousCallStatsReport;
    const { subscriberStats: { totalBytesReceived, timestamp }, } = callStatsReport;
    const bytesReceived = totalBytesReceived - previousTotalBytesReceived;
    const timeElapsed = timestamp - previousTimestamp;
    return `${((bytesReceived * 8) / timeElapsed).toFixed(2)} kbps`;
};

const CallStatsButton = () => (jsxRuntime.jsx(MenuToggle, { placement: "top-end", ToggleButton: ToggleMenuButton, children: jsxRuntime.jsx(CallStats, {}) }));
const ToggleMenuButton = react.forwardRef(function ToggleMenuButton(props, ref) {
    const { t } = videoReactBindings.useI18n();
    const { caption, menuShown } = props;
    return (jsxRuntime.jsx(CompositeButton, { ref: ref, active: menuShown, caption: caption, title: caption || t('Statistics'), "data-testid": "stats-button", children: jsxRuntime.jsx(Icon, { icon: "stats" }) }));
});

const ToggleAudioOutputButton = (props) => {
    const { t } = videoReactBindings.useI18n();
    const { caption, Menu = DeviceSelectorAudioOutput, menuPlacement = 'top', onMenuToggle, } = props;
    const [tooltipDisabled, setTooltipDisabled] = react.useState(false);
    return (jsxRuntime.jsx(WithTooltip, { title: caption || t('Speakers'), tooltipDisabled: tooltipDisabled, children: jsxRuntime.jsx(CompositeButton, { Menu: Menu, menuPlacement: menuPlacement, caption: caption, "data-testid": "audio-output-button", onMenuToggle: (shown) => {
                setTooltipDisabled(shown);
                onMenuToggle?.(shown);
            }, children: jsxRuntime.jsx(Icon, { icon: "speaker" }) }) }));
};

const BlockedUserListing = ({ data }) => {
    if (!data.length)
        return null;
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsx("div", { className: "str-video__participant-listing", children: data.map((userId) => (jsxRuntime.jsx(BlockedUserListingItem, { userId: userId }, userId))) }) }));
};
const BlockedUserListingItem = ({ userId }) => {
    const call = videoReactBindings.useCall();
    const unblockUserClickHandler = () => {
        if (userId)
            call?.unblockUser(userId);
    };
    return (jsxRuntime.jsxs("div", { className: "str-video__participant-listing-item", children: [jsxRuntime.jsx("div", { className: "str-video__participant-listing-item__display-name", children: userId }), jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.BLOCK_USERS], children: jsxRuntime.jsx(TextButton, { onClick: unblockUserClickHandler, children: "Unblock" }) })] }));
};

const CallParticipantListHeader = ({ onClose, }) => {
    const { useParticipants, useAnonymousParticipantCount } = videoReactBindings.useCallStateHooks();
    const participants = useParticipants();
    const anonymousParticipantCount = useAnonymousParticipantCount();
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsxs("div", { className: "str-video__participant-list-header", children: [jsxRuntime.jsxs("div", { className: "str-video__participant-list-header__title", children: [t('Participants'), ' ', jsxRuntime.jsxs("span", { className: "str-video__participant-list-header__title-count", children: ["[", participants.length, "]"] }), anonymousParticipantCount > 0 && (jsxRuntime.jsx("span", { className: "str-video__participant-list-header__title-anonymous", children: t('Anonymous', { count: anonymousParticipantCount }) }))] }), jsxRuntime.jsx(IconButton, { onClick: onClose, className: "str-video__participant-list-header__close-button", icon: "close" })] }));
};

const CallParticipantListingItem = ({ participant, DisplayName = DefaultDisplayName, }) => {
    const isAudioOn = videoClient.hasAudio(participant);
    const isVideoOn = videoClient.hasVideo(participant);
    const isPinnedOn = videoClient.isPinned(participant);
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsxs("div", { className: "str-video__participant-listing-item", children: [jsxRuntime.jsx(Avatar, { name: participant.name, imageSrc: participant.image }), jsxRuntime.jsx(DisplayName, { participant: participant }), jsxRuntime.jsxs("div", { className: "str-video__participant-listing-item__media-indicator-group", children: [jsxRuntime.jsx(MediaIndicator, { title: isAudioOn ? t('Microphone on') : t('Microphone off'), className: clsx('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isAudioOn ? 'mic' : 'mic-off'}`) }), jsxRuntime.jsx(MediaIndicator, { title: isVideoOn ? t('Camera on') : t('Camera off'), className: clsx('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isVideoOn ? 'camera' : 'camera-off'}`) }), isPinnedOn && (jsxRuntime.jsx(MediaIndicator, { title: t('Pinned'), className: clsx('str-video__participant-listing-item__icon', 'str-video__participant-listing-item__icon-pinned') })), jsxRuntime.jsx(MenuToggle, { placement: "bottom-end", ToggleButton: ToggleButton$2, children: jsxRuntime.jsx(ParticipantViewContext.Provider, { value: { participant, trackType: 'none' }, children: jsxRuntime.jsx(ParticipantActionsContextMenu, {}) }) })] })] }));
};
const MediaIndicator = (props) => (jsxRuntime.jsx(WithTooltip, { ...props }));
const DefaultDisplayName = ({ participant }) => {
    const connectedUser = videoReactBindings.useConnectedUser();
    const { t } = videoReactBindings.useI18n();
    const meFlag = participant.userId === connectedUser?.id ? t('Me') : '';
    const nameOrId = participant.name || participant.userId || t('Unknown');
    let displayName;
    if (!participant.name) {
        displayName = meFlag || nameOrId || t('Unknown');
    }
    else if (meFlag) {
        displayName = `${nameOrId} (${meFlag})`;
    }
    else {
        displayName = nameOrId;
    }
    return (jsxRuntime.jsx(WithTooltip, { className: "str-video__participant-listing-item__display-name", title: displayName, children: displayName }));
};
const ToggleButton$2 = react.forwardRef(function ToggleButton(props, ref) {
    return jsxRuntime.jsx(IconButton, { enabled: props.menuShown, icon: "ellipsis", ref: ref });
});

const CallParticipantListing = ({ data, }) => (jsxRuntime.jsx("div", { className: "str-video__participant-listing", children: data.map((participant) => (jsxRuntime.jsx(CallParticipantListingItem, { participant: participant }, participant.sessionId))) }));

const EmptyParticipantSearchList = () => {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx("div", { className: "str-video__participant-list--empty", children: t('No participants found') }));
};

const SearchInput = ({ exitSearch, isActive, ...rest }) => {
    const [inputElement, setInputElement] = react.useState(null);
    react.useEffect(() => {
        if (!inputElement)
            return;
        const handleKeyDown = (e) => {
            if (e.key.toLowerCase() === 'escape')
                exitSearch();
        };
        inputElement.addEventListener('keydown', handleKeyDown);
        return () => {
            inputElement.removeEventListener('keydown', handleKeyDown);
        };
    }, [exitSearch, inputElement]);
    return (jsxRuntime.jsxs("div", { className: clsx('str-video__search-input__container', {
            'str-video__search-input__container--active': isActive,
        }), children: [jsxRuntime.jsx("input", { placeholder: "Search", ...rest, ref: setInputElement }), isActive ? (jsxRuntime.jsx("button", { className: "str-video__search-input__clear-btn", onClick: exitSearch, children: jsxRuntime.jsx("span", { className: "str-video__search-input__icon--active" }) })) : (jsxRuntime.jsx("span", { className: "str-video__search-input__icon" }))] }));
};

function SearchResults({ EmptySearchResultComponent, LoadingIndicator: LoadingIndicator$1 = LoadingIndicator, searchQueryInProgress, searchResults, SearchResultList, }) {
    if (searchQueryInProgress) {
        return (jsxRuntime.jsx("div", { className: "str-video__search-results--loading", children: jsxRuntime.jsx(LoadingIndicator$1, {}) }));
    }
    if (!searchResults.length) {
        return jsxRuntime.jsx(EmptySearchResultComponent, {});
    }
    return jsxRuntime.jsx(SearchResultList, { data: searchResults });
}

const useSearch = ({ debounceInterval, searchFn, searchQuery = '', }) => {
    const [searchResults, setSearchResults] = react.useState([]);
    const [searchQueryInProgress, setSearchQueryInProgress] = react.useState(false);
    react.useEffect(() => {
        if (!searchQuery.length) {
            setSearchQueryInProgress(false);
            setSearchResults([]);
            return;
        }
        setSearchQueryInProgress(true);
        const timeout = setTimeout(async () => {
            try {
                const results = await searchFn(searchQuery);
                setSearchResults(results);
            }
            catch (error) {
                console.error(error);
            }
            finally {
                setSearchQueryInProgress(false);
            }
        }, debounceInterval);
        return () => {
            clearTimeout(timeout);
        };
    }, [debounceInterval, searchFn, searchQuery]);
    return {
        searchQueryInProgress,
        searchResults,
    };
};

const UserListTypes = {
    active: 'Active users',
    blocked: 'Blocked users',
};
const DEFAULT_DEBOUNCE_SEARCH_INTERVAL = 200;
const CallParticipantsList = ({ onClose, activeUsersSearchFn, blockedUsersSearchFn, debounceSearchInterval, }) => {
    const [searchQuery, setSearchQuery] = react.useState('');
    const [userListType, setUserListType] = react.useState('active');
    const exitSearch = react.useCallback(() => setSearchQuery(''), []);
    return (jsxRuntime.jsxs("div", { className: "str-video__participant-list", children: [jsxRuntime.jsx(CallParticipantListHeader, { onClose: onClose }), jsxRuntime.jsx(SearchInput, { value: searchQuery, onChange: ({ currentTarget }) => setSearchQuery(currentTarget.value), exitSearch: exitSearch, isActive: !!searchQuery }), jsxRuntime.jsx(CallParticipantListContentHeader, { userListType: userListType, setUserListType: setUserListType }), jsxRuntime.jsxs("div", { className: "str-video__participant-list__content", children: [userListType === 'active' && (jsxRuntime.jsx(ActiveUsersSearchResults, { searchQuery: searchQuery, activeUsersSearchFn: activeUsersSearchFn, debounceSearchInterval: debounceSearchInterval })), userListType === 'blocked' && (jsxRuntime.jsx(BlockedUsersSearchResults, { searchQuery: searchQuery, blockedUsersSearchFn: blockedUsersSearchFn, debounceSearchInterval: debounceSearchInterval }))] })] }));
};
const CallParticipantListContentHeader = ({ userListType, setUserListType, }) => {
    const call = videoReactBindings.useCall();
    const muteAll = () => {
        call?.muteAllUsers('audio');
    };
    return (jsxRuntime.jsxs("div", { className: "str-video__participant-list__content-header", children: [jsxRuntime.jsx("div", { className: "str-video__participant-list__content-header-title", children: userListType === 'active' && (jsxRuntime.jsx(videoReactBindings.Restricted, { requiredGrants: [videoClient.OwnCapability.MUTE_USERS], hasPermissionsOnly: true, children: jsxRuntime.jsx(TextButton, { onClick: muteAll, children: "Mute all" }) })) }), jsxRuntime.jsx(MenuToggle, { placement: "bottom-end", ToggleButton: ToggleButton$1, children: jsxRuntime.jsx(GenericMenu, { children: Object.keys(UserListTypes).map((lt) => (jsxRuntime.jsx(GenericMenuButtonItem, { "aria-selected": lt === userListType, onClick: () => setUserListType(lt), children: UserListTypes[lt] }, lt))) }) })] }));
};
const ActiveUsersSearchResults = ({ searchQuery, activeUsersSearchFn: activeUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, }) => {
    const { useParticipants } = videoReactBindings.useCallStateHooks();
    const participants = useParticipants({ sortBy: videoClient.name });
    const activeUsersSearchFn = react.useCallback((queryString) => {
        const queryRegExp = new RegExp(queryString, 'i');
        return Promise.resolve(participants.filter((participant) => {
            return participant.name.match(queryRegExp);
        }));
    }, [participants]);
    const { searchQueryInProgress, searchResults } = useSearch({
        searchFn: activeUsersSearchFnFromProps ?? activeUsersSearchFn,
        debounceInterval: debounceSearchInterval,
        searchQuery,
    });
    return (jsxRuntime.jsx(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : participants, SearchResultList: CallParticipantListing }));
};
const BlockedUsersSearchResults = ({ blockedUsersSearchFn: blockedUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, searchQuery, }) => {
    const { useCallBlockedUserIds } = videoReactBindings.useCallStateHooks();
    const blockedUsers = useCallBlockedUserIds();
    const blockedUsersSearchFn = react.useCallback((queryString) => {
        const queryRegExp = new RegExp(queryString, 'i');
        return Promise.resolve(blockedUsers.filter((blockedUser) => {
            return blockedUser.match(queryRegExp);
        }));
    }, [blockedUsers]);
    const { searchQueryInProgress, searchResults } = useSearch({
        searchFn: blockedUsersSearchFnFromProps ?? blockedUsersSearchFn,
        debounceInterval: debounceSearchInterval,
        searchQuery,
    });
    return (jsxRuntime.jsx(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : blockedUsers, SearchResultList: BlockedUserListing }));
};
const ToggleButton$1 = react.forwardRef(function ToggleButton(props, ref) {
    return jsxRuntime.jsx(IconButton, { enabled: props.menuShown, icon: "filter", ref: ref });
});

const CallPreview = (props) => {
    const { className, style } = props;
    const call = videoReactBindings.useCall();
    const { useCallThumbnail } = videoReactBindings.useCallStateHooks();
    const thumbnail = useCallThumbnail();
    const [imageRef, setImageRef] = react.useState(null);
    react.useEffect(() => {
        if (!imageRef || !call)
            return;
        const cleanup = call.bindCallThumbnailElement(imageRef);
        return () => cleanup();
    }, [imageRef, call]);
    if (!thumbnail)
        return null;
    return (jsxRuntime.jsx("img", { className: clsx('str-video__call-preview', className), style: style, alt: "Call Preview Thumbnail", ref: setImageRef }));
};

const CallRecordingListHeader = ({ callRecordings, onRefresh, }) => {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsxs("div", { className: "str-video__call-recording-list__header", children: [jsxRuntime.jsxs("div", { className: "str-video__call-recording-list__title", children: [jsxRuntime.jsx("span", { children: t('Call Recordings') }), callRecordings.length ? jsxRuntime.jsxs("span", { children: ["(", callRecordings.length, ")"] }) : null] }), onRefresh && (jsxRuntime.jsx(IconButton, { icon: "refresh", title: t('Refresh'), onClick: onRefresh }))] }));
};

const dateFormat = (date) => {
    const format = new Date(date);
    return format.toTimeString().split(' ')[0];
};
const CallRecordingListItem = ({ recording, }) => {
    return (jsxRuntime.jsxs("li", { className: "str-video__call-recording-list__item", children: [jsxRuntime.jsx("div", { className: "str-video__call-recording-list__table-cell str-video__call-recording-list__filename", children: recording.filename }), jsxRuntime.jsx("div", { className: "str-video__call-recording-list__table-cell str-video__call-recording-list__time", children: dateFormat(recording.start_time) }), jsxRuntime.jsx("div", { className: "str-video__call-recording-list__table-cell str-video__call-recording-list__time", children: dateFormat(recording.end_time) }), jsxRuntime.jsx("div", { className: "str-video__call-recording-list__table-cell str-video__call-recording-list__download", children: jsxRuntime.jsx("a", { className: clsx('str-video__call-recording-list-item__action-button', 'str-video__call-recording-list-item__action-button--download'), role: "button", href: recording.url, download: recording.filename, title: "Download the recording", children: jsxRuntime.jsx(Icon, { icon: "download" }) }) })] }));
};

const EmptyCallRecordingListing = () => {
    return (jsxRuntime.jsxs("div", { className: "str-video__call-recording-list__listing str-video__call-recording-list__listing--empty", children: [jsxRuntime.jsx("div", { className: "str-video__call-recording-list__listing--icon-empty" }), jsxRuntime.jsx("p", { className: "str-video__call-recording-list__listing--text-empty", children: "No recordings available" })] }));
};

const LoadingCallRecordingListing = ({ callRecordings, }) => {
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [callRecordings.map((recording) => (jsxRuntime.jsx(CallRecordingListItem, { recording: recording }, recording.filename))), jsxRuntime.jsx(LoadingIndicator, { text: "Recording getting ready" })] }));
};

const CallRecordingList = ({ callRecordings, CallRecordingListHeader: CallRecordingListHeader$1 = CallRecordingListHeader, CallRecordingListItem: CallRecordingListItem$1 = CallRecordingListItem, EmptyCallRecordingList = EmptyCallRecordingListing, loading, LoadingCallRecordingList = LoadingCallRecordingListing, onRefresh, }) => {
    return (jsxRuntime.jsxs("div", { className: "str-video__call-recording-list", children: [jsxRuntime.jsx(CallRecordingListHeader$1, { callRecordings: callRecordings, onRefresh: onRefresh }), jsxRuntime.jsx("div", { className: "str-video__call-recording-list__listing", children: loading ? (jsxRuntime.jsx(LoadingCallRecordingList, { callRecordings: callRecordings })) : callRecordings.length ? (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("ul", { className: "str-video__call-recording-list__list", children: jsxRuntime.jsxs("li", { className: "str-video__call-recording-list__item", children: [jsxRuntime.jsx("div", { className: "str-video__call-recording-list__filename", children: "Name" }), jsxRuntime.jsx("div", { className: "str-video__call-recording-list__time", children: "Start time" }), jsxRuntime.jsx("div", { className: "str-video__call-recording-list__time", children: "End time" }), jsxRuntime.jsx("div", { className: "str-video__call-recording-list__download" })] }) }), jsxRuntime.jsx("ul", { className: "str-video__call-recording-list__list", children: callRecordings.map((recording) => (jsxRuntime.jsx(CallRecordingListItem$1, { recording: recording }, recording.filename))) })] })) : (jsxRuntime.jsx(EmptyCallRecordingList, {})) })] }));
};

const NoiseCancellationContext = react.createContext(null);
/**
 * Exposes the NoiseCancellation API.
 * Throws an error if used outside <NoiseCancellationProvider />.
 */
const useNoiseCancellation = () => {
    const context = react.useContext(NoiseCancellationContext);
    if (!context) {
        throw new Error('useNoiseCancellation must be used within a NoiseCancellationProvider');
    }
    return context;
};
const NoiseCancellationProvider = (props) => {
    const { children, noiseCancellation } = props;
    const call = videoReactBindings.useCall();
    const { useCallSettings, useHasPermissions } = videoReactBindings.useCallStateHooks();
    const settings = useCallSettings();
    const noiseCancellationAllowed = !!(settings &&
        settings.audio.noise_cancellation &&
        settings.audio.noise_cancellation.mode !==
            videoClient.NoiseCancellationSettingsModeEnum.DISABLED);
    const hasCapability = useHasPermissions(videoClient.OwnCapability.ENABLE_NOISE_CANCELLATION);
    const [isSupportedByBrowser, setIsSupportedByBrowser] = react.useState(undefined);
    react.useEffect(() => {
        const result = noiseCancellation.isSupported();
        if (typeof result === 'boolean') {
            setIsSupportedByBrowser(result);
        }
        else {
            result
                .then((_isSupportedByBrowser) => setIsSupportedByBrowser(_isSupportedByBrowser))
                .catch((err) => console.error(`Can't determine if noise cancellation is supported`, err));
        }
    }, [noiseCancellation]);
    const isSupported = isSupportedByBrowser && hasCapability && noiseCancellationAllowed;
    const [isEnabled, setIsEnabled] = react.useState(false);
    const deinit = react.useRef();
    react.useEffect(() => {
        if (!call || !isSupported)
            return;
        const unsubscribe = noiseCancellation.on('change', (v) => setIsEnabled(v));
        const init = (deinit.current || Promise.resolve())
            .then(() => noiseCancellation.init())
            .then(() => call.microphone.enableNoiseCancellation(noiseCancellation))
            .catch((err) => console.error(`Can't initialize noise suppression`, err));
        return () => {
            deinit.current = init
                .then(() => call.microphone.disableNoiseCancellation())
                .then(() => noiseCancellation.dispose())
                .then(() => unsubscribe());
        };
    }, [call, isSupported, noiseCancellation]);
    return (jsxRuntime.jsx(NoiseCancellationContext.Provider, { value: {
            isSupported,
            isEnabled,
            setEnabled: (enabledOrSetter) => {
                if (!noiseCancellation)
                    return;
                const enable = typeof enabledOrSetter === 'function'
                    ? enabledOrSetter(isEnabled)
                    : enabledOrSetter;
                if (enable) {
                    noiseCancellation.enable();
                }
                else {
                    noiseCancellation.disable();
                }
            },
        }, children: children }));
};

const RingingCallControls = () => {
    const call = videoReactBindings.useCall();
    const { useCallCallingState } = videoReactBindings.useCallStateHooks();
    const callCallingState = useCallCallingState();
    if (!call)
        return null;
    const buttonsDisabled = callCallingState !== videoClient.CallingState.RINGING;
    return (jsxRuntime.jsx("div", { className: "str-video__pending-call-controls", children: call.isCreatedByMe ? (jsxRuntime.jsx(CancelCallButton, { disabled: buttonsDisabled })) : (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(AcceptCallButton, { disabled: buttonsDisabled }), jsxRuntime.jsx(CancelCallButton, { onClick: () => {
                        const reason = call.isCreatedByMe ? 'cancel' : 'decline';
                        call.leave({ reject: true, reason });
                    }, disabled: buttonsDisabled })] })) }));
};

const CALLING_STATE_TO_LABEL = {
    [videoClient.CallingState.JOINING]: 'Joining',
    [videoClient.CallingState.RINGING]: 'Ringing',
    [videoClient.CallingState.MIGRATING]: 'Migrating',
    [videoClient.CallingState.RECONNECTING]: 'Re-connecting',
    [videoClient.CallingState.RECONNECTING_FAILED]: 'Failed',
    [videoClient.CallingState.OFFLINE]: 'No internet connection',
    [videoClient.CallingState.IDLE]: '',
    [videoClient.CallingState.UNKNOWN]: '',
    [videoClient.CallingState.JOINED]: 'Joined',
    [videoClient.CallingState.LEFT]: 'Left call',
};
const RingingCall = (props) => {
    const { includeSelf = false, totalMembersToShow = 3 } = props;
    const call = videoReactBindings.useCall();
    const { t } = videoReactBindings.useI18n();
    const { useCallCallingState, useCallMembers } = videoReactBindings.useCallStateHooks();
    const callingState = useCallCallingState();
    const members = useCallMembers();
    const connectedUser = videoReactBindings.useConnectedUser();
    if (!call)
        return null;
    // take the first N members to show their avatars
    const membersToShow = (members || [])
        .slice(0, totalMembersToShow)
        .map(({ user }) => user)
        .filter((user) => user.id !== connectedUser?.id || includeSelf);
    if (includeSelf &&
        !membersToShow.find((user) => user.id === connectedUser?.id)) {
        // if the current user is not in the initial batch of members,
        // replace the first item in membersToShow array with the current user
        const self = members.find(({ user }) => user.id === connectedUser?.id);
        if (self) {
            membersToShow.splice(0, 1, self.user);
        }
    }
    const callingStateLabel = CALLING_STATE_TO_LABEL[callingState];
    return (jsxRuntime.jsxs("div", { className: "str-video__call-panel str-video__call-panel--ringing", children: [jsxRuntime.jsx("div", { className: "str-video__call-panel__members-list", children: membersToShow.map((user) => (jsxRuntime.jsxs("div", { className: "str-video__call-panel__member-box", children: [jsxRuntime.jsx(Avatar, { name: user.name, imageSrc: user.image }), user.name && (jsxRuntime.jsx("div", { className: "str-video__member_details", children: jsxRuntime.jsx("span", { className: "str-video__member_name", children: user.name }) }))] }, user.id))) }), callingStateLabel && (jsxRuntime.jsx("div", { className: "str-video__call-panel__calling-state-label", children: t(callingStateLabel) })), [videoClient.CallingState.RINGING, videoClient.CallingState.JOINING].includes(callingState) && (jsxRuntime.jsx(RingingCallControls, {}))] }));
};

const byNameOrId = (a, b) => {
    if (a.name && b.name && a.name < b.name)
        return -1;
    if (a.name && b.name && a.name > b.name)
        return 1;
    if (a.id < b.id)
        return -1;
    if (a.id > b.id)
        return 1;
    return 0;
};
const PermissionRequests = () => {
    const call = videoReactBindings.useCall();
    const { useLocalParticipant, useHasPermissions } = videoReactBindings.useCallStateHooks();
    const localParticipant = useLocalParticipant();
    const [expanded, setExpanded] = react.useState(false);
    const [permissionRequests, setPermissionRequests] = react.useState([]);
    const canUpdateCallPermissions = useHasPermissions(videoClient.OwnCapability.UPDATE_CALL_PERMISSIONS);
    const localUserId = localParticipant?.userId;
    react.useEffect(() => {
        if (!call || !canUpdateCallPermissions)
            return;
        return call.on('call.permission_request', (event) => {
            if (event.user.id !== localUserId) {
                setPermissionRequests((requests) => [...requests, event].sort((a, b) => byNameOrId(a.user, b.user)));
            }
        });
    }, [call, canUpdateCallPermissions, localUserId]);
    const handleUpdatePermission = (request, type) => {
        return async () => {
            const { user, permissions } = request;
            switch (type) {
                case 'grant':
                    await call?.grantPermissions(user.id, permissions);
                    break;
                case 'revoke':
                    await call?.revokePermissions(user.id, permissions);
                    break;
            }
            setPermissionRequests((requests) => requests.filter((r) => r !== request));
        };
    };
    const { refs, x, y, strategy } = useFloatingUIPreset({
        placement: 'bottom',
        strategy: 'absolute',
    });
    // don't render anything if there are no permission requests
    if (permissionRequests.length === 0)
        return null;
    return (jsxRuntime.jsxs("div", { className: "str-video__permission-requests", ref: refs.setReference, children: [jsxRuntime.jsxs("div", { className: "str-video__permission-requests__notification", children: [jsxRuntime.jsxs("span", { className: "str-video__permission-requests__notification__message", children: [permissionRequests.length, " pending permission requests"] }), jsxRuntime.jsx(Button, { type: "button", onClick: () => {
                            setExpanded((e) => !e);
                        }, children: expanded ? 'Hide requests' : 'Show requests' })] }), expanded && (jsxRuntime.jsx(PermissionRequestList, { ref: refs.setFloating, style: {
                    position: strategy,
                    top: y ?? 0,
                    left: x ?? 0,
                    overflowY: 'auto',
                }, permissionRequests: permissionRequests, handleUpdatePermission: handleUpdatePermission }))] }));
};
const PermissionRequestList = react.forwardRef(function PermissionRequestList(props, ref) {
    const { permissionRequests, handleUpdatePermission, ...rest } = props;
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx("div", { className: "str-video__permission-requests-list", ref: ref, ...rest, children: permissionRequests.map((request, reqIndex) => {
            const { user, permissions } = request;
            return (jsxRuntime.jsx(react.Fragment, { children: permissions.map((permission) => (jsxRuntime.jsxs("div", { className: "str-video__permission-request", children: [jsxRuntime.jsx("div", { className: "str-video__permission-request__message", children: messageForPermission(user.name || user.id, permission, t) }), jsxRuntime.jsx(Button, { className: "str-video__permission-request__button--allow", type: "button", onClick: handleUpdatePermission(request, 'grant'), children: t('Allow') }), jsxRuntime.jsx(Button, { className: "str-video__permission-request__button--reject", type: "button", onClick: handleUpdatePermission(request, 'revoke'), children: t('Revoke') }), jsxRuntime.jsx(Button, { className: "str-video__permission-request__button--reject", type: "button", onClick: handleUpdatePermission(request, 'dismiss'), children: t('Dismiss') })] }, permission))) }, `${user.id}/${reqIndex}`));
        }) }));
});
const Button = (props) => {
    const { className, ...rest } = props;
    return (jsxRuntime.jsx("button", { className: clsx('str-video__permission-request__button', className), ...rest }));
};
const messageForPermission = (userName, permission, t) => {
    switch (permission) {
        case videoClient.OwnCapability.SEND_AUDIO:
            return t('{{ userName }} is requesting to speak', { userName });
        case videoClient.OwnCapability.SEND_VIDEO:
            return t('{{ userName }} is requesting to share their camera', {
                userName,
            });
        case videoClient.OwnCapability.SCREENSHARE:
            return t('{{ userName }} is requesting to present their screen', {
                userName,
            });
        default:
            return t('{{ userName }} is requesting permission: {{ permission }}', {
                userName,
                permission,
            });
    }
};

const StreamTheme = ({ as: Component = 'div', className, children, ...props }) => {
    return (jsxRuntime.jsx(Component, { ...props, className: clsx('str-video', className), children: children }));
};

const DefaultDisabledVideoPreview = () => {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx("div", { className: "str_video__video-preview__disabled-video-preview", children: t('Video is disabled') }));
};
const DefaultNoCameraPreview = () => {
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx("div", { className: "str_video__video-preview__no-camera-preview", children: t('No camera found') }));
};
const VideoPreview = ({ className, mirror = true, DisabledVideoPreview = DefaultDisabledVideoPreview, NoCameraPreview = DefaultNoCameraPreview, StartingCameraPreview = LoadingIndicator, }) => {
    const { useCameraState } = videoReactBindings.useCallStateHooks();
    const { devices, status, isMute, mediaStream } = useCameraState();
    let contents;
    if (isMute && devices?.length === 0) {
        contents = jsxRuntime.jsx(NoCameraPreview, {});
    }
    else if (status === 'enabled') {
        const loading = !mediaStream;
        contents = (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [mediaStream && (jsxRuntime.jsx(BaseVideo, { stream: mediaStream, className: clsx('str-video__video-preview', {
                        'str-video__video-preview--mirror': mirror,
                        'str-video__video-preview--loading': loading,
                    }) })), loading && jsxRuntime.jsx(StartingCameraPreview, {})] }));
    }
    else {
        contents = jsxRuntime.jsx(DisabledVideoPreview, {});
    }
    return (jsxRuntime.jsx("div", { className: clsx('str-video__video-preview-container', className), children: contents }));
};

const ToggleButton = react.forwardRef(function ToggleButton(props, ref) {
    return jsxRuntime.jsx(IconButton, { enabled: props.menuShown, icon: "ellipsis", ref: ref });
});
const DefaultScreenShareOverlay = () => {
    const call = videoReactBindings.useCall();
    const { t } = videoReactBindings.useI18n();
    const stopScreenShare = () => {
        call?.screenShare.disable();
    };
    return (jsxRuntime.jsxs("div", { className: "str-video__screen-share-overlay", children: [jsxRuntime.jsx(Icon, { icon: "screen-share-off" }), jsxRuntime.jsx("span", { className: "str-video__screen-share-overlay__title", children: t('You are presenting your screen') }), jsxRuntime.jsxs("button", { onClick: stopScreenShare, className: "str-video__screen-share-overlay__button", children: [jsxRuntime.jsx(Icon, { icon: "close" }), " ", t('Stop Screen Sharing')] })] }));
};
const DefaultParticipantViewUI = ({ indicatorsVisible = true, menuPlacement = 'bottom-start', showMenuButton = true, ParticipantActionsContextMenu: ParticipantActionsContextMenu$1 = ParticipantActionsContextMenu, }) => {
    const { participant, trackType } = useParticipantViewContext();
    const isScreenSharing = videoClient.hasScreenShare(participant);
    if (participant.isLocalParticipant &&
        isScreenSharing &&
        trackType === 'screenShareTrack') {
        return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(DefaultScreenShareOverlay, {}), jsxRuntime.jsx(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));
    }
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [showMenuButton && (jsxRuntime.jsx(MenuToggle, { strategy: "fixed", placement: menuPlacement, ToggleButton: ToggleButton, children: jsxRuntime.jsx(ParticipantActionsContextMenu$1, {}) })), jsxRuntime.jsx(Reaction, { participant: participant }), jsxRuntime.jsx(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));
};
const ParticipantDetails = ({ indicatorsVisible = true, }) => {
    const { participant } = useParticipantViewContext();
    const { isLocalParticipant, connectionQuality, pin, sessionId, name, userId, } = participant;
    const call = videoReactBindings.useCall();
    const { t } = videoReactBindings.useI18n();
    const connectionQualityAsString = !!connectionQuality &&
        videoClient.SfuModels.ConnectionQuality[connectionQuality].toLowerCase();
    const hasAudioTrack = videoClient.hasAudio(participant);
    const hasVideoTrack = videoClient.hasVideo(participant);
    const canUnpin = !!pin && pin.isLocalPin;
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("div", { className: "str-video__participant-details", children: jsxRuntime.jsxs("span", { className: "str-video__participant-details__name", children: [name || userId, indicatorsVisible && !hasAudioTrack && (jsxRuntime.jsx("span", { className: "str-video__participant-details__name--audio-muted" })), indicatorsVisible && !hasVideoTrack && (jsxRuntime.jsx("span", { className: "str-video__participant-details__name--video-muted" })), indicatorsVisible && canUnpin && (
                        // TODO: remove this monstrosity once we have a proper design
                        jsxRuntime.jsx("span", { title: t('Unpin'), onClick: () => call?.unpin(sessionId), className: "str-video__participant-details__name--pinned" })), indicatorsVisible && jsxRuntime.jsx(SpeechIndicator, {})] }) }), indicatorsVisible && (jsxRuntime.jsx(Notification, { isVisible: isLocalParticipant &&
                    connectionQuality === videoClient.SfuModels.ConnectionQuality.POOR, message: t('Poor connection quality'), children: connectionQualityAsString && (jsxRuntime.jsx("span", { className: clsx('str-video__participant-details__connection-quality', `str-video__participant-details__connection-quality--${connectionQualityAsString}`), title: connectionQualityAsString })) }))] }));
};
const SpeechIndicator = () => {
    const { participant } = useParticipantViewContext();
    const { isSpeaking, isDominantSpeaker } = participant;
    return (jsxRuntime.jsxs("span", { className: clsx('str-video__speech-indicator', isSpeaking && 'str-video__speech-indicator--speaking', isDominantSpeaker && 'str-video__speech-indicator--dominant'), children: [jsxRuntime.jsx("span", { className: "str-video__speech-indicator__bar" }), jsxRuntime.jsx("span", { className: "str-video__speech-indicator__bar" }), jsxRuntime.jsx("span", { className: "str-video__speech-indicator__bar" })] }));
};

const ParticipantView = react.forwardRef(function ParticipantView({ participant, trackType = 'videoTrack', mirror, muteAudio, refs: { setVideoElement, setVideoPlaceholderElement } = {}, className, VideoPlaceholder, PictureInPicturePlaceholder, ParticipantViewUI = DefaultParticipantViewUI, }, ref) {
    const { isLocalParticipant, isSpeaking, isDominantSpeaker, sessionId } = participant;
    const hasAudioTrack = videoClient.hasAudio(participant);
    const hasVideoTrack = videoClient.hasVideo(participant);
    const hasScreenShareAudioTrack = videoClient.hasScreenShareAudio(participant);
    const [trackedElement, setTrackedElement] = react.useState(null);
    const [contextVideoElement, setContextVideoElement] = react.useState(null);
    const [contextVideoPlaceholderElement, setContextVideoPlaceholderElement] = react.useState(null);
    // TODO: allow to pass custom ViewportTracker instance from props
    useTrackElementVisibility({
        sessionId,
        trackedElement,
        trackType,
    });
    const { useIncomingVideoSettings } = videoReactBindings.useCallStateHooks();
    const { isParticipantVideoEnabled } = useIncomingVideoSettings();
    const participantViewContextValue = react.useMemo(() => ({
        participant,
        participantViewElement: trackedElement,
        videoElement: contextVideoElement,
        videoPlaceholderElement: contextVideoPlaceholderElement,
        trackType,
    }), [
        contextVideoElement,
        contextVideoPlaceholderElement,
        participant,
        trackedElement,
        trackType,
    ]);
    const videoRefs = react.useMemo(() => ({
        setVideoElement: (element) => {
            setVideoElement?.(element);
            setContextVideoElement(element);
        },
        setVideoPlaceholderElement: (element) => {
            setVideoPlaceholderElement?.(element);
            setContextVideoPlaceholderElement(element);
        },
    }), [setVideoElement, setVideoPlaceholderElement]);
    return (jsxRuntime.jsx("div", { "data-testid": "participant-view", ref: (element) => {
            applyElementToRef(ref, element);
            setTrackedElement(element);
        }, className: clsx('str-video__participant-view', isDominantSpeaker && 'str-video__participant-view--dominant-speaker', isSpeaking && 'str-video__participant-view--speaking', !hasVideoTrack && 'str-video__participant-view--no-video', !hasAudioTrack && 'str-video__participant-view--no-audio', className), children: jsxRuntime.jsxs(ParticipantViewContext.Provider, { value: participantViewContextValue, children: [!isLocalParticipant && !muteAudio && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [hasAudioTrack && (jsxRuntime.jsx(Audio, { participant: participant, trackType: "audioTrack" })), hasScreenShareAudioTrack && (jsxRuntime.jsx(Audio, { participant: participant, trackType: "screenShareAudioTrack" }))] })), jsxRuntime.jsx(Video$1, { VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder, participant: participant, trackType: trackType, refs: videoRefs, enabled: isLocalParticipant ||
                        trackType !== 'videoTrack' ||
                        isParticipantVideoEnabled(participant.sessionId), mirror: mirror, autoPlay: true }), isComponentType(ParticipantViewUI) ? (jsxRuntime.jsx(ParticipantViewUI, {})) : (ParticipantViewUI)] }) }));
});
ParticipantView.displayName = 'ParticipantView';

// re-exporting the StreamCallProvider as StreamCall
const StreamCall = videoReactBindings.StreamCallProvider;
StreamCall.displayName = 'StreamCall';

var Joining = "Joining";
var Mic = "Mic";
var Ringing = "Ringing";
var Speakers = "Speakers";
var Video = "Video";
var Live = "Live";
var Reactions = "Reactions";
var Statistics = "Statistics";
var Invite = "Invite";
var Join = "Join";
var You = "You";
var Me = "Me";
var Unknown = "Unknown";
var Default = "Default";
var Refresh = "Refresh";
var Allow = "Allow";
var Revoke = "Revoke";
var Dismiss = "Dismiss";
var Pinned = "Pinned";
var Unpin = "Unpin";
var Pin = "Pin";
var Block = "Block";
var Enter = "Enter";
var Leave = "Leave";
var Participants = "Participants";
var Anonymous = ", and ({{ count }}) anonymous";
var en = {
	Joining: Joining,
	Mic: Mic,
	"No internet connection": "No internet connection",
	"Re-connecting": "Re-connecting",
	Ringing: Ringing,
	"Screen Share": "Screen Share",
	"Select a Camera": "Select a Camera",
	"Select a Mic": "Select a Mic",
	"Select Speakers": "Select Speakers",
	Speakers: Speakers,
	Video: Video,
	"You are muted. Unmute to speak.": "You are muted. Unmute to speak.",
	Live: Live,
	"You can now speak.": "You can now speak.",
	"Awaiting for an approval to speak.": "Awaiting for an approval to speak.",
	"You can no longer speak.": "You can no longer speak.",
	"You can now share your video.": "You can now share your video.",
	"Awaiting for an approval to share your video.": "Awaiting for an approval to share your video.",
	"You can no longer share your video.": "You can no longer share your video.",
	"Waiting for recording to stop...": "Waiting for recording to stop...",
	"Waiting for recording to start...": "Waiting for recording to start...",
	"Record call": "Record call",
	Reactions: Reactions,
	Statistics: Statistics,
	"You can now share your screen.": "You can now share your screen.",
	"Awaiting for an approval to share screen.": "Awaiting for an approval to share screen.",
	"You can no longer share your screen.": "You can no longer share your screen.",
	"Share screen": "Share screen",
	"Incoming Call...": "Incoming Call...",
	"Calling...": "Calling...",
	"Mute All": "Mute All",
	Invite: Invite,
	Join: Join,
	You: You,
	Me: Me,
	Unknown: Unknown,
	"Toggle device menu": "Toggle device menu",
	Default: Default,
	"Call Recordings": "Call Recordings",
	Refresh: Refresh,
	"Check your browser video permissions": "Check your browser video permissions",
	"Video publishing is disabled by the system": "Video publishing is disabled by the system",
	"You have no permission to share your video": "You have no permission to share your video",
	"You have no permission to share your audio": "You have no permission to share your audio",
	"You are presenting your screen": "You are presenting your screen",
	"Stop Screen Sharing": "Stop Screen Sharing",
	Allow: Allow,
	Revoke: Revoke,
	Dismiss: Dismiss,
	"Microphone on": "Microphone on",
	"Microphone off": "Microphone off",
	"Camera on": "Camera on",
	"Camera off": "Camera off",
	"No camera found": "No camera found",
	"Video is disabled": "Video is disabled",
	Pinned: Pinned,
	Unpin: Unpin,
	Pin: Pin,
	"Pin for everyone": "Pin for everyone",
	"Unpin for everyone": "Unpin for everyone",
	Block: Block,
	"Turn off video": "Turn off video",
	"Turn off screen share": "Turn off screen share",
	"Mute audio": "Mute audio",
	"Mute screen share audio": "Mute screen share audio",
	"Allow audio": "Allow audio",
	"Allow video": "Allow video",
	"Allow screen sharing": "Allow screen sharing",
	"Disable audio": "Disable audio",
	"Disable video": "Disable video",
	"Disable screen sharing": "Disable screen sharing",
	Enter: Enter,
	Leave: Leave,
	"Leave call": "Leave call",
	"End call for all": "End call for all",
	"{{ direction }} fullscreen": "{{ direction }} fullscreen",
	"{{ direction }} picture-in-picture": "{{ direction }} picture-in-picture",
	"Dominant Speaker": "Dominant Speaker",
	"Poor connection quality": "Poor connection quality. Please check your internet connection.",
	Participants: Participants,
	Anonymous: Anonymous,
	"No participants found": "No participants found",
	"Participants ({{ numberOfParticipants }})": "Participants ({{ numberOfParticipants }})",
	"{{ userName }} is sharing their screen": "{{ userName }} is sharing their screen",
	"{{ userName }} is requesting to speak": "{{ userName }} is requesting to speak",
	"{{ userName }} is requesting to share their camera": "{{ userName }} is requesting to share their camera",
	"{{ userName }} is requesting to present their screen": "{{ userName }} is requesting to present their screen",
	"{{ userName }} is requesting permission: {{ permission }}": "{{ userName }} is requesting permission: {{ permission }}"
};

const translations = { en };

const StreamVideo = (props) => {
    return (jsxRuntime.jsx(videoReactBindings.StreamVideoProvider, { translationsOverrides: translations, ...props }));
};
StreamVideo.displayName = 'StreamVideo';

function applyFilter(obj, filter) {
    if ('$and' in filter) {
        return filter.$and.every((f) => applyFilter(obj, f));
    }
    if ('$or' in filter) {
        return filter.$or.some((f) => applyFilter(obj, f));
    }
    if ('$not' in filter) {
        return !applyFilter(obj, filter.$not);
    }
    return checkConditions(obj, filter);
}
function checkConditions(obj, conditions) {
    let match = true;
    for (const key of Object.keys(conditions)) {
        const operator = conditions[key];
        const maybeOperator = operator && typeof operator === 'object';
        const value = obj[key];
        if (maybeOperator && '$eq' in operator) {
            const eqOperator = operator;
            match && (match = eqOperator.$eq === value);
        }
        else if (maybeOperator && '$neq' in operator) {
            const neqOperator = operator;
            match && (match = neqOperator.$neq !== value);
        }
        else if (maybeOperator && '$in' in operator) {
            const inOperator = operator;
            match && (match = inOperator.$in.includes(value));
        }
        else if (maybeOperator && '$contains' in operator) {
            if (Array.isArray(value)) {
                const containsOperator = operator;
                match && (match = value.includes(containsOperator.$contains));
            }
            else {
                match = false;
            }
        }
        else {
            const eqValue = operator;
            match && (match = eqValue === value);
        }
        if (!match) {
            return false;
        }
    }
    return true;
}

const useFilteredParticipants = ({ excludeLocalParticipant = false, filterParticipants, }) => {
    const { useParticipants, useRemoteParticipants } = videoReactBindings.useCallStateHooks();
    const allParticipants = useParticipants();
    const remoteParticipants = useRemoteParticipants();
    return react.useMemo(() => {
        const unfilteredParticipants = excludeLocalParticipant
            ? remoteParticipants
            : allParticipants;
        return filterParticipants
            ? applyParticipantsFilter(unfilteredParticipants, filterParticipants)
            : unfilteredParticipants;
    }, [
        allParticipants,
        remoteParticipants,
        excludeLocalParticipant,
        filterParticipants,
    ]);
};
const applyParticipantsFilter = (participants, filter) => {
    const filterCallback = typeof filter === 'function'
        ? filter
        : (participant) => applyFilter({
            userId: participant.userId,
            isSpeaking: participant.isSpeaking,
            isDominantSpeaker: participant.isDominantSpeaker,
            name: participant.name,
            roles: participant.roles,
            isPinned: videoClient.isPinned(participant),
            hasVideo: videoClient.hasVideo(participant),
            hasAudio: videoClient.hasAudio(participant),
        }, filter);
    return participants.filter(filterCallback);
};
const usePaginatedLayoutSortPreset = (call) => {
    react.useEffect(() => {
        if (!call)
            return;
        call.setSortParticipantsBy(videoClient.paginatedLayoutSortPreset);
        return () => {
            resetSortPreset(call);
        };
    }, [call]);
};
const useSpeakerLayoutSortPreset = (call, isOneOnOneCall) => {
    react.useEffect(() => {
        if (!call)
            return;
        // always show the remote participant in the spotlight
        if (isOneOnOneCall) {
            call.setSortParticipantsBy(videoClient.combineComparators(videoClient.screenSharing, loggedIn));
        }
        else {
            call.setSortParticipantsBy(videoClient.speakerLayoutSortPreset);
        }
        return () => {
            resetSortPreset(call);
        };
    }, [call, isOneOnOneCall]);
};
const resetSortPreset = (call) => {
    // reset the sorting to the default for the call type
    const callConfig = videoClient.CallTypes.get(call.type);
    call.setSortParticipantsBy(callConfig.options.sortParticipantsBy || videoClient.defaultSortPreset);
};
const loggedIn = (a, b) => {
    if (a.isLocalParticipant)
        return 1;
    if (b.isLocalParticipant)
        return -1;
    return 0;
};

const LivestreamLayout = (props) => {
    const { useParticipants, useRemoteParticipants, useHasOngoingScreenShare } = videoReactBindings.useCallStateHooks();
    const call = videoReactBindings.useCall();
    const participants = useParticipants();
    const [currentSpeaker] = participants;
    const remoteParticipants = useRemoteParticipants();
    const hasOngoingScreenShare = useHasOngoingScreenShare();
    const presenter = hasOngoingScreenShare
        ? participants.find(videoClient.hasScreenShare)
        : undefined;
    usePaginatedLayoutSortPreset(call);
    const Overlay = (jsxRuntime.jsx(ParticipantOverlay, { showParticipantCount: props.showParticipantCount, showDuration: props.showDuration, showLiveBadge: props.showLiveBadge, showSpeakerName: props.showSpeakerName }));
    const { floatingParticipantProps, muted } = props;
    const FloatingParticipantOverlay = hasOngoingScreenShare && (jsxRuntime.jsx(ParticipantOverlay
    // these elements aren't needed for the video feed
    , { 
        // these elements aren't needed for the video feed
        showParticipantCount: floatingParticipantProps?.showParticipantCount ?? false, showDuration: floatingParticipantProps?.showDuration ?? false, showLiveBadge: floatingParticipantProps?.showLiveBadge ?? false, showSpeakerName: floatingParticipantProps?.showSpeakerName ?? true }));
    return (jsxRuntime.jsxs("div", { className: "str-video__livestream-layout__wrapper", children: [!muted && jsxRuntime.jsx(ParticipantsAudio, { participants: remoteParticipants }), hasOngoingScreenShare && presenter && (jsxRuntime.jsx(ParticipantView, { className: "str-video__livestream-layout__screen-share", participant: presenter, ParticipantViewUI: Overlay, trackType: "screenShareTrack", muteAudio // audio is rendered by ParticipantsAudio
                : true })), currentSpeaker && (jsxRuntime.jsx(ParticipantView, { className: clsx(hasOngoingScreenShare &&
                    clsx('str-video__livestream-layout__floating-participant', `str-video__livestream-layout__floating-participant--${floatingParticipantProps?.position ?? 'top-right'}`)), participant: currentSpeaker, ParticipantViewUI: FloatingParticipantOverlay || Overlay, mirror: props.mirrorLocalParticipantVideo !== false ? undefined : false, muteAudio // audio is rendered by ParticipantsAudio
                : true }))] }));
};
const ParticipantOverlay = (props) => {
    const { enableFullScreen = true, showParticipantCount = true, showDuration = true, showLiveBadge = true, showSpeakerName = false, } = props;
    const { participant } = useParticipantViewContext();
    const { useParticipantCount } = videoReactBindings.useCallStateHooks();
    const participantCount = useParticipantCount();
    const duration = useUpdateCallDuration();
    const toggleFullScreen = useToggleFullScreen();
    const { t } = videoReactBindings.useI18n();
    return (jsxRuntime.jsx("div", { className: "str-video__livestream-layout__overlay", children: jsxRuntime.jsxs("div", { className: "str-video__livestream-layout__overlay__bar", children: [showLiveBadge && (jsxRuntime.jsx("span", { className: "str-video__livestream-layout__live-badge", children: t('Live') })), showParticipantCount && (jsxRuntime.jsx("span", { className: "str-video__livestream-layout__viewers-count", children: participantCount })), showSpeakerName && (jsxRuntime.jsx("span", { className: "str-video__livestream-layout__speaker-name", title: participant.name || participant.userId || '', children: participant.name || participant.userId || '' })), showDuration && (jsxRuntime.jsx("span", { className: "str-video__livestream-layout__duration", children: formatDuration(duration) })), enableFullScreen && (jsxRuntime.jsx("span", { className: "str-video__livestream-layout__go-fullscreen", onClick: toggleFullScreen }))] }) }));
};
LivestreamLayout.displayName = 'LivestreamLayout';
const useUpdateCallDuration = () => {
    const { useIsCallLive, useCallSession } = videoReactBindings.useCallStateHooks();
    const isCallLive = useIsCallLive();
    const session = useCallSession();
    const [duration, setDuration] = react.useState(() => {
        if (!session || !session.live_started_at)
            return 0;
        const liveStartTime = new Date(session.live_started_at);
        const now = new Date();
        return Math.floor((now.getTime() - liveStartTime.getTime()) / 1000);
    });
    react.useEffect(() => {
        if (!isCallLive)
            return;
        const interval = setInterval(() => {
            setDuration((d) => d + 1);
        }, 1000);
        return () => {
            clearInterval(interval);
        };
    }, [isCallLive]);
    return duration;
};
const useToggleFullScreen = () => {
    const { participantViewElement } = useParticipantViewContext();
    const [isFullscreen, setIsFullscreen] = react.useState(false);
    return react.useCallback(() => {
        if (isFullscreen) {
            document.exitFullscreen().then(() => {
                setIsFullscreen(false);
            });
        }
        else {
            participantViewElement?.requestFullscreen().then(() => {
                setIsFullscreen(true);
            });
        }
    }, [isFullscreen, participantViewElement]);
};
const formatDuration = (durationInMs) => {
    const days = Math.floor(durationInMs / 86400);
    const hours = Math.floor(durationInMs / 3600);
    const minutes = Math.floor((durationInMs % 3600) / 60);
    const seconds = durationInMs % 60;
    return `${days ? days + ' ' : ''}${hours ? hours + ':' : ''}${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
};

const GROUP_SIZE = 16;
const PaginatedGridLayoutGroup = ({ group, mirror, VideoPlaceholder, PictureInPicturePlaceholder, ParticipantViewUI, }) => {
    return (jsxRuntime.jsx("div", { className: clsx('str-video__paginated-grid-layout__group', {
            'str-video__paginated-grid-layout--one': group.length === 1,
            'str-video__paginated-grid-layout--two-four': group.length >= 2 && group.length <= 4,
            'str-video__paginated-grid-layout--five-nine': group.length >= 5 && group.length <= 9,
        }), children: group.map((participant) => (jsxRuntime.jsx(ParticipantView, { participant: participant, muteAudio: true, mirror: mirror, VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder, ParticipantViewUI: ParticipantViewUI }, participant.sessionId))) }));
};
const PaginatedGridLayout = (props) => {
    const { groupSize = (props.groupSize || 0) > 0
        ? props.groupSize || GROUP_SIZE
        : GROUP_SIZE, excludeLocalParticipant = false, filterParticipants, mirrorLocalParticipantVideo = true, pageArrowsVisible = true, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, PictureInPicturePlaceholder, muted, } = props;
    const [page, setPage] = react.useState(0);
    const [paginatedGridLayoutWrapperElement, setPaginatedGridLayoutWrapperElement,] = react.useState(null);
    const call = videoReactBindings.useCall();
    const { useRemoteParticipants } = videoReactBindings.useCallStateHooks();
    const remoteParticipants = useRemoteParticipants();
    const participants = useFilteredParticipants({
        excludeLocalParticipant,
        filterParticipants,
    });
    usePaginatedLayoutSortPreset(call);
    react.useEffect(() => {
        if (!paginatedGridLayoutWrapperElement || !call)
            return;
        const cleanup = call.setViewport(paginatedGridLayoutWrapperElement);
        return () => cleanup();
    }, [paginatedGridLayoutWrapperElement, call]);
    // only used to render video elements
    const participantGroups = react.useMemo(() => chunk(participants, groupSize), [participants, groupSize]);
    const pageCount = participantGroups.length;
    // update page when page count is reduced and selected page no longer exists
    react.useEffect(() => {
        if (page > pageCount - 1) {
            setPage(Math.max(0, pageCount - 1));
        }
    }, [page, pageCount]);
    const selectedGroup = participantGroups[page];
    const mirror = mirrorLocalParticipantVideo ? undefined : false;
    if (!call)
        return null;
    return (jsxRuntime.jsxs("div", { className: "str-video__paginated-grid-layout__wrapper", ref: setPaginatedGridLayoutWrapperElement, children: [!muted && jsxRuntime.jsx(ParticipantsAudio, { participants: remoteParticipants }), jsxRuntime.jsxs("div", { className: "str-video__paginated-grid-layout", children: [pageArrowsVisible && pageCount > 1 && (jsxRuntime.jsx(IconButton, { icon: "caret-left", disabled: page === 0, onClick: () => setPage((currentPage) => Math.max(0, currentPage - 1)) })), selectedGroup && (jsxRuntime.jsx(PaginatedGridLayoutGroup, { group: selectedGroup, mirror: mirror, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI, PictureInPicturePlaceholder: PictureInPicturePlaceholder })), pageArrowsVisible && pageCount > 1 && (jsxRuntime.jsx(IconButton, { disabled: page === pageCount - 1, icon: "caret-right", onClick: () => setPage((currentPage) => Math.min(pageCount - 1, currentPage + 1)) }))] })] }));
};
PaginatedGridLayout.displayName = 'PaginatedGridLayout';

const useCalculateHardLimit = (
/**
 * Element that stretches to 100% of the whole layout component
 */
wrapperElement, 
/**
 * Element that directly hosts individual `ParticipantView` (or wrapper) elements
 */
hostElement, limit) => {
    const [calculatedLimit, setCalculatedLimit] = react.useState({
        vertical: typeof limit === 'number' ? limit : null,
        horizontal: typeof limit === 'number' ? limit : null,
    });
    react.useEffect(() => {
        if (!hostElement ||
            !wrapperElement ||
            typeof limit === 'number' ||
            typeof limit === 'undefined')
            return;
        let childWidth = null;
        let childHeight = null;
        const resizeObserver = new ResizeObserver((entries, observer) => {
            // this part should ideally run as little times as possible
            // get child measurements and disconnect
            // does not consider dynamically sized children
            // this hook is for SpeakerLayout use only, where children in the bar are fixed size
            if (entries.length > 1) {
                const child = hostElement.firstChild;
                if (child) {
                    childHeight = child.clientHeight;
                    childWidth = child.clientWidth;
                    observer.unobserve(hostElement);
                }
            }
            // keep the state at { vertical: 1, horizontal: 1 }
            // until we get the proper child measurements
            if (childHeight === null || childWidth === null)
                return;
            const vertical = Math.floor(wrapperElement.clientHeight / childHeight);
            const horizontal = Math.floor(wrapperElement.clientWidth / childWidth);
            setCalculatedLimit((pv) => {
                if (pv.vertical !== vertical || pv.horizontal !== horizontal)
                    return { vertical, horizontal };
                return pv;
            });
        });
        resizeObserver.observe(wrapperElement);
        resizeObserver.observe(hostElement);
        return () => {
            resizeObserver.disconnect();
        };
    }, [hostElement, limit, wrapperElement]);
    return calculatedLimit;
};

const DefaultParticipantViewUIBar = () => (jsxRuntime.jsx(DefaultParticipantViewUI, { menuPlacement: "top-end" }));
const SpeakerLayout = ({ ParticipantViewUIBar = DefaultParticipantViewUIBar, ParticipantViewUISpotlight = DefaultParticipantViewUI, VideoPlaceholder, PictureInPicturePlaceholder, participantsBarPosition = 'bottom', participantsBarLimit, mirrorLocalParticipantVideo = true, excludeLocalParticipant = false, filterParticipants, pageArrowsVisible = true, muted, }) => {
    const call = videoReactBindings.useCall();
    const { useParticipants, useRemoteParticipants } = videoReactBindings.useCallStateHooks();
    const allParticipants = useParticipants();
    const remoteParticipants = useRemoteParticipants();
    const [participantInSpotlight, ...otherParticipants] = useFilteredParticipants({ excludeLocalParticipant, filterParticipants });
    const [participantsBarWrapperElement, setParticipantsBarWrapperElement] = react.useState(null);
    const [participantsBarElement, setParticipantsBarElement] = react.useState(null);
    const [buttonsWrapperElement, setButtonsWrapperElement] = react.useState(null);
    const isSpeakerScreenSharing = participantInSpotlight && videoClient.hasScreenShare(participantInSpotlight);
    const hardLimit = useCalculateHardLimit(buttonsWrapperElement, participantsBarElement, participantsBarLimit);
    const isVertical = participantsBarPosition === 'left' || participantsBarPosition === 'right';
    const isHorizontal = participantsBarPosition === 'top' || participantsBarPosition === 'bottom';
    react.useEffect(() => {
        if (!participantsBarWrapperElement || !call)
            return;
        const cleanup = call.setViewport(participantsBarWrapperElement);
        return () => cleanup();
    }, [participantsBarWrapperElement, call]);
    const isOneOnOneCall = allParticipants.length === 2;
    useSpeakerLayoutSortPreset(call, isOneOnOneCall);
    let participantsWithAppliedLimit = otherParticipants;
    const hardLimitToApply = isVertical
        ? hardLimit.vertical
        : hardLimit.horizontal;
    if (typeof participantsBarLimit !== 'undefined' &&
        hardLimitToApply !== null) {
        participantsWithAppliedLimit = otherParticipants.slice(0, 
        // subtract 1 if speaker is sharing screen as
        // that one is rendered independently from otherParticipants array
        hardLimitToApply - (isSpeakerScreenSharing ? 1 : 0));
    }
    const mirror = mirrorLocalParticipantVideo ? undefined : false;
    if (!call)
        return null;
    const renderParticipantsBar = participantsBarPosition &&
        (participantsWithAppliedLimit.length > 0 || isSpeakerScreenSharing);
    return (jsxRuntime.jsxs("div", { className: "str-video__speaker-layout__wrapper", children: [!muted && jsxRuntime.jsx(ParticipantsAudio, { participants: remoteParticipants }), jsxRuntime.jsxs("div", { className: clsx('str-video__speaker-layout', participantsBarPosition &&
                    `str-video__speaker-layout--variant-${participantsBarPosition}`), children: [jsxRuntime.jsx("div", { className: "str-video__speaker-layout__spotlight", children: participantInSpotlight && (jsxRuntime.jsx(ParticipantView, { participant: participantInSpotlight, muteAudio: true, mirror: mirror, trackType: isSpeakerScreenSharing ? 'screenShareTrack' : 'videoTrack', ParticipantViewUI: ParticipantViewUISpotlight, VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder })) }), renderParticipantsBar && (jsxRuntime.jsxs("div", { ref: setButtonsWrapperElement, className: "str-video__speaker-layout__participants-bar-buttons-wrapper", children: [jsxRuntime.jsx("div", { className: "str-video__speaker-layout__participants-bar-wrapper", ref: setParticipantsBarWrapperElement, children: jsxRuntime.jsxs("div", { ref: setParticipantsBarElement, className: "str-video__speaker-layout__participants-bar", children: [isSpeakerScreenSharing && (jsxRuntime.jsx("div", { className: "str-video__speaker-layout__participant-tile", children: jsxRuntime.jsx(ParticipantView, { participant: participantInSpotlight, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder, mirror: mirror, muteAudio: true }) }, participantInSpotlight.sessionId)), participantsWithAppliedLimit.map((participant) => (jsxRuntime.jsx("div", { className: "str-video__speaker-layout__participant-tile", children: jsxRuntime.jsx(ParticipantView, { participant: participant, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder, mirror: mirror, muteAudio: true }) }, participant.sessionId)))] }) }), pageArrowsVisible && isVertical && (jsxRuntime.jsx(VerticalScrollButtons, { scrollWrapper: participantsBarWrapperElement })), pageArrowsVisible && isHorizontal && (jsxRuntime.jsx(HorizontalScrollButtons, { scrollWrapper: participantsBarWrapperElement }))] }))] })] }));
};
SpeakerLayout.displayName = 'SpeakerLayout';
const HorizontalScrollButtons = ({ scrollWrapper, }) => {
    const scrollPosition = useHorizontalScrollPosition(scrollWrapper);
    const scrollStartClickHandler = () => {
        scrollWrapper?.scrollBy({ left: -150, behavior: 'smooth' });
    };
    const scrollEndClickHandler = () => {
        scrollWrapper?.scrollBy({ left: 150, behavior: 'smooth' });
    };
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [scrollPosition && scrollPosition !== 'start' && (jsxRuntime.jsx(IconButton, { onClick: scrollStartClickHandler, icon: "caret-left", className: "str-video__speaker-layout__participants-bar--button-left" })), scrollPosition && scrollPosition !== 'end' && (jsxRuntime.jsx(IconButton, { onClick: scrollEndClickHandler, icon: "caret-right", className: "str-video__speaker-layout__participants-bar--button-right" }))] }));
};
const VerticalScrollButtons = ({ scrollWrapper, }) => {
    const scrollPosition = useVerticalScrollPosition(scrollWrapper);
    const scrollTopClickHandler = () => {
        scrollWrapper?.scrollBy({ top: -150, behavior: 'smooth' });
    };
    const scrollBottomClickHandler = () => {
        scrollWrapper?.scrollBy({ top: 150, behavior: 'smooth' });
    };
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [scrollPosition && scrollPosition !== 'top' && (jsxRuntime.jsx(IconButton, { onClick: scrollTopClickHandler, icon: "caret-up", className: "str-video__speaker-layout__participants-bar--button-top" })), scrollPosition && scrollPosition !== 'bottom' && (jsxRuntime.jsx(IconButton, { onClick: scrollBottomClickHandler, icon: "caret-down", className: "str-video__speaker-layout__participants-bar--button-bottom" }))] }));
};

const Pip = (props) => {
    const { t } = videoReactBindings.useI18n();
    const { excludeLocalParticipant = false, filterParticipants, mirrorLocalParticipantVideo = true, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, } = props;
    const [layoutWrapperElement, setLayoutWrapperElement] = react.useState(null);
    const call = videoReactBindings.useCall();
    const participants = useFilteredParticipants({
        excludeLocalParticipant,
        filterParticipants,
    });
    const screenSharingParticipant = participants.find((p) => videoClient.hasScreenShare(p));
    usePaginatedLayoutSortPreset(call);
    react.useEffect(() => {
        if (!layoutWrapperElement || !call)
            return;
        return call.setViewport(layoutWrapperElement);
    }, [layoutWrapperElement, call]);
    const mirror = mirrorLocalParticipantVideo ? undefined : false;
    if (!call)
        return null;
    return (jsxRuntime.jsxs("div", { className: "str-video__pip-layout", ref: setLayoutWrapperElement, children: [screenSharingParticipant &&
                (screenSharingParticipant.isLocalParticipant ? (jsxRuntime.jsxs("div", { className: "str-video__pip-screen-share-local", children: [jsxRuntime.jsx(Icon, { icon: "screen-share-off" }), jsxRuntime.jsx("span", { className: "str-video__pip-screen-share-local__title", children: t('You are presenting your screen') })] })) : (jsxRuntime.jsx(ParticipantView, { participant: screenSharingParticipant, trackType: "screenShareTrack", muteAudio: true, mirror: false, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI }))), participants.map((participant) => (jsxRuntime.jsx(ParticipantView, { participant: participant, muteAudio: true, mirror: mirror, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI }, participant.sessionId)))] }));
};
Pip.displayName = 'PipLayout.Pip';
const Host = () => {
    const { useRemoteParticipants } = videoReactBindings.useCallStateHooks();
    const remoteParticipants = useRemoteParticipants();
    return jsxRuntime.jsx(ParticipantsAudio, { participants: remoteParticipants });
};
Host.displayName = 'PipLayout.Host';
const PipLayout = { Pip, Host };

const LivestreamPlayer = (props) => {
    const { callType, callId, layoutProps } = props;
    const client = videoReactBindings.useStreamVideoClient();
    const [call, setCall] = react.useState();
    react.useEffect(() => {
        if (!client)
            return;
        const myCall = client.call(callType, callId);
        setCall(myCall);
        myCall.join().catch((e) => {
            console.error('Failed to join call', e);
        });
        return () => {
            myCall.leave().catch((e) => {
                console.error('Failed to leave call', e);
            });
            setCall(undefined);
        };
    }, [callId, callType, client]);
    if (!call)
        return null;
    return (jsxRuntime.jsx(StreamCall, { call: call, children: jsxRuntime.jsx(LivestreamLayout, { ...layoutProps }) }));
};

const [major, minor, patch] = ("1.14.4").split('.');
videoClient.setSdkInfo({
    type: videoClient.SfuModels.SdkType.REACT,
    major,
    minor,
    patch,
});

exports.AcceptCallButton = AcceptCallButton;
exports.Audio = Audio;
exports.Avatar = Avatar;
exports.AvatarFallback = AvatarFallback;
exports.BackgroundFiltersProvider = BackgroundFiltersProvider;
exports.BaseVideo = BaseVideo;
exports.CallControls = CallControls;
exports.CallParticipantListing = CallParticipantListing;
exports.CallParticipantListingItem = CallParticipantListingItem;
exports.CallParticipantsList = CallParticipantsList;
exports.CallPreview = CallPreview;
exports.CallRecordingList = CallRecordingList;
exports.CallRecordingListHeader = CallRecordingListHeader;
exports.CallRecordingListItem = CallRecordingListItem;
exports.CallStats = CallStats;
exports.CallStatsButton = CallStatsButton;
exports.CancelCallButton = CancelCallButton;
exports.CancelCallConfirmButton = CancelCallConfirmButton;
exports.CompositeButton = CompositeButton;
exports.DefaultParticipantViewUI = DefaultParticipantViewUI;
exports.DefaultReactionsMenu = DefaultReactionsMenu;
exports.DefaultScreenShareOverlay = DefaultScreenShareOverlay;
exports.DefaultVideoPlaceholder = DefaultVideoPlaceholder;
exports.DeviceSelector = DeviceSelector;
exports.DeviceSelectorAudioInput = DeviceSelectorAudioInput;
exports.DeviceSelectorAudioOutput = DeviceSelectorAudioOutput;
exports.DeviceSelectorVideo = DeviceSelectorVideo;
exports.DeviceSettings = DeviceSettings;
exports.DropDownSelect = DropDownSelect;
exports.DropDownSelectOption = DropDownSelectOption;
exports.EmptyCallRecordingListing = EmptyCallRecordingListing;
exports.GenericMenu = GenericMenu;
exports.GenericMenuButtonItem = GenericMenuButtonItem;
exports.Icon = Icon;
exports.IconButton = IconButton;
exports.LivestreamLayout = LivestreamLayout;
exports.LivestreamPlayer = LivestreamPlayer;
exports.LoadingCallRecordingListing = LoadingCallRecordingListing;
exports.LoadingIndicator = LoadingIndicator;
exports.MenuToggle = MenuToggle;
exports.NoiseCancellationProvider = NoiseCancellationProvider;
exports.Notification = Notification;
exports.PaginatedGridLayout = PaginatedGridLayout;
exports.ParticipantActionsContextMenu = ParticipantActionsContextMenu;
exports.ParticipantDetails = ParticipantDetails;
exports.ParticipantView = ParticipantView;
exports.ParticipantViewContext = ParticipantViewContext;
exports.ParticipantsAudio = ParticipantsAudio;
exports.PermissionNotification = PermissionNotification;
exports.PermissionRequestList = PermissionRequestList;
exports.PermissionRequests = PermissionRequests;
exports.PipLayout = PipLayout;
exports.ReactionsButton = ReactionsButton;
exports.RecordCallButton = RecordCallButton;
exports.RecordCallConfirmationButton = RecordCallConfirmationButton;
exports.RecordingInProgressNotification = RecordingInProgressNotification;
exports.RingingCall = RingingCall;
exports.RingingCallControls = RingingCallControls;
exports.ScreenShareButton = ScreenShareButton;
exports.SearchInput = SearchInput;
exports.SearchResults = SearchResults;
exports.SpeakerLayout = SpeakerLayout;
exports.SpeakingWhileMutedNotification = SpeakingWhileMutedNotification;
exports.SpeechIndicator = SpeechIndicator;
exports.StatCard = StatCard;
exports.StreamCall = StreamCall;
exports.StreamTheme = StreamTheme;
exports.StreamVideo = StreamVideo;
exports.TextButton = TextButton;
exports.ToggleAudioOutputButton = ToggleAudioOutputButton;
exports.ToggleAudioPreviewButton = ToggleAudioPreviewButton;
exports.ToggleAudioPublishingButton = ToggleAudioPublishingButton;
exports.ToggleVideoPreviewButton = ToggleVideoPreviewButton;
exports.ToggleVideoPublishingButton = ToggleVideoPublishingButton;
exports.Tooltip = Tooltip;
exports.Video = Video$1;
exports.VideoPreview = VideoPreview;
exports.WithTooltip = WithTooltip;
exports.defaultReactions = defaultReactions;
exports.translations = translations;
exports.useBackgroundFilters = useBackgroundFilters;
exports.useDeviceList = useDeviceList;
exports.useFilteredParticipants = useFilteredParticipants;
exports.useHorizontalScrollPosition = useHorizontalScrollPosition;
exports.useMenuContext = useMenuContext;
exports.useNoiseCancellation = useNoiseCancellation;
exports.useParticipantViewContext = useParticipantViewContext;
exports.usePersistedDevicePreferences = usePersistedDevicePreferences;
exports.useRequestPermission = useRequestPermission;
exports.useTrackElementVisibility = useTrackElementVisibility;
exports.useVerticalScrollPosition = useVerticalScrollPosition;
Object.keys(videoClient).forEach(function (k) {
    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () { return videoClient[k]; }
    });
});
Object.keys(videoReactBindings).forEach(function (k) {
    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () { return videoReactBindings[k]; }
    });
});
//# sourceMappingURL=index.cjs.js.map
