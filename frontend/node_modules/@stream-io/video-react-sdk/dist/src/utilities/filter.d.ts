export type Filter<T> = {
    $and: Array<Filter<T>>;
} | {
    $or: Array<Filter<T>>;
} | {
    $not: Filter<T>;
} | Conditions<T>;
type Conditions<T> = {
    [K in keyof T]?: T[K] extends Array<infer E> ? ArrayOperator<E> : ScalarOperator<T[K]>;
};
export type ScalarOperator<T> = EqOperator<T> | NeqOperator<T> | InOperator<T> | T;
export type ArrayOperator<T> = ContainsOperator<T>;
export type EqOperator<T> = {
    $eq: T;
};
export type NeqOperator<T> = {
    $neq: T;
};
export type InOperator<T> = {
    $in: Array<T>;
};
export type ContainsOperator<T> = {
    $contains: T;
};
export declare function applyFilter<T>(obj: T, filter: Filter<T>): boolean;
export {};
