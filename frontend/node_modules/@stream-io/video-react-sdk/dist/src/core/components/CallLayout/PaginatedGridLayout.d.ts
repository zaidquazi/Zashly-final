import { ParticipantViewProps } from '../ParticipantView';
import { ParticipantFilter, ParticipantPredicate } from './hooks';
export type PaginatedGridLayoutProps = {
    /**
     * The number of participants to display per page.
     */
    groupSize?: number;
    /**
     * Whether to exclude the local participant from the grid.
     * @default false
     */
    excludeLocalParticipant?: boolean;
    /**
     * Predicate to filter call participants or a filter object.
     * @example
     * // With a predicate:
     * <PaginatedGridLayout
     *   filterParticipants={p => p.roles.includes('student')}
     * />
     * @example
     * // With a filter object:
     * <PaginatedGridLayout
     *   filterParticipants={{
     *     $or: [
     *       { roles: { $contains: 'student' } },
     *       { isPinned: true },
     *     ],
     *   }}
     * />
     */
    filterParticipants?: ParticipantPredicate | ParticipantFilter;
    /**
     * When set to `false` disables mirroring of the local partipant's video.
     * @default true
     */
    mirrorLocalParticipantVideo?: boolean;
    /**
     * Turns on/off the pagination arrows.
     * @default true
     */
    pageArrowsVisible?: boolean;
    /**
     * Whether the layout is muted. Defaults to `false`.
     */
    muted?: boolean;
} & Pick<ParticipantViewProps, 'ParticipantViewUI' | 'VideoPlaceholder' | 'PictureInPicturePlaceholder'>;
export declare const PaginatedGridLayout: {
    (props: PaginatedGridLayoutProps): import("react/jsx-runtime").JSX.Element | null;
    displayName: string;
};
