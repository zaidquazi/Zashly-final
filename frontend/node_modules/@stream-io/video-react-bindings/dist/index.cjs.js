'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var i18next = require('i18next');
var videoClient = require('@stream-io/video-client');
var rxjs = require('rxjs');

const StreamCallContext = react.createContext(undefined);
/**
 * A provider for the call object.
 */
const StreamCallProvider = (props) => {
    const { call, children } = props;
    return (jsxRuntime.jsx(StreamCallContext.Provider, { value: call, children: children }));
};
/**
 * A hook to get the call object from the closest provider.
 */
const useCall = () => {
    return react.useContext(StreamCallContext);
};

const DEFAULT_NAMESPACE = 'stream-video';
const DEFAULT_CONFIG = {
    debug: false,
    currentLanguage: 'en',
    fallbackLanguage: false,
};
const mapToRegistry = (translationsMap, namespace) => Object.entries(translationsMap).reduce((acc, [lng, translations]) => {
    acc[lng] = { [namespace]: translations };
    return acc;
}, {});
const DEFAULT_TRANSLATIONS_REGISTRY = mapToRegistry({}, DEFAULT_NAMESPACE);
const defaultTranslationFunction = (key) => key;
class StreamI18n {
    /** Simple logger function */
    constructor(options = {}) {
        /** Translator function that converts the provided string into its equivalent in the current language. */
        this.t = defaultTranslationFunction;
        this.init = async () => {
            try {
                this.t = await this.i18nInstance.init();
            }
            catch (e) {
                console.error(`Failed to initialize translations: ${JSON.stringify(e)}`);
            }
            return this;
        };
        this.changeLanguage = async (language, onChange) => {
            if (!this._checkIsInitialized())
                return;
            // i18next detects the language, if none provided, but it is better
            // to show this detection here explicitly
            const browserLanguage = typeof window !== 'undefined' && window.navigator
                ? window.navigator.language
                : undefined;
            await this.i18nInstance.changeLanguage(language || browserLanguage);
            onChange?.(this.currentLanguage);
        };
        this.registerTranslationsForLanguage = ({ lng, translations, }) => {
            if (!this._checkIsInitialized())
                return;
            this.i18nInstance.addResourceBundle(lng, DEFAULT_NAMESPACE, translations, true, true);
        };
        this._checkIsInitialized = () => {
            if (!this.i18nInstance.isInitialized) {
                console.warn('I18n instance is not initialized. Call yourStreamI18nInstance.init().');
            }
            return this.i18nInstance.isInitialized;
        };
        const { debug = DEFAULT_CONFIG.debug, currentLanguage = DEFAULT_CONFIG.currentLanguage, fallbackLanguage = DEFAULT_CONFIG.fallbackLanguage, translationsOverrides, } = options;
        this.i18nInstance = i18next.createInstance({
            debug,
            defaultNS: DEFAULT_NAMESPACE,
            fallbackLng: fallbackLanguage,
            interpolation: { escapeValue: false },
            keySeparator: false,
            lng: currentLanguage,
            nsSeparator: false,
            parseMissingKeyHandler: (key) => {
                return key;
            },
            resources: DEFAULT_TRANSLATIONS_REGISTRY,
        });
        if (translationsOverrides) {
            this.i18nInstance.on('initialized', () => {
                Object.entries(translationsOverrides).forEach(([lng, translations]) => {
                    this.registerTranslationsForLanguage({ lng, translations });
                });
            });
        }
    }
    get currentLanguage() {
        this._checkIsInitialized();
        return this.i18nInstance.language;
    }
    get isInitialized() {
        return this.i18nInstance.isInitialized;
    }
}

const StreamI18nContext = react.createContext({
    t: defaultTranslationFunction,
});
const StreamI18nProvider = ({ children, ...createI18nParams }) => {
    const { i18n, t } = useCreateI18n(createI18nParams);
    return (jsxRuntime.jsx(StreamI18nContext.Provider, { value: { t, i18n }, children: children }));
};
const useCreateI18n = ({ i18nInstance, language, fallbackLanguage, translationsOverrides, }) => {
    const [i18n] = react.useState(() => i18nInstance ||
        new StreamI18n({
            currentLanguage: language,
            fallbackLanguage,
            translationsOverrides,
        }));
    const [t, setTranslationFn] = react.useState(() => defaultTranslationFunction);
    react.useEffect(() => {
        const { isInitialized } = i18n;
        if (!isInitialized) {
            i18n.init().then((_i18n) => setTranslationFn(() => _i18n.i18nInstance.t));
            return;
        }
        if (language && i18n?.currentLanguage !== language) {
            i18n.changeLanguage(language).catch((err) => {
                console.log('Error while changing language', err);
            });
        }
    }, [i18n, i18nInstance, language, translationsOverrides]);
    return { i18n, t };
};
const useI18n = () => react.useContext(StreamI18nContext);

const StreamVideoContext = react.createContext(undefined);
/**
 * StreamVideo is a provider component which should be used to wrap the entire application.
 * It provides the client object to all children components and initializes the i18n instance.
 *  @param PropsWithChildren<StreamVideoProps>
 *  @category Client State
 */
const StreamVideoProvider = ({ children, client, i18nInstance, language, translationsOverrides, }) => {
    return (jsxRuntime.jsx(StreamVideoContext.Provider, { value: client, children: jsxRuntime.jsx(StreamI18nProvider, { i18nInstance: i18nInstance, language: language, translationsOverrides: translationsOverrides, children: children }) }));
};
/**
 *
 * @returns
 *
 * @category Client State
 */
const useStreamVideoClient = () => {
    return react.useContext(StreamVideoContext);
};

/**
 * Checks whether we are using React Native
 */
const isReactNative = () => {
    if (typeof navigator === 'undefined')
        return false;
    return navigator.product?.toLowerCase() === 'reactnative';
};

/**
 * Utility hook which provides the current value of the given observable.
 *
 * @param observable$ the observable to read data from.
 * @param defaultValue a default value. Used when the observable data can't be read or emits an error.
 */
const useObservableValue = (observable$, defaultValue) => {
    const [value, setValue] = react.useState(() => {
        try {
            return videoClient.RxUtils.getCurrentValue(observable$);
        }
        catch (err) {
            if (typeof defaultValue === 'undefined')
                throw err;
            return defaultValue;
        }
    });
    react.useEffect(() => {
        return videoClient.RxUtils.createSubscription(observable$, setValue, (err) => {
            console.log('An error occurred while reading an observable', err);
            if (defaultValue)
                setValue(defaultValue);
        });
    }, [defaultValue, observable$]);
    return value;
};

// kind-of memoized, used as a default value
const EMPTY_DEVICES_ARRAY = Object.freeze([]);
/**
 * Utility hook, which provides the current call's state.
 *
 * @category Call State
 */
const useCallState = () => {
    const call = useCall();
    // return an empty and unlinked CallState object if there is no call in the provider
    // this ensures that the hooks always return a value and many null checks can be avoided
    if (!call) {
        const message = 'You are using useCallState() outside a Call context. ' +
            'Please wrap your component in <StreamCall /> and provide a "call" instance.';
        console.warn(message);
        return new videoClient.CallState();
    }
    return call.state;
};
/**
 * Utility hook which provides information whether the current call is being recorded. It will return `true` if the call is being recorded.
 *
 * @category Call State
 */
const useIsCallRecordingInProgress = () => {
    const { recording$ } = useCallState();
    return useObservableValue(recording$);
};
/**
 * Utility hook which provides information whether the current call is broadcasting.
 *
 * @category Call State
 */
const useIsCallHLSBroadcastingInProgress = () => {
    const { egress$ } = useCallState();
    const egress = useObservableValue(egress$);
    if (!egress)
        return false;
    return egress.broadcasting;
};
/**
 * Utility hook which provides information whether the current call is live.
 *
 * @category Call State
 */
const useIsCallLive = () => {
    const { backstage$ } = useCallState();
    const isBackstageOn = useObservableValue(backstage$);
    return !isBackstageOn;
};
/**
 * Returns the list of blocked users in the current call.
 */
const useCallBlockedUserIds = () => {
    const { blockedUserIds$ } = useCallState();
    return useObservableValue(blockedUserIds$);
};
/**
 * Returns the timestamp when this call was created.
 */
const useCallCreatedAt = () => {
    const { createdAt$ } = useCallState();
    return useObservableValue(createdAt$);
};
/**
 * Returns the timestamp when this call was ended.
 */
const useCallEndedAt = () => {
    const { endedAt$ } = useCallState();
    return useObservableValue(endedAt$);
};
/**
 * Returns the timestamp telling when the call is scheduled to start.
 */
const useCallStartsAt = () => {
    const { startsAt$ } = useCallState();
    return useObservableValue(startsAt$);
};
/**
 * Returns the timestamp when this call was updated.
 */
const useCallUpdatedAt = () => {
    const { updatedAt$ } = useCallState();
    return useObservableValue(updatedAt$);
};
/**
 * Returns the information about the call's creator.
 */
const useCallCreatedBy = () => {
    const { createdBy$ } = useCallState();
    return useObservableValue(createdBy$);
};
/**
 * Returns the call's custom data.
 */
const useCallCustomData = () => {
    const { custom$ } = useCallState();
    return useObservableValue(custom$);
};
/**
 * Returns the call's Egress information.
 */
const useCallEgress = () => {
    const { egress$ } = useCallState();
    return useObservableValue(egress$);
};
/**
 * Returns the call's Ingress information.
 */
const useCallIngress = () => {
    const { ingress$ } = useCallState();
    return useObservableValue(ingress$);
};
/**
 * Returns the data for the current call session.
 */
const useCallSession = () => {
    const { session$ } = useCallState();
    return useObservableValue(session$);
};
/**
 * Returns the call's settings.
 */
const useCallSettings = () => {
    const { settings$ } = useCallState();
    return useObservableValue(settings$);
};
/**
 * Returns whether the call has transcribing enabled.
 */
const useIsCallTranscribingInProgress = () => {
    const { transcribing$ } = useCallState();
    return useObservableValue(transcribing$);
};
/**
 * Returns information about the user who has marked this call as ended.
 */
const useCallEndedBy = () => {
    const { endedBy$ } = useCallState();
    return useObservableValue(endedBy$);
};
/**
 * Utility hook which provides a boolean indicating whether there is
 * a participant in the current call which shares their screen.
 *
 * @category Call State
 */
const useHasOngoingScreenShare = () => {
    const { hasOngoingScreenShare$ } = useCallState();
    return useObservableValue(hasOngoingScreenShare$);
};
/**
 * Utility hook which provides the latest stats report of the current call.
 *
 * The latest stats report of the current call.
 * When stats gathering is enabled, this observable will emit a new value
 * at a regular (configurable) interval.
 *
 * Consumers of this observable can implement their own batching logic
 * in case they want to show historical stats data.
 *
 * @category Call State
 */
const useCallStatsReport = () => {
    const { callStatsReport$ } = useCallState();
    return useObservableValue(callStatsReport$);
};
/**
 * Utility hook which provides the dominant speaker of the current call.
 *
 * @category Call State
 */
const useDominantSpeaker = () => {
    const { dominantSpeaker$ } = useCallState();
    return useObservableValue(dominantSpeaker$);
};
/**
 * Utility hook which provides a list of call members.
 *
 * @category Call State
 */
const useCallMembers = () => {
    const { members$ } = useCallState();
    return useObservableValue(members$);
};
/**
 * Utility hook providing the current calling state of the call. For example, `RINGING` or `JOINED`.
 *
 * @category Call State
 */
const useCallCallingState = () => {
    const { callingState$ } = useCallState();
    return useObservableValue(callingState$);
};
/**
 * Utility hook providing the actual start time of the current session.
 * Useful for calculating the call duration.
 *
 * @category Call State
 */
const useCallStartedAt = () => {
    const { startedAt$ } = useCallState();
    return useObservableValue(startedAt$);
};
/**
 * A hook which provides a list of all participants that have joined an active call.
 *
 * @category Call State
 *
 * @param options.sortBy - A comparator function to sort the participants by.
 * Make sure to memoize output of the `combineComparators` function
 * (or keep it out of component's scope if possible) before passing it down to this property.
 */
const useParticipants = ({ sortBy, } = {}) => {
    const { participants$ } = useCallState();
    const participants = useObservableValue(participants$);
    return react.useMemo(() => {
        if (sortBy) {
            return [...participants].sort(sortBy);
        }
        return participants;
    }, [participants, sortBy]);
};
/**
 * A hook which provides a StreamVideoLocalParticipant object.
 * It signals that I have joined a call.
 *
 * @category Call State
 */
const useLocalParticipant = () => {
    const { localParticipant$ } = useCallState();
    return useObservableValue(localParticipant$);
};
/**
 * A hook which provides a list of all other participants than me that have joined an active call.
 *
 * @category Call State
 */
const useRemoteParticipants = () => {
    const { remoteParticipants$ } = useCallState();
    return useObservableValue(remoteParticipants$);
};
/**
 * Returns the approximate participant count of the active call.
 * This includes the anonymous users as well, and it is computed on the server.
 *
 * @category Call State
 */
const useParticipantCount = () => {
    const { participantCount$ } = useCallState();
    return useObservableValue(participantCount$);
};
/**
 * Returns the approximate anonymous participant count of the active call.
 * The regular participants are not included in this count. It is computed on the server.
 *
 * @category Call State
 */
const useAnonymousParticipantCount = () => {
    const { anonymousParticipantCount$ } = useCallState();
    return useObservableValue(anonymousParticipantCount$);
};
/**
 * Returns the generated thumbnail of the current call, if enabled in settings.
 */
const useCallThumbnail = () => {
    const { thumbnails$ } = useCallState();
    return useObservableValue(thumbnails$);
};
/**
 * A hook which returns the local participant's own capabilities.
 */
const useOwnCapabilities = () => {
    const { ownCapabilities$ } = useCallState();
    return useObservableValue(ownCapabilities$);
};
/**
 * Hook that returns true if the local participant has all the given permissions.
 *
 * @param permissions the permissions to check.
 */
const useHasPermissions = (...permissions) => {
    const capabilities = useOwnCapabilities();
    return permissions.every((permission) => capabilities?.includes(permission));
};
/**
 * Returns the camera state of the current call.
 *
 * @category Camera Manager State
 *
 */
const useCameraState = () => {
    const call = useCall();
    const { camera } = call;
    const { state } = camera;
    const direction = useObservableValue(state.direction$);
    const mediaStream = useObservableValue(state.mediaStream$);
    const selectedDevice = useObservableValue(state.selectedDevice$);
    const { getDevices } = useLazyDeviceList(camera);
    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);
    const isPromptingPermission = useObservableValue(state.isPromptingPermission$);
    return {
        camera,
        direction,
        mediaStream,
        get devices() {
            return getDevices();
        },
        hasBrowserPermission,
        isPromptingPermission,
        selectedDevice,
        ...getComputedStatus(useObservableValue(state.status$), useObservableValue(state.optimisticStatus$)),
    };
};
/**
 * Returns the microphone state of the current call.
 *
 * @category Microphone Manager State
 */
const useMicrophoneState = () => {
    const call = useCall();
    const { microphone } = call;
    const { state } = microphone;
    const mediaStream = useObservableValue(state.mediaStream$);
    const selectedDevice = useObservableValue(state.selectedDevice$);
    const { getDevices } = useLazyDeviceList(microphone);
    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);
    const isPromptingPermission = useObservableValue(state.isPromptingPermission$);
    const isSpeakingWhileMuted = useObservableValue(state.speakingWhileMuted$);
    return {
        microphone,
        mediaStream,
        get devices() {
            return getDevices();
        },
        selectedDevice,
        hasBrowserPermission,
        isPromptingPermission,
        isSpeakingWhileMuted,
        ...getComputedStatus(useObservableValue(state.status$), useObservableValue(state.optimisticStatus$)),
    };
};
/**
 * Returns the speaker state of the current call.
 *
 * Note: This hook is not supported in React Native
 */
const useSpeakerState = () => {
    if (isReactNative()) {
        throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');
    }
    const call = useCall();
    const { speaker } = call;
    const { getDevices } = useLazyDeviceList(speaker);
    const selectedDevice = useObservableValue(speaker.state.selectedDevice$);
    return {
        speaker,
        get devices() {
            return getDevices();
        },
        selectedDevice,
        isDeviceSelectionSupported: speaker.state.isDeviceSelectionSupported,
    };
};
/**
 * Returns the Screen Share state of the current call.
 */
const useScreenShareState = () => {
    const call = useCall();
    const { screenShare } = call;
    return {
        screenShare,
        mediaStream: useObservableValue(screenShare.state.mediaStream$),
        ...getComputedStatus(useObservableValue(screenShare.state.status$), useObservableValue(screenShare.state.optimisticStatus$)),
    };
};
/**
 * Returns incoming video settings for the current call, including
 * global and per-participant manual video quality overrides.
 */
const useIncomingVideoSettings = () => {
    const call = useCall();
    const settings = useObservableValue(call.dynascaleManager.incomingVideoSettings$);
    return settings;
};
/**
 * Returns the current call's closed captions queue.
 */
const useCallClosedCaptions = () => {
    const { closedCaptions$ } = useCallState();
    return useObservableValue(closedCaptions$);
};
/**
 * Returns the current call's closed captions queue.
 */
const useIsCallCaptioningInProgress = () => {
    const { captioning$ } = useCallState();
    return useObservableValue(captioning$);
};
function getComputedStatus(status, pendingStatus) {
    const optimisticStatus = pendingStatus ?? status;
    return {
        status,
        optimisticStatus,
        isEnabled: status === 'enabled',
        isMute: status !== 'enabled',
        optimisticIsMute: optimisticStatus !== 'enabled',
        isTogglePending: optimisticStatus !== status,
    };
}
function useLazyDeviceList(manager) {
    const placeholderDevices$ = react.useMemo(() => rxjs.of(EMPTY_DEVICES_ARRAY), []);
    const [devices$, setDevices$] = react.useState(placeholderDevices$);
    const devices = useObservableValue(devices$, EMPTY_DEVICES_ARRAY);
    const getDevices = () => {
        if (devices$ === placeholderDevices$) {
            setDevices$(manager.listDevices());
        }
        return devices;
    };
    return { getDevices };
}

var CallStateHooks = /*#__PURE__*/Object.freeze({
    __proto__: null,
    useAnonymousParticipantCount: useAnonymousParticipantCount,
    useCallBlockedUserIds: useCallBlockedUserIds,
    useCallCallingState: useCallCallingState,
    useCallClosedCaptions: useCallClosedCaptions,
    useCallCreatedAt: useCallCreatedAt,
    useCallCreatedBy: useCallCreatedBy,
    useCallCustomData: useCallCustomData,
    useCallEgress: useCallEgress,
    useCallEndedAt: useCallEndedAt,
    useCallEndedBy: useCallEndedBy,
    useCallIngress: useCallIngress,
    useCallMembers: useCallMembers,
    useCallSession: useCallSession,
    useCallSettings: useCallSettings,
    useCallStartedAt: useCallStartedAt,
    useCallStartsAt: useCallStartsAt,
    useCallState: useCallState,
    useCallStatsReport: useCallStatsReport,
    useCallThumbnail: useCallThumbnail,
    useCallUpdatedAt: useCallUpdatedAt,
    useCameraState: useCameraState,
    useDominantSpeaker: useDominantSpeaker,
    useHasOngoingScreenShare: useHasOngoingScreenShare,
    useHasPermissions: useHasPermissions,
    useIncomingVideoSettings: useIncomingVideoSettings,
    useIsCallCaptioningInProgress: useIsCallCaptioningInProgress,
    useIsCallHLSBroadcastingInProgress: useIsCallHLSBroadcastingInProgress,
    useIsCallLive: useIsCallLive,
    useIsCallRecordingInProgress: useIsCallRecordingInProgress,
    useIsCallTranscribingInProgress: useIsCallTranscribingInProgress,
    useLocalParticipant: useLocalParticipant,
    useMicrophoneState: useMicrophoneState,
    useOwnCapabilities: useOwnCapabilities,
    useParticipantCount: useParticipantCount,
    useParticipants: useParticipants,
    useRemoteParticipants: useRemoteParticipants,
    useScreenShareState: useScreenShareState,
    useSpeakerState: useSpeakerState
});

/**
 * Utility hook which provides access to client's state store.
 */
const useStore = () => {
    const client = useStreamVideoClient();
    if (!client) {
        throw new Error(`StreamVideoClient isn't initialized or this hook is called outside of <StreamVideo> context.`);
    }
    return client.state;
};
/**
 * Utility hook which provides a list of all notifications about created calls.
 * In the ring call settings, these calls can be outgoing (I have called somebody)
 * or incoming (somebody has called me).
 *
 * @category Client State
 */
const useCalls = () => {
    const { calls$ } = useStore();
    return useObservableValue(calls$);
};
/**
 * Returns the current connected user.
 *
 * @category Client State
 */
const useConnectedUser = () => {
    const { connectedUser$ } = useStore();
    return useObservableValue(connectedUser$);
};

/**
 * Custom hook for toggling call recording in a video call.
 *
 * This hook provides functionality to start and stop call recording,
 * along with state management for tracking the recording status
 * and the loading indicator while awaiting a response.
 */
const useToggleCallRecording = () => {
    const call = useCall();
    const isCallRecordingInProgress = useIsCallRecordingInProgress();
    const [isAwaitingResponse, setIsAwaitingResponse] = react.useState(false);
    // TODO: add permissions
    react.useEffect(() => {
        // we wait until call.recording_started/stopped event to flips the
        // `isCallRecordingInProgress` state variable.
        // Once the flip happens, we remove the loading indicator
        setIsAwaitingResponse((isAwaiting) => {
            if (isAwaiting)
                return false;
            return isAwaiting;
        });
    }, [isCallRecordingInProgress]);
    const toggleCallRecording = react.useCallback(async () => {
        try {
            setIsAwaitingResponse(true);
            if (isCallRecordingInProgress) {
                await call?.stopRecording();
            }
            else {
                await call?.startRecording();
            }
        }
        catch (e) {
            console.error(`Failed start recording`, e);
            throw e;
        }
    }, [call, isCallRecordingInProgress]);
    return { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress };
};

/**
 * A hook-alike function that exposes all call state hooks.
 *
 * @category Call State
 */
const useCallStateHooks = () => CallStateHooks;

const Restricted = ({ canRequestOnly, hasPermissionsOnly, requiredGrants, requireAll = true, children, }) => {
    const call = useCall();
    const { useCallSettings, useOwnCapabilities } = useCallStateHooks();
    const ownCapabilities = useOwnCapabilities();
    const settings = useCallSettings();
    const hasPermissions = requiredGrants[requireAll ? 'every' : 'some']((capability) => ownCapabilities?.includes(capability));
    if (hasPermissionsOnly)
        return hasPermissions ? jsxRuntime.jsx(jsxRuntime.Fragment, { children: children }) : null;
    const canRequest = requiredGrants.some((capability) => call?.permissionsContext.canRequest(capability, settings));
    if (canRequestOnly)
        return canRequest ? jsxRuntime.jsx(jsxRuntime.Fragment, { children: children }) : null;
    if (hasPermissions || canRequest)
        return jsxRuntime.jsx(jsxRuntime.Fragment, { children: children });
    return null;
};

exports.Restricted = Restricted;
exports.StreamCallProvider = StreamCallProvider;
exports.StreamI18n = StreamI18n;
exports.StreamI18nProvider = StreamI18nProvider;
exports.StreamVideoProvider = StreamVideoProvider;
exports.defaultTranslationFunction = defaultTranslationFunction;
exports.useCall = useCall;
exports.useCallStateHooks = useCallStateHooks;
exports.useCalls = useCalls;
exports.useConnectedUser = useConnectedUser;
exports.useCreateI18n = useCreateI18n;
exports.useI18n = useI18n;
exports.useObservableValue = useObservableValue;
exports.useStore = useStore;
exports.useStreamVideoClient = useStreamVideoClient;
exports.useToggleCallRecording = useToggleCallRecording;
//# sourceMappingURL=index.cjs.js.map
