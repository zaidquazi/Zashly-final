import { TranslationLanguage, TranslationSheet, TranslationsMap, TranslatorFunction } from './types';
export declare const defaultTranslationFunction: (key: string) => string;
export type StreamI18nConstructor = {
    /** Language into which the provided strings are translated */
    currentLanguage?: TranslationLanguage;
    /** Fallback language which will be used if no translation is found for current language */
    fallbackLanguage?: TranslationLanguage;
    /** Logs info level to console output. Helps find issues with loading not working. */
    debug?: boolean;
    /** Custom translations that will be merged with the defaults provided by the library. */
    translationsOverrides?: TranslationsMap;
};
export declare class StreamI18n {
    /** Exposed i18n instance from the i18next library */
    i18nInstance: import("i18next").i18n;
    /** Translator function that converts the provided string into its equivalent in the current language. */
    t: TranslatorFunction;
    /** Simple logger function */
    constructor(options?: StreamI18nConstructor);
    get currentLanguage(): string;
    get isInitialized(): boolean;
    init: () => Promise<this>;
    changeLanguage: (language?: TranslationLanguage, onChange?: (language: TranslationLanguage) => void) => Promise<void>;
    registerTranslationsForLanguage: ({ lng, translations, }: {
        lng: TranslationLanguage;
        translations: TranslationSheet;
    }) => void;
    private _checkIsInitialized;
}
