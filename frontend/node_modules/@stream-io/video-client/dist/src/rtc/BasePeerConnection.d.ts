import type { CallEventListener, Logger } from '../coordinator/connection/types';
import { CallState } from '../store';
import { ClientDetails, PeerType } from '../gen/video/sfu/models/models';
import { StreamSfuClient } from '../StreamSfuClient';
import { AllSfuEvents, Dispatcher } from './Dispatcher';
import { TraceSlice } from '../stats';
export type BasePeerConnectionOpts = {
    sfuClient: StreamSfuClient;
    state: CallState;
    connectionConfig?: RTCConfiguration;
    dispatcher: Dispatcher;
    onUnrecoverableError?: (reason: string) => void;
    logTag: string;
    clientDetails: ClientDetails;
    enableTracing: boolean;
};
/**
 * A base class for the `Publisher` and `Subscriber` classes.
 * @internal
 */
export declare abstract class BasePeerConnection {
    protected readonly logger: Logger;
    protected readonly peerType: PeerType;
    protected readonly pc: RTCPeerConnection;
    protected readonly state: CallState;
    protected readonly dispatcher: Dispatcher;
    protected sfuClient: StreamSfuClient;
    protected onUnrecoverableError?: (reason: string) => void;
    protected isIceRestarting: boolean;
    private isDisposed;
    private readonly tracer?;
    private readonly subscriptions;
    private unsubscribeIceTrickle?;
    /**
     * Constructs a new `BasePeerConnection` instance.
     */
    protected constructor(peerType: PeerType, { sfuClient, connectionConfig, state, dispatcher, onUnrecoverableError, logTag, clientDetails, enableTracing, }: BasePeerConnectionOpts);
    /**
     * Disposes the `RTCPeerConnection` instance.
     */
    dispose(): void;
    /**
     * Detaches the event handlers from the `RTCPeerConnection`.
     */
    detachEventHandlers(): void;
    /**
     * Performs an ICE restart on the `RTCPeerConnection`.
     */
    protected abstract restartIce(): Promise<void>;
    /**
     * Handles events synchronously.
     * Consecutive events are queued and executed one after the other.
     */
    protected on: <E extends keyof AllSfuEvents>(event: E, fn: CallEventListener<E>) => void;
    /**
     * Appends the trickled ICE candidates to the `RTCPeerConnection`.
     */
    protected addTrickledIceCandidates: () => void;
    /**
     * Sets the SFU client to use.
     *
     * @param sfuClient the SFU client to use.
     */
    setSfuClient: (sfuClient: StreamSfuClient) => void;
    /**
     * Returns the result of the `RTCPeerConnection.getStats()` method
     * @param selector an optional `MediaStreamTrack` to get the stats for.
     */
    getStats: (selector?: MediaStreamTrack | null) => Promise<RTCStatsReport>;
    /**
     * Returns the current tracing buffer.
     */
    getTrace: () => TraceSlice | undefined;
    /**
     * Handles the ICECandidate event and
     * Initiates an ICE Trickle process with the SFU.
     */
    private onIceCandidate;
    /**
     * Converts the ICE candidate to a JSON string.
     */
    private asJSON;
    /**
     * Handles the ICE connection state change event.
     */
    private onIceConnectionStateChange;
    /**
     * Handles the ICE candidate error event.
     */
    private onIceCandidateError;
    /**
     * Handles the ICE gathering state change event.
     */
    private onIceGatherChange;
    /**
     * Handles the signaling state change event.
     */
    private onSignalingChange;
}
