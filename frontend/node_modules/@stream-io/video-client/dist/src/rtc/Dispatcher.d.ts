import { CallEventListener, EventTypes } from '../coordinator/connection/types';
import type { SfuEvent } from '../gen/video/sfu/event/events';
export type SfuEventKinds = NonNullable<SfuEvent['eventPayload']['oneofKind']>;
export type AllSfuEvents = {
    [K in SfuEventKinds]: K extends keyof Extract<SfuEvent['eventPayload'], {
        oneofKind: K;
    }> ? Extract<SfuEvent['eventPayload'], {
        oneofKind: K;
    }>[K] : never;
};
export type DispatchableMessage<K extends SfuEventKinds> = {
    eventPayload: {
        oneofKind: K;
    } & {
        [Key in K]: AllSfuEvents[Key];
    };
};
export declare const isSfuEvent: (eventName: SfuEventKinds | EventTypes) => eventName is SfuEventKinds;
export declare class Dispatcher {
    private readonly logger;
    private subscribers;
    dispatch: <K extends SfuEventKinds>(message: DispatchableMessage<K>, logTag?: string) => void;
    on: <E extends keyof AllSfuEvents>(eventName: E, fn: CallEventListener<E>) => () => void;
    off: <E extends keyof AllSfuEvents>(eventName: E, fn: CallEventListener<E>) => void;
}
