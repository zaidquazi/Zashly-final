import { PublishOption } from '../gen/video/sfu/models/models';
import { OptimalVideoLayer } from './videoLayers';
type TransceiverId = {
    publishOption: PublishOption;
    transceiver: RTCRtpTransceiver;
};
export declare class TransceiverCache {
    private readonly cache;
    private readonly layers;
    /**
     * An array maintaining the order how transceivers were added to the peer connection.
     * This is needed because some browsers (Firefox) don't reliably report
     * trackId and `mid` parameters.
     */
    private readonly transceiverOrder;
    /**
     * Adds a transceiver to the cache.
     */
    add: (publishOption: PublishOption, transceiver: RTCRtpTransceiver) => void;
    /**
     * Gets the transceiver for the given publish option.
     */
    get: (publishOption: PublishOption) => RTCRtpTransceiver | undefined;
    /**
     * Checks if the cache has the given publish option.
     */
    has: (publishOption: PublishOption) => boolean;
    /**
     * Finds the first transceiver that satisfies the given predicate.
     */
    find: (predicate: (item: TransceiverId) => boolean) => TransceiverId | undefined;
    /**
     * Provides all the items in the cache.
     */
    items: () => TransceiverId[];
    /**
     * Init index of the transceiver in the cache.
     */
    indexOf: (transceiver: RTCRtpTransceiver) => number;
    /**
     * Gets cached video layers for the given track.
     */
    getLayers: (publishOption: PublishOption) => OptimalVideoLayer[] | undefined;
    /**
     * Sets the video layers for the given track.
     */
    setLayers: (publishOption: PublishOption, layers?: OptimalVideoLayer[]) => void;
    private findTransceiver;
    private findLayer;
}
export {};
