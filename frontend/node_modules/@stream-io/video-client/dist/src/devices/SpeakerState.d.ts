import { BehaviorSubject, Observable } from 'rxjs';
import { RxUtils } from '../store';
export declare class SpeakerState {
    protected selectedDeviceSubject: BehaviorSubject<string>;
    protected volumeSubject: BehaviorSubject<number>;
    /**
     * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).
     */
    readonly isDeviceSelectionSupported: boolean;
    /**
     * An Observable that emits the currently selected device
     *
     * Note: this feature is not supported in React Native
     */
    selectedDevice$: Observable<string>;
    /**
     * An Observable that emits the currently selected volume
     *
     * Note: this feature is not supported in React Native
     */
    volume$: Observable<number>;
    constructor();
    /**
     * The currently selected device
     *
     * Note: this feature is not supported in React Native
     */
    get selectedDevice(): string;
    /**
     * The currently selected volume
     *
     * Note: this feature is not supported in React Native
     */
    get volume(): number;
    /**
     * Gets the current value of an observable, or undefined if the observable has
     * not emitted a value yet.
     *
     * @param observable$ the observable to get the value from.
     */
    getCurrentValue: <T>(observable$: Observable<T>) => T;
    /**
     * @internal
     * @param deviceId
     */
    setDevice(deviceId: string): void;
    /**
     * @internal
     * @param volume
     */
    setVolume(volume: number): void;
    /**
     * Updates the value of the provided Subject.
     * An `update` can either be a new value or a function which takes
     * the current value and returns a new value.
     *
     * @internal
     *
     * @param subject the subject to update.
     * @param update the update to apply to the subject.
     * @return the updated value.
     */
    protected setCurrentValue: <T>(subject: import("rxjs").Subject<T>, update: RxUtils.Patch<T>) => T;
}
