{"version":3,"file":"index.cjs.js","sources":["../../src/stats/rtc/Tracer.ts","../../src/stats/rtc/mediaDevices.ts","../../src/gen/coordinator/index.ts","../../src/coordinator/connection/types.ts","../../src/gen/google/protobuf/struct.ts","../../src/gen/google/protobuf/timestamp.ts","../../src/gen/video/sfu/models/models.ts","../../src/gen/video/sfu/signal_rpc/signal.ts","../../src/gen/video/sfu/event/events.ts","../../src/types.ts","../../src/gen/video/sfu/signal_rpc/signal.client.ts","../../src/rpc/createClient.ts","../../src/coordinator/connection/utils.ts","../../src/helpers/platforms.ts","../../src/logger.ts","../../src/rpc/retryable.ts","../../src/rtc/codecs.ts","../../src/rtc/Dispatcher.ts","../../src/rtc/IceTrickleBuffer.ts","../../src/helpers/concurrency.ts","../../src/store/rxUtils.ts","../../src/store/CallingState.ts","../../src/store/stateStore.ts","../../src/sorting/comparator.ts","../../src/helpers/participantUtils.ts","../../src/sorting/participants.ts","../../src/sorting/presets.ts","../../src/store/CallState.ts","../../src/stats/utils.ts","../../src/helpers/browsers.ts","../../src/stats/CallStateStatsReporter.ts","../../src/helpers/client-details.ts","../../src/stats/SfuStatsReporter.ts","../../src/stats/rtc/pc.ts","../../src/rtc/BasePeerConnection.ts","../../src/rtc/TransceiverCache.ts","../../src/helpers/ensureExhausted.ts","../../src/rtc/helpers/tracks.ts","../../src/rtc/videoLayers.ts","../../src/rtc/helpers/sdp.ts","../../src/rtc/Publisher.ts","../../src/rtc/Subscriber.ts","../../src/rtc/signal.ts","../../src/rtc/helpers/rtcConfiguration.ts","../../src/helpers/promise.ts","../../src/helpers/lazy.ts","../../src/timers/worker.build.ts","../../src/timers/index.ts","../../src/StreamSfuClient.ts","../../src/events/call.ts","../../src/events/call-permissions.ts","../../src/events/internal.ts","../../src/events/mutes.ts","../../src/helpers/array.ts","../../src/events/participant.ts","../../src/events/speaker.ts","../../src/events/callEventHandlers.ts","../../src/helpers/ViewportTracker.ts","../../src/helpers/DynascaleManager.ts","../../src/permissions/PermissionsContext.ts","../../src/CallType.ts","../../src/devices/BrowserPermission.ts","../../src/devices/devices.ts","../../src/helpers/compatibility.ts","../../src/devices/InputMediaDeviceManager.ts","../../src/devices/InputMediaDeviceManagerState.ts","../../src/devices/CameraManagerState.ts","../../src/devices/CameraManager.ts","../../src/devices/MicrophoneManagerState.ts","../../src/helpers/sound-detector.ts","../../src/helpers/RNSpeechDetector.ts","../../src/devices/MicrophoneManager.ts","../../src/devices/ScreenShareState.ts","../../src/devices/ScreenShareManager.ts","../../src/devices/SpeakerState.ts","../../src/devices/SpeakerManager.ts","../../src/Call.ts","../../src/coordinator/connection/connection.ts","../../src/coordinator/connection/signing.ts","../../src/coordinator/connection/token_manager.ts","../../src/coordinator/connection/location.ts","../../src/coordinator/connection/client.ts","../../src/helpers/clientUtils.ts","../../src/StreamVideoClient.ts"],"sourcesContent":["import type { Trace, TraceRecord } from './types';\n\nexport type TraceSlice = {\n  snapshot: TraceRecord[];\n  rollback: () => void;\n};\n\nexport class Tracer {\n  private buffer: TraceRecord[] = [];\n  private enabled = true;\n  private readonly id: string | null;\n\n  constructor(id: string | null) {\n    this.id = id;\n  }\n\n  setEnabled = (enabled: boolean) => {\n    if (this.enabled === enabled) return;\n    this.enabled = enabled;\n    this.buffer = [];\n  };\n\n  trace: Trace = (tag, data) => {\n    if (!this.enabled) return;\n    this.buffer.push([tag, this.id, data, Date.now()]);\n  };\n\n  take = (): TraceSlice => {\n    const snapshot = this.buffer;\n    this.buffer = [];\n    return {\n      snapshot,\n      rollback: () => {\n        this.buffer.unshift(...snapshot);\n      },\n    };\n  };\n\n  dispose = () => {\n    this.buffer = [];\n  };\n}\n","import { Tracer } from './Tracer';\n\nexport const tracer = new Tracer(null);\n\nif (\n  typeof navigator !== 'undefined' &&\n  typeof navigator.mediaDevices !== 'undefined'\n) {\n  const dumpStream = (stream: MediaStream) => ({\n    id: stream.id,\n    tracks: stream.getTracks().map((track) => ({\n      id: track.id,\n      kind: track.kind,\n      label: track.label,\n      enabled: track.enabled,\n      muted: track.muted,\n      readyState: track.readyState,\n    })),\n  });\n\n  const trace = tracer.trace;\n  const target = navigator.mediaDevices;\n  for (const method of ['getUserMedia', 'getDisplayMedia'] as const) {\n    const original = target[method];\n    if (!original) continue;\n\n    target[method] = async function tracedMethod(\n      constraints: MediaStreamConstraints,\n    ) {\n      const tag = `navigator.mediaDevices.${method}`;\n      trace(tag, constraints);\n      try {\n        const stream = await original.call(target, constraints);\n        trace(`${tag}OnSuccess`, dumpStream(stream));\n        return stream;\n      } catch (err) {\n        trace(`${tag}OnFailure`, (err as Error).name);\n        throw err;\n      }\n    };\n  }\n}\n","/* tslint:disable */\n\n/**\n *\n * @export\n * @interface APIError\n */\nexport interface APIError {\n  /**\n   * Response HTTP status code\n   * @type {number}\n   * @memberof APIError\n   */\n  StatusCode: number;\n  /**\n   * API error code\n   * @type {number}\n   * @memberof APIError\n   */\n  code: number;\n  /**\n   * Additional error-specific information\n   * @type {Array<number>}\n   * @memberof APIError\n   */\n  details: Array<number>;\n  /**\n   * Request duration\n   * @type {string}\n   * @memberof APIError\n   */\n  duration: string;\n  /**\n   * Additional error info\n   * @type {{ [key: string]: string; }}\n   * @memberof APIError\n   */\n  exception_fields?: { [key: string]: string };\n  /**\n   * Message describing an error\n   * @type {string}\n   * @memberof APIError\n   */\n  message: string;\n  /**\n   * URL with additional information\n   * @type {string}\n   * @memberof APIError\n   */\n  more_info: string;\n  /**\n   * Flag that indicates if the error is unrecoverable, requests that return unrecoverable errors should not be retried, this error only applies to the request that caused it\n   * @type {boolean}\n   * @memberof APIError\n   */\n  unrecoverable?: boolean;\n}\n/**\n * AcceptCallResponse is the payload for accepting a call.\n * @export\n * @interface AcceptCallResponse\n */\nexport interface AcceptCallResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof AcceptCallResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface AudioSettingsRequest\n */\nexport interface AudioSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  access_request_enabled?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AudioSettingsRequest\n   */\n  default_device: AudioSettingsRequestDefaultDeviceEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  mic_default_on?: boolean;\n  /**\n   *\n   * @type {NoiseCancellationSettings}\n   * @memberof AudioSettingsRequest\n   */\n  noise_cancellation?: NoiseCancellationSettings;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  opus_dtx_enabled?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  redundant_coding_enabled?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  speaker_default_on?: boolean;\n}\n\n/**\n * @export\n */\nexport const AudioSettingsRequestDefaultDeviceEnum = {\n  SPEAKER: 'speaker',\n  EARPIECE: 'earpiece',\n} as const;\nexport type AudioSettingsRequestDefaultDeviceEnum =\n  (typeof AudioSettingsRequestDefaultDeviceEnum)[keyof typeof AudioSettingsRequestDefaultDeviceEnum];\n\n/**\n *\n * @export\n * @interface AudioSettingsResponse\n */\nexport interface AudioSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsResponse\n   */\n  access_request_enabled: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AudioSettingsResponse\n   */\n  default_device: AudioSettingsResponseDefaultDeviceEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsResponse\n   */\n  mic_default_on: boolean;\n  /**\n   *\n   * @type {NoiseCancellationSettings}\n   * @memberof AudioSettingsResponse\n   */\n  noise_cancellation?: NoiseCancellationSettings;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsResponse\n   */\n  opus_dtx_enabled: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsResponse\n   */\n  redundant_coding_enabled: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsResponse\n   */\n  speaker_default_on: boolean;\n}\n\n/**\n * @export\n */\nexport const AudioSettingsResponseDefaultDeviceEnum = {\n  SPEAKER: 'speaker',\n  EARPIECE: 'earpiece',\n} as const;\nexport type AudioSettingsResponseDefaultDeviceEnum =\n  (typeof AudioSettingsResponseDefaultDeviceEnum)[keyof typeof AudioSettingsResponseDefaultDeviceEnum];\n\n/**\n *\n * @export\n * @interface BackstageSettingsRequest\n */\nexport interface BackstageSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof BackstageSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof BackstageSettingsRequest\n   */\n  join_ahead_time_seconds?: number;\n}\n/**\n *\n * @export\n * @interface BackstageSettingsResponse\n */\nexport interface BackstageSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof BackstageSettingsResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof BackstageSettingsResponse\n   */\n  join_ahead_time_seconds?: number;\n}\n/**\n * BlockUserRequest is the payload for blocking a user.\n * @export\n * @interface BlockUserRequest\n */\nexport interface BlockUserRequest {\n  /**\n   * the user to block\n   * @type {string}\n   * @memberof BlockUserRequest\n   */\n  user_id: string;\n}\n/**\n * BlockUserResponse is the payload for blocking a user.\n * @export\n * @interface BlockUserResponse\n */\nexport interface BlockUserResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof BlockUserResponse\n   */\n  duration: string;\n}\n/**\n * This event is sent to call participants to notify when a user is blocked on a call, clients can use this event to show a notification.\n * If the user is the current user, the client should leave the call screen as well\n * @export\n * @interface BlockedUserEvent\n */\nexport interface BlockedUserEvent {\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof BlockedUserEvent\n   */\n  blocked_by_user?: UserResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof BlockedUserEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof BlockedUserEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.blocked_user\" in this case\n   * @type {string}\n   * @memberof BlockedUserEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof BlockedUserEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface Bound\n */\nexport interface Bound {\n  /**\n   *\n   * @type {boolean}\n   * @memberof Bound\n   */\n  inclusive: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof Bound\n   */\n  value: number;\n}\n/**\n *\n * @export\n * @interface BroadcastSettingsRequest\n */\nexport interface BroadcastSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof BroadcastSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   *\n   * @type {HLSSettingsRequest}\n   * @memberof BroadcastSettingsRequest\n   */\n  hls?: HLSSettingsRequest;\n  /**\n   *\n   * @type {RTMPSettingsRequest}\n   * @memberof BroadcastSettingsRequest\n   */\n  rtmp?: RTMPSettingsRequest;\n}\n/**\n * BroadcastSettingsResponse is the payload for broadcasting settings\n * @export\n * @interface BroadcastSettingsResponse\n */\nexport interface BroadcastSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof BroadcastSettingsResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {HLSSettingsResponse}\n   * @memberof BroadcastSettingsResponse\n   */\n  hls: HLSSettingsResponse;\n  /**\n   *\n   * @type {RTMPSettingsResponse}\n   * @memberof BroadcastSettingsResponse\n   */\n  rtmp: RTMPSettingsResponse;\n}\n/**\n * This event is sent when a user accepts a notification to join a call.\n * @export\n * @interface CallAcceptedEvent\n */\nexport interface CallAcceptedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallAcceptedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallAcceptedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallAcceptedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.accepted\" in this case\n   * @type {string}\n   * @memberof CallAcceptedEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallAcceptedEvent\n   */\n  user: UserResponse;\n}\n/**\n * CallClosedCaption represents a closed caption of a call.\n * @export\n * @interface CallClosedCaption\n */\nexport interface CallClosedCaption {\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaption\n   */\n  end_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaption\n   */\n  speaker_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaption\n   */\n  start_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaption\n   */\n  text: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallClosedCaption\n   */\n  user: UserResponse;\n}\n/**\n * This event is sent when call closed captions has failed\n * @export\n * @interface CallClosedCaptionsFailedEvent\n */\nexport interface CallClosedCaptionsFailedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaptionsFailedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaptionsFailedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.closed_captions_failed\" in this case\n   * @type {string}\n   * @memberof CallClosedCaptionsFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call closed caption has started\n * @export\n * @interface CallClosedCaptionsStartedEvent\n */\nexport interface CallClosedCaptionsStartedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaptionsStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaptionsStartedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.closed_captions_started\" in this case\n   * @type {string}\n   * @memberof CallClosedCaptionsStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call closed captions has stopped\n * @export\n * @interface CallClosedCaptionsStoppedEvent\n */\nexport interface CallClosedCaptionsStoppedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaptionsStoppedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaptionsStoppedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.transcription_stopped\" in this case\n   * @type {string}\n   * @memberof CallClosedCaptionsStoppedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a call is created. Clients receiving this event should check if the ringing\n * field is set to true and if so, show the call screen\n * @export\n * @interface CallCreatedEvent\n */\nexport interface CallCreatedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallCreatedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallCreatedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallCreatedEvent\n   */\n  created_at: string;\n  /**\n   * the members added to this call\n   * @type {Array<MemberResponse>}\n   * @memberof CallCreatedEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * The type of event: \"call.created\" in this case\n   * @type {string}\n   * @memberof CallCreatedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a call is deleted. Clients receiving this event should leave the call screen\n * @export\n * @interface CallDeletedEvent\n */\nexport interface CallDeletedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallDeletedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallDeletedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallDeletedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.deleted\" in this case\n   * @type {string}\n   * @memberof CallDeletedEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CallDurationReport\n */\nexport interface CallDurationReport {\n  /**\n   *\n   * @type {Array<ReportByHistogramBucket>}\n   * @memberof CallDurationReport\n   */\n  histogram: Array<ReportByHistogramBucket>;\n}\n/**\n *\n * @export\n * @interface CallDurationReportResponse\n */\nexport interface CallDurationReportResponse {\n  /**\n   *\n   * @type {Array<DailyAggregateCallDurationReportResponse>}\n   * @memberof CallDurationReportResponse\n   */\n  daily: Array<DailyAggregateCallDurationReportResponse>;\n}\n/**\n * This event is sent when a call is mark as ended for all its participants. Clients receiving this event should leave the call screen\n * @export\n * @interface CallEndedEvent\n */\nexport interface CallEndedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallEndedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallEndedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallEndedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.ended\" in this case\n   * @type {string}\n   * @memberof CallEndedEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallEndedEvent\n   */\n  user?: UserResponse;\n}\n/**\n * This event is sent when frame recording has failed\n * @export\n * @interface CallFrameRecordingFailedEvent\n */\nexport interface CallFrameRecordingFailedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallFrameRecordingFailedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingFailedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingFailedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingFailedEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.frame_recording_failed\" in this case\n   * @type {string}\n   * @memberof CallFrameRecordingFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a frame is captured from a call\n * @export\n * @interface CallFrameRecordingFrameReadyEvent\n */\nexport interface CallFrameRecordingFrameReadyEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingFrameReadyEvent\n   */\n  call_cid: string;\n  /**\n   * The time the frame was captured\n   * @type {string}\n   * @memberof CallFrameRecordingFrameReadyEvent\n   */\n  captured_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingFrameReadyEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingFrameReadyEvent\n   */\n  egress_id: string;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallFrameRecordingFrameReadyEvent\n   */\n  session_id: string;\n  /**\n   * The type of the track frame was captured from (TRACK_TYPE_VIDEO|TRACK_TYPE_SCREEN_SHARE)\n   * @type {string}\n   * @memberof CallFrameRecordingFrameReadyEvent\n   */\n  track_type: string;\n  /**\n   * The type of event: \"call.frame_recording_ready\" in this case\n   * @type {string}\n   * @memberof CallFrameRecordingFrameReadyEvent\n   */\n  type: string;\n  /**\n   * The URL of the frame\n   * @type {string}\n   * @memberof CallFrameRecordingFrameReadyEvent\n   */\n  url: string;\n  /**\n   * The users in the frame\n   * @type {{ [key: string]: UserResponse; }}\n   * @memberof CallFrameRecordingFrameReadyEvent\n   */\n  users: { [key: string]: UserResponse };\n}\n/**\n * This event is sent when frame recording has started\n * @export\n * @interface CallFrameRecordingStartedEvent\n */\nexport interface CallFrameRecordingStartedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallFrameRecordingStartedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingStartedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingStartedEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.frame_recording_started\" in this case\n   * @type {string}\n   * @memberof CallFrameRecordingStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when frame recording has stopped\n * @export\n * @interface CallFrameRecordingStoppedEvent\n */\nexport interface CallFrameRecordingStoppedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallFrameRecordingStoppedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingStoppedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingStoppedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallFrameRecordingStoppedEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.frame_recording_stopped\" in this case\n   * @type {string}\n   * @memberof CallFrameRecordingStoppedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when HLS broadcasting has failed\n * @export\n * @interface CallHLSBroadcastingFailedEvent\n */\nexport interface CallHLSBroadcastingFailedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingFailedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingFailedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.hls_broadcasting_failed\" in this case\n   * @type {string}\n   * @memberof CallHLSBroadcastingFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when HLS broadcasting has started\n * @export\n * @interface CallHLSBroadcastingStartedEvent\n */\nexport interface CallHLSBroadcastingStartedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallHLSBroadcastingStartedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStartedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStartedEvent\n   */\n  hls_playlist_url: string;\n  /**\n   * The type of event: \"call.hls_broadcasting_started\" in this case\n   * @type {string}\n   * @memberof CallHLSBroadcastingStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when HLS broadcasting has stopped\n * @export\n * @interface CallHLSBroadcastingStoppedEvent\n */\nexport interface CallHLSBroadcastingStoppedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStoppedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStoppedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.hls_broadcasting_stopped\" in this case\n   * @type {string}\n   * @memberof CallHLSBroadcastingStoppedEvent\n   */\n  type: string;\n}\n/**\n * CallIngressResponse is the payload for ingress settings\n * @export\n * @interface CallIngressResponse\n */\nexport interface CallIngressResponse {\n  /**\n   *\n   * @type {RTMPIngress}\n   * @memberof CallIngressResponse\n   */\n  rtmp: RTMPIngress;\n}\n/**\n * This event is sent when a call is started. Clients receiving this event should start the call.\n * @export\n * @interface CallLiveStartedEvent\n */\nexport interface CallLiveStartedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallLiveStartedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallLiveStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallLiveStartedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.live_started\" in this case\n   * @type {string}\n   * @memberof CallLiveStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when one or more members are added to a call\n * @export\n * @interface CallMemberAddedEvent\n */\nexport interface CallMemberAddedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallMemberAddedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberAddedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberAddedEvent\n   */\n  created_at: string;\n  /**\n   * the members added to this call\n   * @type {Array<MemberResponse>}\n   * @memberof CallMemberAddedEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * The type of event: \"call.member_added\" in this case\n   * @type {string}\n   * @memberof CallMemberAddedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when one or more members are removed from a call\n * @export\n * @interface CallMemberRemovedEvent\n */\nexport interface CallMemberRemovedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallMemberRemovedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberRemovedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberRemovedEvent\n   */\n  created_at: string;\n  /**\n   * the list of member IDs removed from the call\n   * @type {Array<string>}\n   * @memberof CallMemberRemovedEvent\n   */\n  members: Array<string>;\n  /**\n   * The type of event: \"call.member_removed\" in this case\n   * @type {string}\n   * @memberof CallMemberRemovedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when one or more members are updated\n * @export\n * @interface CallMemberUpdatedEvent\n */\nexport interface CallMemberUpdatedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallMemberUpdatedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberUpdatedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberUpdatedEvent\n   */\n  created_at: string;\n  /**\n   * The list of members that were updated\n   * @type {Array<MemberResponse>}\n   * @memberof CallMemberUpdatedEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * The type of event: \"call.member_updated\" in this case\n   * @type {string}\n   * @memberof CallMemberUpdatedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when one or more members get its role updated\n * @export\n * @interface CallMemberUpdatedPermissionEvent\n */\nexport interface CallMemberUpdatedPermissionEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  call_cid: string;\n  /**\n   * The capabilities by role for this call\n   * @type {{ [key: string]: Array<string>; }}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  capabilities_by_role: { [key: string]: Array<string> };\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  created_at: string;\n  /**\n   * The list of members that were updated\n   * @type {Array<MemberResponse>}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * The type of event: \"call.member_added\" in this case\n   * @type {string}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  type: string;\n}\n/**\n * This event is sent to call members who did not accept/reject/join the call to notify they missed the call\n * @export\n * @interface CallMissedEvent\n */\nexport interface CallMissedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallMissedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMissedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMissedEvent\n   */\n  created_at: string;\n  /**\n   * List of members who missed the call\n   * @type {Array<MemberResponse>}\n   * @memberof CallMissedEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallMissedEvent\n   */\n  notify_user: boolean;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallMissedEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.notification\" in this case\n   * @type {string}\n   * @memberof CallMissedEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallMissedEvent\n   */\n  user: UserResponse;\n}\n/**\n * This event is sent to all call members to notify they are getting called\n * @export\n * @interface CallNotificationEvent\n */\nexport interface CallNotificationEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallNotificationEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallNotificationEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallNotificationEvent\n   */\n  created_at: string;\n  /**\n   * Call members\n   * @type {Array<MemberResponse>}\n   * @memberof CallNotificationEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallNotificationEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.notification\" in this case\n   * @type {string}\n   * @memberof CallNotificationEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallNotificationEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface CallParticipantCountReport\n */\nexport interface CallParticipantCountReport {\n  /**\n   *\n   * @type {Array<ReportByHistogramBucket>}\n   * @memberof CallParticipantCountReport\n   */\n  histogram: Array<ReportByHistogramBucket>;\n}\n/**\n *\n * @export\n * @interface CallParticipantCountReportResponse\n */\nexport interface CallParticipantCountReportResponse {\n  /**\n   *\n   * @type {Array<DailyAggregateCallParticipantCountReportResponse>}\n   * @memberof CallParticipantCountReportResponse\n   */\n  daily: Array<DailyAggregateCallParticipantCountReportResponse>;\n}\n/**\n *\n * @export\n * @interface CallParticipantResponse\n */\nexport interface CallParticipantResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof CallParticipantResponse\n   */\n  joined_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallParticipantResponse\n   */\n  role: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallParticipantResponse\n   */\n  user: UserResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallParticipantResponse\n   */\n  user_session_id: string;\n}\n/**\n * This event is sent when a reaction is sent in a call, clients should use this to show the reaction in the call screen\n * @export\n * @interface CallReactionEvent\n */\nexport interface CallReactionEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallReactionEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallReactionEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {ReactionResponse}\n   * @memberof CallReactionEvent\n   */\n  reaction: ReactionResponse;\n  /**\n   * The type of event: \"call.reaction_new\" in this case\n   * @type {string}\n   * @memberof CallReactionEvent\n   */\n  type: string;\n}\n/**\n * CallRecording represents a recording of a call.\n * @export\n * @interface CallRecording\n */\nexport interface CallRecording {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecording\n   */\n  end_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecording\n   */\n  filename: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecording\n   */\n  session_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecording\n   */\n  start_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecording\n   */\n  url: string;\n}\n/**\n * This event is sent when call recording has failed\n * @export\n * @interface CallRecordingFailedEvent\n */\nexport interface CallRecordingFailedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingFailedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingFailedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingFailedEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.recording_failed\" in this case\n   * @type {string}\n   * @memberof CallRecordingFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call recording is ready\n * @export\n * @interface CallRecordingReadyEvent\n */\nexport interface CallRecordingReadyEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingReadyEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {CallRecording}\n   * @memberof CallRecordingReadyEvent\n   */\n  call_recording: CallRecording;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingReadyEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingReadyEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.recording_ready\" in this case\n   * @type {string}\n   * @memberof CallRecordingReadyEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call recording has started\n * @export\n * @interface CallRecordingStartedEvent\n */\nexport interface CallRecordingStartedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStartedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStartedEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.recording_started\" in this case\n   * @type {string}\n   * @memberof CallRecordingStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call recording has stopped\n * @export\n * @interface CallRecordingStoppedEvent\n */\nexport interface CallRecordingStoppedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStoppedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStoppedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStoppedEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.recording_stopped\" in this case\n   * @type {string}\n   * @memberof CallRecordingStoppedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a user rejects a notification to join a call.\n * @export\n * @interface CallRejectedEvent\n */\nexport interface CallRejectedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallRejectedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRejectedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRejectedEvent\n   */\n  created_at: string;\n  /**\n   * Provides information about why the call was rejected. You can provide any value, but the Stream API and SDKs use these default values: rejected, cancel, timeout and busy\n   * @type {string}\n   * @memberof CallRejectedEvent\n   */\n  reason?: string;\n  /**\n   * The type of event: \"call.rejected\" in this case\n   * @type {string}\n   * @memberof CallRejectedEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallRejectedEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface CallReportResponse\n */\nexport interface CallReportResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof CallReportResponse\n   */\n  ended_at?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof CallReportResponse\n   */\n  score: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CallReportResponse\n   */\n  started_at?: string;\n}\n/**\n * CallRequest is the payload for creating a call.\n * @export\n * @interface CallRequest\n */\nexport interface CallRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof CallRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {Array<MemberRequest>}\n   * @memberof CallRequest\n   */\n  members?: Array<MemberRequest>;\n  /**\n   *\n   * @type {CallSettingsRequest}\n   * @memberof CallRequest\n   */\n  settings_override?: CallSettingsRequest;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRequest\n   */\n  starts_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRequest\n   */\n  team?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallRequest\n   */\n  video?: boolean;\n}\n/**\n * Represents a call\n * @export\n * @interface CallResponse\n */\nexport interface CallResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallResponse\n   */\n  backstage: boolean;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof CallResponse\n   */\n  blocked_user_ids: Array<string>;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallResponse\n   */\n  captioning: boolean;\n  /**\n   * The unique identifier for a call (<type>:<id>)\n   * @type {string}\n   * @memberof CallResponse\n   */\n  cid: string;\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof CallResponse\n   */\n  created_at: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallResponse\n   */\n  created_by: UserResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallResponse\n   */\n  current_session_id: string;\n  /**\n   * Custom data for this object\n   * @type {{ [key: string]: any; }}\n   * @memberof CallResponse\n   */\n  custom: { [key: string]: any };\n  /**\n   *\n   * @type {EgressResponse}\n   * @memberof CallResponse\n   */\n  egress: EgressResponse;\n  /**\n   * Date/time when the call ended\n   * @type {string}\n   * @memberof CallResponse\n   */\n  ended_at?: string;\n  /**\n   * Call ID\n   * @type {string}\n   * @memberof CallResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {CallIngressResponse}\n   * @memberof CallResponse\n   */\n  ingress: CallIngressResponse;\n  /**\n   *\n   * @type {number}\n   * @memberof CallResponse\n   */\n  join_ahead_time_seconds?: number;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallResponse\n   */\n  recording: boolean;\n  /**\n   *\n   * @type {CallSessionResponse}\n   * @memberof CallResponse\n   */\n  session?: CallSessionResponse;\n  /**\n   *\n   * @type {CallSettingsResponse}\n   * @memberof CallResponse\n   */\n  settings: CallSettingsResponse;\n  /**\n   * Date/time when the call will start\n   * @type {string}\n   * @memberof CallResponse\n   */\n  starts_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallResponse\n   */\n  team?: string;\n  /**\n   *\n   * @type {ThumbnailResponse}\n   * @memberof CallResponse\n   */\n  thumbnails?: ThumbnailResponse;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallResponse\n   */\n  transcribing: boolean;\n  /**\n   * The type of call\n   * @type {string}\n   * @memberof CallResponse\n   */\n  type: string;\n  /**\n   * Date/time of the last update\n   * @type {string}\n   * @memberof CallResponse\n   */\n  updated_at: string;\n}\n/**\n * This event is sent to all call members to notify they are getting called\n * @export\n * @interface CallRingEvent\n */\nexport interface CallRingEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallRingEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRingEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRingEvent\n   */\n  created_at: string;\n  /**\n   * Call members\n   * @type {Array<MemberResponse>}\n   * @memberof CallRingEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallRingEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.notification\" in this case\n   * @type {string}\n   * @memberof CallRingEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallRingEvent\n   */\n  user: UserResponse;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallRingEvent\n   */\n  video: boolean;\n}\n/**\n * This event is sent when a call RTMP broadcast has failed\n * @export\n * @interface CallRtmpBroadcastFailedEvent\n */\nexport interface CallRtmpBroadcastFailedEvent {\n  /**\n   * The unique identifier for a call (<type>:<id>)\n   * @type {string}\n   * @memberof CallRtmpBroadcastFailedEvent\n   */\n  call_cid: string;\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof CallRtmpBroadcastFailedEvent\n   */\n  created_at: string;\n  /**\n   * Name of the given RTMP broadcast\n   * @type {string}\n   * @memberof CallRtmpBroadcastFailedEvent\n   */\n  name: string;\n  /**\n   * The type of event: \"call.rtmp_broadcast_failed\" in this case\n   * @type {string}\n   * @memberof CallRtmpBroadcastFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when RTMP broadcast has started\n * @export\n * @interface CallRtmpBroadcastStartedEvent\n */\nexport interface CallRtmpBroadcastStartedEvent {\n  /**\n   * The unique identifier for a call (<type>:<id>)\n   * @type {string}\n   * @memberof CallRtmpBroadcastStartedEvent\n   */\n  call_cid: string;\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof CallRtmpBroadcastStartedEvent\n   */\n  created_at: string;\n  /**\n   * Name of the given RTMP broadcast\n   * @type {string}\n   * @memberof CallRtmpBroadcastStartedEvent\n   */\n  name: string;\n  /**\n   * The type of event: \"call.rtmp_broadcast_started\" in this case\n   * @type {string}\n   * @memberof CallRtmpBroadcastStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when RTMP broadcast has stopped\n * @export\n * @interface CallRtmpBroadcastStoppedEvent\n */\nexport interface CallRtmpBroadcastStoppedEvent {\n  /**\n   * The unique identifier for a call (<type>:<id>)\n   * @type {string}\n   * @memberof CallRtmpBroadcastStoppedEvent\n   */\n  call_cid: string;\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof CallRtmpBroadcastStoppedEvent\n   */\n  created_at: string;\n  /**\n   * Name of the given RTMP broadcast\n   * @type {string}\n   * @memberof CallRtmpBroadcastStoppedEvent\n   */\n  name: string;\n  /**\n   * The type of event: \"call.rtmp_broadcast_stopped\" in this case\n   * @type {string}\n   * @memberof CallRtmpBroadcastStoppedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a call session ends\n * @export\n * @interface CallSessionEndedEvent\n */\nexport interface CallSessionEndedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallSessionEndedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionEndedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionEndedEvent\n   */\n  created_at: string;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallSessionEndedEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.session_ended\" in this case\n   * @type {string}\n   * @memberof CallSessionEndedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when the participant counts in a call session are updated\n * @export\n * @interface CallSessionParticipantCountsUpdatedEvent\n */\nexport interface CallSessionParticipantCountsUpdatedEvent {\n  /**\n   *\n   * @type {number}\n   * @memberof CallSessionParticipantCountsUpdatedEvent\n   */\n  anonymous_participant_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantCountsUpdatedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantCountsUpdatedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {{ [key: string]: number; }}\n   * @memberof CallSessionParticipantCountsUpdatedEvent\n   */\n  participants_count_by_role: { [key: string]: number };\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallSessionParticipantCountsUpdatedEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.session_participant_count_updated\" in this case\n   * @type {string}\n   * @memberof CallSessionParticipantCountsUpdatedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a participant joins a call session\n * @export\n * @interface CallSessionParticipantJoinedEvent\n */\nexport interface CallSessionParticipantJoinedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {CallParticipantResponse}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  participant: CallParticipantResponse;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.session_participant_joined\" in this case\n   * @type {string}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a participant leaves a call session\n * @export\n * @interface CallSessionParticipantLeftEvent\n */\nexport interface CallSessionParticipantLeftEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  created_at: string;\n  /**\n   * The duration participant was in the session in seconds\n   * @type {number}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  duration_seconds: number;\n  /**\n   *\n   * @type {CallParticipantResponse}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  participant: CallParticipantResponse;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.session_participant_left\" in this case\n   * @type {string}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CallSessionResponse\n */\nexport interface CallSessionResponse {\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof CallSessionResponse\n   */\n  accepted_by: { [key: string]: string };\n  /**\n   *\n   * @type {number}\n   * @memberof CallSessionResponse\n   */\n  anonymous_participant_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  ended_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  live_ended_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  live_started_at?: string;\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof CallSessionResponse\n   */\n  missed_by: { [key: string]: string };\n  /**\n   *\n   * @type {Array<CallParticipantResponse>}\n   * @memberof CallSessionResponse\n   */\n  participants: Array<CallParticipantResponse>;\n  /**\n   *\n   * @type {{ [key: string]: number; }}\n   * @memberof CallSessionResponse\n   */\n  participants_count_by_role: { [key: string]: number };\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof CallSessionResponse\n   */\n  rejected_by: { [key: string]: string };\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  started_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  timer_ends_at?: string;\n}\n/**\n * This event is sent when a call session starts\n * @export\n * @interface CallSessionStartedEvent\n */\nexport interface CallSessionStartedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallSessionStartedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionStartedEvent\n   */\n  created_at: string;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallSessionStartedEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.session_started\" in this case\n   * @type {string}\n   * @memberof CallSessionStartedEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CallSettingsRequest\n */\nexport interface CallSettingsRequest {\n  /**\n   *\n   * @type {AudioSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  audio?: AudioSettingsRequest;\n  /**\n   *\n   * @type {BackstageSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  backstage?: BackstageSettingsRequest;\n  /**\n   *\n   * @type {BroadcastSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  broadcasting?: BroadcastSettingsRequest;\n  /**\n   *\n   * @type {FrameRecordingSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  frame_recording?: FrameRecordingSettingsRequest;\n  /**\n   *\n   * @type {GeofenceSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  geofencing?: GeofenceSettingsRequest;\n  /**\n   *\n   * @type {LimitsSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  limits?: LimitsSettingsRequest;\n  /**\n   *\n   * @type {RecordSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  recording?: RecordSettingsRequest;\n  /**\n   *\n   * @type {RingSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  ring?: RingSettingsRequest;\n  /**\n   *\n   * @type {ScreensharingSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  screensharing?: ScreensharingSettingsRequest;\n  /**\n   *\n   * @type {SessionSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  session?: SessionSettingsRequest;\n  /**\n   *\n   * @type {ThumbnailsSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  thumbnails?: ThumbnailsSettingsRequest;\n  /**\n   *\n   * @type {TranscriptionSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  transcription?: TranscriptionSettingsRequest;\n  /**\n   *\n   * @type {VideoSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  video?: VideoSettingsRequest;\n}\n/**\n *\n * @export\n * @interface CallSettingsResponse\n */\nexport interface CallSettingsResponse {\n  /**\n   *\n   * @type {AudioSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  audio: AudioSettingsResponse;\n  /**\n   *\n   * @type {BackstageSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  backstage: BackstageSettingsResponse;\n  /**\n   *\n   * @type {BroadcastSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  broadcasting: BroadcastSettingsResponse;\n  /**\n   *\n   * @type {FrameRecordingSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  frame_recording: FrameRecordingSettingsResponse;\n  /**\n   *\n   * @type {GeofenceSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  geofencing: GeofenceSettingsResponse;\n  /**\n   *\n   * @type {LimitsSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  limits: LimitsSettingsResponse;\n  /**\n   *\n   * @type {RecordSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  recording: RecordSettingsResponse;\n  /**\n   *\n   * @type {RingSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  ring: RingSettingsResponse;\n  /**\n   *\n   * @type {ScreensharingSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  screensharing: ScreensharingSettingsResponse;\n  /**\n   *\n   * @type {SessionSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  session: SessionSettingsResponse;\n  /**\n   *\n   * @type {ThumbnailsSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  thumbnails: ThumbnailsSettingsResponse;\n  /**\n   *\n   * @type {TranscriptionSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  transcription: TranscriptionSettingsResponse;\n  /**\n   *\n   * @type {VideoSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  video: VideoSettingsResponse;\n}\n/**\n * CallStateResponseFields is the payload for call state response\n * @export\n * @interface CallStateResponseFields\n */\nexport interface CallStateResponseFields {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallStateResponseFields\n   */\n  call: CallResponse;\n  /**\n   * List of call members\n   * @type {Array<MemberResponse>}\n   * @memberof CallStateResponseFields\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof CallStateResponseFields\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof CallStateResponseFields\n   */\n  own_capabilities: Array<OwnCapability>;\n}\n/**\n *\n * @export\n * @interface CallStatsReportSummaryResponse\n */\nexport interface CallStatsReportSummaryResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {number}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  call_duration_seconds: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  call_session_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  call_status: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  first_stats_time: string;\n  /**\n   *\n   * @type {number}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  min_user_rating?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  quality_score?: number;\n}\n/**\n * CallTranscription represents a transcription of a call.\n * @export\n * @interface CallTranscription\n */\nexport interface CallTranscription {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  end_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  filename: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  start_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  url: string;\n}\n/**\n * This event is sent when call transcription has failed\n * @export\n * @interface CallTranscriptionFailedEvent\n */\nexport interface CallTranscriptionFailedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.transcription_failed\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call transcription is ready\n * @export\n * @interface CallTranscriptionReadyEvent\n */\nexport interface CallTranscriptionReadyEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {CallTranscription}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  call_transcription: CallTranscription;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.transcription_ready\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call transcription has started\n * @export\n * @interface CallTranscriptionStartedEvent\n */\nexport interface CallTranscriptionStartedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.transcription_started\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call transcription has stopped\n * @export\n * @interface CallTranscriptionStoppedEvent\n */\nexport interface CallTranscriptionStoppedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  egress_id: string;\n  /**\n   * The type of event: \"call.transcription_stopped\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a call is updated, clients should use this update the local state of the call.\n * This event also contains the capabilities by role for the call, clients should update the own_capability for the current.\n * @export\n * @interface CallUpdatedEvent\n */\nexport interface CallUpdatedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallUpdatedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallUpdatedEvent\n   */\n  call_cid: string;\n  /**\n   * The capabilities by role for this call\n   * @type {{ [key: string]: Array<string>; }}\n   * @memberof CallUpdatedEvent\n   */\n  capabilities_by_role: { [key: string]: Array<string> };\n  /**\n   *\n   * @type {string}\n   * @memberof CallUpdatedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.ended\" in this case\n   * @type {string}\n   * @memberof CallUpdatedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a call member is muted\n * @export\n * @interface CallUserMutedEvent\n */\nexport interface CallUserMutedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallUserMutedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallUserMutedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallUserMutedEvent\n   */\n  from_user_id: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof CallUserMutedEvent\n   */\n  muted_user_ids: Array<string>;\n  /**\n   * The type of event: \"call.user_muted\" in this case\n   * @type {string}\n   * @memberof CallUserMutedEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CallsPerDayReport\n */\nexport interface CallsPerDayReport {\n  /**\n   *\n   * @type {number}\n   * @memberof CallsPerDayReport\n   */\n  count: number;\n}\n/**\n *\n * @export\n * @interface CallsPerDayReportResponse\n */\nexport interface CallsPerDayReportResponse {\n  /**\n   *\n   * @type {Array<DailyAggregateCallsPerDayReportResponse>}\n   * @memberof CallsPerDayReportResponse\n   */\n  daily: Array<DailyAggregateCallsPerDayReportResponse>;\n}\n/**\n *\n * @export\n * @interface ChatActivityStatsResponse\n */\nexport interface ChatActivityStatsResponse {\n  /**\n   *\n   * @type {MessageStatsResponse}\n   * @memberof ChatActivityStatsResponse\n   */\n  Messages?: MessageStatsResponse;\n}\n/**\n * This event is sent when closed captions are being sent in a call, clients should use this to show the closed captions in the call screen\n * @export\n * @interface ClosedCaptionEvent\n */\nexport interface ClosedCaptionEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof ClosedCaptionEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {CallClosedCaption}\n   * @memberof ClosedCaptionEvent\n   */\n  closed_caption: CallClosedCaption;\n  /**\n   *\n   * @type {string}\n   * @memberof ClosedCaptionEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.closed_caption\" in this case\n   * @type {string}\n   * @memberof ClosedCaptionEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CollectUserFeedbackRequest\n */\nexport interface CollectUserFeedbackRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof CollectUserFeedbackRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {number}\n   * @memberof CollectUserFeedbackRequest\n   */\n  rating: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CollectUserFeedbackRequest\n   */\n  reason?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CollectUserFeedbackRequest\n   */\n  sdk: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CollectUserFeedbackRequest\n   */\n  sdk_version: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CollectUserFeedbackRequest\n   */\n  user_session_id?: string;\n}\n/**\n * Basic response information\n * @export\n * @interface CollectUserFeedbackResponse\n */\nexport interface CollectUserFeedbackResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof CollectUserFeedbackResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface ConnectUserDetailsRequest\n */\nexport interface ConnectUserDetailsRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof ConnectUserDetailsRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectUserDetailsRequest\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectUserDetailsRequest\n   */\n  image?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ConnectUserDetailsRequest\n   */\n  invisible?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectUserDetailsRequest\n   */\n  language?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectUserDetailsRequest\n   */\n  name?: string;\n  /**\n   *\n   * @type {object}\n   * @memberof ConnectUserDetailsRequest\n   */\n  privacy_settings?: object;\n}\n/**\n * This event is sent when the WS connection is established and authenticated, this event contains the full user object as it is stored on the server\n * @export\n * @interface ConnectedEvent\n */\nexport interface ConnectedEvent {\n  /**\n   * The connection_id for this client\n   * @type {string}\n   * @memberof ConnectedEvent\n   */\n  connection_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {OwnUserResponse}\n   * @memberof ConnectedEvent\n   */\n  me: OwnUserResponse;\n  /**\n   * The type of event: \"connection.ok\" in this case\n   * @type {string}\n   * @memberof ConnectedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when the WS connection fails\n * @export\n * @interface ConnectionErrorEvent\n */\nexport interface ConnectionErrorEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectionErrorEvent\n   */\n  connection_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectionErrorEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {APIError}\n   * @memberof ConnectionErrorEvent\n   */\n  error: APIError;\n  /**\n   * The type of event: \"connection.ok\" in this case\n   * @type {string}\n   * @memberof ConnectionErrorEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CountByMinuteResponse\n */\nexport interface CountByMinuteResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof CountByMinuteResponse\n   */\n  count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CountByMinuteResponse\n   */\n  start_ts: string;\n}\n/**\n * Create device request\n * @export\n * @interface CreateDeviceRequest\n */\nexport interface CreateDeviceRequest {\n  /**\n   * Device ID\n   * @type {string}\n   * @memberof CreateDeviceRequest\n   */\n  id: string;\n  /**\n   * Push provider\n   * @type {string}\n   * @memberof CreateDeviceRequest\n   */\n  push_provider: CreateDeviceRequestPushProviderEnum;\n  /**\n   * Push provider name\n   * @type {string}\n   * @memberof CreateDeviceRequest\n   */\n  push_provider_name?: string;\n  /**\n   * When true the token is for Apple VoIP push notifications\n   * @type {boolean}\n   * @memberof CreateDeviceRequest\n   */\n  voip_token?: boolean;\n}\n\n/**\n * @export\n */\nexport const CreateDeviceRequestPushProviderEnum = {\n  FIREBASE: 'firebase',\n  APN: 'apn',\n  HUAWEI: 'huawei',\n  XIAOMI: 'xiaomi',\n} as const;\nexport type CreateDeviceRequestPushProviderEnum =\n  (typeof CreateDeviceRequestPushProviderEnum)[keyof typeof CreateDeviceRequestPushProviderEnum];\n\n/**\n *\n * @export\n * @interface CreateGuestRequest\n */\nexport interface CreateGuestRequest {\n  /**\n   *\n   * @type {UserRequest}\n   * @memberof CreateGuestRequest\n   */\n  user: UserRequest;\n}\n/**\n *\n * @export\n * @interface CreateGuestResponse\n */\nexport interface CreateGuestResponse {\n  /**\n   * the access token to authenticate the user\n   * @type {string}\n   * @memberof CreateGuestResponse\n   */\n  access_token: string;\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof CreateGuestResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CreateGuestResponse\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface Credentials\n */\nexport interface Credentials {\n  /**\n   *\n   * @type {Array<ICEServer>}\n   * @memberof Credentials\n   */\n  ice_servers: Array<ICEServer>;\n  /**\n   *\n   * @type {SFUResponse}\n   * @memberof Credentials\n   */\n  server: SFUResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof Credentials\n   */\n  token: string;\n}\n/**\n * A custom event, this event is used to send custom events to other participants in the call.\n * @export\n * @interface CustomVideoEvent\n */\nexport interface CustomVideoEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CustomVideoEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomVideoEvent\n   */\n  created_at: string;\n  /**\n   * Custom data for this object\n   * @type {{ [key: string]: any; }}\n   * @memberof CustomVideoEvent\n   */\n  custom: { [key: string]: any };\n  /**\n   * The type of event, \"custom\" in this case\n   * @type {string}\n   * @memberof CustomVideoEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CustomVideoEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface DailyAggregateCallDurationReportResponse\n */\nexport interface DailyAggregateCallDurationReportResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof DailyAggregateCallDurationReportResponse\n   */\n  date: string;\n  /**\n   *\n   * @type {CallDurationReport}\n   * @memberof DailyAggregateCallDurationReportResponse\n   */\n  report: CallDurationReport;\n}\n/**\n *\n * @export\n * @interface DailyAggregateCallParticipantCountReportResponse\n */\nexport interface DailyAggregateCallParticipantCountReportResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof DailyAggregateCallParticipantCountReportResponse\n   */\n  date: string;\n  /**\n   *\n   * @type {CallParticipantCountReport}\n   * @memberof DailyAggregateCallParticipantCountReportResponse\n   */\n  report: CallParticipantCountReport;\n}\n/**\n *\n * @export\n * @interface DailyAggregateCallsPerDayReportResponse\n */\nexport interface DailyAggregateCallsPerDayReportResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof DailyAggregateCallsPerDayReportResponse\n   */\n  date: string;\n  /**\n   *\n   * @type {CallsPerDayReport}\n   * @memberof DailyAggregateCallsPerDayReportResponse\n   */\n  report: CallsPerDayReport;\n}\n/**\n *\n * @export\n * @interface DailyAggregateQualityScoreReportResponse\n */\nexport interface DailyAggregateQualityScoreReportResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof DailyAggregateQualityScoreReportResponse\n   */\n  date: string;\n  /**\n   *\n   * @type {QualityScoreReport}\n   * @memberof DailyAggregateQualityScoreReportResponse\n   */\n  report: QualityScoreReport;\n}\n/**\n *\n * @export\n * @interface DailyAggregateSDKUsageReportResponse\n */\nexport interface DailyAggregateSDKUsageReportResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof DailyAggregateSDKUsageReportResponse\n   */\n  date: string;\n  /**\n   *\n   * @type {SDKUsageReport}\n   * @memberof DailyAggregateSDKUsageReportResponse\n   */\n  report: SDKUsageReport;\n}\n/**\n *\n * @export\n * @interface DailyAggregateUserFeedbackReportResponse\n */\nexport interface DailyAggregateUserFeedbackReportResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof DailyAggregateUserFeedbackReportResponse\n   */\n  date: string;\n  /**\n   *\n   * @type {UserFeedbackReport}\n   * @memberof DailyAggregateUserFeedbackReportResponse\n   */\n  report: UserFeedbackReport;\n}\n/**\n * DeleteCallRequest is the payload for deleting a call.\n * @export\n * @interface DeleteCallRequest\n */\nexport interface DeleteCallRequest {\n  /**\n   * if true the call will be hard deleted along with all related data\n   * @type {boolean}\n   * @memberof DeleteCallRequest\n   */\n  hard?: boolean;\n}\n/**\n * DeleteCallResponse is the payload for deleting a call.\n * @export\n * @interface DeleteCallResponse\n */\nexport interface DeleteCallResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof DeleteCallResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof DeleteCallResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {string}\n   * @memberof DeleteCallResponse\n   */\n  task_id?: string;\n}\n/**\n * Response for DeleteRecording\n * @export\n * @interface DeleteRecordingResponse\n */\nexport interface DeleteRecordingResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof DeleteRecordingResponse\n   */\n  duration: string;\n}\n/**\n * DeleteTranscriptionResponse is the payload for deleting a transcription.\n * @export\n * @interface DeleteTranscriptionResponse\n */\nexport interface DeleteTranscriptionResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof DeleteTranscriptionResponse\n   */\n  duration: string;\n}\n/**\n * Response for Device\n * @export\n * @interface DeviceResponse\n */\nexport interface DeviceResponse {\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof DeviceResponse\n   */\n  created_at: string;\n  /**\n   * Whether device is disabled or not\n   * @type {boolean}\n   * @memberof DeviceResponse\n   */\n  disabled?: boolean;\n  /**\n   * Reason explaining why device had been disabled\n   * @type {string}\n   * @memberof DeviceResponse\n   */\n  disabled_reason?: string;\n  /**\n   * Device ID\n   * @type {string}\n   * @memberof DeviceResponse\n   */\n  id: string;\n  /**\n   * Push provider\n   * @type {string}\n   * @memberof DeviceResponse\n   */\n  push_provider: string;\n  /**\n   * Push provider name\n   * @type {string}\n   * @memberof DeviceResponse\n   */\n  push_provider_name?: string;\n  /**\n   * User ID\n   * @type {string}\n   * @memberof DeviceResponse\n   */\n  user_id: string;\n  /**\n   * When true the token is for Apple VoIP push notifications\n   * @type {boolean}\n   * @memberof DeviceResponse\n   */\n  voip?: boolean;\n}\n/**\n *\n * @export\n * @interface EdgeResponse\n */\nexport interface EdgeResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  continent_code: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  country_iso_code: string;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  green: number;\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  latency_test_url: string;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  latitude: number;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  longitude: number;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  red: number;\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  subdivision_iso_code: string;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  yellow: number;\n}\n/**\n *\n * @export\n * @interface EgressHLSResponse\n */\nexport interface EgressHLSResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof EgressHLSResponse\n   */\n  playlist_url: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EgressHLSResponse\n   */\n  status: string;\n}\n/**\n *\n * @export\n * @interface EgressRTMPResponse\n */\nexport interface EgressRTMPResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof EgressRTMPResponse\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EgressRTMPResponse\n   */\n  started_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EgressRTMPResponse\n   */\n  stream_key?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EgressRTMPResponse\n   */\n  stream_url?: string;\n}\n/**\n *\n * @export\n * @interface EgressResponse\n */\nexport interface EgressResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EgressResponse\n   */\n  broadcasting: boolean;\n  /**\n   *\n   * @type {FrameRecordingResponse}\n   * @memberof EgressResponse\n   */\n  frame_recording?: FrameRecordingResponse;\n  /**\n   *\n   * @type {EgressHLSResponse}\n   * @memberof EgressResponse\n   */\n  hls?: EgressHLSResponse;\n  /**\n   *\n   * @type {Array<EgressRTMPResponse>}\n   * @memberof EgressResponse\n   */\n  rtmps: Array<EgressRTMPResponse>;\n}\n/**\n * Response for ending a call\n * @export\n * @interface EndCallResponse\n */\nexport interface EndCallResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof EndCallResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface FrameRecordingResponse\n */\nexport interface FrameRecordingResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof FrameRecordingResponse\n   */\n  status: string;\n}\n/**\n *\n * @export\n * @interface FrameRecordingSettingsRequest\n */\nexport interface FrameRecordingSettingsRequest {\n  /**\n   *\n   * @type {number}\n   * @memberof FrameRecordingSettingsRequest\n   */\n  capture_interval_in_seconds: number;\n  /**\n   *\n   * @type {string}\n   * @memberof FrameRecordingSettingsRequest\n   */\n  mode: FrameRecordingSettingsRequestModeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof FrameRecordingSettingsRequest\n   */\n  quality?: FrameRecordingSettingsRequestQualityEnum;\n}\n\n/**\n * @export\n */\nexport const FrameRecordingSettingsRequestModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type FrameRecordingSettingsRequestModeEnum =\n  (typeof FrameRecordingSettingsRequestModeEnum)[keyof typeof FrameRecordingSettingsRequestModeEnum];\n\n/**\n * @export\n */\nexport const FrameRecordingSettingsRequestQualityEnum = {\n  _360P: '360p',\n  _480P: '480p',\n  _720P: '720p',\n  _1080P: '1080p',\n  _1440P: '1440p',\n} as const;\nexport type FrameRecordingSettingsRequestQualityEnum =\n  (typeof FrameRecordingSettingsRequestQualityEnum)[keyof typeof FrameRecordingSettingsRequestQualityEnum];\n\n/**\n *\n * @export\n * @interface FrameRecordingSettingsResponse\n */\nexport interface FrameRecordingSettingsResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof FrameRecordingSettingsResponse\n   */\n  capture_interval_in_seconds: number;\n  /**\n   *\n   * @type {string}\n   * @memberof FrameRecordingSettingsResponse\n   */\n  mode: FrameRecordingSettingsResponseModeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof FrameRecordingSettingsResponse\n   */\n  quality?: string;\n}\n\n/**\n * @export\n */\nexport const FrameRecordingSettingsResponseModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type FrameRecordingSettingsResponseModeEnum =\n  (typeof FrameRecordingSettingsResponseModeEnum)[keyof typeof FrameRecordingSettingsResponseModeEnum];\n\n/**\n *\n * @export\n * @interface GeofenceSettingsRequest\n */\nexport interface GeofenceSettingsRequest {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof GeofenceSettingsRequest\n   */\n  names?: Array<string>;\n}\n/**\n *\n * @export\n * @interface GeofenceSettingsResponse\n */\nexport interface GeofenceSettingsResponse {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof GeofenceSettingsResponse\n   */\n  names: Array<string>;\n}\n/**\n *\n * @export\n * @interface GetCallResponse\n */\nexport interface GetCallResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof GetCallResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof GetCallResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof GetCallResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof GetCallResponse\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof GetCallResponse\n   */\n  own_capabilities: Array<OwnCapability>;\n}\n/**\n * Basic response information\n * @export\n * @interface GetCallReportResponse\n */\nexport interface GetCallReportResponse {\n  /**\n   *\n   * @type {ChatActivityStatsResponse}\n   * @memberof GetCallReportResponse\n   */\n  chat_activity?: ChatActivityStatsResponse;\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof GetCallReportResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {ReportResponse}\n   * @memberof GetCallReportResponse\n   */\n  report: ReportResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof GetCallReportResponse\n   */\n  session_id: string;\n}\n/**\n * Basic response information\n * @export\n * @interface GetEdgesResponse\n */\nexport interface GetEdgesResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof GetEdgesResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<EdgeResponse>}\n   * @memberof GetEdgesResponse\n   */\n  edges: Array<EdgeResponse>;\n}\n/**\n *\n * @export\n * @interface GetOrCreateCallRequest\n */\nexport interface GetOrCreateCallRequest {\n  /**\n   *\n   * @type {CallRequest}\n   * @memberof GetOrCreateCallRequest\n   */\n  data?: CallRequest;\n  /**\n   *\n   * @type {number}\n   * @memberof GetOrCreateCallRequest\n   */\n  members_limit?: number;\n  /**\n   * if provided it sends a notification event to the members for this call\n   * @type {boolean}\n   * @memberof GetOrCreateCallRequest\n   */\n  notify?: boolean;\n  /**\n   * if provided it sends a ring event to the members for this call\n   * @type {boolean}\n   * @memberof GetOrCreateCallRequest\n   */\n  ring?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GetOrCreateCallRequest\n   */\n  video?: boolean;\n}\n/**\n *\n * @export\n * @interface GetOrCreateCallResponse\n */\nexport interface GetOrCreateCallResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof GetOrCreateCallResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GetOrCreateCallResponse\n   */\n  created: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof GetOrCreateCallResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof GetOrCreateCallResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof GetOrCreateCallResponse\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof GetOrCreateCallResponse\n   */\n  own_capabilities: Array<OwnCapability>;\n}\n/**\n *\n * @export\n * @interface GoLiveRequest\n */\nexport interface GoLiveRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof GoLiveRequest\n   */\n  recording_storage_name?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GoLiveRequest\n   */\n  start_closed_caption?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GoLiveRequest\n   */\n  start_hls?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GoLiveRequest\n   */\n  start_recording?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GoLiveRequest\n   */\n  start_rtmp_broadcasts?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GoLiveRequest\n   */\n  start_transcription?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof GoLiveRequest\n   */\n  transcription_storage_name?: string;\n}\n/**\n * Basic response information\n * @export\n * @interface GoLiveResponse\n */\nexport interface GoLiveResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof GoLiveResponse\n   */\n  call: CallResponse;\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof GoLiveResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface GroupedStatsResponse\n */\nexport interface GroupedStatsResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof GroupedStatsResponse\n   */\n  name: string;\n  /**\n   *\n   * @type {number}\n   * @memberof GroupedStatsResponse\n   */\n  unique: number;\n}\n/**\n *\n * @export\n * @interface HLSSettingsRequest\n */\nexport interface HLSSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof HLSSettingsRequest\n   */\n  auto_on?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof HLSSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof HLSSettingsRequest\n   */\n  quality_tracks: Array<string>;\n}\n/**\n * HLSSettings is the payload for HLS settings\n * @export\n * @interface HLSSettingsResponse\n */\nexport interface HLSSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof HLSSettingsResponse\n   */\n  auto_on: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof HLSSettingsResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof HLSSettingsResponse\n   */\n  quality_tracks: Array<string>;\n}\n/**\n *\n * @export\n * @interface HealthCheckEvent\n */\nexport interface HealthCheckEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof HealthCheckEvent\n   */\n  cid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof HealthCheckEvent\n   */\n  connection_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof HealthCheckEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof HealthCheckEvent\n   */\n  custom: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof HealthCheckEvent\n   */\n  received_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof HealthCheckEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface ICEServer\n */\nexport interface ICEServer {\n  /**\n   *\n   * @type {string}\n   * @memberof ICEServer\n   */\n  password: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ICEServer\n   */\n  urls: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof ICEServer\n   */\n  username: string;\n}\n/**\n *\n * @export\n * @interface JoinCallRequest\n */\nexport interface JoinCallRequest {\n  /**\n   * if true the call will be created if it doesn't exist\n   * @type {boolean}\n   * @memberof JoinCallRequest\n   */\n  create?: boolean;\n  /**\n   *\n   * @type {CallRequest}\n   * @memberof JoinCallRequest\n   */\n  data?: CallRequest;\n  /**\n   *\n   * @type {string}\n   * @memberof JoinCallRequest\n   */\n  location: string;\n  /**\n   *\n   * @type {number}\n   * @memberof JoinCallRequest\n   */\n  members_limit?: number;\n  /**\n   * If the participant is migrating from another SFU, then this is the ID of the previous SFU\n   * @type {string}\n   * @memberof JoinCallRequest\n   */\n  migrating_from?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof JoinCallRequest\n   */\n  notify?: boolean;\n  /**\n   * if true and the call is created, the notification will include ring=true\n   * @type {boolean}\n   * @memberof JoinCallRequest\n   */\n  ring?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof JoinCallRequest\n   */\n  video?: boolean;\n}\n/**\n *\n * @export\n * @interface JoinCallResponse\n */\nexport interface JoinCallResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof JoinCallResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {boolean}\n   * @memberof JoinCallResponse\n   */\n  created: boolean;\n  /**\n   *\n   * @type {Credentials}\n   * @memberof JoinCallResponse\n   */\n  credentials: Credentials;\n  /**\n   *\n   * @type {string}\n   * @memberof JoinCallResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof JoinCallResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof JoinCallResponse\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof JoinCallResponse\n   */\n  own_capabilities: Array<OwnCapability>;\n  /**\n   *\n   * @type {StatsOptions}\n   * @memberof JoinCallResponse\n   */\n  stats_options: StatsOptions;\n}\n/**\n *\n * @export\n * @interface LayoutSettingsRequest\n */\nexport interface LayoutSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof LayoutSettingsRequest\n   */\n  detect_orientation?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof LayoutSettingsRequest\n   */\n  external_app_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LayoutSettingsRequest\n   */\n  external_css_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LayoutSettingsRequest\n   */\n  name: LayoutSettingsRequestNameEnum;\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof LayoutSettingsRequest\n   */\n  options?: { [key: string]: any };\n}\n\n/**\n * @export\n */\nexport const LayoutSettingsRequestNameEnum = {\n  SPOTLIGHT: 'spotlight',\n  GRID: 'grid',\n  SINGLE_PARTICIPANT: 'single-participant',\n  MOBILE: 'mobile',\n  CUSTOM: 'custom',\n} as const;\nexport type LayoutSettingsRequestNameEnum =\n  (typeof LayoutSettingsRequestNameEnum)[keyof typeof LayoutSettingsRequestNameEnum];\n\n/**\n *\n * @export\n * @interface LimitsSettingsRequest\n */\nexport interface LimitsSettingsRequest {\n  /**\n   *\n   * @type {number}\n   * @memberof LimitsSettingsRequest\n   */\n  max_duration_seconds?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof LimitsSettingsRequest\n   */\n  max_participants?: number;\n}\n/**\n *\n * @export\n * @interface LimitsSettingsResponse\n */\nexport interface LimitsSettingsResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof LimitsSettingsResponse\n   */\n  max_duration_seconds?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof LimitsSettingsResponse\n   */\n  max_participants?: number;\n}\n/**\n * List devices response\n * @export\n * @interface ListDevicesResponse\n */\nexport interface ListDevicesResponse {\n  /**\n   * List of devices\n   * @type {Array<DeviceResponse>}\n   * @memberof ListDevicesResponse\n   */\n  devices: Array<DeviceResponse>;\n  /**\n   *\n   * @type {string}\n   * @memberof ListDevicesResponse\n   */\n  duration: string;\n}\n/**\n * Response for listing recordings\n * @export\n * @interface ListRecordingsResponse\n */\nexport interface ListRecordingsResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof ListRecordingsResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<CallRecording>}\n   * @memberof ListRecordingsResponse\n   */\n  recordings: Array<CallRecording>;\n}\n/**\n *\n * @export\n * @interface ListTranscriptionsResponse\n */\nexport interface ListTranscriptionsResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof ListTranscriptionsResponse\n   */\n  duration: string;\n  /**\n   * List of transcriptions for the call\n   * @type {Array<CallTranscription>}\n   * @memberof ListTranscriptionsResponse\n   */\n  transcriptions: Array<CallTranscription>;\n}\n/**\n *\n * @export\n * @interface Location\n */\nexport interface Location {\n  /**\n   *\n   * @type {string}\n   * @memberof Location\n   */\n  continent_code: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Location\n   */\n  country_iso_code: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Location\n   */\n  subdivision_iso_code: string;\n}\n/**\n * MemberRequest is the payload for adding a member to a call.\n * @export\n * @interface MemberRequest\n */\nexport interface MemberRequest {\n  /**\n   * Custom data for this object\n   * @type {{ [key: string]: any; }}\n   * @memberof MemberRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof MemberRequest\n   */\n  role?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MemberRequest\n   */\n  user_id: string;\n}\n/**\n * MemberResponse is the payload for a member of a call.\n * @export\n * @interface MemberResponse\n */\nexport interface MemberResponse {\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  created_at: string;\n  /**\n   * Custom member response data\n   * @type {{ [key: string]: any; }}\n   * @memberof MemberResponse\n   */\n  custom: { [key: string]: any };\n  /**\n   * Date/time of deletion\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  deleted_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  role?: string;\n  /**\n   * Date/time of the last update\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  updated_at: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof MemberResponse\n   */\n  user: UserResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  user_id: string;\n}\n/**\n *\n * @export\n * @interface MessageStatsResponse\n */\nexport interface MessageStatsResponse {\n  /**\n   *\n   * @type {Array<CountByMinuteResponse>}\n   * @memberof MessageStatsResponse\n   */\n  count_over_time?: Array<CountByMinuteResponse>;\n}\n/**\n *\n * @export\n * @interface MuteUsersRequest\n */\nexport interface MuteUsersRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  audio?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  mute_all_users?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  screenshare?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  screenshare_audio?: boolean;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof MuteUsersRequest\n   */\n  user_ids?: Array<string>;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  video?: boolean;\n}\n/**\n * MuteUsersResponse is the response payload for the mute users endpoint.\n * @export\n * @interface MuteUsersResponse\n */\nexport interface MuteUsersResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof MuteUsersResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface NetworkMetricsReportResponse\n */\nexport interface NetworkMetricsReportResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof NetworkMetricsReportResponse\n   */\n  average_connection_time?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof NetworkMetricsReportResponse\n   */\n  average_jitter?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof NetworkMetricsReportResponse\n   */\n  average_latency?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof NetworkMetricsReportResponse\n   */\n  average_time_to_reconnect?: number;\n}\n/**\n *\n * @export\n * @interface NoiseCancellationSettings\n */\nexport interface NoiseCancellationSettings {\n  /**\n   *\n   * @type {string}\n   * @memberof NoiseCancellationSettings\n   */\n  mode: NoiseCancellationSettingsModeEnum;\n}\n\n/**\n * @export\n */\nexport const NoiseCancellationSettingsModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type NoiseCancellationSettingsModeEnum =\n  (typeof NoiseCancellationSettingsModeEnum)[keyof typeof NoiseCancellationSettingsModeEnum];\n\n/**\n * All possibility of string to use\n * @export\n */\nexport const OwnCapability = {\n  BLOCK_USERS: 'block-users',\n  CHANGE_MAX_DURATION: 'change-max-duration',\n  CREATE_CALL: 'create-call',\n  CREATE_REACTION: 'create-reaction',\n  ENABLE_NOISE_CANCELLATION: 'enable-noise-cancellation',\n  END_CALL: 'end-call',\n  JOIN_BACKSTAGE: 'join-backstage',\n  JOIN_CALL: 'join-call',\n  JOIN_ENDED_CALL: 'join-ended-call',\n  MUTE_USERS: 'mute-users',\n  PIN_FOR_EVERYONE: 'pin-for-everyone',\n  READ_CALL: 'read-call',\n  REMOVE_CALL_MEMBER: 'remove-call-member',\n  SCREENSHARE: 'screenshare',\n  SEND_AUDIO: 'send-audio',\n  SEND_VIDEO: 'send-video',\n  START_BROADCAST_CALL: 'start-broadcast-call',\n  START_CLOSED_CAPTIONS_CALL: 'start-closed-captions-call',\n  START_FRAME_RECORD_CALL: 'start-frame-record-call',\n  START_RECORD_CALL: 'start-record-call',\n  START_TRANSCRIPTION_CALL: 'start-transcription-call',\n  STOP_BROADCAST_CALL: 'stop-broadcast-call',\n  STOP_CLOSED_CAPTIONS_CALL: 'stop-closed-captions-call',\n  STOP_FRAME_RECORD_CALL: 'stop-frame-record-call',\n  STOP_RECORD_CALL: 'stop-record-call',\n  STOP_TRANSCRIPTION_CALL: 'stop-transcription-call',\n  UPDATE_CALL: 'update-call',\n  UPDATE_CALL_MEMBER: 'update-call-member',\n  UPDATE_CALL_PERMISSIONS: 'update-call-permissions',\n  UPDATE_CALL_SETTINGS: 'update-call-settings',\n} as const;\nexport type OwnCapability = (typeof OwnCapability)[keyof typeof OwnCapability];\n\n/**\n *\n * @export\n * @interface OwnUserResponse\n */\nexport interface OwnUserResponse {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof OwnUserResponse\n   */\n  blocked_user_ids?: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  created_at: string;\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof OwnUserResponse\n   */\n  custom: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  deactivated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  deleted_at?: string;\n  /**\n   *\n   * @type {Array<DeviceResponse>}\n   * @memberof OwnUserResponse\n   */\n  devices: Array<DeviceResponse>;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  image?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  language: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  last_active?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  name?: string;\n  /**\n   *\n   * @type {object}\n   * @memberof OwnUserResponse\n   */\n  privacy_settings?: object;\n  /**\n   *\n   * @type {PushPreferences}\n   * @memberof OwnUserResponse\n   */\n  push_preferences?: PushPreferences;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  revoke_tokens_issued_before?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  role: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof OwnUserResponse\n   */\n  teams: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  updated_at: string;\n}\n/**\n *\n * @export\n * @interface ParticipantCountByMinuteResponse\n */\nexport interface ParticipantCountByMinuteResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof ParticipantCountByMinuteResponse\n   */\n  first: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ParticipantCountByMinuteResponse\n   */\n  last: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ParticipantCountByMinuteResponse\n   */\n  max: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ParticipantCountByMinuteResponse\n   */\n  min: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ParticipantCountByMinuteResponse\n   */\n  start_ts: string;\n}\n/**\n *\n * @export\n * @interface ParticipantCountOverTimeResponse\n */\nexport interface ParticipantCountOverTimeResponse {\n  /**\n   *\n   * @type {Array<ParticipantCountByMinuteResponse>}\n   * @memberof ParticipantCountOverTimeResponse\n   */\n  by_minute?: Array<ParticipantCountByMinuteResponse>;\n}\n/**\n *\n * @export\n * @interface ParticipantReportResponse\n */\nexport interface ParticipantReportResponse {\n  /**\n   *\n   * @type {Array<GroupedStatsResponse>}\n   * @memberof ParticipantReportResponse\n   */\n  by_browser?: Array<GroupedStatsResponse>;\n  /**\n   *\n   * @type {Array<GroupedStatsResponse>}\n   * @memberof ParticipantReportResponse\n   */\n  by_country?: Array<GroupedStatsResponse>;\n  /**\n   *\n   * @type {Array<GroupedStatsResponse>}\n   * @memberof ParticipantReportResponse\n   */\n  by_device?: Array<GroupedStatsResponse>;\n  /**\n   *\n   * @type {Array<GroupedStatsResponse>}\n   * @memberof ParticipantReportResponse\n   */\n  by_operating_system?: Array<GroupedStatsResponse>;\n  /**\n   *\n   * @type {ParticipantCountOverTimeResponse}\n   * @memberof ParticipantReportResponse\n   */\n  count_over_time?: ParticipantCountOverTimeResponse;\n  /**\n   *\n   * @type {number}\n   * @memberof ParticipantReportResponse\n   */\n  max_concurrent?: number;\n  /**\n   *\n   * @type {PublisherStatsResponse}\n   * @memberof ParticipantReportResponse\n   */\n  publishers?: PublisherStatsResponse;\n  /**\n   *\n   * @type {SubscriberStatsResponse}\n   * @memberof ParticipantReportResponse\n   */\n  subscribers?: SubscriberStatsResponse;\n  /**\n   *\n   * @type {number}\n   * @memberof ParticipantReportResponse\n   */\n  sum: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ParticipantReportResponse\n   */\n  unique: number;\n}\n/**\n *\n * @export\n * @interface PerSDKUsageReport\n */\nexport interface PerSDKUsageReport {\n  /**\n   *\n   * @type {{ [key: string]: number; }}\n   * @memberof PerSDKUsageReport\n   */\n  by_version: { [key: string]: number };\n  /**\n   *\n   * @type {number}\n   * @memberof PerSDKUsageReport\n   */\n  total: number;\n}\n/**\n * This event is sent when a user requests access to a feature on a call,\n * clients receiving this event should display a permission request to the user\n * @export\n * @interface PermissionRequestEvent\n */\nexport interface PermissionRequestEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionRequestEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionRequestEvent\n   */\n  created_at: string;\n  /**\n   * The list of permissions requested by the user\n   * @type {Array<string>}\n   * @memberof PermissionRequestEvent\n   */\n  permissions: Array<string>;\n  /**\n   * The type of event: \"call.permission_request\" in this case\n   * @type {string}\n   * @memberof PermissionRequestEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof PermissionRequestEvent\n   */\n  user: UserResponse;\n}\n/**\n * PinRequest is the payload for pinning a message.\n * @export\n * @interface PinRequest\n */\nexport interface PinRequest {\n  /**\n   * the session ID of the user who pinned the message\n   * @type {string}\n   * @memberof PinRequest\n   */\n  session_id: string;\n  /**\n   * the user ID of the user who pinned the message\n   * @type {string}\n   * @memberof PinRequest\n   */\n  user_id: string;\n}\n/**\n * Basic response information\n * @export\n * @interface PinResponse\n */\nexport interface PinResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof PinResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface PublisherStatsResponse\n */\nexport interface PublisherStatsResponse {\n  /**\n   *\n   * @type {Array<TrackStatsResponse>}\n   * @memberof PublisherStatsResponse\n   */\n  by_track?: Array<TrackStatsResponse>;\n  /**\n   *\n   * @type {number}\n   * @memberof PublisherStatsResponse\n   */\n  total: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PublisherStatsResponse\n   */\n  unique: number;\n}\n/**\n *\n * @export\n * @interface PushPreferences\n */\nexport interface PushPreferences {\n  /**\n   *\n   * @type {string}\n   * @memberof PushPreferences\n   */\n  call_level?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PushPreferences\n   */\n  chat_level?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PushPreferences\n   */\n  disabled_until?: string;\n}\n/**\n *\n * @export\n * @interface QualityScoreReport\n */\nexport interface QualityScoreReport {\n  /**\n   *\n   * @type {Array<ReportByHistogramBucket>}\n   * @memberof QualityScoreReport\n   */\n  histogram: Array<ReportByHistogramBucket>;\n}\n/**\n *\n * @export\n * @interface QualityScoreReportResponse\n */\nexport interface QualityScoreReportResponse {\n  /**\n   *\n   * @type {Array<DailyAggregateQualityScoreReportResponse>}\n   * @memberof QualityScoreReportResponse\n   */\n  daily: Array<DailyAggregateQualityScoreReportResponse>;\n}\n/**\n *\n * @export\n * @interface QueryAggregateCallStatsRequest\n */\nexport interface QueryAggregateCallStatsRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof QueryAggregateCallStatsRequest\n   */\n  from?: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof QueryAggregateCallStatsRequest\n   */\n  report_types?: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryAggregateCallStatsRequest\n   */\n  to?: string;\n}\n/**\n * Basic response information\n * @export\n * @interface QueryAggregateCallStatsResponse\n */\nexport interface QueryAggregateCallStatsResponse {\n  /**\n   *\n   * @type {CallDurationReportResponse}\n   * @memberof QueryAggregateCallStatsResponse\n   */\n  call_duration_report?: CallDurationReportResponse;\n  /**\n   *\n   * @type {CallParticipantCountReportResponse}\n   * @memberof QueryAggregateCallStatsResponse\n   */\n  call_participant_count_report?: CallParticipantCountReportResponse;\n  /**\n   *\n   * @type {CallsPerDayReportResponse}\n   * @memberof QueryAggregateCallStatsResponse\n   */\n  calls_per_day_report?: CallsPerDayReportResponse;\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof QueryAggregateCallStatsResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {NetworkMetricsReportResponse}\n   * @memberof QueryAggregateCallStatsResponse\n   */\n  network_metrics_report?: NetworkMetricsReportResponse;\n  /**\n   *\n   * @type {QualityScoreReportResponse}\n   * @memberof QueryAggregateCallStatsResponse\n   */\n  quality_score_report?: QualityScoreReportResponse;\n  /**\n   *\n   * @type {SDKUsageReportResponse}\n   * @memberof QueryAggregateCallStatsResponse\n   */\n  sdk_usage_report?: SDKUsageReportResponse;\n  /**\n   *\n   * @type {UserFeedbackReportResponse}\n   * @memberof QueryAggregateCallStatsResponse\n   */\n  user_feedback_report?: UserFeedbackReportResponse;\n}\n/**\n *\n * @export\n * @interface QueryCallMembersRequest\n */\nexport interface QueryCallMembersRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof QueryCallMembersRequest\n   */\n  filter_conditions?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallMembersRequest\n   */\n  id: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QueryCallMembersRequest\n   */\n  limit?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallMembersRequest\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallMembersRequest\n   */\n  prev?: string;\n  /**\n   *\n   * @type {Array<SortParamRequest>}\n   * @memberof QueryCallMembersRequest\n   */\n  sort?: Array<SortParamRequest>;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallMembersRequest\n   */\n  type: string;\n}\n/**\n * Basic response information\n * @export\n * @interface QueryCallMembersResponse\n */\nexport interface QueryCallMembersResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof QueryCallMembersResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof QueryCallMembersResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallMembersResponse\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallMembersResponse\n   */\n  prev?: string;\n}\n/**\n *\n * @export\n * @interface QueryCallStatsRequest\n */\nexport interface QueryCallStatsRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof QueryCallStatsRequest\n   */\n  filter_conditions?: { [key: string]: any };\n  /**\n   *\n   * @type {number}\n   * @memberof QueryCallStatsRequest\n   */\n  limit?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallStatsRequest\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallStatsRequest\n   */\n  prev?: string;\n  /**\n   *\n   * @type {Array<SortParamRequest>}\n   * @memberof QueryCallStatsRequest\n   */\n  sort?: Array<SortParamRequest>;\n}\n/**\n * Basic response information\n * @export\n * @interface QueryCallStatsResponse\n */\nexport interface QueryCallStatsResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof QueryCallStatsResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallStatsResponse\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallStatsResponse\n   */\n  prev?: string;\n  /**\n   *\n   * @type {Array<CallStatsReportSummaryResponse>}\n   * @memberof QueryCallStatsResponse\n   */\n  reports: Array<CallStatsReportSummaryResponse>;\n}\n/**\n *\n * @export\n * @interface QueryCallsRequest\n */\nexport interface QueryCallsRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof QueryCallsRequest\n   */\n  filter_conditions?: { [key: string]: any };\n  /**\n   *\n   * @type {number}\n   * @memberof QueryCallsRequest\n   */\n  limit?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallsRequest\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallsRequest\n   */\n  prev?: string;\n  /**\n   * Array of sort parameters\n   * @type {Array<SortParamRequest>}\n   * @memberof QueryCallsRequest\n   */\n  sort?: Array<SortParamRequest>;\n  /**\n   *\n   * @type {boolean}\n   * @memberof QueryCallsRequest\n   */\n  watch?: boolean;\n}\n/**\n *\n * @export\n * @interface QueryCallsResponse\n */\nexport interface QueryCallsResponse {\n  /**\n   *\n   * @type {Array<CallStateResponseFields>}\n   * @memberof QueryCallsResponse\n   */\n  calls: Array<CallStateResponseFields>;\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof QueryCallsResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallsResponse\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallsResponse\n   */\n  prev?: string;\n}\n/**\n *\n * @export\n * @interface ReportResponse\n */\nexport interface ReportResponse {\n  /**\n   *\n   * @type {CallReportResponse}\n   * @memberof ReportResponse\n   */\n  call: CallReportResponse;\n  /**\n   *\n   * @type {ParticipantReportResponse}\n   * @memberof ReportResponse\n   */\n  participants: ParticipantReportResponse;\n  /**\n   *\n   * @type {UserRatingReportResponse}\n   * @memberof ReportResponse\n   */\n  user_ratings: UserRatingReportResponse;\n}\n/**\n * RTMPBroadcastRequest is the payload for starting an RTMP broadcast.\n * @export\n * @interface RTMPBroadcastRequest\n */\nexport interface RTMPBroadcastRequest {\n  /**\n   *\n   * @type {LayoutSettingsRequest}\n   * @memberof RTMPBroadcastRequest\n   */\n  layout?: LayoutSettingsRequest;\n  /**\n   * Name identifier for RTMP broadcast, must be unique in call\n   * @type {string}\n   * @memberof RTMPBroadcastRequest\n   */\n  name: string;\n  /**\n   * If provided, will override the call's RTMP settings quality\n   * @type {string}\n   * @memberof RTMPBroadcastRequest\n   */\n  quality?: RTMPBroadcastRequestQualityEnum;\n  /**\n   * If provided, will be appended at the end of stream_url\n   * @type {string}\n   * @memberof RTMPBroadcastRequest\n   */\n  stream_key?: string;\n  /**\n   * URL for the RTMP server to send the call to\n   * @type {string}\n   * @memberof RTMPBroadcastRequest\n   */\n  stream_url: string;\n}\n\n/**\n * @export\n */\nexport const RTMPBroadcastRequestQualityEnum = {\n  _360P: '360p',\n  _480P: '480p',\n  _720P: '720p',\n  _1080P: '1080p',\n  _1440P: '1440p',\n  PORTRAIT_360X640: 'portrait-360x640',\n  PORTRAIT_480X854: 'portrait-480x854',\n  PORTRAIT_720X1280: 'portrait-720x1280',\n  PORTRAIT_1080X1920: 'portrait-1080x1920',\n  PORTRAIT_1440X2560: 'portrait-1440x2560',\n} as const;\nexport type RTMPBroadcastRequestQualityEnum =\n  (typeof RTMPBroadcastRequestQualityEnum)[keyof typeof RTMPBroadcastRequestQualityEnum];\n\n/**\n * RTMP input settings\n * @export\n * @interface RTMPIngress\n */\nexport interface RTMPIngress {\n  /**\n   *\n   * @type {string}\n   * @memberof RTMPIngress\n   */\n  address: string;\n}\n/**\n *\n * @export\n * @interface RTMPSettingsRequest\n */\nexport interface RTMPSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RTMPSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   * Resolution to set for the RTMP stream\n   * @type {string}\n   * @memberof RTMPSettingsRequest\n   */\n  quality?: RTMPSettingsRequestQualityEnum;\n}\n\n/**\n * @export\n */\nexport const RTMPSettingsRequestQualityEnum = {\n  _360P: '360p',\n  _480P: '480p',\n  _720P: '720p',\n  _1080P: '1080p',\n  _1440P: '1440p',\n  PORTRAIT_360X640: 'portrait-360x640',\n  PORTRAIT_480X854: 'portrait-480x854',\n  PORTRAIT_720X1280: 'portrait-720x1280',\n  PORTRAIT_1080X1920: 'portrait-1080x1920',\n  PORTRAIT_1440X2560: 'portrait-1440x2560',\n} as const;\nexport type RTMPSettingsRequestQualityEnum =\n  (typeof RTMPSettingsRequestQualityEnum)[keyof typeof RTMPSettingsRequestQualityEnum];\n\n/**\n * RTMPSettingsResponse is the payload for RTMP settings\n * @export\n * @interface RTMPSettingsResponse\n */\nexport interface RTMPSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RTMPSettingsResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RTMPSettingsResponse\n   */\n  quality: string;\n}\n/**\n *\n * @export\n * @interface ReactionResponse\n */\nexport interface ReactionResponse {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof ReactionResponse\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof ReactionResponse\n   */\n  emoji_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReactionResponse\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof ReactionResponse\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface RecordSettingsRequest\n */\nexport interface RecordSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RecordSettingsRequest\n   */\n  audio_only?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RecordSettingsRequest\n   */\n  mode: RecordSettingsRequestModeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof RecordSettingsRequest\n   */\n  quality?: RecordSettingsRequestQualityEnum;\n}\n\n/**\n * @export\n */\nexport const RecordSettingsRequestModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type RecordSettingsRequestModeEnum =\n  (typeof RecordSettingsRequestModeEnum)[keyof typeof RecordSettingsRequestModeEnum];\n\n/**\n * @export\n */\nexport const RecordSettingsRequestQualityEnum = {\n  _360P: '360p',\n  _480P: '480p',\n  _720P: '720p',\n  _1080P: '1080p',\n  _1440P: '1440p',\n  PORTRAIT_360X640: 'portrait-360x640',\n  PORTRAIT_480X854: 'portrait-480x854',\n  PORTRAIT_720X1280: 'portrait-720x1280',\n  PORTRAIT_1080X1920: 'portrait-1080x1920',\n  PORTRAIT_1440X2560: 'portrait-1440x2560',\n} as const;\nexport type RecordSettingsRequestQualityEnum =\n  (typeof RecordSettingsRequestQualityEnum)[keyof typeof RecordSettingsRequestQualityEnum];\n\n/**\n * RecordSettings is the payload for recording settings\n * @export\n * @interface RecordSettingsResponse\n */\nexport interface RecordSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RecordSettingsResponse\n   */\n  audio_only: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RecordSettingsResponse\n   */\n  mode: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RecordSettingsResponse\n   */\n  quality: string;\n}\n/**\n *\n * @export\n * @interface RejectCallRequest\n */\nexport interface RejectCallRequest {\n  /**\n   * Reason for rejecting the call\n   * @type {string}\n   * @memberof RejectCallRequest\n   */\n  reason?: string;\n}\n/**\n *\n * @export\n * @interface RejectCallResponse\n */\nexport interface RejectCallResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof RejectCallResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface ReportByHistogramBucket\n */\nexport interface ReportByHistogramBucket {\n  /**\n   *\n   * @type {string}\n   * @memberof ReportByHistogramBucket\n   */\n  category: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ReportByHistogramBucket\n   */\n  count: number;\n  /**\n   *\n   * @type {Bound}\n   * @memberof ReportByHistogramBucket\n   */\n  lower_bound?: Bound;\n  /**\n   *\n   * @type {number}\n   * @memberof ReportByHistogramBucket\n   */\n  sum: number;\n  /**\n   *\n   * @type {Bound}\n   * @memberof ReportByHistogramBucket\n   */\n  upper_bound?: Bound;\n}\n/**\n *\n * @export\n * @interface RequestPermissionRequest\n */\nexport interface RequestPermissionRequest {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof RequestPermissionRequest\n   */\n  permissions: Array<string>;\n}\n/**\n *\n * @export\n * @interface RequestPermissionResponse\n */\nexport interface RequestPermissionResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof RequestPermissionResponse\n   */\n  duration: string;\n}\n/**\n * Basic response information\n * @export\n * @interface Response\n */\nexport interface Response {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof Response\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface RingSettingsRequest\n */\nexport interface RingSettingsRequest {\n  /**\n   * When none of the callees accept a ring call in this time a rejection will be sent by the caller with reason 'timeout' by the SDKs\n   * @type {number}\n   * @memberof RingSettingsRequest\n   */\n  auto_cancel_timeout_ms: number;\n  /**\n   * When a callee is online but doesn't answer a ring call in this time a rejection will be sent with reason 'timeout' by the SDKs\n   * @type {number}\n   * @memberof RingSettingsRequest\n   */\n  incoming_call_timeout_ms: number;\n  /**\n   * When a callee doesn't accept or reject a ring call in this time a missed call event will be sent\n   * @type {number}\n   * @memberof RingSettingsRequest\n   */\n  missed_call_timeout_ms?: number;\n}\n/**\n *\n * @export\n * @interface RingSettingsResponse\n */\nexport interface RingSettingsResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof RingSettingsResponse\n   */\n  auto_cancel_timeout_ms: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RingSettingsResponse\n   */\n  incoming_call_timeout_ms: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RingSettingsResponse\n   */\n  missed_call_timeout_ms: number;\n}\n/**\n *\n * @export\n * @interface SDKUsageReport\n */\nexport interface SDKUsageReport {\n  /**\n   *\n   * @type {{ [key: string]: PerSDKUsageReport; }}\n   * @memberof SDKUsageReport\n   */\n  per_sdk_usage: { [key: string]: PerSDKUsageReport };\n}\n/**\n *\n * @export\n * @interface SDKUsageReportResponse\n */\nexport interface SDKUsageReportResponse {\n  /**\n   *\n   * @type {Array<DailyAggregateSDKUsageReportResponse>}\n   * @memberof SDKUsageReportResponse\n   */\n  daily: Array<DailyAggregateSDKUsageReportResponse>;\n}\n/**\n *\n * @export\n * @interface SFUResponse\n */\nexport interface SFUResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof SFUResponse\n   */\n  edge_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SFUResponse\n   */\n  url: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SFUResponse\n   */\n  ws_endpoint: string;\n}\n/**\n *\n * @export\n * @interface ScreensharingSettingsRequest\n */\nexport interface ScreensharingSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ScreensharingSettingsRequest\n   */\n  access_request_enabled?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ScreensharingSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   *\n   * @type {TargetResolution}\n   * @memberof ScreensharingSettingsRequest\n   */\n  target_resolution?: TargetResolution;\n}\n/**\n *\n * @export\n * @interface ScreensharingSettingsResponse\n */\nexport interface ScreensharingSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ScreensharingSettingsResponse\n   */\n  access_request_enabled: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ScreensharingSettingsResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {TargetResolution}\n   * @memberof ScreensharingSettingsResponse\n   */\n  target_resolution?: TargetResolution;\n}\n/**\n * Send a call event to the other user\n * @export\n * @interface SendCallEventRequest\n */\nexport interface SendCallEventRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof SendCallEventRequest\n   */\n  custom?: { [key: string]: any };\n}\n/**\n *\n * @export\n * @interface SendCallEventResponse\n */\nexport interface SendCallEventResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof SendCallEventResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface SendReactionRequest\n */\nexport interface SendReactionRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof SendReactionRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof SendReactionRequest\n   */\n  emoji_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SendReactionRequest\n   */\n  type: string;\n}\n/**\n * Basic response information\n * @export\n * @interface SendReactionResponse\n */\nexport interface SendReactionResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof SendReactionResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {ReactionResponse}\n   * @memberof SendReactionResponse\n   */\n  reaction: ReactionResponse;\n}\n/**\n *\n * @export\n * @interface SessionSettingsRequest\n */\nexport interface SessionSettingsRequest {\n  /**\n   *\n   * @type {number}\n   * @memberof SessionSettingsRequest\n   */\n  inactivity_timeout_seconds: number;\n}\n/**\n *\n * @export\n * @interface SessionSettingsResponse\n */\nexport interface SessionSettingsResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof SessionSettingsResponse\n   */\n  inactivity_timeout_seconds: number;\n}\n/**\n *\n * @export\n * @interface SortParamRequest\n */\nexport interface SortParamRequest {\n  /**\n   * Direction of sorting, 1 for Ascending, -1 for Descending, default is 1\n   * @type {number}\n   * @memberof SortParamRequest\n   */\n  direction?: number;\n  /**\n   * Name of field to sort by\n   * @type {string}\n   * @memberof SortParamRequest\n   */\n  field?: string;\n}\n/**\n *\n * @export\n * @interface StartClosedCaptionsRequest\n */\nexport interface StartClosedCaptionsRequest {\n  /**\n   * Enable transcriptions along with closed captions\n   * @type {boolean}\n   * @memberof StartClosedCaptionsRequest\n   */\n  enable_transcription?: boolean;\n  /**\n   * Which external storage to use for transcriptions (only applicable if enable_transcription is true)\n   * @type {string}\n   * @memberof StartClosedCaptionsRequest\n   */\n  external_storage?: string;\n  /**\n   * The spoken language in the call, if not provided the language defined in the transcription settings will be used\n   * @type {string}\n   * @memberof StartClosedCaptionsRequest\n   */\n  language?: string;\n}\n/**\n *\n * @export\n * @interface StartClosedCaptionsResponse\n */\nexport interface StartClosedCaptionsResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof StartClosedCaptionsResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StartFrameRecordingRequest\n */\nexport interface StartFrameRecordingRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StartFrameRecordingRequest\n   */\n  recording_external_storage?: string;\n}\n/**\n * StartFrameRecordingResponse is the response payload for the start frame recording endpoint.\n * @export\n * @interface StartFrameRecordingResponse\n */\nexport interface StartFrameRecordingResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StartFrameRecordingResponse\n   */\n  duration: string;\n}\n/**\n * StartHLSBroadcastingResponse is the payload for starting an HLS broadcasting.\n * @export\n * @interface StartHLSBroadcastingResponse\n */\nexport interface StartHLSBroadcastingResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof StartHLSBroadcastingResponse\n   */\n  duration: string;\n  /**\n   * the URL of the HLS playlist\n   * @type {string}\n   * @memberof StartHLSBroadcastingResponse\n   */\n  playlist_url: string;\n}\n/**\n * StartRTMPBroadcastsRequest is the payload for starting RTMP broadcasts.\n * @export\n * @interface StartRTMPBroadcastsRequest\n */\nexport interface StartRTMPBroadcastsRequest {\n  /**\n   * List of broadcasts to start\n   * @type {Array<RTMPBroadcastRequest>}\n   * @memberof StartRTMPBroadcastsRequest\n   */\n  broadcasts: Array<RTMPBroadcastRequest>;\n}\n/**\n * StartRTMPBroadcastsResponse is the payload for starting an RTMP broadcast.\n * @export\n * @interface StartRTMPBroadcastsResponse\n */\nexport interface StartRTMPBroadcastsResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StartRTMPBroadcastsResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StartRecordingRequest\n */\nexport interface StartRecordingRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StartRecordingRequest\n   */\n  recording_external_storage?: string;\n}\n/**\n * StartRecordingResponse is the response payload for the start recording endpoint.\n * @export\n * @interface StartRecordingResponse\n */\nexport interface StartRecordingResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StartRecordingResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StartTranscriptionRequest\n */\nexport interface StartTranscriptionRequest {\n  /**\n   * Enable closed captions along with transcriptions\n   * @type {boolean}\n   * @memberof StartTranscriptionRequest\n   */\n  enable_closed_captions?: boolean;\n  /**\n   * The spoken language in the call, if not provided the language defined in the transcription settings will be used\n   * @type {string}\n   * @memberof StartTranscriptionRequest\n   */\n  language?: string;\n  /**\n   * Store transcriptions in this external storage\n   * @type {string}\n   * @memberof StartTranscriptionRequest\n   */\n  transcription_external_storage?: string;\n}\n/**\n *\n * @export\n * @interface StartTranscriptionResponse\n */\nexport interface StartTranscriptionResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StartTranscriptionResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StatsOptions\n */\nexport interface StatsOptions {\n  /**\n   *\n   * @type {boolean}\n   * @memberof StatsOptions\n   */\n  enable_rtc_stats: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof StatsOptions\n   */\n  reporting_interval_ms: number;\n}\n/**\n *\n * @export\n * @interface StopAllRTMPBroadcastsResponse\n */\nexport interface StopAllRTMPBroadcastsResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StopAllRTMPBroadcastsResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StopClosedCaptionsRequest\n */\nexport interface StopClosedCaptionsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof StopClosedCaptionsRequest\n   */\n  stop_transcription?: boolean;\n}\n/**\n * Basic response information\n * @export\n * @interface StopClosedCaptionsResponse\n */\nexport interface StopClosedCaptionsResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StopClosedCaptionsResponse\n   */\n  duration: string;\n}\n/**\n * Basic response information\n * @export\n * @interface StopFrameRecordingResponse\n */\nexport interface StopFrameRecordingResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StopFrameRecordingResponse\n   */\n  duration: string;\n}\n/**\n * Basic response information\n * @export\n * @interface StopHLSBroadcastingResponse\n */\nexport interface StopHLSBroadcastingResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StopHLSBroadcastingResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StopLiveRequest\n */\nexport interface StopLiveRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof StopLiveRequest\n   */\n  continue_closed_caption?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof StopLiveRequest\n   */\n  continue_hls?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof StopLiveRequest\n   */\n  continue_recording?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof StopLiveRequest\n   */\n  continue_rtmp_broadcasts?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof StopLiveRequest\n   */\n  continue_transcription?: boolean;\n}\n/**\n *\n * @export\n * @interface StopLiveResponse\n */\nexport interface StopLiveResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof StopLiveResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof StopLiveResponse\n   */\n  duration: string;\n}\n/**\n * Basic response information\n * @export\n * @interface StopRTMPBroadcastsResponse\n */\nexport interface StopRTMPBroadcastsResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StopRTMPBroadcastsResponse\n   */\n  duration: string;\n}\n/**\n * Basic response information\n * @export\n * @interface StopRecordingResponse\n */\nexport interface StopRecordingResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StopRecordingResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StopTranscriptionRequest\n */\nexport interface StopTranscriptionRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof StopTranscriptionRequest\n   */\n  stop_closed_captions?: boolean;\n}\n/**\n * Basic response information\n * @export\n * @interface StopTranscriptionResponse\n */\nexport interface StopTranscriptionResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof StopTranscriptionResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface SubscriberStatsResponse\n */\nexport interface SubscriberStatsResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriberStatsResponse\n   */\n  total: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriberStatsResponse\n   */\n  total_subscribed_duration_seconds: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriberStatsResponse\n   */\n  unique: number;\n}\n/**\n *\n * @export\n * @interface TargetResolution\n */\nexport interface TargetResolution {\n  /**\n   *\n   * @type {number}\n   * @memberof TargetResolution\n   */\n  bitrate?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof TargetResolution\n   */\n  height: number;\n  /**\n   *\n   * @type {number}\n   * @memberof TargetResolution\n   */\n  width: number;\n}\n/**\n *\n * @export\n * @interface ThumbnailResponse\n */\nexport interface ThumbnailResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof ThumbnailResponse\n   */\n  image_url: string;\n}\n/**\n *\n * @export\n * @interface ThumbnailsSettingsRequest\n */\nexport interface ThumbnailsSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ThumbnailsSettingsRequest\n   */\n  enabled?: boolean;\n}\n/**\n *\n * @export\n * @interface ThumbnailsSettingsResponse\n */\nexport interface ThumbnailsSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ThumbnailsSettingsResponse\n   */\n  enabled: boolean;\n}\n/**\n *\n * @export\n * @interface TrackStatsResponse\n */\nexport interface TrackStatsResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof TrackStatsResponse\n   */\n  duration_seconds: number;\n  /**\n   *\n   * @type {string}\n   * @memberof TrackStatsResponse\n   */\n  track_type: string;\n}\n/**\n *\n * @export\n * @interface TranscriptionSettingsRequest\n */\nexport interface TranscriptionSettingsRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof TranscriptionSettingsRequest\n   */\n  closed_caption_mode?: TranscriptionSettingsRequestClosedCaptionModeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof TranscriptionSettingsRequest\n   */\n  language?: TranscriptionSettingsRequestLanguageEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof TranscriptionSettingsRequest\n   */\n  mode: TranscriptionSettingsRequestModeEnum;\n}\n\n/**\n * @export\n */\nexport const TranscriptionSettingsRequestClosedCaptionModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type TranscriptionSettingsRequestClosedCaptionModeEnum =\n  (typeof TranscriptionSettingsRequestClosedCaptionModeEnum)[keyof typeof TranscriptionSettingsRequestClosedCaptionModeEnum];\n\n/**\n * @export\n */\nexport const TranscriptionSettingsRequestLanguageEnum = {\n  AUTO: 'auto',\n  EN: 'en',\n  FR: 'fr',\n  ES: 'es',\n  DE: 'de',\n  IT: 'it',\n  NL: 'nl',\n  PT: 'pt',\n  PL: 'pl',\n  CA: 'ca',\n  CS: 'cs',\n  DA: 'da',\n  EL: 'el',\n  FI: 'fi',\n  ID: 'id',\n  JA: 'ja',\n  RU: 'ru',\n  SV: 'sv',\n  TA: 'ta',\n  TH: 'th',\n  TR: 'tr',\n  HU: 'hu',\n  RO: 'ro',\n  ZH: 'zh',\n  AR: 'ar',\n  TL: 'tl',\n  HE: 'he',\n  HI: 'hi',\n  HR: 'hr',\n  KO: 'ko',\n  MS: 'ms',\n  NO: 'no',\n  UK: 'uk',\n} as const;\nexport type TranscriptionSettingsRequestLanguageEnum =\n  (typeof TranscriptionSettingsRequestLanguageEnum)[keyof typeof TranscriptionSettingsRequestLanguageEnum];\n\n/**\n * @export\n */\nexport const TranscriptionSettingsRequestModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type TranscriptionSettingsRequestModeEnum =\n  (typeof TranscriptionSettingsRequestModeEnum)[keyof typeof TranscriptionSettingsRequestModeEnum];\n\n/**\n *\n * @export\n * @interface TranscriptionSettingsResponse\n */\nexport interface TranscriptionSettingsResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof TranscriptionSettingsResponse\n   */\n  closed_caption_mode: TranscriptionSettingsResponseClosedCaptionModeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof TranscriptionSettingsResponse\n   */\n  language: TranscriptionSettingsResponseLanguageEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof TranscriptionSettingsResponse\n   */\n  mode: TranscriptionSettingsResponseModeEnum;\n}\n\n/**\n * @export\n */\nexport const TranscriptionSettingsResponseClosedCaptionModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type TranscriptionSettingsResponseClosedCaptionModeEnum =\n  (typeof TranscriptionSettingsResponseClosedCaptionModeEnum)[keyof typeof TranscriptionSettingsResponseClosedCaptionModeEnum];\n\n/**\n * @export\n */\nexport const TranscriptionSettingsResponseLanguageEnum = {\n  AUTO: 'auto',\n  EN: 'en',\n  FR: 'fr',\n  ES: 'es',\n  DE: 'de',\n  IT: 'it',\n  NL: 'nl',\n  PT: 'pt',\n  PL: 'pl',\n  CA: 'ca',\n  CS: 'cs',\n  DA: 'da',\n  EL: 'el',\n  FI: 'fi',\n  ID: 'id',\n  JA: 'ja',\n  RU: 'ru',\n  SV: 'sv',\n  TA: 'ta',\n  TH: 'th',\n  TR: 'tr',\n  HU: 'hu',\n  RO: 'ro',\n  ZH: 'zh',\n  AR: 'ar',\n  TL: 'tl',\n  HE: 'he',\n  HI: 'hi',\n  HR: 'hr',\n  KO: 'ko',\n  MS: 'ms',\n  NO: 'no',\n  UK: 'uk',\n} as const;\nexport type TranscriptionSettingsResponseLanguageEnum =\n  (typeof TranscriptionSettingsResponseLanguageEnum)[keyof typeof TranscriptionSettingsResponseLanguageEnum];\n\n/**\n * @export\n */\nexport const TranscriptionSettingsResponseModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type TranscriptionSettingsResponseModeEnum =\n  (typeof TranscriptionSettingsResponseModeEnum)[keyof typeof TranscriptionSettingsResponseModeEnum];\n\n/**\n * UnblockUserRequest is the payload for unblocking a user.\n * @export\n * @interface UnblockUserRequest\n */\nexport interface UnblockUserRequest {\n  /**\n   * the user to unblock\n   * @type {string}\n   * @memberof UnblockUserRequest\n   */\n  user_id: string;\n}\n/**\n * UnblockUserResponse is the payload for unblocking a user.\n * @export\n * @interface UnblockUserResponse\n */\nexport interface UnblockUserResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof UnblockUserResponse\n   */\n  duration: string;\n}\n/**\n * This event is sent when a user is unblocked on a call,\n * this can be useful to notify the user that they can now join the call again\n * @export\n * @interface UnblockedUserEvent\n */\nexport interface UnblockedUserEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof UnblockedUserEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UnblockedUserEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.unblocked_user\" in this case\n   * @type {string}\n   * @memberof UnblockedUserEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof UnblockedUserEvent\n   */\n  user: UserResponse;\n}\n/**\n * UnpinRequest is the payload for unpinning a message.\n * @export\n * @interface UnpinRequest\n */\nexport interface UnpinRequest {\n  /**\n   * the session ID of the user who pinned the message\n   * @type {string}\n   * @memberof UnpinRequest\n   */\n  session_id: string;\n  /**\n   * the user ID of the user who pinned the message\n   * @type {string}\n   * @memberof UnpinRequest\n   */\n  user_id: string;\n}\n/**\n * UnpinResponse is the payload for unpinning a message.\n * @export\n * @interface UnpinResponse\n */\nexport interface UnpinResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof UnpinResponse\n   */\n  duration: string;\n}\n/**\n * Update call members\n * @export\n * @interface UpdateCallMembersRequest\n */\nexport interface UpdateCallMembersRequest {\n  /**\n   * List of userID to remove\n   * @type {Array<string>}\n   * @memberof UpdateCallMembersRequest\n   */\n  remove_members?: Array<string>;\n  /**\n   * List of members to update or insert\n   * @type {Array<MemberRequest>}\n   * @memberof UpdateCallMembersRequest\n   */\n  update_members?: Array<MemberRequest>;\n}\n/**\n * Basic response information\n * @export\n * @interface UpdateCallMembersResponse\n */\nexport interface UpdateCallMembersResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof UpdateCallMembersResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof UpdateCallMembersResponse\n   */\n  members: Array<MemberResponse>;\n}\n/**\n * Request for updating a call\n * @export\n * @interface UpdateCallRequest\n */\nexport interface UpdateCallRequest {\n  /**\n   * Custom data for this object\n   * @type {{ [key: string]: any; }}\n   * @memberof UpdateCallRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {CallSettingsRequest}\n   * @memberof UpdateCallRequest\n   */\n  settings_override?: CallSettingsRequest;\n  /**\n   * the time the call is scheduled to start\n   * @type {string}\n   * @memberof UpdateCallRequest\n   */\n  starts_at?: string;\n}\n/**\n * Response for updating a call\n * @export\n * @interface UpdateCallResponse\n */\nexport interface UpdateCallResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof UpdateCallResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdateCallResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof UpdateCallResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof UpdateCallResponse\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof UpdateCallResponse\n   */\n  own_capabilities: Array<OwnCapability>;\n}\n/**\n *\n * @export\n * @interface UpdateUserPermissionsRequest\n */\nexport interface UpdateUserPermissionsRequest {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof UpdateUserPermissionsRequest\n   */\n  grant_permissions?: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof UpdateUserPermissionsRequest\n   */\n  revoke_permissions?: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdateUserPermissionsRequest\n   */\n  user_id: string;\n}\n/**\n * Basic response information\n * @export\n * @interface UpdateUserPermissionsResponse\n */\nexport interface UpdateUserPermissionsResponse {\n  /**\n   * Duration of the request in milliseconds\n   * @type {string}\n   * @memberof UpdateUserPermissionsResponse\n   */\n  duration: string;\n}\n/**\n * This event is sent to notify about permission changes for a user, clients receiving this event should update their UI accordingly\n * @export\n * @interface UpdatedCallPermissionsEvent\n */\nexport interface UpdatedCallPermissionsEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  created_at: string;\n  /**\n   * The capabilities of the current user\n   * @type {Array<OwnCapability>}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  own_capabilities: Array<OwnCapability>;\n  /**\n   * The type of event: \"call.permissions_updated\" in this case\n   * @type {string}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface UserFeedbackReport\n */\nexport interface UserFeedbackReport {\n  /**\n   *\n   * @type {{ [key: string]: number; }}\n   * @memberof UserFeedbackReport\n   */\n  count_by_rating: { [key: string]: number };\n  /**\n   *\n   * @type {number}\n   * @memberof UserFeedbackReport\n   */\n  unreported_count: number;\n}\n/**\n *\n * @export\n * @interface UserFeedbackReportResponse\n */\nexport interface UserFeedbackReportResponse {\n  /**\n   *\n   * @type {Array<DailyAggregateUserFeedbackReportResponse>}\n   * @memberof UserFeedbackReportResponse\n   */\n  daily: Array<DailyAggregateUserFeedbackReportResponse>;\n}\n/**\n *\n * @export\n * @interface UserRatingReportResponse\n */\nexport interface UserRatingReportResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof UserRatingReportResponse\n   */\n  average: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserRatingReportResponse\n   */\n  count: number;\n}\n/**\n * User request object\n * @export\n * @interface UserRequest\n */\nexport interface UserRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof UserRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   * User ID\n   * @type {string}\n   * @memberof UserRequest\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserRequest\n   */\n  image?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof UserRequest\n   */\n  invisible?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof UserRequest\n   */\n  language?: string;\n  /**\n   * Optional name of user\n   * @type {string}\n   * @memberof UserRequest\n   */\n  name?: string;\n  /**\n   *\n   * @type {object}\n   * @memberof UserRequest\n   */\n  privacy_settings?: object;\n}\n/**\n * User response object\n * @export\n * @interface UserResponse\n */\nexport interface UserResponse {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof UserResponse\n   */\n  blocked_user_ids: Array<string>;\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof UserResponse\n   */\n  created_at: string;\n  /**\n   * Custom data for this object\n   * @type {{ [key: string]: any; }}\n   * @memberof UserResponse\n   */\n  custom: { [key: string]: any };\n  /**\n   * Date of deactivation\n   * @type {string}\n   * @memberof UserResponse\n   */\n  deactivated_at?: string;\n  /**\n   * Date/time of deletion\n   * @type {string}\n   * @memberof UserResponse\n   */\n  deleted_at?: string;\n  /**\n   * Unique user identifier\n   * @type {string}\n   * @memberof UserResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponse\n   */\n  image?: string;\n  /**\n   * Preferred language of a user\n   * @type {string}\n   * @memberof UserResponse\n   */\n  language: string;\n  /**\n   * Date of last activity\n   * @type {string}\n   * @memberof UserResponse\n   */\n  last_active?: string;\n  /**\n   * Optional name of user\n   * @type {string}\n   * @memberof UserResponse\n   */\n  name?: string;\n  /**\n   * Revocation date for tokens\n   * @type {string}\n   * @memberof UserResponse\n   */\n  revoke_tokens_issued_before?: string;\n  /**\n   * Determines the set of user permissions\n   * @type {string}\n   * @memberof UserResponse\n   */\n  role: string;\n  /**\n   * List of teams user is a part of\n   * @type {Array<string>}\n   * @memberof UserResponse\n   */\n  teams: Array<string>;\n  /**\n   * Date/time of the last update\n   * @type {string}\n   * @memberof UserResponse\n   */\n  updated_at: string;\n}\n/**\n *\n * @export\n * @interface UserResponsePrivacyFields\n */\nexport interface UserResponsePrivacyFields {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof UserResponsePrivacyFields\n   */\n  blocked_user_ids: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  created_at: string;\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof UserResponsePrivacyFields\n   */\n  custom: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  deactivated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  deleted_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  image?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof UserResponsePrivacyFields\n   */\n  invisible?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  language: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  last_active?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  name?: string;\n  /**\n   *\n   * @type {object}\n   * @memberof UserResponsePrivacyFields\n   */\n  privacy_settings?: object;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  revoke_tokens_issued_before?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  role: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof UserResponsePrivacyFields\n   */\n  teams: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponsePrivacyFields\n   */\n  updated_at: string;\n}\n/**\n * This event is sent when a user gets updated. The event contains information about the updated user.\n * @export\n * @interface UserUpdatedEvent\n */\nexport interface UserUpdatedEvent {\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof UserUpdatedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof UserUpdatedEvent\n   */\n  custom: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof UserUpdatedEvent\n   */\n  received_at?: string;\n  /**\n   * The type of event: \"user.updated\" in this case\n   * @type {string}\n   * @memberof UserUpdatedEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponsePrivacyFields}\n   * @memberof UserUpdatedEvent\n   */\n  user: UserResponsePrivacyFields;\n}\n/**\n *\n * @export\n * @interface VideoDimension\n */\nexport interface VideoDimension {\n  /**\n   *\n   * @type {number}\n   * @memberof VideoDimension\n   */\n  height: number;\n  /**\n   *\n   * @type {number}\n   * @memberof VideoDimension\n   */\n  width: number;\n}\n/**\n * @type VideoEvent\n * The discriminator object for all websocket events, it maps events' payload to the final type\n * @export\n */\nexport type VideoEvent =\n  | ({ type: 'call.accepted' } & CallAcceptedEvent)\n  | ({ type: 'call.blocked_user' } & BlockedUserEvent)\n  | ({ type: 'call.closed_caption' } & ClosedCaptionEvent)\n  | ({ type: 'call.closed_captions_failed' } & CallClosedCaptionsFailedEvent)\n  | ({ type: 'call.closed_captions_started' } & CallClosedCaptionsStartedEvent)\n  | ({ type: 'call.closed_captions_stopped' } & CallClosedCaptionsStoppedEvent)\n  | ({ type: 'call.created' } & CallCreatedEvent)\n  | ({ type: 'call.deleted' } & CallDeletedEvent)\n  | ({ type: 'call.ended' } & CallEndedEvent)\n  | ({ type: 'call.frame_recording_failed' } & CallFrameRecordingFailedEvent)\n  | ({ type: 'call.frame_recording_ready' } & CallFrameRecordingFrameReadyEvent)\n  | ({ type: 'call.frame_recording_started' } & CallFrameRecordingStartedEvent)\n  | ({ type: 'call.frame_recording_stopped' } & CallFrameRecordingStoppedEvent)\n  | ({ type: 'call.hls_broadcasting_failed' } & CallHLSBroadcastingFailedEvent)\n  | ({\n      type: 'call.hls_broadcasting_started';\n    } & CallHLSBroadcastingStartedEvent)\n  | ({\n      type: 'call.hls_broadcasting_stopped';\n    } & CallHLSBroadcastingStoppedEvent)\n  | ({ type: 'call.live_started' } & CallLiveStartedEvent)\n  | ({ type: 'call.member_added' } & CallMemberAddedEvent)\n  | ({ type: 'call.member_removed' } & CallMemberRemovedEvent)\n  | ({ type: 'call.member_updated' } & CallMemberUpdatedEvent)\n  | ({\n      type: 'call.member_updated_permission';\n    } & CallMemberUpdatedPermissionEvent)\n  | ({ type: 'call.missed' } & CallMissedEvent)\n  | ({ type: 'call.notification' } & CallNotificationEvent)\n  | ({ type: 'call.permission_request' } & PermissionRequestEvent)\n  | ({ type: 'call.permissions_updated' } & UpdatedCallPermissionsEvent)\n  | ({ type: 'call.reaction_new' } & CallReactionEvent)\n  | ({ type: 'call.recording_failed' } & CallRecordingFailedEvent)\n  | ({ type: 'call.recording_ready' } & CallRecordingReadyEvent)\n  | ({ type: 'call.recording_started' } & CallRecordingStartedEvent)\n  | ({ type: 'call.recording_stopped' } & CallRecordingStoppedEvent)\n  | ({ type: 'call.rejected' } & CallRejectedEvent)\n  | ({ type: 'call.ring' } & CallRingEvent)\n  | ({ type: 'call.rtmp_broadcast_failed' } & CallRtmpBroadcastFailedEvent)\n  | ({ type: 'call.rtmp_broadcast_started' } & CallRtmpBroadcastStartedEvent)\n  | ({ type: 'call.rtmp_broadcast_stopped' } & CallRtmpBroadcastStoppedEvent)\n  | ({ type: 'call.session_ended' } & CallSessionEndedEvent)\n  | ({\n      type: 'call.session_participant_count_updated';\n    } & CallSessionParticipantCountsUpdatedEvent)\n  | ({\n      type: 'call.session_participant_joined';\n    } & CallSessionParticipantJoinedEvent)\n  | ({\n      type: 'call.session_participant_left';\n    } & CallSessionParticipantLeftEvent)\n  | ({ type: 'call.session_started' } & CallSessionStartedEvent)\n  | ({ type: 'call.transcription_failed' } & CallTranscriptionFailedEvent)\n  | ({ type: 'call.transcription_ready' } & CallTranscriptionReadyEvent)\n  | ({ type: 'call.transcription_started' } & CallTranscriptionStartedEvent)\n  | ({ type: 'call.transcription_stopped' } & CallTranscriptionStoppedEvent)\n  | ({ type: 'call.unblocked_user' } & UnblockedUserEvent)\n  | ({ type: 'call.updated' } & CallUpdatedEvent)\n  | ({ type: 'call.user_muted' } & CallUserMutedEvent)\n  | ({ type: 'connection.error' } & ConnectionErrorEvent)\n  | ({ type: 'connection.ok' } & ConnectedEvent)\n  | ({ type: 'custom' } & CustomVideoEvent)\n  | ({ type: 'health.check' } & HealthCheckEvent)\n  | ({ type: 'user.updated' } & UserUpdatedEvent);\n/**\n *\n * @export\n * @interface VideoQuality\n */\nexport interface VideoQuality {\n  /**\n   *\n   * @type {VideoDimension}\n   * @memberof VideoQuality\n   */\n  resolution?: VideoDimension;\n  /**\n   *\n   * @type {string}\n   * @memberof VideoQuality\n   */\n  usage_type?: string;\n}\n/**\n *\n * @export\n * @interface VideoSettingsRequest\n */\nexport interface VideoSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettingsRequest\n   */\n  access_request_enabled?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettingsRequest\n   */\n  camera_default_on?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof VideoSettingsRequest\n   */\n  camera_facing?: VideoSettingsRequestCameraFacingEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   *\n   * @type {TargetResolution}\n   * @memberof VideoSettingsRequest\n   */\n  target_resolution?: TargetResolution;\n}\n\n/**\n * @export\n */\nexport const VideoSettingsRequestCameraFacingEnum = {\n  FRONT: 'front',\n  BACK: 'back',\n  EXTERNAL: 'external',\n} as const;\nexport type VideoSettingsRequestCameraFacingEnum =\n  (typeof VideoSettingsRequestCameraFacingEnum)[keyof typeof VideoSettingsRequestCameraFacingEnum];\n\n/**\n *\n * @export\n * @interface VideoSettingsResponse\n */\nexport interface VideoSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettingsResponse\n   */\n  access_request_enabled: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettingsResponse\n   */\n  camera_default_on: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof VideoSettingsResponse\n   */\n  camera_facing: VideoSettingsResponseCameraFacingEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettingsResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {TargetResolution}\n   * @memberof VideoSettingsResponse\n   */\n  target_resolution: TargetResolution;\n}\n\n/**\n * @export\n */\nexport const VideoSettingsResponseCameraFacingEnum = {\n  FRONT: 'front',\n  BACK: 'back',\n  EXTERNAL: 'external',\n} as const;\nexport type VideoSettingsResponseCameraFacingEnum =\n  (typeof VideoSettingsResponseCameraFacingEnum)[keyof typeof VideoSettingsResponseCameraFacingEnum];\n\n/**\n * Websocket auth message\n * @export\n * @interface WSAuthMessage\n */\nexport interface WSAuthMessage {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof WSAuthMessage\n   */\n  products?: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof WSAuthMessage\n   */\n  token: string;\n  /**\n   *\n   * @type {ConnectUserDetailsRequest}\n   * @memberof WSAuthMessage\n   */\n  user_details: ConnectUserDetailsRequest;\n}\n","import { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { ConnectedEvent, UserRequest, VideoEvent } from '../../gen/coordinator';\nimport { AllSfuEvents } from '../../rtc';\n\nexport type UR = Record<string, unknown>;\n\nexport type User =\n  | (Omit<UserRequest, 'role'> & { type?: 'authenticated' })\n  | (Omit<UserRequest, 'role'> & { type: 'guest' })\n  | (Omit<UserRequest, 'id' | 'role'> & {\n      id?: '!anon';\n      type: 'anonymous';\n    });\n\nexport type UserWithId =\n  | (UserRequest & { type?: 'authenticated' })\n  | (UserRequest & { type: 'guest' })\n  | (UserRequest & {\n      id: '!anon';\n      type: 'anonymous';\n    });\n\nexport type { OwnUserResponse } from '../../gen/coordinator';\n\nexport type ConnectAPIResponse = Promise<void | ConnectedEvent>;\n\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error';\n\ntype ErrorResponseDetails = {\n  code: number;\n  messages: string[];\n};\n\nexport type APIErrorResponse = {\n  code: number;\n  duration: string;\n  message: string;\n  more_info: string;\n  StatusCode: number;\n  details?: ErrorResponseDetails;\n  unrecoverable?: boolean;\n};\n\nexport class ErrorFromResponse<T> extends Error {\n  code?: number;\n  response?: AxiosResponse<T>;\n  status?: number;\n  unrecoverable?: boolean;\n}\n\nexport type ConnectionChangedEvent = {\n  type: 'connection.changed';\n  online: boolean;\n};\n\nexport type NetworkChangedEvent = {\n  type: 'network.changed';\n  online: boolean;\n};\n\nexport type TransportChangedEvent = {\n  type: 'transport.changed';\n  mode: 'longpoll';\n};\n\nexport type ConnectionRecoveredEvent = {\n  type: 'connection.recovered';\n};\n\nexport type StreamVideoEvent = (\n  | VideoEvent\n  | NetworkChangedEvent\n  | ConnectionChangedEvent\n  | TransportChangedEvent\n  | ConnectionRecoveredEvent\n) & { received_at?: string | Date };\n\n// TODO: we should use WSCallEvent here but that needs fixing\nexport type StreamCallEvent = Extract<StreamVideoEvent, { call_cid: string }>;\nexport type EventTypes = 'all' | VideoEvent['type'];\n\nexport type AllClientEventTypes = 'all' | StreamVideoEvent['type'];\nexport type AllClientEvents = {\n  [K in AllClientEventTypes]: Extract<StreamVideoEvent, { type: K }>;\n};\nexport type ClientEventListener<E extends keyof AllClientEvents> = (\n  event: AllClientEvents[E],\n) => void;\n\nexport type AllClientCallEvents = {\n  [K in EventTypes]: Extract<VideoEvent, { type: K }>;\n};\n\nexport type AllCallEvents = AllClientCallEvents & AllSfuEvents;\nexport type CallEventListener<E extends keyof AllCallEvents> = (\n  event: AllCallEvents[E],\n) => void;\n\nexport type Logger = (\n  logLevel: LogLevel,\n  message: string,\n  ...args: unknown[]\n) => void;\n\nexport type StreamClientOptions = Partial<AxiosRequestConfig> & {\n  /**\n   * Used to disable warnings that are triggered by using connectUser or connectAnonymousUser server-side.\n   */\n  allowServerSideConnect?: boolean;\n  axiosRequestConfig?: AxiosRequestConfig;\n  /**\n   * Base url to use for API\n   * such as https://chat-proxy-dublin.stream-io-api.com\n   */\n  baseURL?: string;\n  browser?: boolean;\n  logger?: Logger;\n  logLevel?: LogLevel;\n  /**\n   * The URL to use for the location hint.\n   */\n  locationHintUrl?: string;\n  /**\n   * The default timeout for requesting a location hint.\n   */\n  locationHintTimeout?: number;\n  /**\n   * The maximum number of attempts to request a location hint.\n   */\n  locationHintMaxAttempts?: number;\n  /**\n   * When true, user will be persisted on client. Otherwise if `connectUser` call fails, then you need to\n   * call `connectUser` again to retry.\n   * This is mainly useful for chat application working in offline mode, where you will need client.user to\n   * persist even if connectUser call fails.\n   */\n  persistUserOnConnectionFailure?: boolean;\n\n  /**\n   * The secret key for the API key. This is only needed for server side authentication.\n   */\n  secret?: string;\n\n  /**\n   * The WebSocket implementation to use. This is mainly useful for testing.\n   * In Node.js environment, you can use the `ws` package.\n   */\n  WebSocketImpl?: typeof WebSocket;\n\n  /**\n   * Create Web Worker to initiate timer events like health checks. Can possibly prevent\n   * timer throttling issues in inactive browser tabs.\n   */\n  enableTimerWorker?: boolean;\n\n  /**\n   * The client app identifier.\n   */\n  clientAppIdentifier?: ClientAppIdentifier;\n\n  /**\n   * The default timeout for WebSocket connections.\n   */\n  defaultWsTimeout?: number;\n\n  /**\n   * The maximum number of retries to connect a user.\n   */\n  maxConnectUserRetries?: number;\n\n  /**\n   * A callback to be called one the maxUserConnectRetries is exhausted.\n   * @param lastError the last error.\n   * @param allErrors all errors.\n   */\n  onConnectUserError?: (lastError: Error, allErrors: Error[]) => void;\n};\n\nexport type ClientAppIdentifier = {\n  sdkName?: 'react' | 'react-native' | 'plain-javascript' | (string & {});\n  sdkVersion?: string;\n  app?: string;\n  app_version?: string;\n  os?: string;\n  device_model?: string;\n};\n\nexport type TokenProvider = () => Promise<string>;\nexport type TokenOrProvider = null | string | TokenProvider | undefined;\n\nexport type BuiltInRejectReason = 'busy' | 'decline' | 'cancel' | 'timeout';\nexport type RejectReason = BuiltInRejectReason | (string & {});\n","/* eslint-disable */\nimport type {\n  JsonObject,\n  JsonReadOptions,\n  JsonValue,\n  JsonWriteOptions,\n} from '@protobuf-ts/runtime';\n// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"google/protobuf/struct.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\nimport {\n  isJsonObject,\n  MessageType,\n  typeofJsonValue,\n} from '@protobuf-ts/runtime';\n\n/**\n * `Struct` represents a structured data value, consisting of fields\n * which map to dynamically typed values. In some languages, `Struct`\n * might be supported by a native representation. For example, in\n * scripting languages like JS a struct is represented as an\n * object. The details of that representation are described together\n * with the proto support for the language.\n *\n * The JSON representation for `Struct` is JSON object.\n *\n * @generated from protobuf message google.protobuf.Struct\n */\nexport interface Struct {\n  /**\n   * Unordered map of dynamically typed values.\n   *\n   * @generated from protobuf field: map<string, google.protobuf.Value> fields = 1;\n   */\n  fields: {\n    [key: string]: Value;\n  };\n}\n/**\n * `Value` represents a dynamically typed value which can be either\n * null, a number, a string, a boolean, a recursive struct value, or a\n * list of values. A producer of value is expected to set one of these\n * variants. Absence of any variant indicates an error.\n *\n * The JSON representation for `Value` is JSON value.\n *\n * @generated from protobuf message google.protobuf.Value\n */\nexport interface Value {\n  /**\n   * @generated from protobuf oneof: kind\n   */\n  kind:\n    | {\n        oneofKind: 'nullValue';\n        /**\n         * Represents a null value.\n         *\n         * @generated from protobuf field: google.protobuf.NullValue null_value = 1;\n         */\n        nullValue: NullValue;\n      }\n    | {\n        oneofKind: 'numberValue';\n        /**\n         * Represents a double value.\n         *\n         * @generated from protobuf field: double number_value = 2;\n         */\n        numberValue: number;\n      }\n    | {\n        oneofKind: 'stringValue';\n        /**\n         * Represents a string value.\n         *\n         * @generated from protobuf field: string string_value = 3;\n         */\n        stringValue: string;\n      }\n    | {\n        oneofKind: 'boolValue';\n        /**\n         * Represents a boolean value.\n         *\n         * @generated from protobuf field: bool bool_value = 4;\n         */\n        boolValue: boolean;\n      }\n    | {\n        oneofKind: 'structValue';\n        /**\n         * Represents a structured value.\n         *\n         * @generated from protobuf field: google.protobuf.Struct struct_value = 5;\n         */\n        structValue: Struct;\n      }\n    | {\n        oneofKind: 'listValue';\n        /**\n         * Represents a repeated `Value`.\n         *\n         * @generated from protobuf field: google.protobuf.ListValue list_value = 6;\n         */\n        listValue: ListValue;\n      }\n    | {\n        oneofKind: undefined;\n      };\n}\n/**\n * `ListValue` is a wrapper around a repeated field of values.\n *\n * The JSON representation for `ListValue` is JSON array.\n *\n * @generated from protobuf message google.protobuf.ListValue\n */\nexport interface ListValue {\n  /**\n   * Repeated field of dynamically typed values.\n   *\n   * @generated from protobuf field: repeated google.protobuf.Value values = 1;\n   */\n  values: Value[];\n}\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from protobuf enum google.protobuf.NullValue\n */\nexport enum NullValue {\n  /**\n   * Null value.\n   *\n   * @generated from protobuf enum value: NULL_VALUE = 0;\n   */\n  NULL_VALUE = 0,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends MessageType<Struct> {\n  constructor() {\n    super('google.protobuf.Struct', [\n      {\n        no: 1,\n        name: 'fields',\n        kind: 'map',\n        K: 9 /*ScalarType.STRING*/,\n        V: { kind: 'message', T: () => Value },\n      },\n    ]);\n  }\n  /**\n   * Encode `Struct` to JSON object.\n   */\n  internalJsonWrite(message: Struct, options: JsonWriteOptions): JsonValue {\n    let json: JsonObject = {};\n    for (let [k, v] of Object.entries(message.fields)) {\n      json[k] = Value.toJson(v);\n    }\n    return json;\n  }\n  /**\n   * Decode `Struct` from JSON object.\n   */\n  internalJsonRead(\n    json: JsonValue,\n    options: JsonReadOptions,\n    target?: Struct,\n  ): Struct {\n    if (!isJsonObject(json))\n      throw new globalThis.Error(\n        'Unable to parse message ' +\n          this.typeName +\n          ' from JSON ' +\n          typeofJsonValue(json) +\n          '.',\n      );\n    if (!target) target = this.create();\n    for (let [k, v] of globalThis.Object.entries(json)) {\n      target.fields[k] = Value.fromJson(v);\n    }\n    return target;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Struct\n */\nexport const Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Value$Type extends MessageType<Value> {\n  constructor() {\n    super('google.protobuf.Value', [\n      {\n        no: 1,\n        name: 'null_value',\n        kind: 'enum',\n        oneof: 'kind',\n        T: () => ['google.protobuf.NullValue', NullValue],\n      },\n      {\n        no: 2,\n        name: 'number_value',\n        kind: 'scalar',\n        oneof: 'kind',\n        T: 1 /*ScalarType.DOUBLE*/,\n      },\n      {\n        no: 3,\n        name: 'string_value',\n        kind: 'scalar',\n        oneof: 'kind',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 4,\n        name: 'bool_value',\n        kind: 'scalar',\n        oneof: 'kind',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n      {\n        no: 5,\n        name: 'struct_value',\n        kind: 'message',\n        oneof: 'kind',\n        T: () => Struct,\n      },\n      {\n        no: 6,\n        name: 'list_value',\n        kind: 'message',\n        oneof: 'kind',\n        T: () => ListValue,\n      },\n    ]);\n  }\n  /**\n   * Encode `Value` to JSON value.\n   */\n  internalJsonWrite(message: Value, options: JsonWriteOptions): JsonValue {\n    if (message.kind.oneofKind === undefined) throw new globalThis.Error();\n    switch (message.kind.oneofKind) {\n      case undefined:\n        throw new globalThis.Error();\n      case 'boolValue':\n        return message.kind.boolValue;\n      case 'nullValue':\n        return null;\n      case 'numberValue':\n        let numberValue = message.kind.numberValue;\n        if (typeof numberValue == 'number' && !Number.isFinite(numberValue))\n          throw new globalThis.Error();\n        return numberValue;\n      case 'stringValue':\n        return message.kind.stringValue;\n      case 'listValue':\n        let listValueField = this.fields.find((f) => f.no === 6);\n        if (listValueField?.kind !== 'message') throw new globalThis.Error();\n        return listValueField.T().toJson(message.kind.listValue);\n      case 'structValue':\n        let structValueField = this.fields.find((f) => f.no === 5);\n        if (structValueField?.kind !== 'message') throw new globalThis.Error();\n        return structValueField.T().toJson(message.kind.structValue);\n    }\n  }\n  /**\n   * Decode `Value` from JSON value.\n   */\n  internalJsonRead(\n    json: JsonValue,\n    options: JsonReadOptions,\n    target?: Value,\n  ): Value {\n    if (!target) target = this.create();\n    switch (typeof json) {\n      case 'number':\n        target.kind = { oneofKind: 'numberValue', numberValue: json };\n        break;\n      case 'string':\n        target.kind = { oneofKind: 'stringValue', stringValue: json };\n        break;\n      case 'boolean':\n        target.kind = { oneofKind: 'boolValue', boolValue: json };\n        break;\n      case 'object':\n        if (json === null) {\n          target.kind = {\n            oneofKind: 'nullValue',\n            nullValue: NullValue.NULL_VALUE,\n          };\n        } else if (globalThis.Array.isArray(json)) {\n          target.kind = {\n            oneofKind: 'listValue',\n            listValue: ListValue.fromJson(json),\n          };\n        } else {\n          target.kind = {\n            oneofKind: 'structValue',\n            structValue: Struct.fromJson(json),\n          };\n        }\n        break;\n      default:\n        throw new globalThis.Error(\n          'Unable to parse ' +\n            this.typeName +\n            ' from JSON ' +\n            typeofJsonValue(json),\n        );\n    }\n    return target;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Value\n */\nexport const Value = new Value$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListValue$Type extends MessageType<ListValue> {\n  constructor() {\n    super('google.protobuf.ListValue', [\n      {\n        no: 1,\n        name: 'values',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => Value,\n      },\n    ]);\n  }\n  /**\n   * Encode `ListValue` to JSON array.\n   */\n  internalJsonWrite(message: ListValue, options: JsonWriteOptions): JsonValue {\n    return message.values.map((v) => Value.toJson(v));\n  }\n  /**\n   * Decode `ListValue` from JSON array.\n   */\n  internalJsonRead(\n    json: JsonValue,\n    options: JsonReadOptions,\n    target?: ListValue,\n  ): ListValue {\n    if (!globalThis.Array.isArray(json))\n      throw new globalThis.Error(\n        'Unable to parse ' +\n          this.typeName +\n          ' from JSON ' +\n          typeofJsonValue(json),\n      );\n    if (!target) target = this.create();\n    let values = json.map((v) => Value.fromJson(v));\n    target.values.push(...values);\n    return target;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.ListValue\n */\nexport const ListValue = new ListValue$Type();\n","/* eslint-disable */\nimport type {\n  JsonReadOptions,\n  JsonValue,\n  JsonWriteOptions,\n} from '@protobuf-ts/runtime';\n// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"google/protobuf/timestamp.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\nimport { MessageType, PbLong, typeofJsonValue } from '@protobuf-ts/runtime';\n\n/**\n * A Timestamp represents a point in time independent of any time zone or local\n * calendar, encoded as a count of seconds and fractions of seconds at\n * nanosecond resolution. The count is relative to an epoch at UTC midnight on\n * January 1, 1970, in the proleptic Gregorian calendar which extends the\n * Gregorian calendar backwards to year one.\n *\n * All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n * second table is needed for interpretation, using a [24-hour linear\n * smear](https://developers.google.com/time/smear).\n *\n * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n * restricting to that range, we ensure that we can convert to and from [RFC\n * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n *\n * # Examples\n *\n * Example 1: Compute Timestamp from POSIX `time()`.\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(time(NULL));\n *     timestamp.set_nanos(0);\n *\n * Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n *\n *     struct timeval tv;\n *     gettimeofday(&tv, NULL);\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(tv.tv_sec);\n *     timestamp.set_nanos(tv.tv_usec * 1000);\n *\n * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n *\n *     FILETIME ft;\n *     GetSystemTimeAsFileTime(&ft);\n *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n *\n *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n *     Timestamp timestamp;\n *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n *\n * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n *\n *     long millis = System.currentTimeMillis();\n *\n *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n *         .setNanos((int) ((millis % 1000) * 1000000)).build();\n *\n *\n * Example 5: Compute Timestamp from Java `Instant.now()`.\n *\n *     Instant now = Instant.now();\n *\n *     Timestamp timestamp =\n *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n *             .setNanos(now.getNano()).build();\n *\n *\n * Example 6: Compute Timestamp from current time in Python.\n *\n *     timestamp = Timestamp()\n *     timestamp.GetCurrentTime()\n *\n * # JSON Mapping\n *\n * In JSON format, the Timestamp type is encoded as a string in the\n * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n * format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n * where {year} is always expressed using four digits while {month}, {day},\n * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n * are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n * is required. A proto3 JSON serializer should always use UTC (as indicated by\n * \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n * able to accept both UTC and other timezones (as indicated by an offset).\n *\n * For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n * 01:30 UTC on January 15, 2017.\n *\n * In JavaScript, one can convert a Date object to this format using the\n * standard\n * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n * method. In Python, a standard `datetime.datetime` object can be converted\n * to this format using\n * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n * the Joda Time's [`ISODateTimeFormat.dateTime()`](\n * http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D\n * ) to obtain a formatter capable of generating timestamps in this format.\n *\n *\n *\n * @generated from protobuf message google.protobuf.Timestamp\n */\nexport interface Timestamp {\n  /**\n   * Represents seconds of UTC time since Unix epoch\n   * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   * 9999-12-31T23:59:59Z inclusive.\n   *\n   * @generated from protobuf field: int64 seconds = 1;\n   */\n  seconds: string;\n  /**\n   * Non-negative fractions of a second at nanosecond resolution. Negative\n   * second values with fractions must still have non-negative nanos values\n   * that count forward in time. Must be from 0 to 999,999,999\n   * inclusive.\n   *\n   * @generated from protobuf field: int32 nanos = 2;\n   */\n  nanos: number;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends MessageType<Timestamp> {\n  constructor() {\n    super('google.protobuf.Timestamp', [\n      { no: 1, name: 'seconds', kind: 'scalar', T: 3 /*ScalarType.INT64*/ },\n      { no: 2, name: 'nanos', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n    ]);\n  }\n  /**\n   * Creates a new `Timestamp` for the current time.\n   */\n  now(): Timestamp {\n    const msg = this.create();\n    const ms = Date.now();\n    msg.seconds = PbLong.from(Math.floor(ms / 1000)).toString();\n    msg.nanos = (ms % 1000) * 1000000;\n    return msg;\n  }\n  /**\n   * Converts a `Timestamp` to a JavaScript Date.\n   */\n  toDate(message: Timestamp): Date {\n    return new Date(\n      PbLong.from(message.seconds).toNumber() * 1000 +\n        Math.ceil(message.nanos / 1000000),\n    );\n  }\n  /**\n   * Converts a JavaScript Date to a `Timestamp`.\n   */\n  fromDate(date: Date): Timestamp {\n    const msg = this.create();\n    const ms = date.getTime();\n    msg.seconds = PbLong.from(Math.floor(ms / 1000)).toString();\n    msg.nanos =\n      ((ms % 1000) + (ms < 0 && ms % 1000 !== 0 ? 1000 : 0)) * 1000000;\n    return msg;\n  }\n  /**\n   * In JSON format, the `Timestamp` type is encoded as a string\n   * in the RFC 3339 format.\n   */\n  internalJsonWrite(message: Timestamp, options: JsonWriteOptions): JsonValue {\n    let ms = PbLong.from(message.seconds).toNumber() * 1000;\n    if (\n      ms < Date.parse('0001-01-01T00:00:00Z') ||\n      ms > Date.parse('9999-12-31T23:59:59Z')\n    )\n      throw new Error(\n        'Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.',\n      );\n    if (message.nanos < 0)\n      throw new Error(\n        'Unable to encode invalid Timestamp to JSON. Nanos must not be negative.',\n      );\n    let z = 'Z';\n    if (message.nanos > 0) {\n      let nanosStr = (message.nanos + 1000000000).toString().substring(1);\n      if (nanosStr.substring(3) === '000000')\n        z = '.' + nanosStr.substring(0, 3) + 'Z';\n      else if (nanosStr.substring(6) === '000')\n        z = '.' + nanosStr.substring(0, 6) + 'Z';\n      else z = '.' + nanosStr + 'Z';\n    }\n    return new Date(ms).toISOString().replace('.000Z', z);\n  }\n  /**\n   * In JSON format, the `Timestamp` type is encoded as a string\n   * in the RFC 3339 format.\n   */\n  internalJsonRead(\n    json: JsonValue,\n    options: JsonReadOptions,\n    target?: Timestamp,\n  ): Timestamp {\n    if (typeof json !== 'string')\n      throw new Error(\n        'Unable to parse Timestamp from JSON ' + typeofJsonValue(json) + '.',\n      );\n    let matches = json.match(\n      /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/,\n    );\n    if (!matches)\n      throw new Error('Unable to parse Timestamp from JSON. Invalid format.');\n    let ms = Date.parse(\n      matches[1] +\n        '-' +\n        matches[2] +\n        '-' +\n        matches[3] +\n        'T' +\n        matches[4] +\n        ':' +\n        matches[5] +\n        ':' +\n        matches[6] +\n        (matches[8] ? matches[8] : 'Z'),\n    );\n    if (Number.isNaN(ms))\n      throw new Error('Unable to parse Timestamp from JSON. Invalid value.');\n    if (\n      ms < Date.parse('0001-01-01T00:00:00Z') ||\n      ms > Date.parse('9999-12-31T23:59:59Z')\n    )\n      throw new globalThis.Error(\n        'Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.',\n      );\n    if (!target) target = this.create();\n    target.seconds = PbLong.from(ms / 1000).toString();\n    target.nanos = 0;\n    if (matches[7])\n      target.nanos =\n        parseInt('1' + matches[7] + '0'.repeat(9 - matches[7].length)) -\n        1000000000;\n    return target;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Timestamp\n */\nexport const Timestamp = new Timestamp$Type();\n","// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/models/models.proto\" (package \"stream.video.sfu.models\", syntax proto3)\n// tslint:disable\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { Struct } from '../../../google/protobuf/struct';\nimport { Timestamp } from '../../../google/protobuf/timestamp';\n\n/**\n * CallState is the current state of the call\n * as seen by an SFU.\n *\n * @generated from protobuf message stream.video.sfu.models.CallState\n */\nexport interface CallState {\n  /**\n   * participants is the list of participants in the call.\n   * In large calls, the list could be truncated in which\n   * case, the list of participants contains fewer participants\n   * than the counts returned in participant_count. Anonymous\n   * participants are **NOT** included in the list.\n   *\n   * @generated from protobuf field: repeated stream.video.sfu.models.Participant participants = 1;\n   */\n  participants: Participant[];\n  /**\n   * started_at is the time the call session actually started.\n   *\n   * @generated from protobuf field: google.protobuf.Timestamp started_at = 2;\n   */\n  startedAt?: Timestamp;\n  /**\n   * participant_count contains the summary of the counts.\n   *\n   * @generated from protobuf field: stream.video.sfu.models.ParticipantCount participant_count = 3;\n   */\n  participantCount?: ParticipantCount;\n  /**\n   * the list of pins in the call.\n   * Pins are ordered in descending order (most important first).\n   *\n   * @generated from protobuf field: repeated stream.video.sfu.models.Pin pins = 4;\n   */\n  pins: Pin[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.ParticipantCount\n */\nexport interface ParticipantCount {\n  /**\n   * Total number of participants in the call including\n   * the anonymous participants.\n   *\n   * @generated from protobuf field: uint32 total = 1;\n   */\n  total: number;\n  /**\n   * Total number of anonymous participants in the call.\n   *\n   * @generated from protobuf field: uint32 anonymous = 2;\n   */\n  anonymous: number;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Pin\n */\nexport interface Pin {\n  /**\n   * the user to pin\n   *\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * the user sesion_id to pin, if not provided, applies to all sessions\n   *\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n}\n/**\n * those who are online in the call\n *\n * @generated from protobuf message stream.video.sfu.models.Participant\n */\nexport interface Participant {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * map of track id to track type\n   *\n   * @generated from protobuf field: repeated stream.video.sfu.models.TrackType published_tracks = 3;\n   */\n  publishedTracks: TrackType[];\n  /**\n   * @generated from protobuf field: google.protobuf.Timestamp joined_at = 4;\n   */\n  joinedAt?: Timestamp;\n  /**\n   * @generated from protobuf field: string track_lookup_prefix = 5;\n   */\n  trackLookupPrefix: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ConnectionQuality connection_quality = 6;\n   */\n  connectionQuality: ConnectionQuality;\n  /**\n   * @generated from protobuf field: bool is_speaking = 7;\n   */\n  isSpeaking: boolean;\n  /**\n   * @generated from protobuf field: bool is_dominant_speaker = 8;\n   */\n  isDominantSpeaker: boolean;\n  /**\n   * @generated from protobuf field: float audio_level = 9;\n   */\n  audioLevel: number;\n  /**\n   * @generated from protobuf field: string name = 10;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: string image = 11;\n   */\n  image: string;\n  /**\n   * @generated from protobuf field: google.protobuf.Struct custom = 12;\n   */\n  custom?: Struct;\n  /**\n   * @generated from protobuf field: repeated string roles = 13;\n   */\n  roles: string[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.StreamQuality\n */\nexport interface StreamQuality {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.VideoQuality video_quality = 1;\n   */\n  videoQuality: VideoQuality;\n  /**\n   * @generated from protobuf field: string user_id = 2;\n   */\n  userId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.VideoDimension\n */\nexport interface VideoDimension {\n  /**\n   * @generated from protobuf field: uint32 width = 1;\n   */\n  width: number;\n  /**\n   * @generated from protobuf field: uint32 height = 2;\n   */\n  height: number;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.VideoLayer\n */\nexport interface VideoLayer {\n  /**\n   * for tracks with a single layer, this should be HIGH\n   *\n   * @generated from protobuf field: string rid = 1;\n   */\n  rid: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.VideoDimension video_dimension = 2;\n   */\n  videoDimension?: VideoDimension;\n  /**\n   * target bitrate, server will measure actual\n   *\n   * @generated from protobuf field: uint32 bitrate = 4;\n   */\n  bitrate: number;\n  /**\n   * @generated from protobuf field: uint32 fps = 5;\n   */\n  fps: number;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.VideoQuality quality = 6;\n   */\n  quality: VideoQuality;\n}\n/**\n * SubscribeOption represents the configuration options for subscribing to a track.\n *\n * @generated from protobuf message stream.video.sfu.models.SubscribeOption\n */\nexport interface SubscribeOption {\n  /**\n   * The type of the track being subscribed (e.g., video, screenshare).\n   *\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 1;\n   */\n  trackType: TrackType;\n  /**\n   * The codecs supported by the subscriber for decoding tracks.\n   *\n   * @generated from protobuf field: repeated stream.video.sfu.models.Codec codecs = 2;\n   */\n  codecs: Codec[];\n}\n/**\n * PublishOption represents the configuration options for publishing a track.\n *\n * @generated from protobuf message stream.video.sfu.models.PublishOption\n */\nexport interface PublishOption {\n  /**\n   * The type of the track being published (e.g., video, screenshare).\n   *\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 1;\n   */\n  trackType: TrackType;\n  /**\n   * The codec to be used for encoding the track (e.g., VP8, VP9, H264).\n   *\n   * @generated from protobuf field: stream.video.sfu.models.Codec codec = 2;\n   */\n  codec?: Codec;\n  /**\n   * The target bitrate for the published track, in bits per second.\n   *\n   * @generated from protobuf field: int32 bitrate = 3;\n   */\n  bitrate: number;\n  /**\n   * The target frames per second (FPS) for video encoding.\n   *\n   * @generated from protobuf field: int32 fps = 4;\n   */\n  fps: number;\n  /**\n   * The maximum number of spatial layers to send.\n   * - For SVC (e.g., VP9), spatial layers downscale by a factor of 2:\n   *   - 1 layer: full resolution\n   *   - 2 layers: full resolution + half resolution\n   *   - 3 layers: full resolution + half resolution + quarter resolution\n   * - For non-SVC codecs (e.g., VP8/H264), this determines the number of\n   *   encoded resolutions (e.g., quarter, half, full) sent for simulcast.\n   *\n   * @generated from protobuf field: int32 max_spatial_layers = 5;\n   */\n  maxSpatialLayers: number;\n  /**\n   * The maximum number of temporal layers for scalable video coding (SVC).\n   * Temporal layers allow varying frame rates for different bandwidths.\n   *\n   * @generated from protobuf field: int32 max_temporal_layers = 6;\n   */\n  maxTemporalLayers: number;\n  /**\n   * The dimensions of the video (e.g., width and height in pixels).\n   * Spatial layers are based on this base resolution. For example, if the base\n   * resolution is 1280x720:\n   * - Full resolution (1 layer) = 1280x720\n   * - Half resolution (2 layers) = 640x360\n   * - Quarter resolution (3 layers) = 320x180\n   *\n   * @generated from protobuf field: stream.video.sfu.models.VideoDimension video_dimension = 7;\n   */\n  videoDimension?: VideoDimension;\n  /**\n   * The unique identifier for the publish request.\n   * - This `id` is assigned exclusively by the SFU. Any `id` set by the client\n   *   in the `PublishOption` will be ignored and overwritten by the SFU.\n   * - The primary purpose of this `id` is to uniquely identify each publish\n   *   request, even in scenarios where multiple publish requests for the same\n   *   `track_type` and `codec` are active simultaneously.\n   *   For example:\n   *     - A user may publish two tracks of the same type (e.g., video) and codec\n   *       (e.g., VP9) concurrently.\n   * - This uniqueness ensures that individual requests can be managed\n   *   independently. For instance, an `id` is critical when stopping a specific\n   *   publish request without affecting others.\n   *\n   * @generated from protobuf field: int32 id = 8;\n   */\n  id: number;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Codec\n */\nexport interface Codec {\n  /**\n   * @generated from protobuf field: uint32 payload_type = 16;\n   */\n  payloadType: number;\n  /**\n   * @generated from protobuf field: string name = 10;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: uint32 clock_rate = 14;\n   */\n  clockRate: number;\n  /**\n   * @generated from protobuf field: string encoding_parameters = 15;\n   */\n  encodingParameters: string;\n  /**\n   * @generated from protobuf field: string fmtp = 12;\n   */\n  fmtp: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.ICETrickle\n */\nexport interface ICETrickle {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;\n   */\n  peerType: PeerType;\n  /**\n   * @generated from protobuf field: string ice_candidate = 2;\n   */\n  iceCandidate: string;\n  /**\n   * @generated from protobuf field: string session_id = 3;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.TrackInfo\n */\nexport interface TrackInfo {\n  /**\n   * @generated from protobuf field: string track_id = 1;\n   */\n  trackId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 2;\n   */\n  trackType: TrackType;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.VideoLayer layers = 5;\n   */\n  layers: VideoLayer[];\n  /**\n   * @generated from protobuf field: string mid = 6;\n   */\n  mid: string;\n  /**\n   * for audio tracks\n   *\n   * @generated from protobuf field: bool dtx = 7;\n   */\n  dtx: boolean;\n  /**\n   * @generated from protobuf field: bool stereo = 8;\n   */\n  stereo: boolean;\n  /**\n   * @generated from protobuf field: bool red = 9;\n   */\n  red: boolean;\n  /**\n   * @generated from protobuf field: bool muted = 10;\n   */\n  muted: boolean;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Codec codec = 11;\n   */\n  codec?: Codec;\n  /**\n   * @generated from protobuf field: int32 publish_option_id = 12;\n   */\n  publishOptionId: number;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Error\n */\nexport interface Error {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ErrorCode code = 1;\n   */\n  code: ErrorCode;\n  /**\n   * @generated from protobuf field: string message = 2;\n   */\n  message: string;\n  /**\n   * @generated from protobuf field: bool should_retry = 3;\n   */\n  shouldRetry: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.ClientDetails\n */\nexport interface ClientDetails {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Sdk sdk = 1;\n   */\n  sdk?: Sdk;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.OS os = 2;\n   */\n  os?: OS;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Browser browser = 3;\n   */\n  browser?: Browser;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Device device = 4;\n   */\n  device?: Device;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Sdk\n */\nexport interface Sdk {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.SdkType type = 1;\n   */\n  type: SdkType;\n  /**\n   * @generated from protobuf field: string major = 2;\n   */\n  major: string;\n  /**\n   * @generated from protobuf field: string minor = 3;\n   */\n  minor: string;\n  /**\n   * @generated from protobuf field: string patch = 4;\n   */\n  patch: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.OS\n */\nexport interface OS {\n  /**\n   * @generated from protobuf field: string name = 1;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: string version = 2;\n   */\n  version: string;\n  /**\n   * @generated from protobuf field: string architecture = 3;\n   */\n  architecture: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Browser\n */\nexport interface Browser {\n  /**\n   * @generated from protobuf field: string name = 1;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: string version = 2;\n   */\n  version: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.RTMPIngress\n */\nexport interface RTMPIngress {\n  /**\n   * Video dimensions and frame rate\n   *\n   * @generated from protobuf field: uint32 width = 1;\n   */\n  width: number;\n  /**\n   * @generated from protobuf field: uint32 height = 2;\n   */\n  height: number;\n  /**\n   * @generated from protobuf field: double frame_rate = 3;\n   */\n  frameRate: number;\n  /**\n   * Client info\n   *\n   * @generated from protobuf field: string software = 4;\n   */\n  software: string; // e.g. \"obs-studio\"\n  /**\n   * @generated from protobuf field: string version = 5;\n   */\n  version: string; // e.g. \"29.1.3\"\n  /**\n   * @generated from protobuf field: string encoder = 6;\n   */\n  encoder: string; // e.g. \"x264\" or \"NVIDIA NVENC\"\n  /**\n   * Connection info\n   *\n   * @generated from protobuf field: string remote_addr = 7;\n   */\n  remoteAddr: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Device\n */\nexport interface Device {\n  /**\n   * @generated from protobuf field: string name = 1;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: string version = 2;\n   */\n  version: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Call\n */\nexport interface Call {\n  /**\n   * the call type\n   *\n   * @generated from protobuf field: string type = 1;\n   */\n  type: string;\n  /**\n   * the call id\n   *\n   * @generated from protobuf field: string id = 2;\n   */\n  id: string;\n  /**\n   * the id of the user that created this call\n   *\n   * @generated from protobuf field: string created_by_user_id = 3;\n   */\n  createdByUserId: string;\n  /**\n   * the id of the current host for this call\n   *\n   * @generated from protobuf field: string host_user_id = 4;\n   */\n  hostUserId: string;\n  /**\n   * @generated from protobuf field: google.protobuf.Struct custom = 5;\n   */\n  custom?: Struct;\n  /**\n   * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;\n   */\n  createdAt?: Timestamp;\n  /**\n   * @generated from protobuf field: google.protobuf.Timestamp updated_at = 7;\n   */\n  updatedAt?: Timestamp;\n}\n/**\n * CallGrants represents the set of permissions given\n * to the user for the current call.\n *\n * @generated from protobuf message stream.video.sfu.models.CallGrants\n */\nexport interface CallGrants {\n  /**\n   * @generated from protobuf field: bool can_publish_audio = 1;\n   */\n  canPublishAudio: boolean;\n  /**\n   * @generated from protobuf field: bool can_publish_video = 2;\n   */\n  canPublishVideo: boolean;\n  /**\n   * @generated from protobuf field: bool can_screenshare = 3;\n   */\n  canScreenshare: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.InputDevices\n */\nexport interface InputDevices {\n  /**\n   * @generated from protobuf field: repeated string available_devices = 1;\n   */\n  availableDevices: string[];\n  /**\n   * @generated from protobuf field: string current_device = 2;\n   */\n  currentDevice: string;\n  /**\n   * @generated from protobuf field: bool is_permitted = 3;\n   */\n  isPermitted: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.AndroidState\n */\nexport interface AndroidState {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.AndroidThermalState thermal_state = 1;\n   */\n  thermalState: AndroidThermalState;\n  /**\n   * @generated from protobuf field: bool is_power_saver_mode = 2;\n   */\n  isPowerSaverMode: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.AppleState\n */\nexport interface AppleState {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.AppleThermalState thermal_state = 1;\n   */\n  thermalState: AppleThermalState;\n  /**\n   * https://developer.apple.com/documentation/foundation/processinfo/1617047-islowpowermodeenabled\n   *\n   * @generated from protobuf field: bool is_low_power_mode_enabled = 2;\n   */\n  isLowPowerModeEnabled: boolean;\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.PeerType\n */\nexport enum PeerType {\n  /**\n   * todo fix me (marcelo)\n   *\n   * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;\n   */\n  PUBLISHER_UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;\n   */\n  SUBSCRIBER = 1,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality\n */\nexport enum ConnectionQuality {\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 1;\n   */\n  POOR = 1,\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 2;\n   */\n  GOOD = 2,\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_EXCELLENT = 3;\n   */\n  EXCELLENT = 3,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.VideoQuality\n */\nexport enum VideoQuality {\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 0;\n   */\n  LOW_UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_MID = 1;\n   */\n  MID = 1,\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 2;\n   */\n  HIGH = 2,\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_OFF = 3;\n   */\n  OFF = 3,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackType\n */\nexport enum TrackType {\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;\n   */\n  AUDIO = 1,\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;\n   */\n  VIDEO = 2,\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE = 3;\n   */\n  SCREEN_SHARE = 3,\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE_AUDIO = 4;\n   */\n  SCREEN_SHARE_AUDIO = 4,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.ErrorCode\n */\nexport enum ErrorCode {\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_NOT_FOUND = 100;\n   */\n  PUBLISH_TRACK_NOT_FOUND = 100,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACKS_MISMATCH = 101;\n   */\n  PUBLISH_TRACKS_MISMATCH = 101,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER = 102;\n   */\n  PUBLISH_TRACK_OUT_OF_ORDER = 102,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103;\n   */\n  PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_LIVE_ENDED = 104;\n   */\n  LIVE_ENDED = 104,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_NOT_FOUND = 200;\n   */\n  PARTICIPANT_NOT_FOUND = 200,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING_OUT = 201;\n   */\n  PARTICIPANT_MIGRATING_OUT = 201,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATION_FAILED = 202;\n   */\n  PARTICIPANT_MIGRATION_FAILED = 202,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING = 203;\n   */\n  PARTICIPANT_MIGRATING = 203,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_RECONNECT_FAILED = 204;\n   */\n  PARTICIPANT_RECONNECT_FAILED = 204,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205;\n   */\n  PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_CALL_NOT_FOUND = 300;\n   */\n  CALL_NOT_FOUND = 300,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_REQUEST_VALIDATION_FAILED = 400;\n   */\n  REQUEST_VALIDATION_FAILED = 400,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_UNAUTHENTICATED = 401;\n   */\n  UNAUTHENTICATED = 401,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PERMISSION_DENIED = 403;\n   */\n  PERMISSION_DENIED = 403,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_TOO_MANY_REQUESTS = 429;\n   */\n  TOO_MANY_REQUESTS = 429,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_INTERNAL_SERVER_ERROR = 500;\n   */\n  INTERNAL_SERVER_ERROR = 500,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_SFU_SHUTTING_DOWN = 600;\n   */\n  SFU_SHUTTING_DOWN = 600,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_SFU_FULL = 700;\n   */\n  SFU_FULL = 700,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.SdkType\n */\nexport enum SdkType {\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_REACT = 1;\n   */\n  REACT = 1,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_ANGULAR = 2;\n   */\n  ANGULAR = 2,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_ANDROID = 3;\n   */\n  ANDROID = 3,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_IOS = 4;\n   */\n  IOS = 4,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_FLUTTER = 5;\n   */\n  FLUTTER = 5,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_REACT_NATIVE = 6;\n   */\n  REACT_NATIVE = 6,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_UNITY = 7;\n   */\n  UNITY = 7,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_GO = 8;\n   */\n  GO = 8,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_PLAIN_JAVASCRIPT = 9;\n   */\n  PLAIN_JAVASCRIPT = 9,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackUnpublishReason\n */\nexport enum TrackUnpublishReason {\n  /**\n   * Default value which is used when the specific reason\n   * for muting the track is not known.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * Represents user muting their tracks.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_USER_MUTED = 1;\n   */\n  USER_MUTED = 1,\n  /**\n   * Represents muting the track because the permission to\n   * publish the track has been revoked.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED = 2;\n   */\n  PERMISSION_REVOKED = 2,\n  /**\n   * Represents muting the track due to moderation actions.\n   * This is different from permission revoked because the\n   * participant can unmute themselves here whereas in case\n   * of \"permission revoke\" it is not possible until the\n   * call permissions are updated.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_MODERATION = 3;\n   */\n  MODERATION = 3,\n}\n/**\n * GoAwayReason represents the reason for the SFU to\n * disconnect the client.\n *\n * @generated from protobuf enum stream.video.sfu.models.GoAwayReason\n */\nexport enum GoAwayReason {\n  /**\n   * @generated from protobuf enum value: GO_AWAY_REASON_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: GO_AWAY_REASON_SHUTTING_DOWN = 1;\n   */\n  SHUTTING_DOWN = 1,\n  /**\n   * @generated from protobuf enum value: GO_AWAY_REASON_REBALANCE = 2;\n   */\n  REBALANCE = 2,\n}\n/**\n * CallEndedReason represents the reason for the call to end.\n *\n * @generated from protobuf enum stream.video.sfu.models.CallEndedReason\n */\nexport enum CallEndedReason {\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_ENDED = 1;\n   */\n  ENDED = 1,\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_LIVE_ENDED = 2;\n   */\n  LIVE_ENDED = 2,\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_KICKED = 3;\n   */\n  KICKED = 3,\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_SESSION_ENDED = 4;\n   */\n  SESSION_ENDED = 4,\n}\n/**\n * WebsocketReconnectStrategy defines the ws strategies available for handling reconnections.\n *\n * @generated from protobuf enum stream.video.sfu.models.WebsocketReconnectStrategy\n */\nexport enum WebsocketReconnectStrategy {\n  /**\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * Sent after reaching the maximum reconnection attempts, or any other unrecoverable error leading to permanent disconnect.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT = 1;\n   */\n  DISCONNECT = 1,\n  /**\n   * SDK should maintaining existing publisher/subscriber pc instances\n   * and establish a new WebSocket connection.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_FAST = 2;\n   */\n  FAST = 2,\n  /**\n   * SDK should obtain new credentials from the coordinator, drops existing pc instances, set a new session_id and initializes\n   * a completely new WebSocket connection, ensuring a comprehensive reset.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_REJOIN = 3;\n   */\n  REJOIN = 3,\n  /**\n   * SDK should migrate to a new SFU instance\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_MIGRATE = 4;\n   */\n  MIGRATE = 4,\n}\n/**\n * AndroidThermalState is reported by the Android API. The full list of values is documented here\n * https://developer.android.com/reference/android/os/PowerManager.html#getCurrentThermalStatus()\n *\n * @generated from protobuf enum stream.video.sfu.models.AndroidThermalState\n */\nexport enum AndroidThermalState {\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_NONE = 1;\n   */\n  NONE = 1,\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_LIGHT = 2;\n   */\n  LIGHT = 2,\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_MODERATE = 3;\n   */\n  MODERATE = 3,\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_SEVERE = 4;\n   */\n  SEVERE = 4,\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_CRITICAL = 5;\n   */\n  CRITICAL = 5,\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_EMERGENCY = 6;\n   */\n  EMERGENCY = 6,\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_SHUTDOWN = 7;\n   */\n  SHUTDOWN = 7,\n}\n/**\n * AppleThermalState is the thermal state as reported by Apple devices when available or applicable to the platform.\n * The full list of states (enum) is available here: https://developer.apple.com/documentation/foundation/processinfo/thermalstate\n *\n * @generated from protobuf enum stream.video.sfu.models.AppleThermalState\n */\nexport enum AppleThermalState {\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_NOMINAL = 1;\n   */\n  NOMINAL = 1,\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_FAIR = 2;\n   */\n  FAIR = 2,\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_SERIOUS = 3;\n   */\n  SERIOUS = 3,\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_CRITICAL = 4;\n   */\n  CRITICAL = 4,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallState$Type extends MessageType<CallState> {\n  constructor() {\n    super('stream.video.sfu.models.CallState', [\n      {\n        no: 1,\n        name: 'participants',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => Participant,\n      },\n      { no: 2, name: 'started_at', kind: 'message', T: () => Timestamp },\n      {\n        no: 3,\n        name: 'participant_count',\n        kind: 'message',\n        T: () => ParticipantCount,\n      },\n      {\n        no: 4,\n        name: 'pins',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => Pin,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallState\n */\nexport const CallState = new CallState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantCount$Type extends MessageType<ParticipantCount> {\n  constructor() {\n    super('stream.video.sfu.models.ParticipantCount', [\n      { no: 1, name: 'total', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      { no: 2, name: 'anonymous', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ParticipantCount\n */\nexport const ParticipantCount = new ParticipantCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pin$Type extends MessageType<Pin> {\n  constructor() {\n    super('stream.video.sfu.models.Pin', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Pin\n */\nexport const Pin = new Pin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Participant$Type extends MessageType<Participant> {\n  constructor() {\n    super('stream.video.sfu.models.Participant', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'published_tracks',\n        kind: 'enum',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      { no: 4, name: 'joined_at', kind: 'message', T: () => Timestamp },\n      {\n        no: 5,\n        name: 'track_lookup_prefix',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 6,\n        name: 'connection_quality',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.ConnectionQuality',\n          ConnectionQuality,\n          'CONNECTION_QUALITY_',\n        ],\n      },\n      { no: 7, name: 'is_speaking', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      {\n        no: 8,\n        name: 'is_dominant_speaker',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n      { no: 9, name: 'audio_level', kind: 'scalar', T: 2 /*ScalarType.FLOAT*/ },\n      { no: 10, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 11, name: 'image', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 12, name: 'custom', kind: 'message', T: () => Struct },\n      {\n        no: 13,\n        name: 'roles',\n        kind: 'scalar',\n        repeat: 2 /*RepeatType.UNPACKED*/,\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Participant\n */\nexport const Participant = new Participant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StreamQuality$Type extends MessageType<StreamQuality> {\n  constructor() {\n    super('stream.video.sfu.models.StreamQuality', [\n      {\n        no: 1,\n        name: 'video_quality',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.VideoQuality',\n          VideoQuality,\n          'VIDEO_QUALITY_',\n        ],\n      },\n      { no: 2, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality\n */\nexport const StreamQuality = new StreamQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoDimension$Type extends MessageType<VideoDimension> {\n  constructor() {\n    super('stream.video.sfu.models.VideoDimension', [\n      { no: 1, name: 'width', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      { no: 2, name: 'height', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension\n */\nexport const VideoDimension = new VideoDimension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayer$Type extends MessageType<VideoLayer> {\n  constructor() {\n    super('stream.video.sfu.models.VideoLayer', [\n      { no: 1, name: 'rid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 2,\n        name: 'video_dimension',\n        kind: 'message',\n        T: () => VideoDimension,\n      },\n      { no: 4, name: 'bitrate', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      { no: 5, name: 'fps', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      {\n        no: 6,\n        name: 'quality',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.VideoQuality',\n          VideoQuality,\n          'VIDEO_QUALITY_',\n        ],\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer\n */\nexport const VideoLayer = new VideoLayer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeOption$Type extends MessageType<SubscribeOption> {\n  constructor() {\n    super('stream.video.sfu.models.SubscribeOption', [\n      {\n        no: 1,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      {\n        no: 2,\n        name: 'codecs',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => Codec,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.SubscribeOption\n */\nexport const SubscribeOption = new SubscribeOption$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublishOption$Type extends MessageType<PublishOption> {\n  constructor() {\n    super('stream.video.sfu.models.PublishOption', [\n      {\n        no: 1,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      { no: 2, name: 'codec', kind: 'message', T: () => Codec },\n      { no: 3, name: 'bitrate', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n      { no: 4, name: 'fps', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n      {\n        no: 5,\n        name: 'max_spatial_layers',\n        kind: 'scalar',\n        T: 5 /*ScalarType.INT32*/,\n      },\n      {\n        no: 6,\n        name: 'max_temporal_layers',\n        kind: 'scalar',\n        T: 5 /*ScalarType.INT32*/,\n      },\n      {\n        no: 7,\n        name: 'video_dimension',\n        kind: 'message',\n        T: () => VideoDimension,\n      },\n      { no: 8, name: 'id', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.PublishOption\n */\nexport const PublishOption = new PublishOption$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Codec$Type extends MessageType<Codec> {\n  constructor() {\n    super('stream.video.sfu.models.Codec', [\n      {\n        no: 16,\n        name: 'payload_type',\n        kind: 'scalar',\n        T: 13 /*ScalarType.UINT32*/,\n      },\n      { no: 10, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 14,\n        name: 'clock_rate',\n        kind: 'scalar',\n        T: 13 /*ScalarType.UINT32*/,\n      },\n      {\n        no: 15,\n        name: 'encoding_parameters',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 12, name: 'fmtp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Codec\n */\nexport const Codec = new Codec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends MessageType<ICETrickle> {\n  constructor() {\n    super('stream.video.sfu.models.ICETrickle', [\n      {\n        no: 1,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n      {\n        no: 2,\n        name: 'ice_candidate',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 3, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle\n */\nexport const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackInfo$Type extends MessageType<TrackInfo> {\n  constructor() {\n    super('stream.video.sfu.models.TrackInfo', [\n      { no: 1, name: 'track_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 2,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      {\n        no: 5,\n        name: 'layers',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => VideoLayer,\n      },\n      { no: 6, name: 'mid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 7, name: 'dtx', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 8, name: 'stereo', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 9, name: 'red', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 10, name: 'muted', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 11, name: 'codec', kind: 'message', T: () => Codec },\n      {\n        no: 12,\n        name: 'publish_option_id',\n        kind: 'scalar',\n        T: 5 /*ScalarType.INT32*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo\n */\nexport const TrackInfo = new TrackInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends MessageType<Error> {\n  constructor() {\n    super('stream.video.sfu.models.Error', [\n      {\n        no: 1,\n        name: 'code',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.ErrorCode',\n          ErrorCode,\n          'ERROR_CODE_',\n        ],\n      },\n      { no: 2, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'should_retry', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Error\n */\nexport const Error = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ClientDetails$Type extends MessageType<ClientDetails> {\n  constructor() {\n    super('stream.video.sfu.models.ClientDetails', [\n      { no: 1, name: 'sdk', kind: 'message', T: () => Sdk },\n      { no: 2, name: 'os', kind: 'message', T: () => OS },\n      { no: 3, name: 'browser', kind: 'message', T: () => Browser },\n      { no: 4, name: 'device', kind: 'message', T: () => Device },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ClientDetails\n */\nexport const ClientDetails = new ClientDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sdk$Type extends MessageType<Sdk> {\n  constructor() {\n    super('stream.video.sfu.models.Sdk', [\n      {\n        no: 1,\n        name: 'type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.SdkType', SdkType, 'SDK_TYPE_'],\n      },\n      { no: 2, name: 'major', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'minor', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 4, name: 'patch', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Sdk\n */\nexport const Sdk = new Sdk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OS$Type extends MessageType<OS> {\n  constructor() {\n    super('stream.video.sfu.models.OS', [\n      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'version', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'architecture',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.OS\n */\nexport const OS = new OS$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Browser$Type extends MessageType<Browser> {\n  constructor() {\n    super('stream.video.sfu.models.Browser', [\n      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'version', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Browser\n */\nexport const Browser = new Browser$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RTMPIngress$Type extends MessageType<RTMPIngress> {\n  constructor() {\n    super('stream.video.sfu.models.RTMPIngress', [\n      { no: 1, name: 'width', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      { no: 2, name: 'height', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      { no: 3, name: 'frame_rate', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },\n      { no: 4, name: 'software', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 5, name: 'version', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 6, name: 'encoder', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 7,\n        name: 'remote_addr',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.RTMPIngress\n */\nexport const RTMPIngress = new RTMPIngress$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Device$Type extends MessageType<Device> {\n  constructor() {\n    super('stream.video.sfu.models.Device', [\n      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'version', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Device\n */\nexport const Device = new Device$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Call$Type extends MessageType<Call> {\n  constructor() {\n    super('stream.video.sfu.models.Call', [\n      { no: 1, name: 'type', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'created_by_user_id',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 4,\n        name: 'host_user_id',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 5, name: 'custom', kind: 'message', T: () => Struct },\n      { no: 6, name: 'created_at', kind: 'message', T: () => Timestamp },\n      { no: 7, name: 'updated_at', kind: 'message', T: () => Timestamp },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Call\n */\nexport const Call = new Call$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrants$Type extends MessageType<CallGrants> {\n  constructor() {\n    super('stream.video.sfu.models.CallGrants', [\n      {\n        no: 1,\n        name: 'can_publish_audio',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n      {\n        no: 2,\n        name: 'can_publish_video',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n      {\n        no: 3,\n        name: 'can_screenshare',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallGrants\n */\nexport const CallGrants = new CallGrants$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InputDevices$Type extends MessageType<InputDevices> {\n  constructor() {\n    super('stream.video.sfu.models.InputDevices', [\n      {\n        no: 1,\n        name: 'available_devices',\n        kind: 'scalar',\n        repeat: 2 /*RepeatType.UNPACKED*/,\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 2,\n        name: 'current_device',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 3, name: 'is_permitted', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.InputDevices\n */\nexport const InputDevices = new InputDevices$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AndroidState$Type extends MessageType<AndroidState> {\n  constructor() {\n    super('stream.video.sfu.models.AndroidState', [\n      {\n        no: 1,\n        name: 'thermal_state',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.AndroidThermalState',\n          AndroidThermalState,\n          'ANDROID_THERMAL_STATE_',\n        ],\n      },\n      {\n        no: 2,\n        name: 'is_power_saver_mode',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.AndroidState\n */\nexport const AndroidState = new AndroidState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AppleState$Type extends MessageType<AppleState> {\n  constructor() {\n    super('stream.video.sfu.models.AppleState', [\n      {\n        no: 1,\n        name: 'thermal_state',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.AppleThermalState',\n          AppleThermalState,\n          'APPLE_THERMAL_STATE_',\n        ],\n      },\n      {\n        no: 2,\n        name: 'is_low_power_mode_enabled',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.AppleState\n */\nexport const AppleState = new AppleState$Type();\n","// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\nimport {\n  AndroidState,\n  AppleState,\n  Error,\n  ICETrickle,\n  InputDevices,\n  PeerType,\n  RTMPIngress,\n  TrackInfo,\n  TrackType,\n  VideoDimension,\n  WebsocketReconnectStrategy,\n} from '../models/models';\nimport { ServiceType } from '@protobuf-ts/runtime-rpc';\nimport { MessageType } from '@protobuf-ts/runtime';\n\n/**\n * @generated from protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest\n */\nexport interface StartNoiseCancellationRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse\n */\nexport interface StartNoiseCancellationResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 1;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest\n */\nexport interface StopNoiseCancellationRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse\n */\nexport interface StopNoiseCancellationResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 1;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.Reconnection\n */\nexport interface Reconnection {\n  /**\n   * @generated from protobuf field: float time_seconds = 1;\n   */\n  timeSeconds: number;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.WebsocketReconnectStrategy strategy = 2;\n   */\n  strategy: WebsocketReconnectStrategy;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.Telemetry\n */\nexport interface Telemetry {\n  /**\n   * @generated from protobuf oneof: data\n   */\n  data:\n    | {\n        oneofKind: 'connectionTimeSeconds';\n        /**\n         * @generated from protobuf field: float connection_time_seconds = 1;\n         */\n        connectionTimeSeconds: number;\n      }\n    | {\n        oneofKind: 'reconnection';\n        /**\n         * @generated from protobuf field: stream.video.sfu.signal.Reconnection reconnection = 2;\n         */\n        reconnection: Reconnection;\n      }\n    | {\n        oneofKind: undefined;\n      };\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SendStatsRequest\n */\nexport interface SendStatsRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: string subscriber_stats = 2;\n   */\n  subscriberStats: string;\n  /**\n   * @generated from protobuf field: string publisher_stats = 3;\n   */\n  publisherStats: string;\n  /**\n   * @generated from protobuf field: string webrtc_version = 4;\n   */\n  webrtcVersion: string;\n  /**\n   * @generated from protobuf field: string sdk = 5;\n   */\n  sdk: string;\n  /**\n   * @generated from protobuf field: string sdk_version = 6;\n   */\n  sdkVersion: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.InputDevices audio_devices = 7;\n   */\n  audioDevices?: InputDevices;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.InputDevices video_devices = 8;\n   */\n  videoDevices?: InputDevices;\n  /**\n   * @generated from protobuf oneof: device_state\n   */\n  deviceState:\n    | {\n        oneofKind: 'android';\n        /**\n         * @generated from protobuf field: stream.video.sfu.models.AndroidState android = 9;\n         */\n        android: AndroidState;\n      }\n    | {\n        oneofKind: 'apple';\n        /**\n         * @generated from protobuf field: stream.video.sfu.models.AppleState apple = 10;\n         */\n        apple: AppleState;\n      }\n    | {\n        oneofKind: undefined;\n      };\n  /**\n   * @generated from protobuf field: stream.video.sfu.signal.Telemetry telemetry = 11;\n   */\n  telemetry?: Telemetry;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.RTMPIngress rtmp = 12;\n   */\n  rtmp?: RTMPIngress;\n  /**\n   * @generated from protobuf field: string subscriber_rtc_stats = 13;\n   */\n  subscriberRtcStats: string;\n  /**\n   * @generated from protobuf field: string publisher_rtc_stats = 14;\n   */\n  publisherRtcStats: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SendStatsResponse\n */\nexport interface SendStatsResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 1;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.ICERestartRequest\n */\nexport interface ICERestartRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 2;\n   */\n  peerType: PeerType;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.ICERestartResponse\n */\nexport interface ICERestartResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 1;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */\nexport interface UpdateMuteStatesRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.signal.TrackMuteState mute_states = 3;\n   */\n  muteStates: TrackMuteState[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */\nexport interface UpdateMuteStatesResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.TrackMuteState\n */\nexport interface TrackMuteState {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 1;\n   */\n  trackType: TrackType;\n  /**\n   * @generated from protobuf field: bool muted = 2;\n   */\n  muted: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.AudioMuteChanged\n */\nexport interface AudioMuteChanged {\n  /**\n   * @generated from protobuf field: bool muted = 1;\n   */\n  muted: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.VideoMuteChanged\n */\nexport interface VideoMuteChanged {\n  /**\n   * @generated from protobuf field: bool muted = 2;\n   */\n  muted: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */\nexport interface UpdateSubscriptionsRequest {\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks = 3;\n   */\n  tracks: TrackSubscriptionDetails[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */\nexport interface UpdateSubscriptionsResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */\nexport interface TrackSubscriptionDetails {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 3;\n   */\n  trackType: TrackType;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.VideoDimension dimension = 4;\n   */\n  dimension?: VideoDimension;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SendAnswerRequest\n */\nexport interface SendAnswerRequest {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;\n   */\n  peerType: PeerType;\n  /**\n   * @generated from protobuf field: string sdp = 2;\n   */\n  sdp: string;\n  /**\n   * @generated from protobuf field: string session_id = 3;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SendAnswerResponse\n */\nexport interface SendAnswerResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.ICETrickleResponse\n */\nexport interface ICETrickleResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SetPublisherRequest\n */\nexport interface SetPublisherRequest {\n  /**\n   * sdp offer\n   *\n   * @generated from protobuf field: string sdp = 1;\n   */\n  sdp: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.TrackInfo tracks = 3;\n   */\n  tracks: TrackInfo[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SetPublisherResponse\n */\nexport interface SetPublisherResponse {\n  /**\n   * sdp answer\n   *\n   * @generated from protobuf field: string sdp = 1;\n   */\n  sdp: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: bool ice_restart = 3;\n   */\n  iceRestart: boolean;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationRequest$Type extends MessageType<StartNoiseCancellationRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.StartNoiseCancellationRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest\n */\nexport const StartNoiseCancellationRequest =\n  new StartNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationResponse$Type extends MessageType<StartNoiseCancellationResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.StartNoiseCancellationResponse', [\n      { no: 1, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse\n */\nexport const StartNoiseCancellationResponse =\n  new StartNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationRequest$Type extends MessageType<StopNoiseCancellationRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.StopNoiseCancellationRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest\n */\nexport const StopNoiseCancellationRequest =\n  new StopNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationResponse$Type extends MessageType<StopNoiseCancellationResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.StopNoiseCancellationResponse', [\n      { no: 1, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse\n */\nexport const StopNoiseCancellationResponse =\n  new StopNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Reconnection$Type extends MessageType<Reconnection> {\n  constructor() {\n    super('stream.video.sfu.signal.Reconnection', [\n      {\n        no: 1,\n        name: 'time_seconds',\n        kind: 'scalar',\n        T: 2 /*ScalarType.FLOAT*/,\n      },\n      {\n        no: 2,\n        name: 'strategy',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.WebsocketReconnectStrategy',\n          WebsocketReconnectStrategy,\n          'WEBSOCKET_RECONNECT_STRATEGY_',\n        ],\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.Reconnection\n */\nexport const Reconnection = new Reconnection$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Telemetry$Type extends MessageType<Telemetry> {\n  constructor() {\n    super('stream.video.sfu.signal.Telemetry', [\n      {\n        no: 1,\n        name: 'connection_time_seconds',\n        kind: 'scalar',\n        oneof: 'data',\n        T: 2 /*ScalarType.FLOAT*/,\n      },\n      {\n        no: 2,\n        name: 'reconnection',\n        kind: 'message',\n        oneof: 'data',\n        T: () => Reconnection,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.Telemetry\n */\nexport const Telemetry = new Telemetry$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsRequest$Type extends MessageType<SendStatsRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.SendStatsRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 2,\n        name: 'subscriber_stats',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 3,\n        name: 'publisher_stats',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 4,\n        name: 'webrtc_version',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 5, name: 'sdk', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 6,\n        name: 'sdk_version',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 7, name: 'audio_devices', kind: 'message', T: () => InputDevices },\n      { no: 8, name: 'video_devices', kind: 'message', T: () => InputDevices },\n      {\n        no: 9,\n        name: 'android',\n        kind: 'message',\n        oneof: 'deviceState',\n        T: () => AndroidState,\n      },\n      {\n        no: 10,\n        name: 'apple',\n        kind: 'message',\n        oneof: 'deviceState',\n        T: () => AppleState,\n      },\n      { no: 11, name: 'telemetry', kind: 'message', T: () => Telemetry },\n      { no: 12, name: 'rtmp', kind: 'message', T: () => RTMPIngress },\n      {\n        no: 13,\n        name: 'subscriber_rtc_stats',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 14,\n        name: 'publisher_rtc_stats',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest\n */\nexport const SendStatsRequest = new SendStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsResponse$Type extends MessageType<SendStatsResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.SendStatsResponse', [\n      { no: 1, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse\n */\nexport const SendStatsResponse = new SendStatsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartRequest$Type extends MessageType<ICERestartRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.ICERestartRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 2,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest\n */\nexport const ICERestartRequest = new ICERestartRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartResponse$Type extends MessageType<ICERestartResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.ICERestartResponse', [\n      { no: 1, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse\n */\nexport const ICERestartResponse = new ICERestartResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesRequest$Type extends MessageType<UpdateMuteStatesRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateMuteStatesRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'mute_states',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackMuteState,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */\nexport const UpdateMuteStatesRequest = new UpdateMuteStatesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesResponse$Type extends MessageType<UpdateMuteStatesResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateMuteStatesResponse', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */\nexport const UpdateMuteStatesResponse = new UpdateMuteStatesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackMuteState$Type extends MessageType<TrackMuteState> {\n  constructor() {\n    super('stream.video.sfu.signal.TrackMuteState', [\n      {\n        no: 1,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      { no: 2, name: 'muted', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState\n */\nexport const TrackMuteState = new TrackMuteState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMuteChanged$Type extends MessageType<AudioMuteChanged> {\n  constructor() {\n    super('stream.video.sfu.signal.AudioMuteChanged', [\n      { no: 1, name: 'muted', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged\n */\nexport const AudioMuteChanged = new AudioMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMuteChanged$Type extends MessageType<VideoMuteChanged> {\n  constructor() {\n    super('stream.video.sfu.signal.VideoMuteChanged', [\n      { no: 2, name: 'muted', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged\n */\nexport const VideoMuteChanged = new VideoMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsRequest$Type extends MessageType<UpdateSubscriptionsRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateSubscriptionsRequest', [\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'tracks',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackSubscriptionDetails,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */\nexport const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsResponse$Type extends MessageType<UpdateSubscriptionsResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateSubscriptionsResponse', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */\nexport const UpdateSubscriptionsResponse =\n  new UpdateSubscriptionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackSubscriptionDetails$Type extends MessageType<TrackSubscriptionDetails> {\n  constructor() {\n    super('stream.video.sfu.signal.TrackSubscriptionDetails', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      { no: 4, name: 'dimension', kind: 'message', T: () => VideoDimension },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */\nexport const TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerRequest$Type extends MessageType<SendAnswerRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.SendAnswerRequest', [\n      {\n        no: 1,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n      { no: 2, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest\n */\nexport const SendAnswerRequest = new SendAnswerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerResponse$Type extends MessageType<SendAnswerResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.SendAnswerResponse', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse\n */\nexport const SendAnswerResponse = new SendAnswerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickleResponse$Type extends MessageType<ICETrickleResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.ICETrickleResponse', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse\n */\nexport const ICETrickleResponse = new ICETrickleResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherRequest$Type extends MessageType<SetPublisherRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.SetPublisherRequest', [\n      { no: 1, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'tracks',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackInfo,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest\n */\nexport const SetPublisherRequest = new SetPublisherRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherResponse$Type extends MessageType<SetPublisherResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.SetPublisherResponse', [\n      { no: 1, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'ice_restart', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse\n */\nexport const SetPublisherResponse = new SetPublisherResponse$Type();\n/**\n * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer\n */\nexport const SignalServer = new ServiceType(\n  'stream.video.sfu.signal.SignalServer',\n  [\n    {\n      name: 'SetPublisher',\n      options: {},\n      I: SetPublisherRequest,\n      O: SetPublisherResponse,\n    },\n    {\n      name: 'SendAnswer',\n      options: {},\n      I: SendAnswerRequest,\n      O: SendAnswerResponse,\n    },\n    { name: 'IceTrickle', options: {}, I: ICETrickle, O: ICETrickleResponse },\n    {\n      name: 'UpdateSubscriptions',\n      options: {},\n      I: UpdateSubscriptionsRequest,\n      O: UpdateSubscriptionsResponse,\n    },\n    {\n      name: 'UpdateMuteStates',\n      options: {},\n      I: UpdateMuteStatesRequest,\n      O: UpdateMuteStatesResponse,\n    },\n    {\n      name: 'IceRestart',\n      options: {},\n      I: ICERestartRequest,\n      O: ICERestartResponse,\n    },\n    {\n      name: 'SendStats',\n      options: {},\n      I: SendStatsRequest,\n      O: SendStatsResponse,\n    },\n    {\n      name: 'StartNoiseCancellation',\n      options: {},\n      I: StartNoiseCancellationRequest,\n      O: StartNoiseCancellationResponse,\n    },\n    {\n      name: 'StopNoiseCancellation',\n      options: {},\n      I: StopNoiseCancellationRequest,\n      O: StopNoiseCancellationResponse,\n    },\n  ],\n);\n","// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/event/events.proto\" (package \"stream.video.sfu.event\", syntax proto3)\n// tslint:disable\nimport { MessageType } from '@protobuf-ts/runtime';\nimport {\n  CallEndedReason,\n  CallGrants,\n  CallState,\n  ClientDetails,\n  Codec,\n  ConnectionQuality,\n  Error as Error$,\n  GoAwayReason,\n  ICETrickle as ICETrickle$,\n  Participant,\n  ParticipantCount,\n  PeerType,\n  Pin,\n  PublishOption,\n  SubscribeOption,\n  TrackInfo,\n  TrackType,\n  TrackUnpublishReason,\n  WebsocketReconnectStrategy,\n} from '../models/models';\nimport { TrackSubscriptionDetails } from '../signal_rpc/signal';\n\n/**\n * SFUEvent is a message that is sent from the SFU to the client.\n *\n * @generated from protobuf message stream.video.sfu.event.SfuEvent\n */\nexport interface SfuEvent {\n  /**\n   * @generated from protobuf oneof: event_payload\n   */\n  eventPayload:\n    | {\n        oneofKind: 'subscriberOffer';\n        /**\n         * SubscriberOffer sends the SDP offer for establishing the\n         * subscriber PeerConnection.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.SubscriberOffer subscriber_offer = 1;\n         */\n        subscriberOffer: SubscriberOffer;\n      }\n    | {\n        oneofKind: 'publisherAnswer';\n        /**\n         * PublisherAnswer sends the SDP answer to the offer sent by\n         * the client for establishing the Publisher PeerConnection.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.PublisherAnswer publisher_answer = 2;\n         */\n        publisherAnswer: PublisherAnswer;\n      }\n    | {\n        oneofKind: 'connectionQualityChanged';\n        /**\n         * ConnectionQualityChanged is sent to inform the connection\n         * quality of the participants in the call. It does not have\n         * to contain the full list of call participants in it.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed = 3;\n         */\n        connectionQualityChanged: ConnectionQualityChanged;\n      }\n    | {\n        oneofKind: 'audioLevelChanged';\n        /**\n         * AudioLevelChanged is sent for change in audio levels of\n         * the participants.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.AudioLevelChanged audio_level_changed = 4;\n         */\n        audioLevelChanged: AudioLevelChanged;\n      }\n    | {\n        oneofKind: 'iceTrickle';\n        /**\n         * ICETrickle contains the ICE candidate required to establish\n         * the ICE transport: part of establishing the PeerConnection\n         * and also for ICE restarts.\n         *\n         * @generated from protobuf field: stream.video.sfu.models.ICETrickle ice_trickle = 5;\n         */\n        iceTrickle: ICETrickle$;\n      }\n    | {\n        oneofKind: 'changePublishQuality';\n        /**\n         * ChangePublishQuality advises the publisher to switch on/off\n         * various qualities of their video stream based on the subscription.\n         * This is done to save the bandwidth and the CPU of the publisher.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ChangePublishQuality change_publish_quality = 6;\n         */\n        changePublishQuality: ChangePublishQuality;\n      }\n    | {\n        oneofKind: 'participantJoined';\n        /**\n         * ParticipantJoined notifies the client that a new participant\n         * has joined the call. This is not sent for anonymous users.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ParticipantJoined participant_joined = 10;\n         */\n        participantJoined: ParticipantJoined;\n      }\n    | {\n        oneofKind: 'participantLeft';\n        /**\n         * ParticipantLeft notifies the client that a call participant\n         * has left the call. This is not sent for anonymous users.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ParticipantLeft participant_left = 11;\n         */\n        participantLeft: ParticipantLeft;\n      }\n    | {\n        oneofKind: 'dominantSpeakerChanged';\n        /**\n         * DominantSpeakerChanged notifies the client about the current\n         * dominant speaker. This is required for certain use cases like\n         * the spotlight view.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed = 12;\n         */\n        dominantSpeakerChanged: DominantSpeakerChanged;\n      }\n    | {\n        oneofKind: 'joinResponse';\n        /**\n         * JoinResponse acknowledges a participant successfully joining\n         * the call. This is sent in response to the JoinRequest.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.JoinResponse join_response = 13;\n         */\n        joinResponse: JoinResponse;\n      }\n    | {\n        oneofKind: 'healthCheckResponse';\n        /**\n         * HealthCheckResponse is sent in response to the HealthCheckRequest.\n         * It contains the participant count in the call.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.HealthCheckResponse health_check_response = 14;\n         */\n        healthCheckResponse: HealthCheckResponse;\n      }\n    | {\n        oneofKind: 'trackPublished';\n        /**\n         * TrackPublished is sent when a new track (like audio, video, screenshare)\n         * is published by a participant in the call. It is also sent on mute/unmute.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.TrackPublished track_published = 16;\n         */\n        trackPublished: TrackPublished;\n      }\n    | {\n        oneofKind: 'trackUnpublished';\n        /**\n         * TrackUnpublished is sent when a track (like audio, video, screenshare)\n         * is no longer published. It is sent on muting a track or when the participant\n         * is leaving the call.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.TrackUnpublished track_unpublished = 17;\n         */\n        trackUnpublished: TrackUnpublished;\n      }\n    | {\n        oneofKind: 'error';\n        /**\n         * Error is used to communicate any error related to the participant. The\n         * error code and the message explain what went wrong. Whether the participant\n         * can retry is also indicated.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.Error error = 18;\n         */\n        error: Error;\n      }\n    | {\n        oneofKind: 'callGrantsUpdated';\n        /**\n         * CallGrantsUpdated tells what tracks a participant is allowed to publish.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.CallGrantsUpdated call_grants_updated = 19;\n         */\n        callGrantsUpdated: CallGrantsUpdated;\n      }\n    | {\n        oneofKind: 'goAway';\n        /**\n         * GoAway tells the client to migrate away from the SFU it is connected to.\n         * The reason field indicates why this message was sent.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.GoAway go_away = 20;\n         */\n        goAway: GoAway;\n      }\n    | {\n        oneofKind: 'iceRestart';\n        /**\n         * ICERestart tells the client to perform ICE restart.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ICERestart ice_restart = 21;\n         */\n        iceRestart: ICERestart;\n      }\n    | {\n        oneofKind: 'pinsUpdated';\n        /**\n         * PinsChanged is sent the list of pins in the call changes. This event contains the entire list of pins.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.PinsChanged pins_updated = 22;\n         */\n        pinsUpdated: PinsChanged;\n      }\n    | {\n        oneofKind: 'callEnded';\n        /**\n         * CallEnded is sent by the SFU to the client to signal that the call has ended.\n         * The reason may specify why the call has ended.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.CallEnded call_ended = 23;\n         */\n        callEnded: CallEnded;\n      }\n    | {\n        oneofKind: 'participantUpdated';\n        /**\n         * ParticipantUpdated is sent when user data is updated\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ParticipantUpdated participant_updated = 24;\n         */\n        participantUpdated: ParticipantUpdated;\n      }\n    | {\n        oneofKind: 'participantMigrationComplete';\n        /**\n         * ParticipantMigrationComplete is sent when the participant migration is complete\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ParticipantMigrationComplete participant_migration_complete = 25;\n         */\n        participantMigrationComplete: ParticipantMigrationComplete;\n      }\n    | {\n        oneofKind: 'changePublishOptions';\n        /**\n         * ChangePublishOptions is sent to signal the change in publish options such as a new codec or simulcast layers\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ChangePublishOptions change_publish_options = 27;\n         */\n        changePublishOptions: ChangePublishOptions;\n      }\n    | {\n        oneofKind: undefined;\n      };\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.ChangePublishOptions\n */\nexport interface ChangePublishOptions {\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.PublishOption publish_options = 1;\n   */\n  publishOptions: PublishOption[];\n  /**\n   * @generated from protobuf field: string reason = 2;\n   */\n  reason: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.ChangePublishOptionsComplete\n */\nexport interface ChangePublishOptionsComplete {}\n/**\n * @generated from protobuf message stream.video.sfu.event.ParticipantMigrationComplete\n */\nexport interface ParticipantMigrationComplete {}\n/**\n * @generated from protobuf message stream.video.sfu.event.PinsChanged\n */\nexport interface PinsChanged {\n  /**\n   * the list of pins in the call.\n   * Pins are ordered in descending order (most important first).\n   *\n   * @generated from protobuf field: repeated stream.video.sfu.models.Pin pins = 1;\n   */\n  pins: Pin[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.Error\n */\nexport interface Error {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error$;\n  /**\n   * returns the reconnect strategy to be used by the client\n   *\n   * @generated from protobuf field: stream.video.sfu.models.WebsocketReconnectStrategy reconnect_strategy = 5;\n   */\n  reconnectStrategy: WebsocketReconnectStrategy;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.ICETrickle\n */\nexport interface ICETrickle {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;\n   */\n  peerType: PeerType;\n  /**\n   * @generated from protobuf field: string ice_candidate = 2;\n   */\n  iceCandidate: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.ICERestart\n */\nexport interface ICERestart {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;\n   */\n  peerType: PeerType;\n}\n/**\n * SfuRequest is a message that is sent from the client to the SFU.\n *\n * @generated from protobuf message stream.video.sfu.event.SfuRequest\n */\nexport interface SfuRequest {\n  /**\n   * @generated from protobuf oneof: request_payload\n   */\n  requestPayload:\n    | {\n        oneofKind: 'joinRequest';\n        /**\n         * @generated from protobuf field: stream.video.sfu.event.JoinRequest join_request = 1;\n         */\n        joinRequest: JoinRequest;\n      }\n    | {\n        oneofKind: 'healthCheckRequest';\n        /**\n         * @generated from protobuf field: stream.video.sfu.event.HealthCheckRequest health_check_request = 2;\n         */\n        healthCheckRequest: HealthCheckRequest;\n      }\n    | {\n        oneofKind: 'leaveCallRequest';\n        /**\n         * @generated from protobuf field: stream.video.sfu.event.LeaveCallRequest leave_call_request = 3;\n         */\n        leaveCallRequest: LeaveCallRequest;\n      }\n    | {\n        oneofKind: undefined;\n      };\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.LeaveCallRequest\n */\nexport interface LeaveCallRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: string reason = 2;\n   */\n  reason: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.HealthCheckRequest\n */\nexport interface HealthCheckRequest {}\n/**\n * @generated from protobuf message stream.video.sfu.event.HealthCheckResponse\n */\nexport interface HealthCheckResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ParticipantCount participant_count = 1;\n   */\n  participantCount?: ParticipantCount;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.TrackPublished\n */\nexport interface TrackPublished {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType type = 3;\n   */\n  type: TrackType;\n  /**\n   * Participant information here is included as an optimisation\n   * for large calls where broadcasting on every participant join\n   * is expensive. You should **NOT** assume that this will always\n   * be available though you can use it to update the participant\n   * list when it is there.\n   *\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 4;\n   */\n  participant?: Participant;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.TrackUnpublished\n */\nexport interface TrackUnpublished {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType type = 3;\n   */\n  type: TrackType;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackUnpublishReason cause = 4;\n   */\n  cause: TrackUnpublishReason;\n  /**\n   * Participant information here is included as an optimisation\n   * for large calls where broadcasting on every participant join\n   * is expensive. You should **NOT** assume that this will always\n   * be available though you can use it to update the participant\n   * list when it is there.\n   *\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 5;\n   */\n  participant?: Participant;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.JoinRequest\n */\nexport interface JoinRequest {\n  /**\n   * @generated from protobuf field: string token = 1;\n   */\n  token: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * dumb SDP that allow us to extract subscriber's decode codecs\n   *\n   * @generated from protobuf field: string subscriber_sdp = 3;\n   */\n  subscriberSdp: string;\n  /**\n   * @generated from protobuf field: string publisher_sdp = 8;\n   */\n  publisherSdp: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ClientDetails client_details = 4;\n   */\n  clientDetails?: ClientDetails;\n  /**\n   * Deprecated: use ReconnectDetails instead\n   *\n   * @deprecated\n   * @generated from protobuf field: stream.video.sfu.event.Migration migration = 5 [deprecated = true];\n   */\n  migration?: Migration;\n  /**\n   * Fast reconnect flag explicitly indicates that if the participant session\n   * and the associated state is still present in the SFU, the client is ready\n   * to restore the PeerConnection with an ICE restart. If the SFU replies with\n   * \"reconnected: true\" in its JoinResponse, then it is safe to perform an ICE\n   * restart or else the existing PeerConnections must be cleaned up.\n   *\n   * For the SFU, fast_reconnect:false indicates that even if it has the state\n   * cached, the client state is not in sync and hence it must be cleaned up before\n   * proceeding further.\n   *\n   * @deprecated\n   * @generated from protobuf field: bool fast_reconnect = 6 [deprecated = true];\n   */\n  fastReconnect: boolean;\n  /**\n   * @generated from protobuf field: stream.video.sfu.event.ReconnectDetails reconnect_details = 7;\n   */\n  reconnectDetails?: ReconnectDetails;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.PublishOption preferred_publish_options = 9;\n   */\n  preferredPublishOptions: PublishOption[];\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.SubscribeOption preferred_subscribe_options = 10;\n   */\n  preferredSubscribeOptions: SubscribeOption[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.ReconnectDetails\n */\nexport interface ReconnectDetails {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.WebsocketReconnectStrategy strategy = 1;\n   */\n  strategy: WebsocketReconnectStrategy;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.TrackInfo announced_tracks = 3;\n   */\n  announcedTracks: TrackInfo[];\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions = 4;\n   */\n  subscriptions: TrackSubscriptionDetails[];\n  /**\n   * @generated from protobuf field: uint32 reconnect_attempt = 5;\n   */\n  reconnectAttempt: number;\n  /**\n   * @generated from protobuf field: string from_sfu_id = 6;\n   */\n  fromSfuId: string;\n  /**\n   * only set in case of rejoin\n   *\n   * @generated from protobuf field: string previous_session_id = 7;\n   */\n  previousSessionId: string;\n  /**\n   * the reconnect reason\n   *\n   * @generated from protobuf field: string reason = 8;\n   */\n  reason: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.Migration\n */\nexport interface Migration {\n  /**\n   * @generated from protobuf field: string from_sfu_id = 1;\n   */\n  fromSfuId: string;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.TrackInfo announced_tracks = 2;\n   */\n  announcedTracks: TrackInfo[];\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions = 3;\n   */\n  subscriptions: TrackSubscriptionDetails[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.JoinResponse\n */\nexport interface JoinResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.CallState call_state = 1;\n   */\n  callState?: CallState;\n  /**\n   * @generated from protobuf field: bool reconnected = 2;\n   */\n  reconnected: boolean;\n  /**\n   * @generated from protobuf field: int32 fast_reconnect_deadline_seconds = 3;\n   */\n  fastReconnectDeadlineSeconds: number;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.PublishOption publish_options = 4;\n   */\n  publishOptions: PublishOption[];\n}\n/**\n * ParticipantJoined is fired when a user joins a call\n *\n * @generated from protobuf message stream.video.sfu.event.ParticipantJoined\n */\nexport interface ParticipantJoined {\n  /**\n   * @generated from protobuf field: string call_cid = 1;\n   */\n  callCid: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 2;\n   */\n  participant?: Participant;\n}\n/**\n * ParticipantJoined is fired when a user leaves a call\n *\n * @generated from protobuf message stream.video.sfu.event.ParticipantLeft\n */\nexport interface ParticipantLeft {\n  /**\n   * @generated from protobuf field: string call_cid = 1;\n   */\n  callCid: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 2;\n   */\n  participant?: Participant;\n}\n/**\n * ParticipantUpdated is fired when user data is updated\n *\n * @generated from protobuf message stream.video.sfu.event.ParticipantUpdated\n */\nexport interface ParticipantUpdated {\n  /**\n   * @generated from protobuf field: string call_cid = 1;\n   */\n  callCid: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 2;\n   */\n  participant?: Participant;\n}\n/**\n * SubscriberOffer is sent when the SFU adds tracks to a subscription\n *\n * @generated from protobuf message stream.video.sfu.event.SubscriberOffer\n */\nexport interface SubscriberOffer {\n  /**\n   * @generated from protobuf field: bool ice_restart = 1;\n   */\n  iceRestart: boolean;\n  /**\n   * @generated from protobuf field: string sdp = 2;\n   */\n  sdp: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.PublisherAnswer\n */\nexport interface PublisherAnswer {\n  /**\n   * @generated from protobuf field: string sdp = 1;\n   */\n  sdp: string;\n}\n/**\n * ConnectionQuality is sent to inform about connection quality changes\n * eg. thierry's connection is not good -> render a red icon Zoom style\n *\n * @generated from protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */\nexport interface ConnectionQualityChanged {\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates = 1;\n   */\n  connectionQualityUpdates: ConnectionQualityInfo[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */\nexport interface ConnectionQualityInfo {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ConnectionQuality connection_quality = 3;\n   */\n  connectionQuality: ConnectionQuality;\n}\n/**\n * DominantSpeakerChanged is sent by the SFU to notify when there is a new dominant speaker in the call\n *\n * @generated from protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */\nexport interface DominantSpeakerChanged {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.AudioLevel\n */\nexport interface AudioLevel {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * 0.0 means complete silence, 1.0 loudest\n   *\n   * @generated from protobuf field: float level = 3;\n   */\n  level: number;\n  /**\n   * @generated from protobuf field: bool is_speaking = 4;\n   */\n  isSpeaking: boolean;\n}\n/**\n * AudioLevelChanged is sent by the SFU to notify about audio levels by user\n *\n * @generated from protobuf message stream.video.sfu.event.AudioLevelChanged\n */\nexport interface AudioLevelChanged {\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.AudioLevel audio_levels = 1;\n   */\n  audioLevels: AudioLevel[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.AudioSender\n */\nexport interface AudioSender {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Codec codec = 2;\n   */\n  codec?: Codec;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 3;\n   */\n  trackType: TrackType;\n  /**\n   * @generated from protobuf field: int32 publish_option_id = 4;\n   */\n  publishOptionId: number;\n}\n/**\n * VideoLayerSetting is used to specify various parameters of a particular encoding in simulcast.\n * The parameters are specified here - https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpEncodingParameters\n * SDKs use these parameters sent from the server to dynamically adjust these parameters to save CPU, bandwidth\n *\n * @generated from protobuf message stream.video.sfu.event.VideoLayerSetting\n */\nexport interface VideoLayerSetting {\n  /**\n   * @generated from protobuf field: string name = 1;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: bool active = 2;\n   */\n  active: boolean;\n  /**\n   * @generated from protobuf field: int32 max_bitrate = 3;\n   */\n  maxBitrate: number;\n  /**\n   * @generated from protobuf field: float scale_resolution_down_by = 4;\n   */\n  scaleResolutionDownBy: number;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Codec codec = 6;\n   */\n  codec?: Codec;\n  /**\n   * @generated from protobuf field: uint32 max_framerate = 7;\n   */\n  maxFramerate: number;\n  /**\n   * @generated from protobuf field: string scalability_mode = 8;\n   */\n  scalabilityMode: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.VideoSender\n */\nexport interface VideoSender {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Codec codec = 2;\n   */\n  codec?: Codec;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.VideoLayerSetting layers = 3;\n   */\n  layers: VideoLayerSetting[];\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 4;\n   */\n  trackType: TrackType;\n  /**\n   * @generated from protobuf field: int32 publish_option_id = 5;\n   */\n  publishOptionId: number;\n}\n/**\n * sent to users when they need to change the quality of their video\n *\n * @generated from protobuf message stream.video.sfu.event.ChangePublishQuality\n */\nexport interface ChangePublishQuality {\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.AudioSender audio_senders = 1;\n   */\n  audioSenders: AudioSender[];\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.VideoSender video_senders = 2;\n   */\n  videoSenders: VideoSender[];\n}\n/**\n * CallGrants is sent to users when there is a change in the call permissions\n * to publish audio, video or share the screen for a user or a role. This is\n * idempotent and can be sent at any time. Only the current_grants in the latest\n * message should be considered. In other words, this is not dependent on any\n * other message (including previous call_grants_updated message)\n *\n * When this message is received, the client (say, React component) should mute\n * the tracks which are not allowed anymore. For example, if the message has\n * grants {audio:true, video:false} while the user is publishing video, then the\n * client component should mute the video track and gray out the video button.\n * This way, the user will not be able to publish video until the permissions\n * are granted again. Also, muting the track on the client side will prevent\n * the SFU from receiving the video track and will save bandwidth.\n *\n * In simple words, this is exactly the same as muting a track on the client.\n * Here, instead of the user instructing the client, SFU would be doing it.\n *\n * @generated from protobuf message stream.video.sfu.event.CallGrantsUpdated\n */\nexport interface CallGrantsUpdated {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.CallGrants current_grants = 1;\n   */\n  currentGrants?: CallGrants;\n  /**\n   * @generated from protobuf field: string message = 2;\n   */\n  message: string;\n}\n/**\n * Go away is sent by the SFU to the client to signal to migrate away from the SFU.\n * The evict reason may specify why the user is being evicted.\n *\n * @generated from protobuf message stream.video.sfu.event.GoAway\n */\nexport interface GoAway {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.GoAwayReason reason = 1;\n   */\n  reason: GoAwayReason;\n}\n/**\n * CallEnded is sent by the SFU to the client to signal that the call has ended.\n * The reason may specify why the call has ended.\n *\n * @generated from protobuf message stream.video.sfu.event.CallEnded\n */\nexport interface CallEnded {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.CallEndedReason reason = 1;\n   */\n  reason: CallEndedReason;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuEvent$Type extends MessageType<SfuEvent> {\n  constructor() {\n    super('stream.video.sfu.event.SfuEvent', [\n      {\n        no: 1,\n        name: 'subscriber_offer',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => SubscriberOffer,\n      },\n      {\n        no: 2,\n        name: 'publisher_answer',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => PublisherAnswer,\n      },\n      {\n        no: 3,\n        name: 'connection_quality_changed',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ConnectionQualityChanged,\n      },\n      {\n        no: 4,\n        name: 'audio_level_changed',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => AudioLevelChanged,\n      },\n      {\n        no: 5,\n        name: 'ice_trickle',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ICETrickle$,\n      },\n      {\n        no: 6,\n        name: 'change_publish_quality',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ChangePublishQuality,\n      },\n      {\n        no: 10,\n        name: 'participant_joined',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ParticipantJoined,\n      },\n      {\n        no: 11,\n        name: 'participant_left',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ParticipantLeft,\n      },\n      {\n        no: 12,\n        name: 'dominant_speaker_changed',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => DominantSpeakerChanged,\n      },\n      {\n        no: 13,\n        name: 'join_response',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => JoinResponse,\n      },\n      {\n        no: 14,\n        name: 'health_check_response',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => HealthCheckResponse,\n      },\n      {\n        no: 16,\n        name: 'track_published',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => TrackPublished,\n      },\n      {\n        no: 17,\n        name: 'track_unpublished',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => TrackUnpublished,\n      },\n      {\n        no: 18,\n        name: 'error',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => Error,\n      },\n      {\n        no: 19,\n        name: 'call_grants_updated',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => CallGrantsUpdated,\n      },\n      {\n        no: 20,\n        name: 'go_away',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => GoAway,\n      },\n      {\n        no: 21,\n        name: 'ice_restart',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ICERestart,\n      },\n      {\n        no: 22,\n        name: 'pins_updated',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => PinsChanged,\n      },\n      {\n        no: 23,\n        name: 'call_ended',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => CallEnded,\n      },\n      {\n        no: 24,\n        name: 'participant_updated',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ParticipantUpdated,\n      },\n      {\n        no: 25,\n        name: 'participant_migration_complete',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ParticipantMigrationComplete,\n      },\n      {\n        no: 27,\n        name: 'change_publish_options',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ChangePublishOptions,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent\n */\nexport const SfuEvent = new SfuEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishOptions$Type extends MessageType<ChangePublishOptions> {\n  constructor() {\n    super('stream.video.sfu.event.ChangePublishOptions', [\n      {\n        no: 1,\n        name: 'publish_options',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => PublishOption,\n      },\n      { no: 2, name: 'reason', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishOptions\n */\nexport const ChangePublishOptions = new ChangePublishOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishOptionsComplete$Type extends MessageType<ChangePublishOptionsComplete> {\n  constructor() {\n    super('stream.video.sfu.event.ChangePublishOptionsComplete', []);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishOptionsComplete\n */\nexport const ChangePublishOptionsComplete =\n  new ChangePublishOptionsComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantMigrationComplete$Type extends MessageType<ParticipantMigrationComplete> {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantMigrationComplete', []);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantMigrationComplete\n */\nexport const ParticipantMigrationComplete =\n  new ParticipantMigrationComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PinsChanged$Type extends MessageType<PinsChanged> {\n  constructor() {\n    super('stream.video.sfu.event.PinsChanged', [\n      {\n        no: 1,\n        name: 'pins',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => Pin,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PinsChanged\n */\nexport const PinsChanged = new PinsChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends MessageType<Error> {\n  constructor() {\n    super('stream.video.sfu.event.Error', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error$ },\n      {\n        no: 5,\n        name: 'reconnect_strategy',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.WebsocketReconnectStrategy',\n          WebsocketReconnectStrategy,\n          'WEBSOCKET_RECONNECT_STRATEGY_',\n        ],\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Error\n */\nexport const Error = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends MessageType<ICETrickle> {\n  constructor() {\n    super('stream.video.sfu.event.ICETrickle', [\n      {\n        no: 1,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n      {\n        no: 2,\n        name: 'ice_candidate',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICETrickle\n */\nexport const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestart$Type extends MessageType<ICERestart> {\n  constructor() {\n    super('stream.video.sfu.event.ICERestart', [\n      {\n        no: 1,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICERestart\n */\nexport const ICERestart = new ICERestart$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuRequest$Type extends MessageType<SfuRequest> {\n  constructor() {\n    super('stream.video.sfu.event.SfuRequest', [\n      {\n        no: 1,\n        name: 'join_request',\n        kind: 'message',\n        oneof: 'requestPayload',\n        T: () => JoinRequest,\n      },\n      {\n        no: 2,\n        name: 'health_check_request',\n        kind: 'message',\n        oneof: 'requestPayload',\n        T: () => HealthCheckRequest,\n      },\n      {\n        no: 3,\n        name: 'leave_call_request',\n        kind: 'message',\n        oneof: 'requestPayload',\n        T: () => LeaveCallRequest,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuRequest\n */\nexport const SfuRequest = new SfuRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass LeaveCallRequest$Type extends MessageType<LeaveCallRequest> {\n  constructor() {\n    super('stream.video.sfu.event.LeaveCallRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'reason', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.LeaveCallRequest\n */\nexport const LeaveCallRequest = new LeaveCallRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckRequest$Type extends MessageType<HealthCheckRequest> {\n  constructor() {\n    super('stream.video.sfu.event.HealthCheckRequest', []);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckRequest\n */\nexport const HealthCheckRequest = new HealthCheckRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckResponse$Type extends MessageType<HealthCheckResponse> {\n  constructor() {\n    super('stream.video.sfu.event.HealthCheckResponse', [\n      {\n        no: 1,\n        name: 'participant_count',\n        kind: 'message',\n        T: () => ParticipantCount,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckResponse\n */\nexport const HealthCheckResponse = new HealthCheckResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackPublished$Type extends MessageType<TrackPublished> {\n  constructor() {\n    super('stream.video.sfu.event.TrackPublished', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      { no: 4, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackPublished\n */\nexport const TrackPublished = new TrackPublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackUnpublished$Type extends MessageType<TrackUnpublished> {\n  constructor() {\n    super('stream.video.sfu.event.TrackUnpublished', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      {\n        no: 4,\n        name: 'cause',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackUnpublishReason',\n          TrackUnpublishReason,\n          'TRACK_UNPUBLISH_REASON_',\n        ],\n      },\n      { no: 5, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackUnpublished\n */\nexport const TrackUnpublished = new TrackUnpublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinRequest$Type extends MessageType<JoinRequest> {\n  constructor() {\n    super('stream.video.sfu.event.JoinRequest', [\n      { no: 1, name: 'token', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'subscriber_sdp',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 8,\n        name: 'publisher_sdp',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 4,\n        name: 'client_details',\n        kind: 'message',\n        T: () => ClientDetails,\n      },\n      { no: 5, name: 'migration', kind: 'message', T: () => Migration },\n      {\n        no: 6,\n        name: 'fast_reconnect',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n      {\n        no: 7,\n        name: 'reconnect_details',\n        kind: 'message',\n        T: () => ReconnectDetails,\n      },\n      {\n        no: 9,\n        name: 'preferred_publish_options',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => PublishOption,\n      },\n      {\n        no: 10,\n        name: 'preferred_subscribe_options',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => SubscribeOption,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinRequest\n */\nexport const JoinRequest = new JoinRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ReconnectDetails$Type extends MessageType<ReconnectDetails> {\n  constructor() {\n    super('stream.video.sfu.event.ReconnectDetails', [\n      {\n        no: 1,\n        name: 'strategy',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.WebsocketReconnectStrategy',\n          WebsocketReconnectStrategy,\n          'WEBSOCKET_RECONNECT_STRATEGY_',\n        ],\n      },\n      {\n        no: 3,\n        name: 'announced_tracks',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackInfo,\n      },\n      {\n        no: 4,\n        name: 'subscriptions',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackSubscriptionDetails,\n      },\n      {\n        no: 5,\n        name: 'reconnect_attempt',\n        kind: 'scalar',\n        T: 13 /*ScalarType.UINT32*/,\n      },\n      {\n        no: 6,\n        name: 'from_sfu_id',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 7,\n        name: 'previous_session_id',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 8, name: 'reason', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ReconnectDetails\n */\nexport const ReconnectDetails = new ReconnectDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Migration$Type extends MessageType<Migration> {\n  constructor() {\n    super('stream.video.sfu.event.Migration', [\n      {\n        no: 1,\n        name: 'from_sfu_id',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 2,\n        name: 'announced_tracks',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackInfo,\n      },\n      {\n        no: 3,\n        name: 'subscriptions',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackSubscriptionDetails,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Migration\n */\nexport const Migration = new Migration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinResponse$Type extends MessageType<JoinResponse> {\n  constructor() {\n    super('stream.video.sfu.event.JoinResponse', [\n      { no: 1, name: 'call_state', kind: 'message', T: () => CallState },\n      { no: 2, name: 'reconnected', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      {\n        no: 3,\n        name: 'fast_reconnect_deadline_seconds',\n        kind: 'scalar',\n        T: 5 /*ScalarType.INT32*/,\n      },\n      {\n        no: 4,\n        name: 'publish_options',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => PublishOption,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinResponse\n */\nexport const JoinResponse = new JoinResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantJoined$Type extends MessageType<ParticipantJoined> {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantJoined', [\n      { no: 1, name: 'call_cid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined\n */\nexport const ParticipantJoined = new ParticipantJoined$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantLeft$Type extends MessageType<ParticipantLeft> {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantLeft', [\n      { no: 1, name: 'call_cid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft\n */\nexport const ParticipantLeft = new ParticipantLeft$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantUpdated$Type extends MessageType<ParticipantUpdated> {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantUpdated', [\n      { no: 1, name: 'call_cid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantUpdated\n */\nexport const ParticipantUpdated = new ParticipantUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscriberOffer$Type extends MessageType<SubscriberOffer> {\n  constructor() {\n    super('stream.video.sfu.event.SubscriberOffer', [\n      { no: 1, name: 'ice_restart', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 2, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer\n */\nexport const SubscriberOffer = new SubscriberOffer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublisherAnswer$Type extends MessageType<PublisherAnswer> {\n  constructor() {\n    super('stream.video.sfu.event.PublisherAnswer', [\n      { no: 1, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PublisherAnswer\n */\nexport const PublisherAnswer = new PublisherAnswer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityChanged$Type extends MessageType<ConnectionQualityChanged> {\n  constructor() {\n    super('stream.video.sfu.event.ConnectionQualityChanged', [\n      {\n        no: 1,\n        name: 'connection_quality_updates',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => ConnectionQualityInfo,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */\nexport const ConnectionQualityChanged = new ConnectionQualityChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityInfo$Type extends MessageType<ConnectionQualityInfo> {\n  constructor() {\n    super('stream.video.sfu.event.ConnectionQualityInfo', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'connection_quality',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.ConnectionQuality',\n          ConnectionQuality,\n          'CONNECTION_QUALITY_',\n        ],\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */\nexport const ConnectionQualityInfo = new ConnectionQualityInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DominantSpeakerChanged$Type extends MessageType<DominantSpeakerChanged> {\n  constructor() {\n    super('stream.video.sfu.event.DominantSpeakerChanged', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */\nexport const DominantSpeakerChanged = new DominantSpeakerChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevel$Type extends MessageType<AudioLevel> {\n  constructor() {\n    super('stream.video.sfu.event.AudioLevel', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'level', kind: 'scalar', T: 2 /*ScalarType.FLOAT*/ },\n      { no: 4, name: 'is_speaking', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel\n */\nexport const AudioLevel = new AudioLevel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevelChanged$Type extends MessageType<AudioLevelChanged> {\n  constructor() {\n    super('stream.video.sfu.event.AudioLevelChanged', [\n      {\n        no: 1,\n        name: 'audio_levels',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => AudioLevel,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged\n */\nexport const AudioLevelChanged = new AudioLevelChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioSender$Type extends MessageType<AudioSender> {\n  constructor() {\n    super('stream.video.sfu.event.AudioSender', [\n      { no: 2, name: 'codec', kind: 'message', T: () => Codec },\n      {\n        no: 3,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      {\n        no: 4,\n        name: 'publish_option_id',\n        kind: 'scalar',\n        T: 5 /*ScalarType.INT32*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender\n */\nexport const AudioSender = new AudioSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayerSetting$Type extends MessageType<VideoLayerSetting> {\n  constructor() {\n    super('stream.video.sfu.event.VideoLayerSetting', [\n      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'active', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 3, name: 'max_bitrate', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n      {\n        no: 4,\n        name: 'scale_resolution_down_by',\n        kind: 'scalar',\n        T: 2 /*ScalarType.FLOAT*/,\n      },\n      { no: 6, name: 'codec', kind: 'message', T: () => Codec },\n      {\n        no: 7,\n        name: 'max_framerate',\n        kind: 'scalar',\n        T: 13 /*ScalarType.UINT32*/,\n      },\n      {\n        no: 8,\n        name: 'scalability_mode',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting\n */\nexport const VideoLayerSetting = new VideoLayerSetting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoSender$Type extends MessageType<VideoSender> {\n  constructor() {\n    super('stream.video.sfu.event.VideoSender', [\n      { no: 2, name: 'codec', kind: 'message', T: () => Codec },\n      {\n        no: 3,\n        name: 'layers',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => VideoLayerSetting,\n      },\n      {\n        no: 4,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      {\n        no: 5,\n        name: 'publish_option_id',\n        kind: 'scalar',\n        T: 5 /*ScalarType.INT32*/,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender\n */\nexport const VideoSender = new VideoSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishQuality$Type extends MessageType<ChangePublishQuality> {\n  constructor() {\n    super('stream.video.sfu.event.ChangePublishQuality', [\n      {\n        no: 1,\n        name: 'audio_senders',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => AudioSender,\n      },\n      {\n        no: 2,\n        name: 'video_senders',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => VideoSender,\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality\n */\nexport const ChangePublishQuality = new ChangePublishQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrantsUpdated$Type extends MessageType<CallGrantsUpdated> {\n  constructor() {\n    super('stream.video.sfu.event.CallGrantsUpdated', [\n      { no: 1, name: 'current_grants', kind: 'message', T: () => CallGrants },\n      { no: 2, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallGrantsUpdated\n */\nexport const CallGrantsUpdated = new CallGrantsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GoAway$Type extends MessageType<GoAway> {\n  constructor() {\n    super('stream.video.sfu.event.GoAway', [\n      {\n        no: 1,\n        name: 'reason',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.GoAwayReason',\n          GoAwayReason,\n          'GO_AWAY_REASON_',\n        ],\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.GoAway\n */\nexport const GoAway = new GoAway$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallEnded$Type extends MessageType<CallEnded> {\n  constructor() {\n    super('stream.video.sfu.event.CallEnded', [\n      {\n        no: 1,\n        name: 'reason',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.CallEndedReason',\n          CallEndedReason,\n          'CALL_ENDED_REASON_',\n        ],\n      },\n    ]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallEnded\n */\nexport const CallEnded = new CallEnded$Type();\n","import type {\n  Participant,\n  VideoDimension,\n} from './gen/video/sfu/models/models';\nimport type {\n  JoinCallRequest,\n  MemberResponse,\n  OwnCapability,\n  ReactionResponse,\n} from './gen/coordinator';\nimport type { StreamClient } from './coordinator/connection/client';\nimport type { Comparator } from './sorting';\nimport type { StreamVideoWriteableStateStore } from './store';\nimport { AxiosError } from 'axios';\n\nexport type StreamReaction = Pick<\n  ReactionResponse,\n  'type' | 'emoji_code' | 'custom'\n>;\n\nexport enum VisibilityState {\n  UNKNOWN = 'UNKNOWN',\n  VISIBLE = 'VISIBLE',\n  INVISIBLE = 'INVISIBLE',\n}\n\nexport enum DebounceType {\n  IMMEDIATE = 20,\n  FAST = 100,\n  MEDIUM = 600,\n  SLOW = 1200,\n}\n\nexport interface StreamVideoParticipant extends Participant {\n  /**\n   * The participant's audio stream, if they are publishing audio and\n   * we have subscribed to it.\n   */\n  audioStream?: MediaStream;\n\n  /**\n   * The participant's video stream, if they are sharing their video,\n   * and we are subscribed to it.\n   */\n  videoStream?: MediaStream;\n\n  /**\n   * The participant's screen share stream, if they are sharing their screen,\n   * and we are subscribed to it.\n   */\n  screenShareStream?: MediaStream;\n\n  /**\n   * The participant's screen audio stream, if they are sharing their audio,\n   * and we are subscribed to it.\n   */\n  screenShareAudioStream?: MediaStream;\n\n  /**\n   * The preferred video dimensions for this participant.\n   * Set it to `undefined` to unsubscribe from this participant's video.\n   */\n  videoDimension?: VideoDimension;\n\n  /**\n   * The preferred screen share dimensions for this participant.\n   * Set it to `undefined` to unsubscribe from this participant's screen share.\n   */\n  screenShareDimension?: VideoDimension;\n\n  /**\n   * True if the participant is the local participant.\n   */\n  isLocalParticipant?: boolean;\n\n  /**\n   * The pin state of the participant.\n   */\n  pin?: ParticipantPin;\n\n  /**\n   * The last reaction this user has sent to this call.\n   * Integrators can batch/collect past reactions and show them to the UI.\n   */\n  reaction?: StreamReaction;\n\n  /**\n   * The visibility state of the participant's tracks within a defined viewport.\n   */\n  viewportVisibilityState?: Record<VideoTrackType, VisibilityState>;\n\n  /**\n   * The volume of the participant's audio stream (from 0 to 1).\n   * Set it to `undefined` to use the default volume.\n   *\n   * Note: this value is not applicable in React Native.\n   */\n  audioVolume?: number;\n}\n\nexport type VideoTrackType = 'videoTrack' | 'screenShareTrack';\nexport type AudioTrackType = 'audioTrack' | 'screenShareAudioTrack';\nexport type TrackMuteType =\n  | 'audio'\n  | 'video'\n  | 'screenshare'\n  | 'screenshare_audio';\n\n/**\n * Represents a participant's pin state.\n */\nexport type ParticipantPin = {\n  /**\n   * Set to true if the participant is pinned by the local user.\n   * False if the participant is pinned server-side, by the call moderator.\n   */\n  isLocalPin: boolean;\n\n  /**\n   * Timestamp when the participant is pinned.\n   */\n  pinnedAt: number;\n};\n\nexport type ClosedCaptionsSettings = {\n  /**\n   * The time in milliseconds to keep a closed caption in the state (visible).\n   * Default is 2700 ms.\n   */\n  visibilityDurationMs?: number;\n  /**\n   * The maximum number of closed captions to keep in the state (visible).\n   * When the maximum number is reached, the oldest closed caption is removed.\n   *\n   * Default is 2.\n   */\n  maxVisibleCaptions?: number;\n};\n\n/**\n * A partial representation of the StreamVideoParticipant.\n */\nexport type StreamVideoParticipantPatch = Partial<StreamVideoParticipant>;\n\n/**\n * A collection of {@link StreamVideoParticipantPatch} organized by sessionId.\n */\nexport type StreamVideoParticipantPatches = {\n  [sessionId: string]: StreamVideoParticipantPatch;\n};\n\nexport type SubscriptionChange = {\n  /**\n   * The video dimension to request.\n   * Set it to `undefined` in case you want to unsubscribe.\n   */\n  dimension: VideoDimension | undefined;\n};\n\nexport type SubscriptionChanges = {\n  [sessionId: string]: SubscriptionChange;\n};\n\n/**\n * A preferred codec to use when publishing a video or audio track.\n * @internal\n */\nexport type PreferredCodec = 'vp8' | 'h264' | 'vp9' | 'av1';\n\n/**\n * A collection of track publication options.\n * @internal\n */\nexport type ClientPublishOptions = {\n  /**\n   * The preferred codec to use when publishing the video stream.\n   */\n  preferredCodec?: PreferredCodec;\n  /**\n   * The fmtp line for the video codec.\n   */\n  fmtpLine?: string;\n  /**\n   * The preferred bitrate to use when publishing the video stream.\n   */\n  preferredBitrate?: number;\n  /**\n   * The maximum number of simulcast layers to use when publishing the video stream.\n   */\n  maxSimulcastLayers?: number;\n  /**\n   * The preferred subscription (incoming video stream) codec.\n   */\n  subscriberCodec?: PreferredCodec;\n  /**\n   * The fmtp line for the subscriber codec.\n   */\n  subscriberFmtpLine?: string;\n  /**\n   * Screen share settings.\n   */\n  screenShareSettings?: ScreenShareSettings;\n};\n\nexport type ScreenShareSettings = {\n  /**\n   * Limits the maximum framerate (in frames per second) of the screen share.\n   * Defaults to 30.\n   */\n  maxFramerate?: number;\n\n  /**\n   * Limits the maximum bitrate (in bits per second) of the screen share.\n   * Defaults to 3000000 (3Mbps).\n   */\n  maxBitrate?: number;\n};\n\nexport type CallLeaveOptions = {\n  /**\n   * If true, the caller will get a `call.rejected` event.\n   * Has an effect only if the call is in the `ringing` state.\n   */\n  reject?: boolean;\n\n  /**\n   * The reason for leaving the call.\n   * This will be sent to the backend and will be visible in the logs.\n   */\n  reason?: string;\n};\n\n/**\n * The options to pass to {@link Call} constructor.\n */\nexport type CallConstructor = {\n  /**\n   * The streamClient instance to use.\n   */\n  streamClient: StreamClient;\n\n  /**\n   * The Call type.\n   */\n  type: string;\n\n  /**\n   * The Call ID.\n   */\n  id: string;\n\n  /**\n   * An optional list of {@link MemberResponse} from the backend.\n   * If provided, the call will be initialized with the data from this object.\n   * This is useful when initializing a new \"pending call\" from an event.\n   */\n  members?: MemberResponse[];\n\n  /**\n   * An optional list of {@link OwnCapability} coming from the backed.\n   * If provided, the call will be initialized with the data from this object.\n   * This is useful when initializing a new \"pending call\" from an event.\n   */\n  ownCapabilities?: OwnCapability[];\n\n  /**\n   * Flags the call as a ringing call.\n   * @default false\n   */\n  ringing?: boolean;\n\n  /**\n   * Set to true if this call instance should receive updates from the backend.\n   *\n   * @default false.\n   */\n  watching?: boolean;\n\n  /**\n   * The default comparator to use when sorting participants.\n   */\n  sortParticipantsBy?: Comparator<StreamVideoParticipant>;\n\n  /**\n   * The state store of the client\n   */\n  clientStore: StreamVideoWriteableStateStore;\n};\n\n/**\n * The options to pass to {@link Call.join} method.\n */\nexport type JoinCallData = Omit<JoinCallRequest, 'location'>;\nexport { AxiosError };\n","// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\nimport type {\n  RpcOptions,\n  RpcTransport,\n  ServiceInfo,\n  UnaryCall,\n} from '@protobuf-ts/runtime-rpc';\nimport { stackIntercept } from '@protobuf-ts/runtime-rpc';\nimport type {\n  ICERestartRequest,\n  ICERestartResponse,\n  ICETrickleResponse,\n  SendAnswerRequest,\n  SendAnswerResponse,\n  SendStatsRequest,\n  SendStatsResponse,\n  SetPublisherRequest,\n  SetPublisherResponse,\n  StartNoiseCancellationRequest,\n  StartNoiseCancellationResponse,\n  StopNoiseCancellationRequest,\n  StopNoiseCancellationResponse,\n  UpdateMuteStatesRequest,\n  UpdateMuteStatesResponse,\n  UpdateSubscriptionsRequest,\n  UpdateSubscriptionsResponse,\n} from './signal';\nimport { SignalServer } from './signal';\nimport type { ICETrickle } from '../models/models';\n\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */\nexport interface ISignalServerClient {\n  /**\n   * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n   *\n   * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n   */\n  setPublisher(\n    input: SetPublisherRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SetPublisherRequest, SetPublisherResponse>;\n  /**\n   * answer is sent by the client to the SFU after receiving a subscriber_offer.\n   *\n   * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n   */\n  sendAnswer(\n    input: SendAnswerRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SendAnswerRequest, SendAnswerResponse>;\n  /**\n   * SendICECandidate sends an ICE candidate to the client\n   *\n   * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n   */\n  iceTrickle(\n    input: ICETrickle,\n    options?: RpcOptions,\n  ): UnaryCall<ICETrickle, ICETrickleResponse>;\n  /**\n   * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n   * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n   *\n   * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n   */\n  updateSubscriptions(\n    input: UpdateSubscriptionsRequest,\n    options?: RpcOptions,\n  ): UnaryCall<UpdateSubscriptionsRequest, UpdateSubscriptionsResponse>;\n  /**\n   * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n   */\n  updateMuteStates(\n    input: UpdateMuteStatesRequest,\n    options?: RpcOptions,\n  ): UnaryCall<UpdateMuteStatesRequest, UpdateMuteStatesResponse>;\n  /**\n   * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n   */\n  iceRestart(\n    input: ICERestartRequest,\n    options?: RpcOptions,\n  ): UnaryCall<ICERestartRequest, ICERestartResponse>;\n  /**\n   * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n   */\n  sendStats(\n    input: SendStatsRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SendStatsRequest, SendStatsResponse>;\n  /**\n   * @generated from protobuf rpc: StartNoiseCancellation(stream.video.sfu.signal.StartNoiseCancellationRequest) returns (stream.video.sfu.signal.StartNoiseCancellationResponse);\n   */\n  startNoiseCancellation(\n    input: StartNoiseCancellationRequest,\n    options?: RpcOptions,\n  ): UnaryCall<StartNoiseCancellationRequest, StartNoiseCancellationResponse>;\n  /**\n   * @generated from protobuf rpc: StopNoiseCancellation(stream.video.sfu.signal.StopNoiseCancellationRequest) returns (stream.video.sfu.signal.StopNoiseCancellationResponse);\n   */\n  stopNoiseCancellation(\n    input: StopNoiseCancellationRequest,\n    options?: RpcOptions,\n  ): UnaryCall<StopNoiseCancellationRequest, StopNoiseCancellationResponse>;\n}\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */\nexport class SignalServerClient implements ISignalServerClient, ServiceInfo {\n  typeName = SignalServer.typeName;\n  methods = SignalServer.methods;\n  options = SignalServer.options;\n  constructor(private readonly _transport: RpcTransport) {}\n  /**\n   * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n   *\n   * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n   */\n  setPublisher(\n    input: SetPublisherRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SetPublisherRequest, SetPublisherResponse> {\n    const method = this.methods[0],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<SetPublisherRequest, SetPublisherResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * answer is sent by the client to the SFU after receiving a subscriber_offer.\n   *\n   * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n   */\n  sendAnswer(\n    input: SendAnswerRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SendAnswerRequest, SendAnswerResponse> {\n    const method = this.methods[1],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<SendAnswerRequest, SendAnswerResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * SendICECandidate sends an ICE candidate to the client\n   *\n   * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n   */\n  iceTrickle(\n    input: ICETrickle,\n    options?: RpcOptions,\n  ): UnaryCall<ICETrickle, ICETrickleResponse> {\n    const method = this.methods[2],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<ICETrickle, ICETrickleResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n   * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n   *\n   * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n   */\n  updateSubscriptions(\n    input: UpdateSubscriptionsRequest,\n    options?: RpcOptions,\n  ): UnaryCall<UpdateSubscriptionsRequest, UpdateSubscriptionsResponse> {\n    const method = this.methods[3],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<\n      UpdateSubscriptionsRequest,\n      UpdateSubscriptionsResponse\n    >('unary', this._transport, method, opt, input);\n  }\n  /**\n   * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n   */\n  updateMuteStates(\n    input: UpdateMuteStatesRequest,\n    options?: RpcOptions,\n  ): UnaryCall<UpdateMuteStatesRequest, UpdateMuteStatesResponse> {\n    const method = this.methods[4],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<UpdateMuteStatesRequest, UpdateMuteStatesResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n   */\n  iceRestart(\n    input: ICERestartRequest,\n    options?: RpcOptions,\n  ): UnaryCall<ICERestartRequest, ICERestartResponse> {\n    const method = this.methods[5],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<ICERestartRequest, ICERestartResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n   */\n  sendStats(\n    input: SendStatsRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SendStatsRequest, SendStatsResponse> {\n    const method = this.methods[6],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<SendStatsRequest, SendStatsResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * @generated from protobuf rpc: StartNoiseCancellation(stream.video.sfu.signal.StartNoiseCancellationRequest) returns (stream.video.sfu.signal.StartNoiseCancellationResponse);\n   */\n  startNoiseCancellation(\n    input: StartNoiseCancellationRequest,\n    options?: RpcOptions,\n  ): UnaryCall<StartNoiseCancellationRequest, StartNoiseCancellationResponse> {\n    const method = this.methods[7],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<\n      StartNoiseCancellationRequest,\n      StartNoiseCancellationResponse\n    >('unary', this._transport, method, opt, input);\n  }\n  /**\n   * @generated from protobuf rpc: StopNoiseCancellation(stream.video.sfu.signal.StopNoiseCancellationRequest) returns (stream.video.sfu.signal.StopNoiseCancellationResponse);\n   */\n  stopNoiseCancellation(\n    input: StopNoiseCancellationRequest,\n    options?: RpcOptions,\n  ): UnaryCall<StopNoiseCancellationRequest, StopNoiseCancellationResponse> {\n    const method = this.methods[8],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<\n      StopNoiseCancellationRequest,\n      StopNoiseCancellationResponse\n    >('unary', this._transport, method, opt, input);\n  }\n}\n","import {\n  MethodInfo,\n  NextUnaryFn,\n  RpcInterceptor,\n  RpcOptions,\n  UnaryCall,\n} from '@protobuf-ts/runtime-rpc';\nimport {\n  TwirpFetchTransport,\n  TwirpOptions,\n} from '@protobuf-ts/twirp-transport';\nimport { SignalServerClient } from '../gen/video/sfu/signal_rpc/signal.client';\nimport { Logger, LogLevel } from '../coordinator/connection/types';\nimport type { Trace } from '../stats/rtc/types';\n\nconst defaultOptions: TwirpOptions = {\n  baseUrl: '',\n  sendJson: true,\n  timeout: 5 * 1000, // ms.\n  jsonOptions: {\n    ignoreUnknownFields: true,\n  },\n};\n\nexport const withHeaders = (\n  headers: Record<string, string>,\n): RpcInterceptor => {\n  return {\n    interceptUnary(\n      next: NextUnaryFn,\n      method: MethodInfo,\n      input: object,\n      options: RpcOptions,\n    ): UnaryCall {\n      options.meta = { ...options.meta, ...headers };\n      return next(method, input, options);\n    },\n  };\n};\n\nexport const withRequestLogger = (\n  logger: Logger,\n  level: LogLevel,\n): RpcInterceptor => {\n  return {\n    interceptUnary: (\n      next: NextUnaryFn,\n      method: MethodInfo,\n      input: object,\n      options: RpcOptions,\n    ): UnaryCall => {\n      let invocation: UnaryCall | undefined;\n      try {\n        invocation = next(method, input, options);\n      } finally {\n        logger(level, `Invoked SFU RPC method ${method.name}`, {\n          request: invocation?.request,\n          headers: invocation?.requestHeaders,\n          response: invocation?.response,\n        });\n      }\n      return invocation;\n    },\n  };\n};\n\nexport const withRequestTracer = (trace: Trace): RpcInterceptor => {\n  type RpcMethodNames = {\n    [K in keyof SignalServerClient as Capitalize<K>]: boolean;\n  };\n\n  const exclusions: Record<string, boolean | undefined> = {\n    SendStats: true,\n  } satisfies Partial<RpcMethodNames>;\n  return {\n    interceptUnary(\n      next: NextUnaryFn,\n      method: MethodInfo,\n      input: object,\n      options: RpcOptions,\n    ): UnaryCall {\n      if (exclusions[method.name as keyof RpcMethodNames]) {\n        return next(method, input, options);\n      }\n      try {\n        trace(method.name, input);\n        return next(method, input, options);\n      } catch (err) {\n        trace(`${method.name}OnFailure`, [input, err]);\n        throw err;\n      }\n    },\n  };\n};\n\n/**\n * Creates new SignalServerClient instance.\n *\n * @param options the twirp options.\n */\nexport const createSignalClient = (options?: TwirpOptions) => {\n  const transport = new TwirpFetchTransport({\n    ...defaultOptions,\n    ...options,\n  });\n\n  return new SignalServerClient(transport);\n};\n","import type { AxiosResponse } from 'axios';\nimport type { APIErrorResponse } from './types';\nimport type { ConnectionErrorEvent } from '../../gen/coordinator';\n\nexport const sleep = (m: number) => new Promise((r) => setTimeout(r, m));\n\nexport function isFunction<T>(value: Function | T): value is Function {\n  return (\n    value &&\n    (Object.prototype.toString.call(value) === '[object Function]' ||\n      'function' === typeof value ||\n      value instanceof Function)\n  );\n}\n\n/**\n * A map of known error codes.\n */\nexport const KnownCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000,\n};\n\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\nexport function retryInterval(numberOfFailures: number): number {\n  // try to reconnect in 0.25-5 seconds (random to spread out the load from failures)\n  const max = Math.min(500 + numberOfFailures * 2000, 5000);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 5000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction hex(bytes: Uint8Array): string {\n  let s = '';\n  for (let i = 0; i < bytes.length; i++) {\n    s += bytes[i].toString(16).padStart(2, '0');\n  }\n  return s;\n}\n\n// https://tools.ietf.org/html/rfc4122\nexport function generateUUIDv4() {\n  const bytes = getRandomBytes(16);\n  bytes[6] = (bytes[6] & 0x0f) | 0x40; // version\n  bytes[8] = (bytes[8] & 0xbf) | 0x80; // variant\n\n  return [\n    hex(bytes.subarray(0, 4)),\n    hex(bytes.subarray(4, 6)),\n    hex(bytes.subarray(6, 8)),\n    hex(bytes.subarray(8, 10)),\n    hex(bytes.subarray(10, 16)),\n  ].join('-');\n}\n\nconst getRandomValues = (() => {\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    return crypto.getRandomValues.bind(crypto);\n  }\n  return function getRandomValuesWithMathRandom(bytes: Uint8Array): void {\n    const max = Math.pow(2, (8 * bytes.byteLength) / bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      bytes[i] = Math.random() * max;\n    }\n  };\n})();\n\nfunction getRandomBytes(length: number): Uint8Array {\n  const bytes = new Uint8Array(length);\n  getRandomValues(bytes);\n  return bytes;\n}\n\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */\nexport function addConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('offline', cb);\n    window.addEventListener('online', cb);\n  }\n}\n\nexport function removeConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.removeEventListener) {\n    window.removeEventListener('offline', cb);\n    window.removeEventListener('online', cb);\n  }\n}\n\nexport function isErrorResponse(\n  res: AxiosResponse<unknown>,\n): res is AxiosResponse<APIErrorResponse> {\n  return !res.status || res.status < 200 || 300 <= res.status;\n}\n\n// Type guards to check WebSocket error type\nexport function isCloseEvent(\n  res: CloseEvent | ConnectionErrorEvent,\n): res is CloseEvent {\n  return (res as CloseEvent).code !== undefined;\n}\n","/**\n * Checks whether we are using React Native\n */\nexport const isReactNative = () => {\n  if (typeof navigator === 'undefined') return false;\n  return navigator.product?.toLowerCase() === 'reactnative';\n};\n","import { Logger, LogLevel } from './coordinator/connection/types';\nimport { isReactNative } from './helpers/platforms';\n\n// log levels, sorted by verbosity\nexport const logLevels: Record<LogLevel, number> = Object.freeze({\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 3,\n  error: 4,\n});\n\nlet logger: Logger | undefined;\nlet level: LogLevel = 'info';\n\nexport const logToConsole: Logger = (logLevel, message, ...args) => {\n  let logMethod;\n  switch (logLevel) {\n    case 'error':\n      if (isReactNative()) {\n        message = `ERROR: ${message}`;\n        logMethod = console.info;\n        break;\n      }\n      logMethod = console.error;\n      break;\n    case 'warn':\n      if (isReactNative()) {\n        message = `WARN: ${message}`;\n        logMethod = console.info;\n        break;\n      }\n      logMethod = console.warn;\n      break;\n    case 'info':\n      logMethod = console.info;\n      break;\n    case 'trace':\n      logMethod = console.trace;\n      break;\n    default:\n      logMethod = console.log;\n      break;\n  }\n\n  logMethod(message, ...args);\n};\n\nexport const setLogger = (l: Logger, lvl?: LogLevel) => {\n  logger = l;\n  if (lvl) {\n    setLogLevel(lvl);\n  }\n};\n\nexport const setLogLevel = (l: LogLevel) => {\n  level = l;\n};\n\nexport const getLogLevel = (): LogLevel => level;\n\nexport const getLogger = (withTags?: string[]) => {\n  const loggerMethod = logger || logToConsole;\n  const tags = (withTags || []).filter(Boolean).join(':');\n  const result: Logger = (logLevel, message, ...args) => {\n    if (logLevels[logLevel] >= logLevels[level]) {\n      loggerMethod(logLevel, `[${tags}]: ${message}`, ...args);\n    }\n  };\n  return result;\n};\n","import {\n  FinishedUnaryCall,\n  RpcError,\n  UnaryCall,\n} from '@protobuf-ts/runtime-rpc';\nimport { TwirpErrorCode } from '@protobuf-ts/twirp-transport';\nimport { retryInterval, sleep } from '../coordinator/connection/utils';\nimport { Error as SfuError } from '../gen/video/sfu/models/models';\nimport { getLogger } from '../logger';\n\n/**\n * An internal interface which asserts that \"retryable\" SFU responses\n * contain a field called \"error\".\n * Ideally, this should be coming from the Protobuf definitions.\n */\nexport interface SfuResponseWithError {\n  /**\n   * An optional error field which should be present in all SFU responses.\n   */\n  error?: SfuError;\n}\n\n/**\n * Creates a closure which wraps the given RPC call and retries invoking\n * the RPC until it succeeds or the maximum number of retries is reached.\n *\n * For each retry, there would be a delay to avoid request bursts toward the SFU.\n *\n * @param rpc the closure around the RPC call to execute.\n * @param signal the signal to abort the RPC call and retries loop.\n */\nexport const retryable = async <\n  I extends object,\n  O extends SfuResponseWithError,\n>(\n  rpc: () => UnaryCall<I, O>,\n  signal?: AbortSignal,\n): Promise<FinishedUnaryCall<I, O>> => {\n  let attempt = 0;\n  let result: FinishedUnaryCall<I, O> | undefined = undefined;\n  do {\n    if (attempt > 0) await sleep(retryInterval(attempt));\n    try {\n      result = await rpc();\n    } catch (err) {\n      const isRequestCancelled =\n        err instanceof RpcError &&\n        err.code === TwirpErrorCode[TwirpErrorCode.cancelled];\n      const isAborted = signal?.aborted ?? false;\n      if (isRequestCancelled || isAborted) throw err;\n      getLogger(['sfu-client', 'rpc'])('debug', `rpc failed (${attempt})`, err);\n      attempt++;\n    }\n  } while (!result || result.response.error?.shouldRetry);\n\n  return result;\n};\n","/**\n * Returns a generic SDP for the given direction.\n * We use this SDP to send it as part of our JoinRequest so that the SFU\n * can use it to determine the client's codec capabilities.\n *\n * @param direction the direction of the transceiver.\n */\nexport const getGenericSdp = async (direction: RTCRtpTransceiverDirection) => {\n  const tempPc = new RTCPeerConnection();\n  tempPc.addTransceiver('video', { direction });\n  tempPc.addTransceiver('audio', { direction });\n\n  const offer = await tempPc.createOffer();\n  const sdp = offer.sdp ?? '';\n\n  tempPc.getTransceivers().forEach((t) => {\n    t.stop?.();\n  });\n  tempPc.close();\n  return sdp;\n};\n\n/**\n * Returns whether the codec is an SVC codec.\n *\n * @param codecOrMimeType the codec to check.\n */\nexport const isSvcCodec = (codecOrMimeType: string | undefined) => {\n  if (!codecOrMimeType) return false;\n  codecOrMimeType = codecOrMimeType.toLowerCase();\n  return (\n    codecOrMimeType === 'vp9' ||\n    codecOrMimeType === 'av1' ||\n    codecOrMimeType === 'video/vp9' ||\n    codecOrMimeType === 'video/av1'\n  );\n};\n","import { CallEventListener, EventTypes } from '../coordinator/connection/types';\nimport type { SfuEvent } from '../gen/video/sfu/event/events';\nimport { getLogger } from '../logger';\n\nexport type SfuEventKinds = NonNullable<SfuEvent['eventPayload']['oneofKind']>;\nexport type AllSfuEvents = {\n  [K in SfuEventKinds]: K extends keyof Extract<\n    SfuEvent['eventPayload'],\n    { oneofKind: K }\n  >\n    ? Extract<SfuEvent['eventPayload'], { oneofKind: K }>[K]\n    : never;\n};\n\nexport type DispatchableMessage<K extends SfuEventKinds> = {\n  eventPayload: {\n    oneofKind: K;\n  } & {\n    [Key in K]: AllSfuEvents[Key];\n  };\n};\n\nconst sfuEventKinds: Record<SfuEventKinds, undefined> = {\n  subscriberOffer: undefined,\n  publisherAnswer: undefined,\n  connectionQualityChanged: undefined,\n  audioLevelChanged: undefined,\n  iceTrickle: undefined,\n  changePublishQuality: undefined,\n  participantJoined: undefined,\n  participantLeft: undefined,\n  dominantSpeakerChanged: undefined,\n  joinResponse: undefined,\n  healthCheckResponse: undefined,\n  trackPublished: undefined,\n  trackUnpublished: undefined,\n  error: undefined,\n  callGrantsUpdated: undefined,\n  goAway: undefined,\n  iceRestart: undefined,\n  pinsUpdated: undefined,\n  callEnded: undefined,\n  participantUpdated: undefined,\n  participantMigrationComplete: undefined,\n  changePublishOptions: undefined,\n};\n\nexport const isSfuEvent = (\n  eventName: SfuEventKinds | EventTypes,\n): eventName is SfuEventKinds => {\n  return Object.prototype.hasOwnProperty.call(sfuEventKinds, eventName);\n};\n\nexport class Dispatcher {\n  private readonly logger = getLogger(['Dispatcher']);\n  private subscribers: Partial<\n    Record<SfuEventKinds, CallEventListener<any>[] | undefined>\n  > = {};\n\n  dispatch = <K extends SfuEventKinds>(\n    message: DispatchableMessage<K>,\n    logTag: string = '0',\n  ) => {\n    const eventKind = message.eventPayload.oneofKind;\n    if (!eventKind) return;\n    const payload = message.eventPayload[eventKind];\n    this.logger('debug', `Dispatching ${eventKind}, tag=${logTag}`, payload);\n    const listeners = this.subscribers[eventKind];\n    if (!listeners) return;\n    for (const fn of listeners) {\n      try {\n        fn(payload);\n      } catch (e) {\n        this.logger('warn', 'Listener failed with error', e);\n      }\n    }\n  };\n\n  on = <E extends keyof AllSfuEvents>(\n    eventName: E,\n    fn: CallEventListener<E>,\n  ) => {\n    (this.subscribers[eventName] ??= []).push(fn as never);\n    return () => {\n      this.off(eventName, fn);\n    };\n  };\n\n  off = <E extends keyof AllSfuEvents>(\n    eventName: E,\n    fn: CallEventListener<E>,\n  ) => {\n    this.subscribers[eventName] = (this.subscribers[eventName] || []).filter(\n      (f) => f !== fn,\n    );\n  };\n}\n","import { ReplaySubject } from 'rxjs';\nimport { ICETrickle } from '../gen/video/sfu/event/events';\nimport { PeerType } from '../gen/video/sfu/models/models';\nimport { getLogger } from '../logger';\n\n/**\n * A buffer for ICE Candidates. Used for ICE Trickle:\n * - https://bloggeek.me/webrtcglossary/trickle-ice/\n */\nexport class IceTrickleBuffer {\n  readonly subscriberCandidates = new ReplaySubject<RTCIceCandidateInit>();\n  readonly publisherCandidates = new ReplaySubject<RTCIceCandidateInit>();\n\n  push = (iceTrickle: ICETrickle) => {\n    const iceCandidate = toIceCandidate(iceTrickle);\n    if (!iceCandidate) return;\n\n    if (iceTrickle.peerType === PeerType.SUBSCRIBER) {\n      this.subscriberCandidates.next(iceCandidate);\n    } else if (iceTrickle.peerType === PeerType.PUBLISHER_UNSPECIFIED) {\n      this.publisherCandidates.next(iceCandidate);\n    } else {\n      const logger = getLogger(['sfu-client']);\n      logger('warn', `ICETrickle, Unknown peer type`, iceTrickle);\n    }\n  };\n\n  dispose = () => {\n    this.subscriberCandidates.complete();\n    this.publisherCandidates.complete();\n  };\n}\n\nconst toIceCandidate = (\n  iceTrickle: ICETrickle,\n): RTCIceCandidateInit | undefined => {\n  try {\n    return JSON.parse(iceTrickle.iceCandidate);\n  } catch (e) {\n    const logger = getLogger(['sfu-client']);\n    logger('error', `Failed to parse ICE Trickle`, e, iceTrickle);\n    return undefined;\n  }\n};\n","interface PendingPromise {\n  promise: Promise<unknown>;\n  onContinued: () => void;\n}\n\ntype AsyncWrapper<P extends unknown[], T> = (\n  tag: string | symbol,\n  cb: (...args: P) => Promise<T>,\n) => {\n  cb: () => Promise<T>;\n  onContinued: () => void;\n};\n\n/**\n * Runs async functions serially. Useful for wrapping async actions that\n * should never run simultaneously: if marked with the same tag, functions\n * will run one after another.\n *\n * @param tag Async functions with the same tag will run serially. Async functions\n * with different tags can run in parallel.\n * @param cb Async function to run.\n * @returns Promise that resolves when async functions returns.\n */\nexport const withoutConcurrency = createRunner(wrapWithContinuationTracking);\n\n/**\n * Runs async functions serially, and cancels all other actions with the same tag\n * when a new action is scheduled. Useful for wrapping async actions that override\n * each other (e.g. enabling and disabling camera).\n *\n * If an async function hasn't started yet and was canceled, it will never run.\n * If an async function is already running and was canceled, it will be notified\n * via an abort signal passed as an argument.\n *\n * @param tag Async functions with the same tag will run serially and are canceled\n * when a new action with the same tag is scheduled.\n * @param cb Async function to run. Receives AbortSignal as the only argument.\n * @returns Promise that resolves when async functions returns. If the function didn't\n * start and was canceled, will resolve with 'canceled'. If the function started to run,\n * it's up to the function to decide how to react to cancelation.\n */\nexport const withCancellation = createRunner(wrapWithCancellation);\n\nconst pendingPromises = new Map<string | symbol, PendingPromise>();\n\nexport function hasPending(tag: string | symbol) {\n  return pendingPromises.has(tag);\n}\n\nexport async function settled(tag: string | symbol) {\n  let pending: PendingPromise | undefined;\n  while ((pending = pendingPromises.get(tag))) {\n    await pending.promise;\n  }\n}\n\n/**\n * Implements common functionality of running async functions serially, by chaining\n * their promises one after another.\n *\n * Before running, async function is \"wrapped\" using the provided wrapper. This wrapper\n * can add additional steps to run before or after the function.\n *\n * When async function is scheduled to run, the previous function is notified\n * by calling the associated onContinued callback. This behavior of this callback\n * is defined by the wrapper.\n */\nfunction createRunner<P extends unknown[], T>(wrapper: AsyncWrapper<P, T>) {\n  return function run(tag: string | symbol, cb: (...args: P) => Promise<T>) {\n    const { cb: wrapped, onContinued } = wrapper(tag, cb);\n    const pending = pendingPromises.get(tag);\n    pending?.onContinued();\n    const promise = pending\n      ? pending.promise.then(wrapped, wrapped)\n      : wrapped();\n    pendingPromises.set(tag, { promise, onContinued });\n    return promise;\n  };\n}\n\n/**\n * Wraps an async function with an additional step run after the function:\n * if the function is the last in the queue, it cleans up the whole chain\n * of promises after finishing.\n */\nfunction wrapWithContinuationTracking<T>(\n  tag: string | symbol,\n  cb: () => Promise<T>,\n) {\n  let hasContinuation = false;\n  const wrapped = () =>\n    cb().finally(() => {\n      if (!hasContinuation) {\n        pendingPromises.delete(tag);\n      }\n    });\n  const onContinued = () => (hasContinuation = true);\n  return { cb: wrapped, onContinued };\n}\n\n/**\n * Wraps an async function with additional functionalilty:\n * 1. Associates an abort signal with every function, that is passed to it\n *    as an argument. When a new function is scheduled to run after the current\n *    one, current signal is aborted.\n * 2. If current function didn't start and was aborted, in will never start.\n * 3. If the function is the last in the queue, it cleans up the whole chain\n *    of promises after finishing.\n */\nfunction wrapWithCancellation<T>(\n  tag: string | symbol,\n  cb: (signal: AbortSignal) => Promise<T | 'canceled'>,\n) {\n  const ac = new AbortController();\n  const wrapped = () => {\n    if (ac.signal.aborted) {\n      return Promise.resolve('canceled' as const);\n    }\n\n    return cb(ac.signal).finally(() => {\n      if (!ac.signal.aborted) {\n        pendingPromises.delete(tag);\n      }\n    });\n  };\n  const onContinued = () => ac.abort();\n  return { cb: wrapped, onContinued };\n}\n","import { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { withoutConcurrency } from '../helpers/concurrency';\nimport { getLogger } from '../logger';\n\ntype FunctionPatch<T> = (currentValue: T) => T;\n\n/**\n * A value or a function which takes the current value and returns a new value.\n */\nexport type Patch<T> = T | FunctionPatch<T>;\n\n/**\n * Checks if the provided update is a function patch.\n *\n * @param update the value to check.\n */\nconst isFunctionPatch = <T>(update: Patch<T>): update is FunctionPatch<T> =>\n  typeof update === 'function';\n\n/**\n * Gets the current value of an observable, or undefined if the observable has\n * not emitted a value yet.\n *\n * @param observable$ the observable to get the value from.\n */\nexport const getCurrentValue = <T>(observable$: Observable<T>) => {\n  let value!: T;\n  let err: Error | undefined = undefined;\n  combineLatest([observable$])\n    .subscribe({\n      next: ([v]) => {\n        value = v;\n      },\n      error: (e) => {\n        err = e;\n      },\n    })\n    .unsubscribe();\n\n  if (err) throw err;\n  return value;\n};\n\n/**\n * Updates the value of the provided Subject.\n * An `update` can either be a new value or a function which takes\n * the current value and returns a new value.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n * @return the updated value.\n */\nexport const setCurrentValue = <T>(subject: Subject<T>, update: Patch<T>) => {\n  const next = isFunctionPatch(update)\n    ? update(getCurrentValue(subject))\n    : update;\n\n  subject.next(next);\n  return next;\n};\n\n/**\n * Updates the value of the provided Subject and returns the previous value\n * and a function to roll back the update.\n * This is useful when you want to optimistically update a value\n * and roll back the update if an error occurs.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n */\nexport const updateValue = <T>(\n  subject: BehaviorSubject<T>,\n  update: Patch<T>,\n) => {\n  const lastValue = subject.getValue();\n  const value = setCurrentValue(subject, update);\n  return {\n    lastValue,\n    value,\n    rollback: () => setCurrentValue(subject, lastValue),\n  };\n};\n\n/**\n * Creates a subscription and returns a function to unsubscribe.\n *\n * @param observable the observable to subscribe to.\n * @param handler the handler to call when the observable emits a value.\n * @param onError an optional error handler.\n */\nexport const createSubscription = <T>(\n  observable: Observable<T>,\n  handler: (value: T) => void,\n  onError: (error: any) => void = (error) =>\n    getLogger(['RxUtils'])('warn', 'An observable emitted an error', error),\n) => {\n  const subscription = observable.subscribe({ next: handler, error: onError });\n  return () => {\n    subscription.unsubscribe();\n  };\n};\n\n/**\n * Creates a subscription and returns a function to unsubscribe. Makes sure that\n * only one async handler runs at the same time. If updates come in quicker than\n * it takes for the current handler to finish, other handlers will wait.\n *\n * @param observable the observable to subscribe to.\n * @param handler the async handler to call when the observable emits a value.\n */\nexport const createSafeAsyncSubscription = <T>(\n  observable: Observable<T>,\n  handler: (value: T) => Promise<void>,\n) => {\n  const tag = Symbol();\n  return createSubscription(observable, (value) => {\n    withoutConcurrency(tag, () => handler(value));\n  });\n};\n","/**\n * Represents the state of the current call.\n */\nexport enum CallingState {\n  /**\n   * The call is in an unknown state.\n   */\n  UNKNOWN = 'unknown',\n\n  /**\n   * The call is in an idle state.\n   */\n  IDLE = 'idle',\n\n  /**\n   * The call is in the process of ringing.\n   * (User hasn't accepted nor rejected the call yet.)\n   */\n  RINGING = 'ringing',\n\n  /**\n   * The call is in the process of joining.\n   */\n  JOINING = 'joining',\n\n  /**\n   * The call is currently active.\n   */\n  JOINED = 'joined',\n\n  /**\n   * The call has been left.\n   */\n  LEFT = 'left',\n\n  /**\n   * The call is in the process of reconnecting.\n   */\n  RECONNECTING = 'reconnecting',\n\n  /**\n   * The call is in the process of migrating from one node to another.\n   */\n  MIGRATING = 'migrating',\n\n  /**\n   * The call has failed to reconnect.\n   */\n  RECONNECTING_FAILED = 'reconnecting-failed',\n\n  /**\n   * The call is in offline mode.\n   */\n  OFFLINE = 'offline',\n}\n","import { BehaviorSubject, Observable } from 'rxjs';\nimport type { Patch } from './rxUtils';\nimport * as RxUtils from './rxUtils';\nimport { Call } from '../Call';\nimport { CallingState } from './CallingState';\nimport type { OwnUserResponse } from '../gen/coordinator';\nimport { getLogger } from '../logger';\n\nexport class StreamVideoWriteableStateStore {\n  /**\n   * A store keeping data of a successfully connected user over WS to the coordinator server.\n   */\n  connectedUserSubject = new BehaviorSubject<OwnUserResponse | undefined>(\n    undefined,\n  );\n\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  callsSubject = new BehaviorSubject<Call[]>([]);\n\n  constructor() {\n    this.connectedUserSubject.subscribe(async (user) => {\n      // leave all calls when the user disconnects.\n      if (!user) {\n        const logger = getLogger(['client-state']);\n        for (const call of this.calls) {\n          if (call.state.callingState === CallingState.LEFT) continue;\n\n          logger('info', `User disconnected, leaving call: ${call.cid}`);\n          await call\n            .leave({ reason: 'client.disconnectUser() called' })\n            .catch((err) => {\n              logger('error', `Error leaving call: ${call.cid}`, err);\n            });\n        }\n      }\n    });\n  }\n\n  /**\n   * The currently connected user.\n   */\n  get connectedUser(): OwnUserResponse | undefined {\n    return RxUtils.getCurrentValue(this.connectedUserSubject);\n  }\n\n  /**\n   * Sets the currently connected user.\n   *\n   * @internal\n   * @param user the user to set as connected.\n   */\n  setConnectedUser = (user: Patch<OwnUserResponse | undefined>) => {\n    return RxUtils.setCurrentValue(this.connectedUserSubject, user);\n  };\n\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  get calls(): Call[] {\n    return RxUtils.getCurrentValue(this.callsSubject);\n  }\n\n  /**\n   * Sets the list of {@link Call} objects created/tracked by this client.\n   * @param calls\n   */\n  setCalls = (calls: Patch<Call[]>) => {\n    return RxUtils.setCurrentValue(this.callsSubject, calls);\n  };\n\n  /**\n   * Adds a {@link Call} object to the list of {@link Call} objects created/tracked by this client.\n   *\n   * @param call the call to add.\n   */\n  registerCall = (call: Call) => {\n    if (!this.calls.find((c) => c.cid === call.cid)) {\n      this.setCalls((calls) => [...calls, call]);\n    }\n  };\n\n  /**\n   * Removes a {@link Call} object from the list of {@link Call} objects created/tracked by this client.\n   *\n   * @param call the call to remove\n   */\n  unregisterCall = (call: Call) => {\n    const logger = getLogger(['client-state']);\n    logger('trace', `Unregistering call: ${call.cid}`);\n    return this.setCalls((calls) => calls.filter((c) => c !== call));\n  };\n\n  /**\n   * Finds a {@link Call} object in the list of {@link Call} objects created/tracked by this client.\n   *\n   * @param type the type of call to find.\n   * @param id the id of the call to find.\n   */\n  findCall = (type: string, id: string) => {\n    return this.calls.find((c) => c.type === type && c.id === id);\n  };\n}\n\n/**\n * A reactive store that exposes state variables in a reactive manner.\n * You can subscribe to changes of the different state variables.\n * This central store contains all the state variables related to [`StreamVideoClient`](./StreamVideClient.md) and [`Call`](./Call.md).\n */\nexport class StreamVideoReadOnlyStateStore {\n  /**\n   * Data describing a user successfully connected over WS to coordinator server.\n   */\n  connectedUser$: Observable<OwnUserResponse | undefined>;\n\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  calls$: Observable<Call[]>;\n\n  /**\n   * This method allows you the get the current value of a state variable.\n   *\n   * @param observable the observable to get the current value of.\n   * @returns the current value of the observable.\n   */\n  getCurrentValue = RxUtils.getCurrentValue;\n\n  constructor(store: StreamVideoWriteableStateStore) {\n    // convert and expose subjects as observables\n    this.connectedUser$ = store.connectedUserSubject.asObservable();\n    this.calls$ = store.callsSubject.asObservable();\n  }\n\n  /**\n   * The current user connected over WS to the backend.\n   */\n  get connectedUser(): OwnUserResponse | undefined {\n    return RxUtils.getCurrentValue(this.connectedUser$);\n  }\n\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  get calls(): Call[] {\n    return RxUtils.getCurrentValue(this.calls$);\n  }\n}\n","/**\n * Defines a comparator function which can be used for sorting items.\n */\nexport type Comparator<T> = (a: T, b: T) => -1 | 0 | 1;\n\n/**\n * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.\n * The comparators are applied in the order they are given (left -> right).\n *\n * @param comparators the comparators to use for sorting.\n * @returns a combined {@link Comparator<T>}.\n */\nexport const combineComparators = <T>(\n  ...comparators: Comparator<T>[]\n): Comparator<T> => {\n  return (a, b) => {\n    for (const comparator of comparators) {\n      const result = comparator(a, b);\n      if (result !== 0) return result;\n    }\n    return 0;\n  };\n};\n\n/**\n * Creates a new comparator which sorts items in descending order.\n *\n * @example\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const byValueDesc = descending(byValue);\n *\n * @param comparator the comparator to wrap.\n */\nexport const descending = <T>(comparator: Comparator<T>): Comparator<T> => {\n  return (a, b) => comparator(b, a);\n};\n\n/**\n * Creates a new comparator which conditionally applies the given comparator.\n *\n * @example\n * const shouldSortByValue = (a, b) => a % 2 === 0; // return false to turn it off\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const comparator = conditional(shouldSortByValue)(byValue);\n *\n * @param predicate the predicate to use for determining whether to apply the comparator.\n */\nexport const conditional = <T>(predicate: (a: T, b: T) => boolean) => {\n  return (comparator: Comparator<T>): Comparator<T> => {\n    return (a, b) => {\n      if (!predicate(a, b)) return 0;\n      return comparator(a, b);\n    };\n  };\n};\n\n/**\n * A no-op comparator which always returns 0.\n */\nexport const noopComparator = <T>(): Comparator<T> => {\n  return () => 0;\n};\n","import { StreamVideoParticipant } from '../types';\nimport { TrackType } from '../gen/video/sfu/models/models';\n\n/**\n * Check if a participant has a video.\n *\n * @param p the participant to check.\n */\nexport const hasVideo = (p: StreamVideoParticipant): boolean =>\n  p.publishedTracks.includes(TrackType.VIDEO);\n\n/**\n * Check if a participant has audio.\n *\n * @param p the participant to check.\n */\nexport const hasAudio = (p: StreamVideoParticipant): boolean =>\n  p.publishedTracks.includes(TrackType.AUDIO);\n\n/**\n * Check if a participant is screen sharing.\n *\n * @param p the participant to check.\n */\nexport const hasScreenShare = (p: StreamVideoParticipant): boolean =>\n  p.publishedTracks.includes(TrackType.SCREEN_SHARE);\n\n/**\n * Check if a participant is screen sharing audio.\n *\n * @param p the participant to check.\n */\nexport const hasScreenShareAudio = (p: StreamVideoParticipant): boolean =>\n  p.publishedTracks.includes(TrackType.SCREEN_SHARE_AUDIO);\n\n/**\n * Check if the participant is pinned.\n *\n * @param p the participant.\n */\nexport const isPinned = (p: StreamVideoParticipant): boolean =>\n  !!p.pin && (p.pin.isLocalPin || p.pin.pinnedAt > 0);\n","import { Comparator } from './';\nimport { StreamVideoParticipant } from '../types';\nimport {\n  hasAudio,\n  hasScreenShare,\n  hasVideo,\n} from '../helpers/participantUtils';\n\n/**\n * A comparator which sorts participants by the fact that they are the dominant speaker or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const dominantSpeaker: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (a.isDominantSpeaker && !b.isDominantSpeaker) return -1;\n  if (!a.isDominantSpeaker && b.isDominantSpeaker) return 1;\n  return 0;\n};\n\n/**\n * A comparator which sorts participants by the fact that they are speaking or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const speaking: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (a.isSpeaking && !b.isSpeaking) return -1;\n  if (!a.isSpeaking && b.isSpeaking) return 1;\n  return 0;\n};\n\n/**\n * A comparator which sorts participants by screen sharing status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const screenSharing: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (hasScreenShare(a) && !hasScreenShare(b)) return -1;\n  if (!hasScreenShare(a) && hasScreenShare(b)) return 1;\n  return 0;\n};\n\n/**\n * A comparator which sorts participants by video status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const publishingVideo: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (hasVideo(a) && !hasVideo(b)) return -1;\n  if (!hasVideo(a) && hasVideo(b)) return 1;\n  return 0;\n};\n\n/**\n * A comparator which sorts participants by audio status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const publishingAudio: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (hasAudio(a) && !hasAudio(b)) return -1;\n  if (!hasAudio(a) && hasAudio(b)) return 1;\n  return 0;\n};\n\n/**\n * A comparator which prioritizes participants who are pinned.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const pinned: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (a.pin && b.pin) {\n    if (!a.pin.isLocalPin && b.pin.isLocalPin) return -1;\n    if (a.pin.isLocalPin && !b.pin.isLocalPin) return 1;\n    if (a.pin.pinnedAt > b.pin.pinnedAt) return -1;\n    if (a.pin.pinnedAt < b.pin.pinnedAt) return 1;\n  }\n\n  if (a.pin && !b.pin) return -1;\n  if (!a.pin && b.pin) return 1;\n\n  return 0;\n};\n\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific reaction.\n *\n * @param type the reaction type.\n */\nexport const reactionType = (\n  type: string,\n): Comparator<StreamVideoParticipant> => {\n  return (a, b) => {\n    if (a.reaction?.type === type && b.reaction?.type !== type) return -1;\n    if (a.reaction?.type !== type && b.reaction?.type === type) return 1;\n    return 0;\n  };\n};\n\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific role.\n *\n * @param roles the roles to prioritize.\n */\nexport const role =\n  (...roles: string[]): Comparator<StreamVideoParticipant> =>\n  (a, b) => {\n    if (hasAnyRole(a, roles) && !hasAnyRole(b, roles)) return -1;\n    if (!hasAnyRole(a, roles) && hasAnyRole(b, roles)) return 1;\n    return 0;\n  };\n\n/**\n * A comparator which sorts participants by name.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const name: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  return 0;\n};\n\nconst hasAnyRole = (p: StreamVideoParticipant, roles: string[]) =>\n  (p.roles || []).some((r) => roles.includes(r));\n","import { StreamVideoParticipant, VisibilityState } from '../types';\nimport { combineComparators, conditional } from './comparator';\nimport {\n  dominantSpeaker,\n  pinned,\n  publishingAudio,\n  publishingVideo,\n  reactionType,\n  role,\n  screenSharing,\n  speaking,\n} from './participants';\n\n// a comparator decorator which applies the decorated comparator only if the\n// participant is invisible.\n// This ensures stable sorting when all participants are visible.\nconst ifInvisibleBy = conditional(\n  (a: StreamVideoParticipant, b: StreamVideoParticipant) =>\n    a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE ||\n    b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE,\n);\n\n/**\n * A comparator that applies the decorated comparator when a participant is\n * either invisible or its visibility state isn't known.\n * For visible participants, it ensures stable sorting.\n */\nconst ifInvisibleOrUnknownBy = conditional(\n  (a: StreamVideoParticipant, b: StreamVideoParticipant) =>\n    a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE ||\n    a.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN ||\n    b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE ||\n    b.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN,\n);\n\n/**\n * The default sorting preset.\n */\nexport const defaultSortPreset = combineComparators(\n  pinned,\n  screenSharing,\n  ifInvisibleBy(\n    combineComparators(\n      dominantSpeaker,\n      speaking,\n      reactionType('raised-hand'),\n      publishingVideo,\n      publishingAudio,\n    ),\n  ),\n  // ifInvisibleBy(name),\n);\n\n/**\n * The sorting preset for speaker layout.\n */\nexport const speakerLayoutSortPreset = combineComparators(\n  pinned,\n  screenSharing,\n  dominantSpeaker,\n  ifInvisibleBy(\n    combineComparators(\n      speaking,\n      reactionType('raised-hand'),\n      publishingVideo,\n      publishingAudio,\n    ),\n  ),\n  // ifInvisibleBy(name),\n);\n\n/**\n * The sorting preset for layouts that don't render all participants but\n * instead, render them in pages.\n */\nexport const paginatedLayoutSortPreset = combineComparators(\n  pinned,\n  ifInvisibleOrUnknownBy(\n    combineComparators(\n      dominantSpeaker,\n      speaking,\n      reactionType('raised-hand'),\n      publishingVideo,\n      publishingAudio,\n    ),\n  ),\n  // ifInvisibleOrUnknownBy(name),\n);\n\n/**\n * The sorting preset for livestreams and audio rooms.\n */\nexport const livestreamOrAudioRoomSortPreset = combineComparators(\n  ifInvisibleBy(\n    combineComparators(\n      dominantSpeaker,\n      speaking,\n      reactionType('raised-hand'),\n      publishingVideo,\n      publishingAudio,\n    ),\n  ),\n  role('admin', 'host', 'speaker'),\n  // name,\n);\n","import {\n  BehaviorSubject,\n  distinctUntilChanged,\n  map,\n  Observable,\n  shareReplay,\n} from 'rxjs';\nimport type { Patch } from './rxUtils';\nimport * as RxUtils from './rxUtils';\nimport { CallingState } from './CallingState';\nimport {\n  type ClosedCaptionsSettings,\n  type StreamVideoParticipant,\n  type StreamVideoParticipantPatch,\n  type StreamVideoParticipantPatches,\n  type SubscriptionChanges,\n  VideoTrackType,\n  VisibilityState,\n} from '../types';\nimport { CallStatsReport } from '../stats';\nimport {\n  BlockedUserEvent,\n  CallClosedCaption,\n  CallIngressResponse,\n  CallMemberAddedEvent,\n  CallMemberRemovedEvent,\n  CallMemberUpdatedEvent,\n  CallMemberUpdatedPermissionEvent,\n  CallReactionEvent,\n  CallResponse,\n  CallSessionParticipantCountsUpdatedEvent,\n  CallSessionParticipantJoinedEvent,\n  CallSessionParticipantLeftEvent,\n  CallSessionResponse,\n  CallSettingsResponse,\n  ClosedCaptionEvent,\n  EgressResponse,\n  MemberResponse,\n  OwnCapability,\n  ThumbnailResponse,\n  UnblockedUserEvent,\n  UpdatedCallPermissionsEvent,\n  UserResponse,\n  VideoEvent,\n} from '../gen/coordinator';\nimport { Timestamp } from '../gen/google/protobuf/timestamp';\nimport { ReconnectDetails } from '../gen/video/sfu/event/events';\nimport {\n  CallState as SfuCallState,\n  Pin,\n  TrackType,\n} from '../gen/video/sfu/models/models';\nimport { Comparator, defaultSortPreset } from '../sorting';\nimport { getLogger } from '../logger';\nimport { hasScreenShare } from '../helpers/participantUtils';\n\n/**\n * Returns the default egress object - when no egress data is available.\n */\nconst defaultEgress: EgressResponse = {\n  broadcasting: false,\n  hls: { playlist_url: '', status: '' },\n  rtmps: [],\n};\n\ntype OrphanedTrack = {\n  id: string;\n  trackLookupPrefix: string;\n  trackType: TrackType;\n  track: MediaStream;\n};\n\n/**\n * Holds the state of the current call.\n * @react You don't have to use this class directly, as we are exposing the state through Hooks.\n */\nexport class CallState {\n  private backstageSubject = new BehaviorSubject<boolean>(true);\n  private blockedUserIdsSubject = new BehaviorSubject<string[]>([]);\n  private createdAtSubject = new BehaviorSubject<Date>(new Date());\n  private endedAtSubject = new BehaviorSubject<Date | undefined>(undefined);\n  private startsAtSubject = new BehaviorSubject<Date | undefined>(undefined);\n  private updatedAtSubject = new BehaviorSubject<Date>(new Date());\n  private createdBySubject = new BehaviorSubject<UserResponse | undefined>(\n    undefined,\n  );\n  private customSubject = new BehaviorSubject<Record<string, any>>({});\n  private egressSubject = new BehaviorSubject<EgressResponse | undefined>(\n    undefined,\n  );\n  private ingressSubject = new BehaviorSubject<CallIngressResponse | undefined>(\n    undefined,\n  );\n  private recordingSubject = new BehaviorSubject<boolean>(false);\n  private sessionSubject = new BehaviorSubject<CallSessionResponse | undefined>(\n    undefined,\n  );\n  private settingsSubject = new BehaviorSubject<\n    CallSettingsResponse | undefined\n  >(undefined);\n  private transcribingSubject = new BehaviorSubject<boolean>(false);\n  private captioningSubject = new BehaviorSubject<boolean>(false);\n  private endedBySubject = new BehaviorSubject<UserResponse | undefined>(\n    undefined,\n  );\n  private thumbnailsSubject = new BehaviorSubject<\n    ThumbnailResponse | undefined\n  >(undefined);\n  private membersSubject = new BehaviorSubject<MemberResponse[]>([]);\n  private ownCapabilitiesSubject = new BehaviorSubject<OwnCapability[]>([]);\n  private callingStateSubject = new BehaviorSubject<CallingState>(\n    CallingState.UNKNOWN,\n  );\n  private startedAtSubject = new BehaviorSubject<Date | undefined>(undefined);\n  private participantCountSubject = new BehaviorSubject<number>(0);\n  private anonymousParticipantCountSubject = new BehaviorSubject<number>(0);\n  private participantsSubject = new BehaviorSubject<StreamVideoParticipant[]>(\n    [],\n  );\n  private callStatsReportSubject = new BehaviorSubject<\n    CallStatsReport | undefined\n  >(undefined);\n  private closedCaptionsSubject = new BehaviorSubject<CallClosedCaption[]>([]);\n\n  // These are tracks that were delivered to the Subscriber's onTrack event\n  // that we couldn't associate with a participant yet.\n  // This happens when the participantJoined event hasn't been received yet.\n  // We keep these tracks around until we can associate them with a participant.\n  private orphanedTracks: OrphanedTrack[] = [];\n\n  // Derived state\n\n  /**\n   * The time the call session actually started.\n   * Useful for displaying the call duration.\n   */\n  startedAt$: Observable<Date | undefined>;\n\n  /**\n   * The server-side counted number of participants connected to the current call.\n   * This number includes the anonymous participants as well.\n   */\n  participantCount$: Observable<number>;\n\n  /**\n   * The server-side counted number of anonymous participants connected to the current call.\n   * This number excludes the regular participants.\n   */\n  anonymousParticipantCount$: Observable<number>;\n\n  /**\n   * All participants of the current call (this includes the current user and other participants as well).\n   */\n  participants$: Observable<StreamVideoParticipant[]>;\n\n  /**\n   * Remote participants of the current call (this includes every participant except the logged-in user).\n   */\n  remoteParticipants$: Observable<StreamVideoParticipant[]>;\n\n  /**\n   * The local participant of the current call (the logged-in user).\n   */\n  localParticipant$: Observable<StreamVideoParticipant | undefined>;\n\n  /**\n   * Pinned participants of the current call.\n   */\n  pinnedParticipants$: Observable<StreamVideoParticipant[]>;\n\n  /**\n   * The currently elected dominant speaker in the current call.\n   */\n  dominantSpeaker$: Observable<StreamVideoParticipant | undefined>;\n\n  /**\n   * Emits true whenever there is an active screen sharing session within\n   * the current call. Useful for displaying a \"screen sharing\" indicator and\n   * switching the layout to a screen sharing layout.\n   *\n   * The actual screen sharing track isn't exposed here, but can be retrieved\n   * from the list of call participants. We also don't want to be limiting\n   * to the number of share screen tracks are displayed in a call.\n   */\n  hasOngoingScreenShare$: Observable<boolean>;\n\n  /**\n   * The latest stats report of the current call.\n   * When stats gathering is enabled, this observable will emit a new value\n   * at a regular (configurable) interval.\n   *\n   * Consumers of this observable can implement their own batching logic\n   * in case they want to show historical stats data.\n   */\n  callStatsReport$: Observable<CallStatsReport | undefined>;\n\n  /**\n   * The list of members in the current call.\n   */\n  members$: Observable<MemberResponse[]>;\n\n  /**\n   * The list of capabilities of the current user.\n   */\n  ownCapabilities$: Observable<OwnCapability[]>;\n\n  /**\n   * The calling state.\n   */\n  callingState$: Observable<CallingState>;\n\n  /**\n   * The backstage state.\n   */\n  backstage$: Observable<boolean>;\n\n  /**\n   * Will provide the list of blocked user IDs.\n   */\n  blockedUserIds$: Observable<string[]>;\n\n  /**\n   * Will provide the time when this call has been created.\n   */\n  createdAt$: Observable<Date>;\n\n  /**\n   * Will provide the time when this call has been ended.\n   */\n  endedAt$: Observable<Date | undefined>;\n\n  /**\n   * Will provide the time when this call has been scheduled to start.\n   */\n  startsAt$: Observable<Date | undefined>;\n\n  /**\n   * Will provide the time when this call has been updated.\n   */\n  updatedAt$: Observable<Date>;\n\n  /**\n   * Will provide the user who created this call.\n   */\n  createdBy$: Observable<UserResponse | undefined>;\n\n  /**\n   * Will provide the custom data of this call.\n   */\n  custom$: Observable<Record<string, any>>;\n\n  /**\n   * Will provide the egress data of this call.\n   */\n  egress$: Observable<EgressResponse | undefined>;\n\n  /**\n   * Will provide the ingress data of this call.\n   */\n  ingress$: Observable<CallIngressResponse | undefined>;\n\n  /**\n   * Will provide the recording state of this call.\n   */\n  recording$: Observable<boolean>;\n\n  /**\n   * Will provide the session data of this call.\n   */\n  session$: Observable<CallSessionResponse | undefined>;\n\n  /**\n   * Will provide the settings of this call.\n   */\n  settings$: Observable<CallSettingsResponse | undefined>;\n\n  /**\n   * Will provide the transcribing state of this call.\n   */\n  transcribing$: Observable<boolean>;\n\n  /**\n   * Will provide the closed captioning state of this call.\n   */\n  captioning$: Observable<boolean>;\n\n  /**\n   * Will provide the user who ended this call.\n   */\n  endedBy$: Observable<UserResponse | undefined>;\n\n  /**\n   * Will provide the thumbnails of this call.\n   */\n  thumbnails$: Observable<ThumbnailResponse | undefined>;\n\n  /**\n   * The queue of closed captions.\n   */\n  closedCaptions$: Observable<CallClosedCaption[]>;\n\n  readonly logger = getLogger(['CallState']);\n\n  /**\n   * A list of comparators that are used to sort the participants.\n   */\n  private sortParticipantsBy = defaultSortPreset;\n\n  /**\n   * The closed captions configuration.\n   */\n  private closedCaptionsSettings: ClosedCaptionsSettings | undefined;\n  private closedCaptionsTasks = new Map<string, NodeJS.Timeout>();\n\n  private readonly eventHandlers: {\n    [EventType in VideoEvent['type']]:\n      | ((event: Extract<VideoEvent, { type: EventType }>) => void)\n      | undefined;\n  };\n\n  /**\n   * Creates a new instance of the CallState class.\n   *\n   */\n  constructor() {\n    this.participants$ = this.participantsSubject.asObservable().pipe(\n      // maintain stable-sort by mutating the participants stored\n      // in the original subject\n      map((ps) => ps.sort(this.sortParticipantsBy)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.localParticipant$ = this.participants$.pipe(\n      map((participants) => participants.find((p) => p.isLocalParticipant)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.remoteParticipants$ = this.participants$.pipe(\n      map((participants) => participants.filter((p) => !p.isLocalParticipant)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.pinnedParticipants$ = this.participants$.pipe(\n      map((participants) => participants.filter((p) => !!p.pin)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.dominantSpeaker$ = this.participants$.pipe(\n      map((participants) => participants.find((p) => p.isDominantSpeaker)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.hasOngoingScreenShare$ = this.participants$.pipe(\n      map((participants) => participants.some((p) => hasScreenShare(p))),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    // dates\n    this.createdAt$ = this.createdAtSubject.asObservable();\n    this.endedAt$ = this.endedAtSubject.asObservable();\n    this.startsAt$ = this.startsAtSubject.asObservable();\n    this.startedAt$ = this.startedAtSubject.asObservable();\n    this.updatedAt$ = this.updatedAtSubject.asObservable();\n\n    this.callStatsReport$ = this.callStatsReportSubject.asObservable();\n    this.members$ = this.membersSubject.asObservable();\n\n    // complex objects should work as streams of data\n    this.createdBy$ = this.createdBySubject.asObservable();\n    this.custom$ = this.customSubject.asObservable();\n    this.egress$ = this.egressSubject.asObservable();\n    this.ingress$ = this.ingressSubject.asObservable();\n    this.session$ = this.sessionSubject.asObservable();\n    this.settings$ = this.settingsSubject.asObservable();\n    this.endedBy$ = this.endedBySubject.asObservable();\n    this.thumbnails$ = this.thumbnailsSubject.asObservable();\n    this.closedCaptions$ = this.closedCaptionsSubject.asObservable();\n\n    /**\n     * Performs shallow comparison of two arrays.\n     * Expects primitive values: [1, 2, 3] is equal to [2, 1, 3].\n     */\n    const isShallowEqual = <T>(a: Array<T>, b: Array<T>): boolean => {\n      if (a.length !== b.length) return false;\n      for (const item of a) if (!b.includes(item)) return false;\n      for (const item of b) if (!a.includes(item)) return false;\n      return true;\n    };\n\n    /**\n     * Creates an Observable from the given subject by piping to the\n     * `distinctUntilChanged()` operator.\n     */\n    const duc = <T>(\n      subject: BehaviorSubject<T>,\n      comparator?: (a: T, b: T) => boolean,\n    ): Observable<T> =>\n      subject.asObservable().pipe(distinctUntilChanged(comparator));\n\n    // primitive values should only emit once the value they hold changes\n    this.anonymousParticipantCount$ = duc(\n      this.anonymousParticipantCountSubject,\n    );\n    this.blockedUserIds$ = duc(this.blockedUserIdsSubject, isShallowEqual);\n    this.backstage$ = duc(this.backstageSubject);\n    this.callingState$ = duc(this.callingStateSubject);\n    this.ownCapabilities$ = duc(this.ownCapabilitiesSubject, isShallowEqual);\n    this.participantCount$ = duc(this.participantCountSubject);\n    this.recording$ = duc(this.recordingSubject);\n    this.transcribing$ = duc(this.transcribingSubject);\n    this.captioning$ = duc(this.captioningSubject);\n\n    this.eventHandlers = {\n      // these events are not updating the call state:\n      'call.frame_recording_ready': undefined,\n      'call.permission_request': undefined,\n      'call.recording_ready': undefined,\n      'call.rtmp_broadcast_failed': undefined,\n      'call.rtmp_broadcast_started': undefined,\n      'call.rtmp_broadcast_stopped': undefined,\n      'call.transcription_ready': undefined,\n      'call.user_muted': undefined,\n      'connection.error': undefined,\n      'connection.ok': undefined,\n      'health.check': undefined,\n      'user.updated': undefined,\n      custom: undefined,\n\n      // events that update call state:\n      'call.accepted': (e) => this.updateFromCallResponse(e.call),\n      'call.blocked_user': this.blockUser,\n      'call.closed_caption': this.updateFromClosedCaptions,\n      'call.closed_captions_failed': () => {\n        this.setCurrentValue(this.captioningSubject, false);\n      },\n      'call.closed_captions_started': () => {\n        this.setCurrentValue(this.captioningSubject, true);\n      },\n      'call.closed_captions_stopped': () => {\n        this.setCurrentValue(this.captioningSubject, false);\n      },\n      'call.created': (e) => this.updateFromCallResponse(e.call),\n      'call.deleted': (e) => this.updateFromCallResponse(e.call),\n      'call.ended': (e) => {\n        this.updateFromCallResponse(e.call);\n        this.setCurrentValue(this.endedBySubject, e.user);\n      },\n      'call.frame_recording_failed': (e) => {\n        this.updateFromCallResponse(e.call);\n      },\n      'call.frame_recording_started': (e) => {\n        this.updateFromCallResponse(e.call);\n      },\n      'call.frame_recording_stopped': (e) => {\n        this.updateFromCallResponse(e.call);\n      },\n      'call.hls_broadcasting_failed': this.updateFromHLSBroadcastingFailed,\n      'call.hls_broadcasting_started': (e) => {\n        this.updateFromCallResponse(e.call);\n      },\n      'call.hls_broadcasting_stopped': this.updateFromHLSBroadcastStopped,\n      'call.live_started': (e) => this.updateFromCallResponse(e.call),\n      'call.member_added': this.updateFromMemberAdded,\n      'call.member_removed': this.updateFromMemberRemoved,\n      'call.member_updated_permission': this.updateMembers,\n      'call.member_updated': this.updateMembers,\n      'call.notification': (e) => {\n        this.updateFromCallResponse(e.call);\n        this.setMembers(e.members);\n      },\n      'call.permissions_updated': this.updateOwnCapabilities,\n      'call.reaction_new': this.updateParticipantReaction,\n      'call.recording_started': () =>\n        this.setCurrentValue(this.recordingSubject, true),\n      'call.recording_stopped': () =>\n        this.setCurrentValue(this.recordingSubject, false),\n      'call.recording_failed': () =>\n        this.setCurrentValue(this.recordingSubject, false),\n      'call.rejected': (e) => this.updateFromCallResponse(e.call),\n      'call.ring': (e) => this.updateFromCallResponse(e.call),\n      'call.missed': (e) => this.updateFromCallResponse(e.call),\n      'call.session_ended': (e) => this.updateFromCallResponse(e.call),\n      'call.session_participant_count_updated':\n        this.updateFromSessionParticipantCountUpdate,\n      'call.session_participant_joined':\n        this.updateFromSessionParticipantJoined,\n      'call.session_participant_left': this.updateFromSessionParticipantLeft,\n      'call.session_started': (e) => this.updateFromCallResponse(e.call),\n      'call.transcription_started': () => {\n        this.setCurrentValue(this.transcribingSubject, true);\n      },\n      'call.transcription_stopped': () => {\n        this.setCurrentValue(this.transcribingSubject, false);\n      },\n      'call.transcription_failed': () => {\n        this.setCurrentValue(this.transcribingSubject, false);\n      },\n      'call.unblocked_user': this.unblockUser,\n      'call.updated': (e) => this.updateFromCallResponse(e.call),\n    };\n  }\n\n  /**\n   * Runs the cleanup tasks.\n   */\n  dispose = () => {\n    for (const [ccKey, taskId] of this.closedCaptionsTasks.entries()) {\n      clearTimeout(taskId);\n      this.closedCaptionsTasks.delete(ccKey);\n    }\n  };\n\n  /**\n   * Sets the list of criteria that are used to sort the participants.\n   * To disable sorting, you can pass `noopComparator()`.\n   *\n   * @param comparator the comparator to use to sort the participants.\n   */\n  setSortParticipantsBy = (comparator: Comparator<StreamVideoParticipant>) => {\n    this.sortParticipantsBy = comparator;\n    // trigger re-sorting of participants\n    this.setCurrentValue(this.participantsSubject, (ps) => ps);\n  };\n\n  /**\n   * Gets the current value of an observable, or undefined if the observable has\n   * not emitted a value yet.\n   *\n   * @param observable$ the observable to get the value from.\n   */\n  getCurrentValue = RxUtils.getCurrentValue;\n\n  /**\n   * Updates the value of the provided Subject.\n   * An `update` can either be a new value or a function which takes\n   * the current value and returns a new value.\n   *\n   * @internal\n   *\n   * @param subject the subject to update.\n   * @param update the update to apply to the subject.\n   * @return the updated value.\n   */\n  setCurrentValue = RxUtils.setCurrentValue;\n\n  /**\n   * The server-side counted number of participants connected to the current call.\n   * This number includes the anonymous participants as well.\n   */\n  get participantCount() {\n    return this.getCurrentValue(this.participantCount$);\n  }\n\n  /**\n   * Sets the number of participants in the current call.\n   *\n   * @internal\n   * @param count the number of participants.\n   */\n  setParticipantCount = (count: Patch<number>) => {\n    return this.setCurrentValue(this.participantCountSubject, count);\n  };\n\n  /**\n   * The time the call session actually started.\n   * Useful for displaying the call duration.\n   */\n  get startedAt() {\n    return this.getCurrentValue(this.startedAt$);\n  }\n\n  /**\n   * Sets the time the call session actually started.\n   *\n   * @internal\n   * @param startedAt the time the call session actually started.\n   */\n  setStartedAt = (startedAt: Patch<Date | undefined>) => {\n    return this.setCurrentValue(this.startedAtSubject, startedAt);\n  };\n\n  /**\n   * Returns whether closed captions are enabled in the current call.\n   */\n  get captioning() {\n    return this.getCurrentValue(this.captioning$);\n  }\n\n  /**\n   * Sets the closed captioning state of the current call.\n   *\n   * @internal\n   * @param captioning the closed captioning state.\n   */\n  setCaptioning = (captioning: boolean) => {\n    return RxUtils.updateValue(this.captioningSubject, captioning);\n  };\n\n  /**\n   * The server-side counted number of anonymous participants connected to the current call.\n   * This number includes the anonymous participants as well.\n   */\n  get anonymousParticipantCount() {\n    return this.getCurrentValue(this.anonymousParticipantCount$);\n  }\n\n  /**\n   * Sets the number of anonymous participants in the current call.\n   *\n   * @internal\n   * @param count the number of anonymous participants.\n   */\n  setAnonymousParticipantCount = (count: Patch<number>) => {\n    return this.setCurrentValue(this.anonymousParticipantCountSubject, count);\n  };\n\n  /**\n   * The list of participants in the current call.\n   */\n  get participants() {\n    return this.getCurrentValue(this.participants$);\n  }\n\n  /**\n   * Sets the list of participants in the current call.\n   *\n   * @internal\n   *\n   * @param participants the list of participants.\n   */\n  setParticipants = (participants: Patch<StreamVideoParticipant[]>) => {\n    return this.setCurrentValue(this.participantsSubject, participants);\n  };\n\n  /**\n   * The local participant in the current call.\n   */\n  get localParticipant() {\n    return this.getCurrentValue(this.localParticipant$);\n  }\n\n  /**\n   * The list of remote participants in the current call.\n   */\n  get remoteParticipants() {\n    return this.getCurrentValue(this.remoteParticipants$);\n  }\n\n  /**\n   * The dominant speaker in the current call.\n   */\n  get dominantSpeaker() {\n    return this.getCurrentValue(this.dominantSpeaker$);\n  }\n\n  /**\n   * The list of pinned participants in the current call.\n   */\n  get pinnedParticipants() {\n    return this.getCurrentValue(this.pinnedParticipants$);\n  }\n\n  /**\n   * Tell if there is an ongoing screen share in this call.\n   */\n  get hasOngoingScreenShare() {\n    return this.getCurrentValue(this.hasOngoingScreenShare$);\n  }\n\n  /**\n   * The calling state.\n   */\n  get callingState() {\n    return this.getCurrentValue(this.callingState$);\n  }\n\n  /**\n   * Sets the calling state.\n   *\n   * @internal\n   * @param state the new calling state.\n   */\n  setCallingState = (state: Patch<CallingState>) => {\n    return this.setCurrentValue(this.callingStateSubject, state);\n  };\n\n  /**\n   * The call stats report.\n   */\n  get callStatsReport() {\n    return this.getCurrentValue(this.callStatsReport$);\n  }\n\n  /**\n   * Sets the call stats report.\n   *\n   * @internal\n   * @param report the report to set.\n   */\n  setCallStatsReport = (report: Patch<CallStatsReport | undefined>) => {\n    return this.setCurrentValue(this.callStatsReportSubject, report);\n  };\n\n  /**\n   * The members of the current call.\n   */\n  get members() {\n    return this.getCurrentValue(this.members$);\n  }\n\n  /**\n   * Sets the members of the current call.\n   *\n   * @internal\n   * @param members the members to set.\n   */\n  setMembers = (members: Patch<MemberResponse[]>) => {\n    this.setCurrentValue(this.membersSubject, members);\n  };\n\n  /**\n   * The capabilities of the current user for the current call.\n   */\n  get ownCapabilities() {\n    return this.getCurrentValue(this.ownCapabilities$);\n  }\n\n  /**\n   * Sets the own capabilities.\n   *\n   * @internal\n   * @param capabilities the capabilities to set.\n   */\n  setOwnCapabilities = (capabilities: Patch<OwnCapability[]>) => {\n    return this.setCurrentValue(this.ownCapabilitiesSubject, capabilities);\n  };\n\n  /**\n   * The backstage state.\n   */\n  get backstage() {\n    return this.getCurrentValue(this.backstage$);\n  }\n\n  /**\n   * Sets the backstage state.\n   * @param backstage the backstage state.\n   */\n  setBackstage = (backstage: Patch<boolean>) => {\n    return this.setCurrentValue(this.backstageSubject, backstage);\n  };\n\n  /**\n   * Will provide the list of blocked user IDs.\n   */\n  get blockedUserIds() {\n    return this.getCurrentValue(this.blockedUserIds$);\n  }\n\n  /**\n   * Will provide the time when this call has been created.\n   */\n  get createdAt() {\n    return this.getCurrentValue(this.createdAt$);\n  }\n\n  /**\n   * Will provide the time when this call has been ended.\n   */\n  get endedAt() {\n    return this.getCurrentValue(this.endedAt$);\n  }\n\n  /**\n   * Sets the time when this call has been ended.\n   * @param endedAt the time when this call has been ended.\n   */\n  setEndedAt = (endedAt: Patch<Date | undefined>) => {\n    return this.setCurrentValue(this.endedAtSubject, endedAt);\n  };\n\n  /**\n   * Will provide the time when this call has been scheduled to start.\n   */\n  get startsAt() {\n    return this.getCurrentValue(this.startsAt$);\n  }\n\n  /**\n   * Will provide the time when this call has been updated.\n   */\n  get updatedAt() {\n    return this.getCurrentValue(this.updatedAt$);\n  }\n\n  /**\n   * Will provide the user who created this call.\n   */\n  get createdBy() {\n    return this.getCurrentValue(this.createdBy$);\n  }\n\n  /**\n   * Will provide the custom data of this call.\n   */\n  get custom() {\n    return this.getCurrentValue(this.custom$);\n  }\n\n  /**\n   * Will provide the egress data of this call.\n   */\n  get egress() {\n    return this.getCurrentValue(this.egress$);\n  }\n\n  /**\n   * Will provide the ingress data of this call.\n   */\n  get ingress() {\n    return this.getCurrentValue(this.ingress$);\n  }\n\n  /**\n   * Will provide the recording state of this call.\n   */\n  get recording() {\n    return this.getCurrentValue(this.recording$);\n  }\n\n  /**\n   * Will provide the session data of this call.\n   */\n  get session() {\n    return this.getCurrentValue(this.session$);\n  }\n\n  /**\n   * Will provide the settings of this call.\n   */\n  get settings() {\n    return this.getCurrentValue(this.settings$);\n  }\n\n  /**\n   * Will provide the transcribing state of this call.\n   */\n  get transcribing() {\n    return this.getCurrentValue(this.transcribing$);\n  }\n\n  /**\n   * Will provide the user who ended this call.\n   */\n  get endedBy() {\n    return this.getCurrentValue(this.endedBy$);\n  }\n\n  /**\n   * Will provide the thumbnails of this call, if enabled in the call settings.\n   */\n  get thumbnails() {\n    return this.getCurrentValue(this.thumbnails$);\n  }\n\n  /**\n   * Returns the current queue of closed captions.\n   */\n  get closedCaptions() {\n    return this.getCurrentValue(this.closedCaptions$);\n  }\n\n  /**\n   * Will try to find the participant with the given sessionId in the current call.\n   *\n   * @param sessionId the sessionId of the participant to find.\n   * @returns the participant with the given sessionId or undefined if not found.\n   */\n  findParticipantBySessionId = (\n    sessionId: string,\n  ): StreamVideoParticipant | undefined => {\n    return this.participants.find((p) => p.sessionId === sessionId);\n  };\n\n  /**\n   * Returns a new lookup table of participants indexed by their session ID.\n   */\n  getParticipantLookupBySessionId = () => {\n    return this.participants.reduce<{\n      [sessionId: string]: StreamVideoParticipant | undefined;\n    }>((lookupTable, participant) => {\n      lookupTable[participant.sessionId] = participant;\n      return lookupTable;\n    }, {});\n  };\n\n  /**\n   * Updates a participant in the current call identified by the given `sessionId`.\n   * If the participant can't be found, this operation is no-op.\n   *\n   * @internal\n   *\n   * @param sessionId the session ID of the participant to update.\n   * @param patch the patch to apply to the participant.\n   * @returns the updated participant or `undefined` if the participant couldn't be found.\n   */\n  updateParticipant = (\n    sessionId: string,\n    patch:\n      | StreamVideoParticipantPatch\n      | ((p: StreamVideoParticipant) => StreamVideoParticipantPatch),\n  ) => {\n    const participant = this.findParticipantBySessionId(sessionId);\n    if (!participant) {\n      this.logger('warn', `Participant with sessionId ${sessionId} not found`);\n      return;\n    }\n\n    const thePatch = typeof patch === 'function' ? patch(participant) : patch;\n    const updatedParticipant: StreamVideoParticipant = {\n      ...participant,\n      ...thePatch,\n    };\n    return this.setParticipants((participants) =>\n      participants.map((p) =>\n        p.sessionId === sessionId ? updatedParticipant : p,\n      ),\n    );\n  };\n\n  /**\n   * Updates a participant in the current call identified by the given `sessionId`.\n   * If a participant with matching `sessionId` can't be found, the provided\n   * `participant` is added to the list of participants.\n   *\n   * @param sessionId the session ID of the participant to update.\n   * @param participant the participant to update or add.\n   */\n  updateOrAddParticipant = (\n    sessionId: string,\n    participant: StreamVideoParticipant,\n  ) => {\n    return this.setParticipants((participants) => {\n      let add = true;\n      const nextParticipants = participants.map((p) => {\n        if (p.sessionId === sessionId) {\n          add = false;\n          return {\n            ...p,\n            ...participant,\n          };\n        }\n        return p;\n      });\n      if (add) nextParticipants.push(participant);\n      return nextParticipants;\n    });\n  };\n\n  /**\n   * Updates all participants in the current call whose session ID is in the given `sessionIds`.\n   * If no patches are provided, this operation is no-op.\n   *\n   * @internal\n   *\n   * @param patch the patch to apply to the participants.\n   * @returns all participants, with all patch applied.\n   */\n  updateParticipants = (patch: StreamVideoParticipantPatches) => {\n    if (Object.keys(patch).length === 0) return this.participants;\n    return this.setParticipants((participants) =>\n      participants.map((p) => {\n        const thePatch = patch[p.sessionId];\n        if (thePatch) {\n          return {\n            ...p,\n            ...thePatch,\n          };\n        }\n        return p;\n      }),\n    );\n  };\n\n  /**\n   * Update track subscription configuration for one or more participants.\n   * You have to create a subscription for each participant for all the different kinds of tracks you want to receive.\n   * You can only subscribe for tracks after the participant started publishing the given kind of track.\n   *\n   * @param trackType the kind of subscription to update.\n   * @param changes the list of subscription changes to do.\n   */\n  updateParticipantTracks = (\n    trackType: VideoTrackType,\n    changes: SubscriptionChanges,\n  ) => {\n    return this.updateParticipants(\n      Object.entries(changes).reduce<StreamVideoParticipantPatches>(\n        (acc, [sessionId, change]) => {\n          if (change.dimension) {\n            change.dimension.height = Math.ceil(change.dimension.height);\n            change.dimension.width = Math.ceil(change.dimension.width);\n          }\n          const prop: keyof StreamVideoParticipant | undefined =\n            trackType === 'videoTrack'\n              ? 'videoDimension'\n              : trackType === 'screenShareTrack'\n                ? 'screenShareDimension'\n                : undefined;\n          if (prop) {\n            acc[sessionId] = {\n              [prop]: change.dimension,\n            };\n          }\n          return acc;\n        },\n        {},\n      ),\n    );\n  };\n\n  /**\n   * Updates the call state with the data received from the server.\n   *\n   * @internal\n   *\n   * @param event the video event that our backend sent us.\n   */\n  updateFromEvent = (event: VideoEvent) => {\n    const update = this.eventHandlers[event.type];\n    if (update) {\n      update(event as any);\n    }\n  };\n\n  /**\n   * Updates the participant pinned state with server side pinning data.\n   *\n   * @param pins the latest pins from the server.\n   */\n  setServerSidePins = (pins: Pin[]) => {\n    const pinsLookup = pins.reduce<{ [sessionId: string]: number | undefined }>(\n      (lookup, pin) => {\n        lookup[pin.sessionId] = Date.now();\n        return lookup;\n      },\n      {},\n    );\n\n    return this.setParticipants((participants) =>\n      participants.map((participant) => {\n        const serverSidePinnedAt = pinsLookup[participant.sessionId];\n        // the participant is newly pinned\n        if (serverSidePinnedAt) {\n          return {\n            ...participant,\n            pin: {\n              isLocalPin: false,\n              pinnedAt: serverSidePinnedAt,\n            },\n          };\n        }\n        // the participant is no longer pinned server side\n        // we need to reset the pin\n        if (participant.pin && !participant.pin.isLocalPin) {\n          return {\n            ...participant,\n            pin: undefined,\n          };\n        }\n        // no changes to be applied\n        return participant;\n      }),\n    );\n  };\n\n  /**\n   * Adds an orphaned track to the call state.\n   *\n   * @internal\n   *\n   * @param orphanedTrack the orphaned track to add.\n   */\n  registerOrphanedTrack = (orphanedTrack: OrphanedTrack) => {\n    this.orphanedTracks.push(orphanedTrack);\n  };\n\n  /**\n   * Removes an orphaned track from the call state.\n   *\n   * @internal\n   *\n   * @param id the ID of the orphaned track to remove.\n   */\n  removeOrphanedTrack = (id: string) => {\n    this.orphanedTracks = this.orphanedTracks.filter((o) => o.id !== id);\n  };\n\n  /**\n   * Takes all orphaned tracks with the given track lookup prefix.\n   * All orphaned tracks with the given track lookup prefix are removed from the call state.\n   *\n   * @internal\n   *\n   * @param trackLookupPrefix the track lookup prefix to match the orphaned tracks by.\n   */\n  takeOrphanedTracks = (trackLookupPrefix: string): OrphanedTrack[] => {\n    const orphans = this.orphanedTracks.filter(\n      (orphan) => orphan.trackLookupPrefix === trackLookupPrefix,\n    );\n    if (orphans.length > 0) {\n      this.orphanedTracks = this.orphanedTracks.filter(\n        (orphan) => orphan.trackLookupPrefix !== trackLookupPrefix,\n      );\n    }\n    return orphans;\n  };\n\n  /**\n   * Updates the closed captions settings.\n   *\n   * @param config the new closed captions settings.\n   */\n  updateClosedCaptionSettings = (config: Partial<ClosedCaptionsSettings>) => {\n    this.closedCaptionsSettings = { ...this.closedCaptionsSettings, ...config };\n  };\n\n  /**\n   * Updates the call state with the data received from the server.\n   *\n   * @internal\n   *\n   * @param call the call response from the server.\n   */\n  updateFromCallResponse = (call: CallResponse) => {\n    this.setBackstage(call.backstage);\n    this.setCurrentValue(this.blockedUserIdsSubject, call.blocked_user_ids);\n    this.setCurrentValue(this.createdAtSubject, new Date(call.created_at));\n    this.setCurrentValue(this.updatedAtSubject, new Date(call.updated_at));\n    this.setCurrentValue(\n      this.startsAtSubject,\n      call.starts_at ? new Date(call.starts_at) : undefined,\n    );\n    this.setEndedAt(call.ended_at ? new Date(call.ended_at) : undefined);\n    this.setCurrentValue(this.createdBySubject, call.created_by);\n    this.setCurrentValue(this.customSubject, call.custom);\n    this.setCurrentValue(this.egressSubject, call.egress);\n    this.setCurrentValue(this.ingressSubject, call.ingress);\n    this.setCurrentValue(this.recordingSubject, call.recording);\n    const s = this.setCurrentValue(this.sessionSubject, call.session);\n    this.updateParticipantCountFromSession(s);\n    this.setCurrentValue(this.settingsSubject, call.settings);\n    this.setCurrentValue(this.transcribingSubject, call.transcribing);\n    this.setCurrentValue(this.captioningSubject, call.captioning);\n    this.setCurrentValue(this.thumbnailsSubject, call.thumbnails);\n  };\n\n  /**\n   * Updates the call state with the data received from the SFU server.\n   *\n   * @internal\n   *\n   * @param callState the call state from the SFU server.\n   * @param currentSessionId the session ID of the current user.\n   * @param reconnectDetails optional reconnect details.\n   */\n  updateFromSfuCallState = (\n    callState: SfuCallState,\n    currentSessionId: string,\n    reconnectDetails?: ReconnectDetails,\n  ) => {\n    const { participants, participantCount, startedAt, pins } = callState;\n    const localPublishedTracks =\n      reconnectDetails?.announcedTracks.map((t) => t.trackType) ?? [];\n    this.setParticipants(() => {\n      const participantLookup = this.getParticipantLookupBySessionId();\n      return participants.map<StreamVideoParticipant>((p) => {\n        // We need to preserve the local state of the participant\n        // (e.g. videoDimension, visibilityState, pinnedAt, etc.)\n        // as it doesn't exist on the server.\n        const existingParticipant = participantLookup[p.sessionId];\n        const isLocalParticipant = p.sessionId === currentSessionId;\n        return Object.assign({}, existingParticipant, p, {\n          isLocalParticipant,\n          publishedTracks: isLocalParticipant\n            ? localPublishedTracks\n            : p.publishedTracks,\n          viewportVisibilityState:\n            existingParticipant?.viewportVisibilityState ?? {\n              videoTrack: VisibilityState.UNKNOWN,\n              screenShareTrack: VisibilityState.UNKNOWN,\n            },\n        } satisfies Partial<StreamVideoParticipant>);\n      });\n    });\n\n    this.setParticipantCount(participantCount?.total || 0);\n    this.setAnonymousParticipantCount(participantCount?.anonymous || 0);\n    this.setStartedAt(startedAt ? Timestamp.toDate(startedAt) : new Date());\n    this.setServerSidePins(pins);\n  };\n\n  private updateFromMemberRemoved = (event: CallMemberRemovedEvent) => {\n    this.updateFromCallResponse(event.call);\n    this.setCurrentValue(this.membersSubject, (members) =>\n      members.filter((m) => event.members.indexOf(m.user_id) === -1),\n    );\n  };\n\n  private updateFromMemberAdded = (event: CallMemberAddedEvent) => {\n    this.updateFromCallResponse(event.call);\n    this.setCurrentValue(this.membersSubject, (members) => [\n      ...members,\n      ...event.members,\n    ]);\n  };\n\n  private updateFromHLSBroadcastStopped = () => {\n    this.setCurrentValue(this.egressSubject, (egress = defaultEgress) => ({\n      ...egress,\n      broadcasting: false,\n      hls: {\n        ...egress.hls!,\n        status: '',\n      },\n    }));\n  };\n\n  private updateFromHLSBroadcastingFailed = () => {\n    this.setCurrentValue(this.egressSubject, (egress = defaultEgress) => ({\n      ...egress,\n      broadcasting: false,\n      hls: {\n        ...egress.hls!,\n        status: '',\n      },\n    }));\n  };\n\n  private updateParticipantCountFromSession = (\n    session: CallSessionResponse | undefined,\n  ) => {\n    // when in JOINED state, we should use the participant count coming through\n    // the SFU healthcheck event, as it's more accurate.\n    if (!session || this.callingState === CallingState.JOINED) return;\n    const byRoleCount = Object.values(\n      session.participants_count_by_role,\n    ).reduce((total, countByRole) => total + countByRole, 0);\n    const participantCount = Math.max(byRoleCount, session.participants.length);\n    this.setParticipantCount(participantCount);\n    this.setAnonymousParticipantCount(session.anonymous_participant_count || 0);\n  };\n\n  private updateFromSessionParticipantCountUpdate = (\n    event: CallSessionParticipantCountsUpdatedEvent,\n  ) => {\n    const s = this.setCurrentValue(this.sessionSubject, (session) => {\n      if (!session) return session;\n      return {\n        ...session,\n        anonymous_participant_count: event.anonymous_participant_count,\n        participants_count_by_role: event.participants_count_by_role,\n      };\n    });\n    this.updateParticipantCountFromSession(s);\n  };\n\n  private updateFromSessionParticipantLeft = (\n    event: CallSessionParticipantLeftEvent,\n  ) => {\n    const s = this.setCurrentValue(this.sessionSubject, (session) => {\n      if (!session) return session;\n      const { participants, participants_count_by_role } = session;\n      const { user, user_session_id } = event.participant;\n      return {\n        ...session,\n        participants: participants.filter(\n          (p) => p.user_session_id !== user_session_id,\n        ),\n        participants_count_by_role: {\n          ...participants_count_by_role,\n          [user.role]: Math.max(\n            0,\n            (participants_count_by_role[user.role] || 0) - 1,\n          ),\n        },\n      };\n    });\n    this.updateParticipantCountFromSession(s);\n  };\n\n  private updateFromSessionParticipantJoined = (\n    event: CallSessionParticipantJoinedEvent,\n  ) => {\n    const s = this.setCurrentValue(this.sessionSubject, (session) => {\n      if (!session) return session;\n      const { participants, participants_count_by_role } = session;\n      const { user, user_session_id } = event.participant;\n      // It could happen that the backend delivers the same participant more than once.\n      // Once with the call.session_started event and once again with the\n      // call.session_participant_joined event. In this case,\n      // we should update the existing participant and prevent duplicating it.\n      let shouldInsertParticipant = true;\n      const updatedParticipants = participants.map((p) => {\n        if (p.user_session_id === user_session_id) {\n          shouldInsertParticipant = false;\n          return event.participant;\n        }\n        return p;\n      });\n      if (shouldInsertParticipant) {\n        // this is a new array, we can safely push the new participant\n        updatedParticipants.push(event.participant);\n      }\n\n      // If we are updating an existing participant, we don't want to increment\n      // the participant_by_role count.\n      const increment = shouldInsertParticipant ? 1 : 0;\n      return {\n        ...session,\n        participants: updatedParticipants,\n        participants_count_by_role: {\n          ...participants_count_by_role,\n          [user.role]: (participants_count_by_role[user.role] || 0) + increment,\n        },\n      };\n    });\n    this.updateParticipantCountFromSession(s);\n  };\n\n  private updateMembers = (\n    event: CallMemberUpdatedEvent | CallMemberUpdatedPermissionEvent,\n  ) => {\n    this.updateFromCallResponse(event.call);\n    this.setCurrentValue(this.membersSubject, (members) =>\n      members.map((member) => {\n        const memberUpdate = event.members.find(\n          (m) => m.user_id === member.user_id,\n        );\n        return memberUpdate ? memberUpdate : member;\n      }),\n    );\n  };\n\n  private updateParticipantReaction = (event: CallReactionEvent) => {\n    const { user, custom, type, emoji_code } = event.reaction;\n    this.setParticipants((participants) => {\n      return participants.map((p) => {\n        // skip if the reaction is not for this participant\n        if (p.userId !== user.id) return p;\n        // update the participant with the new reaction\n        return {\n          ...p,\n          reaction: {\n            type,\n            emoji_code,\n            custom,\n          },\n        };\n      });\n    });\n  };\n\n  private unblockUser = (event: UnblockedUserEvent) => {\n    this.setCurrentValue(this.blockedUserIdsSubject, (current) => {\n      if (!current) return current;\n      return current.filter((id) => id !== event.user.id);\n    });\n  };\n\n  private blockUser = (event: BlockedUserEvent) => {\n    this.setCurrentValue(this.blockedUserIdsSubject, (current) => [\n      ...(current || []),\n      event.user.id,\n    ]);\n  };\n\n  private updateOwnCapabilities = (event: UpdatedCallPermissionsEvent) => {\n    if (event.user.id === this.localParticipant?.userId) {\n      this.setCurrentValue(this.ownCapabilitiesSubject, event.own_capabilities);\n    }\n  };\n\n  private updateFromClosedCaptions = (event: ClosedCaptionEvent) => {\n    this.setCurrentValue(this.closedCaptionsSubject, (queue) => {\n      const { closed_caption } = event;\n\n      const keyOf = (c: CallClosedCaption) => `${c.speaker_id}/${c.start_time}`;\n      const currentKey = keyOf(closed_caption);\n\n      const duplicate = queue.some((caption) => keyOf(caption) === currentKey);\n      if (duplicate) return queue;\n\n      const nextQueue = [...queue, closed_caption];\n\n      const { visibilityDurationMs = 2700, maxVisibleCaptions = 2 } =\n        this.closedCaptionsSettings || {};\n      // schedule the removal of the closed caption after the retention time\n      if (visibilityDurationMs > 0) {\n        const taskId = setTimeout(() => {\n          this.setCurrentValue(this.closedCaptionsSubject, (captions) =>\n            captions.filter((caption) => caption !== closed_caption),\n          );\n          this.closedCaptionsTasks.delete(currentKey);\n        }, visibilityDurationMs);\n        this.closedCaptionsTasks.set(currentKey, taskId);\n\n        // cancel the cleanup tasks for the closed captions that are no longer in the queue\n        for (let i = 0; i < nextQueue.length - maxVisibleCaptions; i++) {\n          const key = keyOf(nextQueue[i]);\n          const task = this.closedCaptionsTasks.get(key);\n          clearTimeout(task);\n          this.closedCaptionsTasks.delete(key);\n        }\n      }\n\n      // trim the queue\n      return nextQueue.slice(-maxVisibleCaptions);\n    });\n  };\n}\n","import { ClientDetails, Sdk, SdkType } from '../gen/video/sfu/models/models';\n\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */\nexport const flatten = (report: RTCStatsReport) => {\n  const stats: RTCStats[] = [];\n  report.forEach((s) => {\n    stats.push(s);\n  });\n  return stats;\n};\n\nexport const getSdkSignature = (clientDetails: ClientDetails) => {\n  const { sdk, ...platform } = clientDetails;\n  const sdkName = getSdkName(sdk);\n  const sdkVersion = getSdkVersion(sdk);\n\n  return {\n    sdkName,\n    sdkVersion,\n    ...platform,\n  };\n};\n\nexport const getSdkName = (sdk: Sdk | undefined) => {\n  return sdk && sdk.type === SdkType.REACT\n    ? 'stream-react'\n    : sdk && sdk.type === SdkType.REACT_NATIVE\n      ? 'stream-react-native'\n      : 'stream-js';\n};\n\nexport const getSdkVersion = (sdk: Sdk | undefined) => {\n  return sdk ? `${sdk.major}.${sdk.minor}.${sdk.patch}` : '0.0.0-development';\n};\n","/**\n * Checks whether the current browser is Safari.\n */\nexport const isSafari = () => {\n  if (typeof navigator === 'undefined') return false;\n  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || '');\n};\n\n/**\n * Checks whether the current browser is Firefox.\n */\nexport const isFirefox = () => {\n  if (typeof navigator === 'undefined') return false;\n  return navigator.userAgent?.includes('Firefox');\n};\n\n/**\n * Checks whether the current browser is Google Chrome.\n */\nexport const isChrome = () => {\n  if (typeof navigator === 'undefined') return false;\n  return navigator.userAgent?.includes('Chrome');\n};\n","import type {\n  AggregatedStatsReport,\n  BaseStats,\n  ParticipantsStatsReport,\n  RTCMediaSourceStats,\n  StatsReport,\n} from './types';\nimport { CallState } from '../store';\nimport { Publisher, Subscriber } from '../rtc';\nimport { getLogger } from '../logger';\nimport { flatten } from './utils';\nimport { TrackType } from '../gen/video/sfu/models/models';\nimport { isFirefox } from '../helpers/browsers';\n\nexport type StatsReporterOpts = {\n  subscriber: Subscriber;\n  publisher?: Publisher;\n  state: CallState;\n  datacenter: string;\n  pollingIntervalInMs?: number;\n};\n\nexport type StatsReporter = {\n  /**\n   * Will turn on stats reporting for a given sessionId.\n   *\n   * @param sessionId the session id.\n   */\n  startReportingStatsFor: (sessionId: string) => void;\n\n  /**\n   * Will turn off stats reporting for a given sessionId.\n   *\n   * @param sessionId the session id.\n   */\n  stopReportingStatsFor: (sessionId: string) => void;\n\n  /**\n   * Helper method for retrieving stats for a given peer connection kind\n   * and media stream flowing through it.\n   *\n   * @param kind the peer connection kind (subscriber or publisher).\n   * @param mediaStream the media stream.\n   */\n  getStatsForStream: (\n    kind: 'subscriber' | 'publisher',\n    tracks: MediaStreamTrack[],\n  ) => Promise<StatsReport[]>;\n\n  /**\n   * Helper method for retrieving raw stats for a given peer connection kind.\n   *\n   * @param kind the peer connection kind (subscriber or publisher).\n   * @param selector the track selector. If not provided, stats for all tracks will be returned.\n   */\n  getRawStatsForTrack: (\n    kind: 'subscriber' | 'publisher',\n    selector?: MediaStreamTrack,\n  ) => Promise<RTCStatsReport | undefined>;\n\n  /**\n   * Stops the stats reporter and releases all resources.\n   */\n  stop: () => void;\n};\n\n/**\n * Creates a new StatsReporter instance that collects metrics about the ongoing call and reports them to the state store\n */\nexport const createStatsReporter = ({\n  subscriber,\n  publisher,\n  state,\n  datacenter,\n  pollingIntervalInMs = 2000,\n}: StatsReporterOpts): StatsReporter => {\n  const logger = getLogger(['stats']);\n  const getRawStatsForTrack = async (\n    kind: 'subscriber' | 'publisher',\n    selector?: MediaStreamTrack,\n  ) => {\n    if (kind === 'subscriber' && subscriber) {\n      return subscriber.getStats(selector);\n    } else if (kind === 'publisher' && publisher) {\n      return publisher.getStats(selector);\n    } else {\n      return undefined;\n    }\n  };\n\n  const getStatsForStream = async (\n    kind: 'subscriber' | 'publisher',\n    tracks: MediaStreamTrack[],\n  ) => {\n    const pc = kind === 'subscriber' ? subscriber : publisher;\n    if (!pc) return [];\n    const statsForStream: StatsReport[] = [];\n    for (const track of tracks) {\n      const report = await pc.getStats(track);\n      const stats = transform(report, {\n        trackKind: track.kind as 'audio' | 'video',\n        kind,\n        publisher: undefined,\n      });\n      statsForStream.push(stats);\n    }\n    return statsForStream;\n  };\n\n  const startReportingStatsFor = (sessionId: string) => {\n    sessionIdsToTrack.add(sessionId);\n    void run();\n  };\n\n  const stopReportingStatsFor = (sessionId: string) => {\n    sessionIdsToTrack.delete(sessionId);\n    void run();\n  };\n\n  const sessionIdsToTrack = new Set<string>();\n\n  /**\n   * The main stats reporting loop.\n   */\n  const run = async () => {\n    const participantStats: ParticipantsStatsReport = {};\n    if (sessionIdsToTrack.size > 0) {\n      const sessionIds = new Set(sessionIdsToTrack);\n      for (const participant of state.participants) {\n        if (!sessionIds.has(participant.sessionId)) continue;\n        const {\n          audioStream,\n          isLocalParticipant,\n          sessionId,\n          userId,\n          videoStream,\n        } = participant;\n        const kind = isLocalParticipant ? 'publisher' : 'subscriber';\n        try {\n          const tracks = isLocalParticipant\n            ? publisher?.getPublishedTracks() || []\n            : [\n                ...(videoStream?.getVideoTracks() || []),\n                ...(audioStream?.getAudioTracks() || []),\n              ];\n          participantStats[sessionId] = await getStatsForStream(kind, tracks);\n        } catch (e) {\n          logger('warn', `Failed to collect ${kind} stats for ${userId}`, e);\n        }\n      }\n    }\n\n    const [subscriberStats, publisherStats] = await Promise.all([\n      subscriber\n        .getStats()\n        .then((report) =>\n          transform(report, {\n            kind: 'subscriber',\n            trackKind: 'video',\n            publisher,\n          }),\n        )\n        .then(aggregate),\n      publisher\n        ? publisher\n            .getStats()\n            .then((report) =>\n              transform(report, {\n                kind: 'publisher',\n                trackKind: 'video',\n                publisher,\n              }),\n            )\n            .then(aggregate)\n        : getEmptyStats(),\n    ]);\n\n    const [subscriberRawStats, publisherRawStats] = await Promise.all([\n      getRawStatsForTrack('subscriber'),\n      publisher ? getRawStatsForTrack('publisher') : undefined,\n    ]);\n\n    state.setCallStatsReport({\n      datacenter,\n      publisherStats,\n      subscriberStats,\n      subscriberRawStats,\n      publisherRawStats,\n      participants: participantStats,\n      timestamp: Date.now(),\n    });\n  };\n\n  let timeoutId: NodeJS.Timeout | undefined;\n  if (pollingIntervalInMs > 0) {\n    const loop = async () => {\n      await run().catch((e) => {\n        logger('debug', 'Failed to collect stats', e);\n      });\n      timeoutId = setTimeout(loop, pollingIntervalInMs);\n    };\n    void loop();\n  }\n\n  const stop = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n  };\n\n  return {\n    getRawStatsForTrack,\n    getStatsForStream,\n    startReportingStatsFor,\n    stopReportingStatsFor,\n    stop,\n  };\n};\n\nexport type StatsTransformOpts = {\n  /**\n   * The kind of track we are transforming stats for.\n   */\n  trackKind: 'audio' | 'video';\n  /**\n   * The kind of peer connection we are transforming stats for.\n   */\n  kind: 'subscriber' | 'publisher';\n  /**\n   * The publisher instance.\n   */\n  publisher: Publisher | undefined;\n};\n\n/**\n * Transforms raw RTC stats into a slimmer and uniform across browsers format.\n *\n * @param report the report to transform.\n * @param opts the transform options.\n */\nconst transform = (\n  report: RTCStatsReport,\n  opts: StatsTransformOpts,\n): StatsReport => {\n  const { trackKind, kind, publisher } = opts;\n  const direction = kind === 'subscriber' ? 'inbound-rtp' : 'outbound-rtp';\n  const stats = flatten(report);\n  const streams = stats\n    .filter(\n      (stat) =>\n        stat.type === direction &&\n        (stat as RTCRtpStreamStats).kind === trackKind,\n    )\n    .map((stat): BaseStats => {\n      const rtcStreamStats = stat as RTCInboundRtpStreamStats &\n        RTCOutboundRtpStreamStats;\n\n      const codec = stats.find(\n        (s) => s.type === 'codec' && s.id === rtcStreamStats.codecId,\n      ) as RTCRtpCodec | undefined;\n\n      const transport = stats.find(\n        (s) => s.type === 'transport' && s.id === rtcStreamStats.transportId,\n      ) as RTCTransportStats | undefined;\n\n      let roundTripTime: number | undefined;\n      if (transport && transport.dtlsState === 'connected') {\n        const candidatePair = stats.find(\n          (s) =>\n            s.type === 'candidate-pair' &&\n            s.id === transport.selectedCandidatePairId,\n        ) as RTCIceCandidatePairStats | undefined;\n        roundTripTime = candidatePair?.currentRoundTripTime;\n      }\n\n      let trackType: TrackType | undefined;\n      if (kind === 'publisher' && publisher) {\n        const firefox = isFirefox();\n        const mediaSource = stats.find(\n          (s) =>\n            s.type === 'media-source' &&\n            // Firefox doesn't have mediaSourceId, so we need to guess the media source\n            (firefox ? true : s.id === rtcStreamStats.mediaSourceId),\n        ) as RTCMediaSourceStats | undefined;\n        if (mediaSource) {\n          trackType = publisher.getTrackType(mediaSource.trackIdentifier);\n        }\n      }\n\n      return {\n        bytesSent: rtcStreamStats.bytesSent,\n        bytesReceived: rtcStreamStats.bytesReceived,\n        codec: codec?.mimeType,\n        currentRoundTripTime: roundTripTime,\n        frameHeight: rtcStreamStats.frameHeight,\n        frameWidth: rtcStreamStats.frameWidth,\n        framesPerSecond: rtcStreamStats.framesPerSecond,\n        jitter: rtcStreamStats.jitter,\n        kind: rtcStreamStats.kind,\n        mediaSourceId: rtcStreamStats.mediaSourceId,\n        qualityLimitationReason: rtcStreamStats.qualityLimitationReason,\n        rid: rtcStreamStats.rid,\n        ssrc: rtcStreamStats.ssrc,\n        trackType,\n      };\n    });\n\n  return {\n    rawStats: report,\n    streams,\n    timestamp: Date.now(),\n  };\n};\n\nconst getEmptyStats = (stats?: StatsReport): AggregatedStatsReport => {\n  return {\n    rawReport: stats ?? { streams: [], timestamp: Date.now() },\n    totalBytesSent: 0,\n    totalBytesReceived: 0,\n    averageJitterInMs: 0,\n    averageRoundTripTimeInMs: 0,\n    qualityLimitationReasons: 'none',\n    highestFrameWidth: 0,\n    highestFrameHeight: 0,\n    highestFramesPerSecond: 0,\n    codec: '',\n    codecPerTrackType: {},\n    timestamp: Date.now(),\n  };\n};\n\n/**\n * Aggregates generic stats.\n *\n * @param stats the stats to aggregate.\n */\nconst aggregate = (stats: StatsReport): AggregatedStatsReport => {\n  const aggregatedStats = getEmptyStats(stats);\n\n  let maxArea = -1;\n  const area = (w: number, h: number) => w * h;\n\n  const qualityLimitationReasons = new Set<string>();\n  const streams = stats.streams;\n  const report = streams.reduce((acc, stream) => {\n    acc.totalBytesSent += stream.bytesSent || 0;\n    acc.totalBytesReceived += stream.bytesReceived || 0;\n    acc.averageJitterInMs += stream.jitter || 0;\n    acc.averageRoundTripTimeInMs += stream.currentRoundTripTime || 0;\n\n    // naive calculation of the highest resolution\n    const streamArea = area(stream.frameWidth || 0, stream.frameHeight || 0);\n    if (streamArea > maxArea) {\n      acc.highestFrameWidth = stream.frameWidth || 0;\n      acc.highestFrameHeight = stream.frameHeight || 0;\n      acc.highestFramesPerSecond = stream.framesPerSecond || 0;\n      maxArea = streamArea;\n    }\n\n    qualityLimitationReasons.add(stream.qualityLimitationReason || '');\n    return acc;\n  }, aggregatedStats);\n\n  if (streams.length > 0) {\n    report.averageJitterInMs = Math.round(\n      (report.averageJitterInMs / streams.length) * 1000,\n    );\n    report.averageRoundTripTimeInMs = Math.round(\n      (report.averageRoundTripTimeInMs / streams.length) * 1000,\n    );\n    // we take the first codec we find, as it should be the same for all streams\n    report.codec = streams[0].codec || '';\n    report.codecPerTrackType = streams.reduce(\n      (acc, stream) => {\n        if (stream.trackType) {\n          acc[stream.trackType] = stream.codec || '';\n        }\n        return acc;\n      },\n      {} as Record<TrackType, string>,\n    );\n  }\n\n  const qualityLimitationReason = [\n    qualityLimitationReasons.has('cpu') && 'cpu',\n    qualityLimitationReasons.has('bandwidth') && 'bandwidth',\n    qualityLimitationReasons.has('other') && 'other',\n  ]\n    .filter(Boolean)\n    .join(', ');\n  if (qualityLimitationReason) {\n    report.qualityLimitationReasons = qualityLimitationReason;\n  }\n\n  return report;\n};\n","import {\n  AndroidThermalState,\n  AppleThermalState,\n  ClientDetails,\n  Device,\n  OS,\n  Sdk,\n  SdkType,\n} from '../gen/video/sfu/models/models';\nimport { SendStatsRequest } from '../gen/video/sfu/signal_rpc/signal';\nimport { isReactNative } from './platforms';\nimport { UAParser } from 'ua-parser-js';\n\ntype WebRTCInfoType = {\n  version: string;\n};\n\nconst version = process.env.PKG_VERSION || '0.0.0';\nconst [major, minor, patch] = version.split('.');\n\nlet sdkInfo: Sdk | undefined = {\n  type: SdkType.PLAIN_JAVASCRIPT,\n  major,\n  minor,\n  patch,\n};\n\nlet osInfo: OS | undefined;\nlet deviceInfo: Device | undefined;\nlet webRtcInfo: WebRTCInfoType | undefined;\nlet deviceState: SendStatsRequest['deviceState'] = { oneofKind: undefined };\n\nexport const setSdkInfo = (info: Sdk) => {\n  sdkInfo = info;\n};\n\nexport const getSdkInfo = () => {\n  return sdkInfo;\n};\n\nexport const setOSInfo = (info: OS) => {\n  osInfo = info;\n};\n\nexport const setDeviceInfo = (info: Device) => {\n  deviceInfo = info;\n};\n\nexport const getWebRTCInfo = () => {\n  return webRtcInfo;\n};\n\nexport const setWebRTCInfo = (info: WebRTCInfoType) => {\n  webRtcInfo = info;\n};\n\nexport const setThermalState = (state: string) => {\n  if (!osInfo) {\n    deviceState = { oneofKind: undefined };\n    return;\n  }\n\n  if (osInfo.name === 'android') {\n    const thermalState =\n      AndroidThermalState[state as keyof typeof AndroidThermalState] ||\n      AndroidThermalState.UNSPECIFIED;\n\n    deviceState = {\n      oneofKind: 'android',\n      android: {\n        thermalState,\n        isPowerSaverMode:\n          deviceState?.oneofKind === 'android' &&\n          deviceState.android.isPowerSaverMode,\n      },\n    };\n  }\n\n  if (osInfo.name.toLowerCase() === 'ios') {\n    const thermalState =\n      AppleThermalState[state as keyof typeof AppleThermalState] ||\n      AppleThermalState.UNSPECIFIED;\n\n    deviceState = {\n      oneofKind: 'apple',\n      apple: {\n        thermalState,\n        isLowPowerModeEnabled:\n          deviceState?.oneofKind === 'apple' &&\n          deviceState.apple.isLowPowerModeEnabled,\n      },\n    };\n  }\n};\n\nexport const setPowerState = (powerMode: boolean) => {\n  if (!osInfo) {\n    deviceState = { oneofKind: undefined };\n    return;\n  }\n\n  if (osInfo.name === 'android') {\n    deviceState = {\n      oneofKind: 'android',\n      android: {\n        thermalState:\n          deviceState?.oneofKind === 'android'\n            ? deviceState.android.thermalState\n            : AndroidThermalState.UNSPECIFIED,\n        isPowerSaverMode: powerMode,\n      },\n    };\n  }\n\n  if (osInfo.name.toLowerCase() === 'ios') {\n    deviceState = {\n      oneofKind: 'apple',\n      apple: {\n        thermalState:\n          deviceState?.oneofKind === 'apple'\n            ? deviceState.apple.thermalState\n            : AppleThermalState.UNSPECIFIED,\n        isLowPowerModeEnabled: powerMode,\n      },\n    };\n  }\n};\n\nexport const getDeviceState = () => {\n  return deviceState;\n};\n\nexport const getClientDetails = async (): Promise<ClientDetails> => {\n  if (isReactNative()) {\n    // Since RN doesn't support web, sharing browser info is not required\n    return {\n      sdk: sdkInfo,\n      os: osInfo,\n      device: deviceInfo,\n    };\n  }\n\n  // @ts-expect-error - userAgentData is not yet in the TS types\n  const userAgentDataApi = navigator.userAgentData;\n  let userAgentData:\n    | { platform?: string; platformVersion?: string }\n    | undefined;\n  if (userAgentDataApi && userAgentDataApi.getHighEntropyValues) {\n    try {\n      userAgentData = await userAgentDataApi.getHighEntropyValues([\n        'platform',\n        'platformVersion',\n      ]);\n    } catch {\n      // Ignore the error\n    }\n  }\n\n  const userAgent = new UAParser(navigator.userAgent);\n  const { browser, os, device, cpu } = userAgent.getResult();\n  return {\n    sdk: sdkInfo,\n    browser: {\n      name: browser.name || navigator.userAgent,\n      version: browser.version || '',\n    },\n    os: {\n      name: userAgentData?.platform || os.name || '',\n      version: userAgentData?.platformVersion || os.version || '',\n      architecture: cpu.architecture || '',\n    },\n    device: {\n      name: [device.vendor, device.model, device.type]\n        .filter(Boolean)\n        .join(' '),\n      version: '',\n    },\n  };\n};\n","import { combineLatest } from 'rxjs';\nimport { StreamSfuClient } from '../StreamSfuClient';\nimport { OwnCapability, StatsOptions } from '../gen/coordinator';\nimport { getLogger } from '../logger';\nimport { Publisher, Subscriber } from '../rtc';\nimport { tracer as mediaStatsTracer } from './rtc/mediaDevices';\nimport { flatten, getSdkName, getSdkVersion } from './utils';\nimport { getDeviceState, getWebRTCInfo } from '../helpers/client-details';\nimport {\n  ClientDetails,\n  InputDevices,\n  WebsocketReconnectStrategy,\n} from '../gen/video/sfu/models/models';\nimport { CameraManager, MicrophoneManager } from '../devices';\nimport { createSubscription } from '../store/rxUtils';\nimport { CallState } from '../store';\nimport { Telemetry } from '../gen/video/sfu/signal_rpc/signal';\n\nexport type SfuStatsReporterOptions = {\n  options: StatsOptions;\n  clientDetails: ClientDetails;\n  subscriber: Subscriber;\n  publisher?: Publisher;\n  microphone: MicrophoneManager;\n  camera: CameraManager;\n  state: CallState;\n};\n\nexport class SfuStatsReporter {\n  private readonly logger = getLogger(['SfuStatsReporter']);\n\n  readonly options: StatsOptions;\n\n  private readonly sfuClient: StreamSfuClient;\n  private readonly subscriber: Subscriber;\n  private readonly publisher?: Publisher;\n  private readonly microphone: MicrophoneManager;\n  private readonly camera: CameraManager;\n  private readonly state: CallState;\n\n  private intervalId: NodeJS.Timeout | undefined;\n  private unsubscribeDevicePermissionsSubscription?: () => void;\n  private unsubscribeListDevicesSubscription?: () => void;\n  private readonly sdkName: string;\n  private readonly sdkVersion: string;\n  private readonly webRTCVersion: string;\n  private readonly inputDevices = new Map<'mic' | 'camera', InputDevices>();\n\n  constructor(\n    sfuClient: StreamSfuClient,\n    {\n      options,\n      clientDetails,\n      subscriber,\n      publisher,\n      microphone,\n      camera,\n      state,\n    }: SfuStatsReporterOptions,\n  ) {\n    this.sfuClient = sfuClient;\n    this.options = options;\n    this.subscriber = subscriber;\n    this.publisher = publisher;\n    this.microphone = microphone;\n    this.camera = camera;\n    this.state = state;\n\n    const { sdk, browser } = clientDetails;\n    this.sdkName = getSdkName(sdk);\n    this.sdkVersion = getSdkVersion(sdk);\n\n    // use the WebRTC version if set by the SDK (React Native) otherwise,\n    // use the browser version as a fallback\n    const webRTCInfo = getWebRTCInfo();\n    this.webRTCVersion =\n      webRTCInfo?.version ||\n      `${browser?.name || ''}-${browser?.version || ''}` ||\n      'N/A';\n  }\n\n  private observeDevice = (\n    device: CameraManager | MicrophoneManager,\n    kind: 'mic' | 'camera',\n  ) => {\n    const { hasBrowserPermission$ } = device.state;\n    this.unsubscribeDevicePermissionsSubscription?.();\n    this.unsubscribeDevicePermissionsSubscription = createSubscription(\n      combineLatest([hasBrowserPermission$, this.state.ownCapabilities$]),\n      ([hasPermission, ownCapabilities]) => {\n        // cleanup the previous listDevices() subscription in case\n        // permissions or capabilities have changed.\n        // we will subscribe again if everything is in order.\n        this.unsubscribeListDevicesSubscription?.();\n        const hasCapability =\n          kind === 'mic'\n            ? ownCapabilities.includes(OwnCapability.SEND_AUDIO)\n            : ownCapabilities.includes(OwnCapability.SEND_VIDEO);\n        if (!hasPermission || !hasCapability) {\n          this.inputDevices.set(kind, {\n            currentDevice: '',\n            availableDevices: [],\n            isPermitted: false,\n          });\n          return;\n        }\n        this.unsubscribeListDevicesSubscription = createSubscription(\n          combineLatest([device.listDevices(), device.state.selectedDevice$]),\n          ([devices, deviceId]) => {\n            const selected = devices.find((d) => d.deviceId === deviceId);\n            this.inputDevices.set(kind, {\n              currentDevice: selected?.label || deviceId || '',\n              availableDevices: devices.map((d) => d.label),\n              isPermitted: true,\n            });\n          },\n        );\n      },\n    );\n  };\n\n  sendConnectionTime = (connectionTimeSeconds: number) => {\n    this.sendTelemetryData({\n      data: {\n        oneofKind: 'connectionTimeSeconds',\n        connectionTimeSeconds,\n      },\n    });\n  };\n\n  sendReconnectionTime = (\n    strategy: WebsocketReconnectStrategy,\n    timeSeconds: number,\n  ) => {\n    this.sendTelemetryData({\n      data: {\n        oneofKind: 'reconnection',\n        reconnection: { strategy, timeSeconds },\n      },\n    });\n  };\n\n  private sendTelemetryData = (telemetryData: Telemetry) => {\n    // intentionally not awaiting the promise here\n    // to avoid impeding with the ongoing actions.\n    this.run(telemetryData).catch((err) => {\n      this.logger('warn', 'Failed to send telemetry data', err);\n    });\n  };\n\n  private run = async (telemetry?: Telemetry) => {\n    const [subscriberStats, publisherStats] = await Promise.all([\n      this.subscriber.getStats().then(flatten).then(JSON.stringify),\n      this.publisher?.getStats().then(flatten).then(JSON.stringify) ?? '[]',\n    ]);\n\n    const subscriberTrace = this.subscriber.getTrace();\n    const publisherTrace = this.publisher?.getTrace();\n    const mediaTrace = mediaStatsTracer.take();\n    const sfuTrace = this.sfuClient.getTrace();\n    const publisherTraces = [\n      ...mediaTrace.snapshot,\n      ...(sfuTrace?.snapshot ?? []),\n      ...(publisherTrace?.snapshot ?? []),\n    ];\n\n    try {\n      await this.sfuClient.sendStats({\n        sdk: this.sdkName,\n        sdkVersion: this.sdkVersion,\n        webrtcVersion: this.webRTCVersion,\n        subscriberStats,\n        subscriberRtcStats: subscriberTrace\n          ? JSON.stringify(subscriberTrace.snapshot)\n          : '',\n        publisherStats,\n        publisherRtcStats:\n          publisherTraces.length > 0 ? JSON.stringify(publisherTraces) : '',\n        audioDevices: this.inputDevices.get('mic'),\n        videoDevices: this.inputDevices.get('camera'),\n        deviceState: getDeviceState(),\n        telemetry,\n      });\n    } catch (err) {\n      publisherTrace?.rollback();\n      subscriberTrace?.rollback();\n      mediaTrace.rollback();\n      sfuTrace?.rollback();\n      throw err;\n    }\n  };\n\n  start = () => {\n    if (this.options.reporting_interval_ms <= 0) return;\n\n    this.observeDevice(this.microphone, 'mic');\n    this.observeDevice(this.camera, 'camera');\n\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval(() => {\n      this.run().catch((err) => {\n        this.logger('warn', 'Failed to report stats', err);\n      });\n    }, this.options.reporting_interval_ms);\n  };\n\n  stop = () => {\n    this.unsubscribeDevicePermissionsSubscription?.();\n    this.unsubscribeDevicePermissionsSubscription = undefined;\n    this.unsubscribeListDevicesSubscription?.();\n    this.unsubscribeListDevicesSubscription = undefined;\n\n    this.inputDevices.clear();\n    clearInterval(this.intervalId);\n    this.intervalId = undefined;\n  };\n}\n","import type { RTCStatsDataType, Trace } from './types';\n\nexport const traceRTCPeerConnection = (pc: RTCPeerConnection, trace: Trace) => {\n  pc.addEventListener('icecandidate', (e) => {\n    trace('onicecandidate', e.candidate);\n  });\n  pc.addEventListener('track', (e) => {\n    const streams = e.streams.map((stream) => `stream:${stream.id}`);\n    trace('ontrack', `${e.track.kind}:${e.track.id} ${streams}`);\n  });\n  pc.addEventListener('signalingstatechange', () => {\n    trace('onsignalingstatechange', pc.signalingState);\n  });\n  pc.addEventListener('iceconnectionstatechange', () => {\n    trace('oniceconnectionstatechange', pc.iceConnectionState);\n  });\n  pc.addEventListener('icegatheringstatechange', () => {\n    trace('onicegatheringstatechange', pc.iceGatheringState);\n  });\n  pc.addEventListener('connectionstatechange', () => {\n    trace('onconnectionstatechange', pc.connectionState);\n  });\n  pc.addEventListener('negotiationneeded', () => {\n    trace('onnegotiationneeded', undefined);\n  });\n  pc.addEventListener('datachannel', ({ channel }) => {\n    trace('ondatachannel', [channel.id, channel.label]);\n  });\n\n  let prev: Record<string, RTCStats> = {};\n  const getStats = () => {\n    pc.getStats(null)\n      .then((stats) => {\n        const now = toObject(stats);\n        trace('getstats', deltaCompression(prev, now));\n        prev = now;\n      })\n      .catch((err) => {\n        trace('getstatsOnFailure', (err as Error).toString());\n      });\n  };\n\n  const interval = setInterval(() => {\n    getStats();\n  }, 8000);\n\n  pc.addEventListener('connectionstatechange', () => {\n    const state = pc.connectionState;\n    if (state === 'connected' || state === 'failed') {\n      getStats();\n    }\n  });\n\n  const origClose = pc.close;\n  pc.close = function tracedClose() {\n    clearInterval(interval);\n    trace('close', undefined);\n    return origClose.call(this);\n  };\n\n  for (const method of [\n    'createOffer',\n    'createAnswer',\n    'setLocalDescription',\n    'setRemoteDescription',\n    'addIceCandidate',\n  ] as const) {\n    const original = pc[method];\n    if (!original) continue;\n\n    // @ts-expect-error we don't use deprecated APIs\n    pc[method] = async function tracedMethod(...args: any[]) {\n      try {\n        trace(method, args);\n        // @ts-expect-error improper types\n        const result = await original.apply(this, args);\n        trace(`${method}OnSuccess`, result as RTCStatsDataType);\n        return result;\n      } catch (err) {\n        trace(`${method}OnFailure`, (err as Error).toString());\n        throw err;\n      }\n    };\n  }\n};\n\nconst toObject = (s: RTCStatsReport): Record<string, RTCStats> => {\n  const obj: Record<string, RTCStats> = {};\n  s.forEach((v, k) => {\n    obj[k] = v;\n  });\n  return obj;\n};\n\n/**\n * Apply delta compression to the stats report.\n * Reduces size by ~90%.\n * To reduce further, report keys could be compressed.\n */\nconst deltaCompression = (\n  oldStats: Record<any, any>,\n  newStats: Record<any, any>,\n): Record<any, any> => {\n  newStats = JSON.parse(JSON.stringify(newStats));\n\n  for (const [id, report] of Object.entries(newStats)) {\n    delete report.id;\n    if (!oldStats[id]) continue;\n\n    for (const [name, value] of Object.entries(report)) {\n      if (value === oldStats[id][name]) {\n        delete report[name];\n      }\n    }\n  }\n\n  let timestamp = -Infinity;\n  for (const report of Object.values(newStats)) {\n    if (report.timestamp > timestamp) {\n      timestamp = report.timestamp;\n    }\n  }\n  for (const report of Object.values(newStats)) {\n    if (report.timestamp === timestamp) {\n      report.timestamp = 0;\n    }\n  }\n  newStats.timestamp = timestamp;\n  return newStats;\n};\n","import { getLogger } from '../logger';\nimport type {\n  CallEventListener,\n  Logger,\n} from '../coordinator/connection/types';\nimport { CallingState, CallState } from '../store';\nimport { createSafeAsyncSubscription } from '../store/rxUtils';\nimport { ClientDetails, PeerType } from '../gen/video/sfu/models/models';\nimport { StreamSfuClient } from '../StreamSfuClient';\nimport { AllSfuEvents, Dispatcher } from './Dispatcher';\nimport { withoutConcurrency } from '../helpers/concurrency';\nimport { Tracer, traceRTCPeerConnection, TraceSlice } from '../stats';\n\nexport type BasePeerConnectionOpts = {\n  sfuClient: StreamSfuClient;\n  state: CallState;\n  connectionConfig?: RTCConfiguration;\n  dispatcher: Dispatcher;\n  onUnrecoverableError?: (reason: string) => void;\n  logTag: string;\n  clientDetails: ClientDetails;\n  enableTracing: boolean;\n};\n\n/**\n * A base class for the `Publisher` and `Subscriber` classes.\n * @internal\n */\nexport abstract class BasePeerConnection {\n  protected readonly logger: Logger;\n  protected readonly peerType: PeerType;\n  protected readonly pc: RTCPeerConnection;\n  protected readonly state: CallState;\n  protected readonly dispatcher: Dispatcher;\n  protected sfuClient: StreamSfuClient;\n\n  protected onUnrecoverableError?: (reason: string) => void;\n  protected isIceRestarting = false;\n  private isDisposed = false;\n\n  private readonly tracer?: Tracer;\n  private readonly subscriptions: (() => void)[] = [];\n  private unsubscribeIceTrickle?: () => void;\n\n  /**\n   * Constructs a new `BasePeerConnection` instance.\n   */\n  protected constructor(\n    peerType: PeerType,\n    {\n      sfuClient,\n      connectionConfig,\n      state,\n      dispatcher,\n      onUnrecoverableError,\n      logTag,\n      clientDetails,\n      enableTracing,\n    }: BasePeerConnectionOpts,\n  ) {\n    this.peerType = peerType;\n    this.sfuClient = sfuClient;\n    this.state = state;\n    this.dispatcher = dispatcher;\n    this.onUnrecoverableError = onUnrecoverableError;\n    this.logger = getLogger([\n      peerType === PeerType.SUBSCRIBER ? 'Subscriber' : 'Publisher',\n      logTag,\n    ]);\n    this.pc = new RTCPeerConnection(connectionConfig);\n    if (enableTracing) {\n      const tag = `${logTag}-${peerType === PeerType.SUBSCRIBER ? 'sub' : 'pub'}`;\n      this.tracer = new Tracer(tag);\n      this.tracer.trace('clientDetails', clientDetails);\n      this.tracer.trace('create', connectionConfig);\n      traceRTCPeerConnection(this.pc, this.tracer.trace);\n    }\n    this.pc.addEventListener('icecandidate', this.onIceCandidate);\n    this.pc.addEventListener('icecandidateerror', this.onIceCandidateError);\n    this.pc.addEventListener(\n      'iceconnectionstatechange',\n      this.onIceConnectionStateChange,\n    );\n    this.pc.addEventListener('icegatheringstatechange', this.onIceGatherChange);\n    this.pc.addEventListener('signalingstatechange', this.onSignalingChange);\n  }\n\n  /**\n   * Disposes the `RTCPeerConnection` instance.\n   */\n  dispose() {\n    this.onUnrecoverableError = undefined;\n    this.isDisposed = true;\n    this.detachEventHandlers();\n    this.pc.close();\n    this.tracer?.dispose();\n  }\n\n  /**\n   * Detaches the event handlers from the `RTCPeerConnection`.\n   */\n  detachEventHandlers() {\n    this.pc.removeEventListener('icecandidate', this.onIceCandidate);\n    this.pc.removeEventListener('icecandidateerror', this.onIceCandidateError);\n    this.pc.removeEventListener('signalingstatechange', this.onSignalingChange);\n    this.pc.removeEventListener(\n      'iceconnectionstatechange',\n      this.onIceConnectionStateChange,\n    );\n    this.pc.removeEventListener(\n      'icegatheringstatechange',\n      this.onIceGatherChange,\n    );\n    this.unsubscribeIceTrickle?.();\n    this.subscriptions.forEach((unsubscribe) => unsubscribe());\n  }\n\n  /**\n   * Performs an ICE restart on the `RTCPeerConnection`.\n   */\n  protected abstract restartIce(): Promise<void>;\n\n  /**\n   * Handles events synchronously.\n   * Consecutive events are queued and executed one after the other.\n   */\n  protected on = <E extends keyof AllSfuEvents>(\n    event: E,\n    fn: CallEventListener<E>,\n  ): void => {\n    this.subscriptions.push(\n      this.dispatcher.on(event, (e) => {\n        withoutConcurrency(`pc.${event}`, async () => fn(e)).catch((err) => {\n          if (this.isDisposed) return;\n          this.logger('warn', `Error handling ${event}`, err);\n        });\n      }),\n    );\n  };\n\n  /**\n   * Appends the trickled ICE candidates to the `RTCPeerConnection`.\n   */\n  protected addTrickledIceCandidates = () => {\n    const { iceTrickleBuffer } = this.sfuClient;\n    const observable =\n      this.peerType === PeerType.SUBSCRIBER\n        ? iceTrickleBuffer.subscriberCandidates\n        : iceTrickleBuffer.publisherCandidates;\n\n    this.unsubscribeIceTrickle?.();\n    this.unsubscribeIceTrickle = createSafeAsyncSubscription(\n      observable,\n      async (candidate) => {\n        return this.pc.addIceCandidate(candidate).catch((e) => {\n          if (this.isDisposed) return;\n          this.logger('warn', `ICE candidate error`, e, candidate);\n        });\n      },\n    );\n  };\n\n  /**\n   * Sets the SFU client to use.\n   *\n   * @param sfuClient the SFU client to use.\n   */\n  setSfuClient = (sfuClient: StreamSfuClient) => {\n    this.sfuClient = sfuClient;\n  };\n\n  /**\n   * Returns the result of the `RTCPeerConnection.getStats()` method\n   * @param selector an optional `MediaStreamTrack` to get the stats for.\n   */\n  getStats = (selector?: MediaStreamTrack | null) => {\n    return this.pc.getStats(selector);\n  };\n\n  /**\n   * Returns the current tracing buffer.\n   */\n  getTrace = (): TraceSlice | undefined => {\n    return this.tracer?.take();\n  };\n\n  /**\n   * Handles the ICECandidate event and\n   * Initiates an ICE Trickle process with the SFU.\n   */\n  private onIceCandidate = (e: RTCPeerConnectionIceEvent) => {\n    const { candidate } = e;\n    if (!candidate) {\n      this.logger('debug', 'null ice candidate');\n      return;\n    }\n\n    const iceCandidate = this.asJSON(candidate);\n    this.sfuClient\n      .iceTrickle({ peerType: this.peerType, iceCandidate })\n      .catch((err) => {\n        if (this.isDisposed) return;\n        this.logger('warn', `ICETrickle failed`, err);\n      });\n  };\n\n  /**\n   * Converts the ICE candidate to a JSON string.\n   */\n  private asJSON = (candidate: RTCIceCandidate): string => {\n    if (!candidate.usernameFragment) {\n      // react-native-webrtc doesn't include usernameFragment in the candidate\n      const segments = candidate.candidate.split(' ');\n      const ufragIndex = segments.findIndex((s) => s === 'ufrag') + 1;\n      const usernameFragment = segments[ufragIndex];\n      return JSON.stringify({ ...candidate, usernameFragment });\n    }\n    return JSON.stringify(candidate.toJSON());\n  };\n\n  /**\n   * Handles the ICE connection state change event.\n   */\n  private onIceConnectionStateChange = () => {\n    const state = this.pc.iceConnectionState;\n    this.logger('debug', `ICE connection state changed`, state);\n\n    if (this.state.callingState === CallingState.OFFLINE) return;\n    if (this.state.callingState === CallingState.RECONNECTING) return;\n\n    // do nothing when ICE is restarting\n    if (this.isIceRestarting) return;\n\n    if (state === 'failed' || state === 'disconnected') {\n      this.logger('debug', `Attempting to restart ICE`);\n      this.restartIce().catch((e) => {\n        if (this.isDisposed) return;\n        const reason = `ICE restart failed`;\n        this.logger('error', reason, e);\n        this.onUnrecoverableError?.(`${reason}: ${e}`);\n      });\n    }\n  };\n\n  /**\n   * Handles the ICE candidate error event.\n   */\n  private onIceCandidateError = (e: Event) => {\n    const errorMessage =\n      e instanceof RTCPeerConnectionIceErrorEvent &&\n      `${e.errorCode}: ${e.errorText}`;\n    const iceState = this.pc.iceConnectionState;\n    const logLevel =\n      iceState === 'connected' || iceState === 'checking' ? 'debug' : 'warn';\n    this.logger(logLevel, `ICE Candidate error`, errorMessage);\n  };\n\n  /**\n   * Handles the ICE gathering state change event.\n   */\n  private onIceGatherChange = () => {\n    this.logger('debug', `ICE Gathering State`, this.pc.iceGatheringState);\n  };\n\n  /**\n   * Handles the signaling state change event.\n   */\n  private onSignalingChange = () => {\n    this.logger('debug', `Signaling state changed`, this.pc.signalingState);\n  };\n}\n","import { PublishOption } from '../gen/video/sfu/models/models';\nimport { OptimalVideoLayer } from './videoLayers';\n\ntype TransceiverId = {\n  publishOption: PublishOption;\n  transceiver: RTCRtpTransceiver;\n};\ntype TrackLayersCache = {\n  publishOption: PublishOption;\n  layers: OptimalVideoLayer[];\n};\n\nexport class TransceiverCache {\n  private readonly cache: TransceiverId[] = [];\n  private readonly layers: TrackLayersCache[] = [];\n\n  /**\n   * An array maintaining the order how transceivers were added to the peer connection.\n   * This is needed because some browsers (Firefox) don't reliably report\n   * trackId and `mid` parameters.\n   */\n  private readonly transceiverOrder: RTCRtpTransceiver[] = [];\n\n  /**\n   * Adds a transceiver to the cache.\n   */\n  add = (publishOption: PublishOption, transceiver: RTCRtpTransceiver) => {\n    this.cache.push({ publishOption, transceiver });\n    this.transceiverOrder.push(transceiver);\n  };\n\n  /**\n   * Gets the transceiver for the given publish option.\n   */\n  get = (publishOption: PublishOption): RTCRtpTransceiver | undefined => {\n    return this.findTransceiver(publishOption)?.transceiver;\n  };\n\n  /**\n   * Checks if the cache has the given publish option.\n   */\n  has = (publishOption: PublishOption): boolean => {\n    return !!this.get(publishOption);\n  };\n\n  /**\n   * Finds the first transceiver that satisfies the given predicate.\n   */\n  find = (\n    predicate: (item: TransceiverId) => boolean,\n  ): TransceiverId | undefined => {\n    return this.cache.find(predicate);\n  };\n\n  /**\n   * Provides all the items in the cache.\n   */\n  items = (): TransceiverId[] => {\n    return this.cache;\n  };\n\n  /**\n   * Init index of the transceiver in the cache.\n   */\n  indexOf = (transceiver: RTCRtpTransceiver): number => {\n    return this.transceiverOrder.indexOf(transceiver);\n  };\n\n  /**\n   * Gets cached video layers for the given track.\n   */\n  getLayers = (\n    publishOption: PublishOption,\n  ): OptimalVideoLayer[] | undefined => {\n    const entry = this.layers.find(\n      (item) =>\n        item.publishOption.id === publishOption.id &&\n        item.publishOption.trackType === publishOption.trackType,\n    );\n    return entry?.layers;\n  };\n\n  /**\n   * Sets the video layers for the given track.\n   */\n  setLayers = (\n    publishOption: PublishOption,\n    layers: OptimalVideoLayer[] = [],\n  ) => {\n    const entry = this.findLayer(publishOption);\n    if (entry) {\n      entry.layers = layers;\n    } else {\n      this.layers.push({ publishOption, layers });\n    }\n  };\n\n  private findTransceiver = (publishOption: Partial<PublishOption>) => {\n    return this.cache.find(\n      (item) =>\n        item.publishOption.id === publishOption.id &&\n        item.publishOption.trackType === publishOption.trackType,\n    );\n  };\n\n  private findLayer = (publishOption: PublishOption) => {\n    return this.layers.find(\n      (item) =>\n        item.publishOption.id === publishOption.id &&\n        item.publishOption.trackType === publishOption.trackType,\n    );\n  };\n}\n","import { getLogger } from '../logger';\n\nexport const ensureExhausted = (x: never, message: string) => {\n  getLogger(['helpers'])('warn', message, x);\n};\n","import { TrackType } from '../../gen/video/sfu/models/models';\nimport { TrackMuteType } from '../../types';\nimport { ensureExhausted } from '../../helpers/ensureExhausted';\n\nexport const trackTypeToParticipantStreamKey = (\n  trackType: TrackType,\n):\n  | 'audioStream'\n  | 'videoStream'\n  | 'screenShareStream'\n  | 'screenShareAudioStream'\n  | undefined => {\n  switch (trackType) {\n    case TrackType.SCREEN_SHARE:\n      return 'screenShareStream';\n    case TrackType.SCREEN_SHARE_AUDIO:\n      return 'screenShareAudioStream';\n    case TrackType.VIDEO:\n      return 'videoStream';\n    case TrackType.AUDIO:\n      return 'audioStream';\n    case TrackType.UNSPECIFIED:\n      throw new Error('Track type is unspecified');\n    default:\n      ensureExhausted(trackType, 'Unknown track type');\n  }\n};\n\nexport const muteTypeToTrackType = (\n  muteType: TrackMuteType,\n): TrackType | undefined => {\n  switch (muteType) {\n    case 'audio':\n      return TrackType.AUDIO;\n    case 'video':\n      return TrackType.VIDEO;\n    case 'screenshare':\n      return TrackType.SCREEN_SHARE;\n    case 'screenshare_audio':\n      return TrackType.SCREEN_SHARE_AUDIO;\n    default:\n      ensureExhausted(muteType, 'Unknown mute type');\n  }\n};\n\nexport const toTrackType = (trackType: string): TrackType | undefined => {\n  switch (trackType) {\n    case 'TRACK_TYPE_AUDIO':\n      return TrackType.AUDIO;\n    case 'TRACK_TYPE_VIDEO':\n      return TrackType.VIDEO;\n    case 'TRACK_TYPE_SCREEN_SHARE':\n      return TrackType.SCREEN_SHARE;\n    case 'TRACK_TYPE_SCREEN_SHARE_AUDIO':\n      return TrackType.SCREEN_SHARE_AUDIO;\n    default:\n      return undefined;\n  }\n};\n\nexport const isAudioTrackType = (trackType: TrackType): boolean =>\n  trackType === TrackType.AUDIO || trackType === TrackType.SCREEN_SHARE_AUDIO;\n","import { isSvcCodec } from './codecs';\nimport {\n  PublishOption,\n  VideoDimension,\n  VideoLayer,\n  VideoQuality,\n} from '../gen/video/sfu/models/models';\nimport { isAudioTrackType } from './helpers/tracks';\n\nexport type OptimalVideoLayer = RTCRtpEncodingParameters & {\n  width: number;\n  height: number;\n  // NOTE OL: should be part of RTCRtpEncodingParameters\n  scalabilityMode?: string;\n};\n\nconst defaultBitratePerRid: Record<string, number> = {\n  q: 300000,\n  h: 750000,\n  f: 1250000,\n};\n\n/**\n * In SVC, we need to send only one video encoding (layer).\n * this layer will have the additional spatial and temporal layers\n * defined via the scalabilityMode property.\n *\n * @param layers the layers to process.\n */\nexport const toSvcEncodings = (\n  layers: OptimalVideoLayer[] | undefined,\n): RTCRtpEncodingParameters[] | undefined => {\n  if (!layers) return;\n  // we take the highest quality layer, and we assign it to `q` encoder.\n  const withRid = (rid: string) => (l: OptimalVideoLayer) => l.rid === rid;\n  const highestLayer =\n    layers.find(withRid('f')) ||\n    layers.find(withRid('h')) ||\n    layers.find(withRid('q'));\n  return [{ ...highestLayer, rid: 'q' }];\n};\n\n/**\n * Converts the rid to a video quality.\n */\nexport const ridToVideoQuality = (rid: string): VideoQuality => {\n  return rid === 'q'\n    ? VideoQuality.LOW_UNSPECIFIED\n    : rid === 'h'\n      ? VideoQuality.MID\n      : VideoQuality.HIGH; // default to HIGH\n};\n\n/**\n * Converts the given video layers to SFU video layers.\n */\nexport const toVideoLayers = (\n  layers: OptimalVideoLayer[] | undefined = [],\n): VideoLayer[] => {\n  return layers.map<VideoLayer>((layer) => ({\n    rid: layer.rid || '',\n    bitrate: layer.maxBitrate || 0,\n    fps: layer.maxFramerate || 0,\n    quality: ridToVideoQuality(layer.rid || ''),\n    videoDimension: { width: layer.width, height: layer.height },\n  }));\n};\n\n/**\n * Converts the spatial and temporal layers to a scalability mode.\n */\nconst toScalabilityMode = (spatialLayers: number, temporalLayers: number) =>\n  `L${spatialLayers}T${temporalLayers}${spatialLayers > 1 ? '_KEY' : ''}`;\n\n/**\n * Determines the most optimal video layers for the given track.\n *\n * @param videoTrack the video track to find optimal layers for.\n * @param publishOption the publish options for the track.\n */\nexport const computeVideoLayers = (\n  videoTrack: MediaStreamTrack,\n  publishOption: PublishOption,\n): OptimalVideoLayer[] | undefined => {\n  if (isAudioTrackType(publishOption.trackType)) return;\n  const optimalVideoLayers: OptimalVideoLayer[] = [];\n  const settings = videoTrack.getSettings();\n  const { width = 0, height = 0 } = settings;\n  const {\n    bitrate,\n    codec,\n    fps,\n    maxSpatialLayers = 3,\n    maxTemporalLayers = 3,\n    videoDimension = { width: 1280, height: 720 },\n  } = publishOption;\n  const maxBitrate = getComputedMaxBitrate(\n    videoDimension,\n    width,\n    height,\n    bitrate,\n  );\n  let downscaleFactor = 1;\n  let bitrateFactor = 1;\n  const svcCodec = isSvcCodec(codec?.name);\n  for (const rid of ['f', 'h', 'q'].slice(0, maxSpatialLayers)) {\n    const layer: OptimalVideoLayer = {\n      active: true,\n      rid,\n      width: Math.round(width / downscaleFactor),\n      height: Math.round(height / downscaleFactor),\n      maxBitrate:\n        Math.round(maxBitrate / bitrateFactor) || defaultBitratePerRid[rid],\n      maxFramerate: fps,\n    };\n    if (svcCodec) {\n      // for SVC codecs, we need to set the scalability mode, and the\n      // codec will handle the rest (layers, temporal layers, etc.)\n      layer.scalabilityMode = toScalabilityMode(\n        maxSpatialLayers,\n        maxTemporalLayers,\n      );\n    } else {\n      // for non-SVC codecs, we need to downscale proportionally (simulcast)\n      layer.scaleResolutionDownBy = downscaleFactor;\n    }\n\n    downscaleFactor *= 2;\n    bitrateFactor *= 2;\n\n    // Reversing the order [f, h, q] to [q, h, f] as Chrome uses encoding index\n    // when deciding which layer to disable when CPU or bandwidth is constrained.\n    // Encodings should be ordered in increasing spatial resolution order.\n    optimalVideoLayers.unshift(layer);\n  }\n\n  // for simplicity, we start with all layers enabled, then this function\n  // will clear/reassign the layers that are not needed\n  return withSimulcastConstraints(settings, optimalVideoLayers);\n};\n\n/**\n * Computes the maximum bitrate for a given resolution.\n * If the current resolution is lower than the target resolution,\n * we want to proportionally reduce the target bitrate.\n * If the current resolution is higher than the target resolution,\n * we want to use the target bitrate.\n *\n * @param targetResolution the target resolution.\n * @param currentWidth the current width of the track.\n * @param currentHeight the current height of the track.\n * @param bitrate the target bitrate.\n */\nexport const getComputedMaxBitrate = (\n  targetResolution: VideoDimension,\n  currentWidth: number,\n  currentHeight: number,\n  bitrate: number,\n): number => {\n  // if the current resolution is lower than the target resolution,\n  // we want to proportionally reduce the target bitrate\n  const { width: targetWidth, height: targetHeight } = targetResolution;\n  if (currentWidth < targetWidth || currentHeight < targetHeight) {\n    const currentPixels = currentWidth * currentHeight;\n    const targetPixels = targetWidth * targetHeight;\n    const reductionFactor = currentPixels / targetPixels;\n    return Math.round(bitrate * reductionFactor);\n  }\n  return bitrate;\n};\n\n/**\n * Browsers have different simulcast constraints for different video resolutions.\n *\n * This function modifies the provided list of video layers according to the\n * current implementation of simulcast constraints in the Chromium based browsers.\n *\n * https://chromium.googlesource.com/external/webrtc/+/refs/heads/main/media/engine/simulcast.cc#90\n */\nconst withSimulcastConstraints = (\n  settings: MediaTrackSettings,\n  optimalVideoLayers: OptimalVideoLayer[],\n) => {\n  let layers: OptimalVideoLayer[];\n\n  const size = Math.max(settings.width || 0, settings.height || 0);\n  if (size <= 320) {\n    // provide only one layer 320x240 (q), the one with the highest quality\n    layers = optimalVideoLayers.filter((layer) => layer.rid === 'f');\n  } else if (size <= 640) {\n    // provide two layers, 160x120 (q) and 640x480 (h)\n    layers = optimalVideoLayers.filter((layer) => layer.rid !== 'h');\n  } else {\n    // provide three layers for sizes > 640x480\n    layers = optimalVideoLayers;\n  }\n\n  const ridMapping = ['q', 'h', 'f'];\n  return layers.map<OptimalVideoLayer>((layer, index) => ({\n    ...layer,\n    rid: ridMapping[index], // reassign rid\n  }));\n};\n","import { parse } from 'sdp-transform';\n\n/**\n * Extracts the mid from the transceiver or the SDP.\n *\n * @param transceiver the transceiver.\n * @param transceiverInitIndex the index of the transceiver in the transceiver's init array.\n * @param sdp the SDP.\n */\nexport const extractMid = (\n  transceiver: RTCRtpTransceiver,\n  transceiverInitIndex: number,\n  sdp: string | undefined,\n): string => {\n  if (transceiver.mid) return transceiver.mid;\n  if (!sdp) return String(transceiverInitIndex);\n\n  const track = transceiver.sender.track!;\n  const parsedSdp = parse(sdp);\n  const media = parsedSdp.media.find((m) => {\n    return (\n      m.type === track.kind &&\n      // if `msid` is not present, we assume that the track is the first one\n      (m.msid?.includes(track.id) ?? true)\n    );\n  });\n  if (typeof media?.mid !== 'undefined') return String(media.mid);\n  if (transceiverInitIndex < 0) return '';\n  return String(transceiverInitIndex);\n};\n","import {\n  BasePeerConnection,\n  BasePeerConnectionOpts,\n} from './BasePeerConnection';\nimport { TransceiverCache } from './TransceiverCache';\nimport {\n  PeerType,\n  PublishOption,\n  TrackInfo,\n  TrackType,\n} from '../gen/video/sfu/models/models';\nimport { VideoSender } from '../gen/video/sfu/event/events';\nimport {\n  computeVideoLayers,\n  toSvcEncodings,\n  toVideoLayers,\n} from './videoLayers';\nimport { isSvcCodec } from './codecs';\nimport { isAudioTrackType } from './helpers/tracks';\nimport { extractMid } from './helpers/sdp';\nimport { withoutConcurrency } from '../helpers/concurrency';\nimport { isReactNative } from '../helpers/platforms';\n\nexport type PublisherConstructorOpts = BasePeerConnectionOpts & {\n  publishOptions: PublishOption[];\n};\n\n/**\n * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU\n *\n * @internal\n */\nexport class Publisher extends BasePeerConnection {\n  private readonly transceiverCache = new TransceiverCache();\n  private readonly clonedTracks = new Set<MediaStreamTrack>();\n  private publishOptions: PublishOption[];\n\n  /**\n   * Constructs a new `Publisher` instance.\n   */\n  constructor({ publishOptions, ...baseOptions }: PublisherConstructorOpts) {\n    super(PeerType.PUBLISHER_UNSPECIFIED, baseOptions);\n    this.publishOptions = publishOptions;\n\n    this.on('iceRestart', (iceRestart) => {\n      if (iceRestart.peerType !== PeerType.PUBLISHER_UNSPECIFIED) return;\n      this.restartIce().catch((err) => {\n        const reason = `ICE restart failed`;\n        this.logger('warn', reason, err);\n        this.onUnrecoverableError?.(`${reason}: ${err}`);\n      });\n    });\n\n    this.on('changePublishQuality', async (event) => {\n      for (const videoSender of event.videoSenders) {\n        await this.changePublishQuality(videoSender);\n      }\n    });\n\n    this.on('changePublishOptions', (event) => {\n      this.publishOptions = event.publishOptions;\n      return this.syncPublishOptions();\n    });\n  }\n\n  /**\n   * Disposes this Publisher instance.\n   */\n  dispose() {\n    super.dispose();\n    this.stopAllTracks();\n    this.clonedTracks.clear();\n  }\n\n  /**\n   * Starts publishing the given track of the given media stream.\n   *\n   * Consecutive calls to this method will replace the stream.\n   * The previous stream will be stopped.\n   *\n   * @param track the track to publish.\n   * @param trackType the track type to publish.\n   */\n  publish = async (track: MediaStreamTrack, trackType: TrackType) => {\n    if (!this.publishOptions.some((o) => o.trackType === trackType)) {\n      throw new Error(`No publish options found for ${TrackType[trackType]}`);\n    }\n\n    for (const publishOption of this.publishOptions) {\n      if (publishOption.trackType !== trackType) continue;\n\n      // create a clone of the track as otherwise the same trackId will\n      // appear in the SDP in multiple transceivers\n      const trackToPublish = this.cloneTrack(track);\n\n      const transceiver = this.transceiverCache.get(publishOption);\n      if (!transceiver) {\n        await this.addTransceiver(trackToPublish, publishOption);\n      } else {\n        const previousTrack = transceiver.sender.track;\n        await transceiver.sender.replaceTrack(trackToPublish);\n        if (!isReactNative()) {\n          this.stopTrack(previousTrack);\n        }\n      }\n    }\n  };\n\n  /**\n   * Adds a new transceiver carrying the given track to the peer connection.\n   */\n  private addTransceiver = async (\n    track: MediaStreamTrack,\n    publishOption: PublishOption,\n  ) => {\n    const videoEncodings = computeVideoLayers(track, publishOption);\n    const sendEncodings = isSvcCodec(publishOption.codec?.name)\n      ? toSvcEncodings(videoEncodings)\n      : videoEncodings;\n    const transceiver = this.pc.addTransceiver(track, {\n      direction: 'sendonly',\n      sendEncodings,\n    });\n\n    const trackType = publishOption.trackType;\n    this.logger('debug', `Added ${TrackType[trackType]} transceiver`);\n    this.transceiverCache.add(publishOption, transceiver);\n\n    await this.negotiate();\n  };\n\n  /**\n   * Synchronizes the current Publisher state with the provided publish options.\n   */\n  private syncPublishOptions = async () => {\n    // enable publishing with new options -> [av1, vp9]\n    for (const publishOption of this.publishOptions) {\n      const { trackType } = publishOption;\n      if (!this.isPublishing(trackType)) continue;\n      if (this.transceiverCache.has(publishOption)) continue;\n\n      const item = this.transceiverCache.find(\n        (i) =>\n          !!i.transceiver.sender.track &&\n          i.publishOption.trackType === trackType,\n      );\n      if (!item || !item.transceiver) continue;\n\n      // take the track from the existing transceiver for the same track type,\n      // clone it and publish it with the new publish options\n      const track = this.cloneTrack(item.transceiver.sender.track!);\n      await this.addTransceiver(track, publishOption);\n    }\n\n    // stop publishing with options not required anymore -> [vp9]\n    for (const item of this.transceiverCache.items()) {\n      const { publishOption, transceiver } = item;\n      const hasPublishOption = this.publishOptions.some(\n        (option) =>\n          option.id === publishOption.id &&\n          option.trackType === publishOption.trackType,\n      );\n      if (hasPublishOption) continue;\n      // it is safe to stop the track here, it is a clone\n      this.stopTrack(transceiver.sender.track);\n      await transceiver.sender.replaceTrack(null);\n    }\n  };\n\n  /**\n   * Returns true if the given track type is currently being published to the SFU.\n   *\n   * @param trackType the track type to check.\n   */\n  isPublishing = (trackType: TrackType): boolean => {\n    for (const item of this.transceiverCache.items()) {\n      if (item.publishOption.trackType !== trackType) continue;\n\n      const track = item.transceiver.sender.track;\n      if (!track) continue;\n\n      if (track.readyState === 'live' && track.enabled) return true;\n    }\n    return false;\n  };\n\n  /**\n   * Maps the given track ID to the corresponding track type.\n   */\n  getTrackType = (trackId: string): TrackType | undefined => {\n    for (const transceiverId of this.transceiverCache.items()) {\n      const { publishOption, transceiver } = transceiverId;\n      if (transceiver.sender.track?.id === trackId) {\n        return publishOption.trackType;\n      }\n    }\n    return undefined;\n  };\n\n  /**\n   * Stops the cloned track that is being published to the SFU.\n   */\n  stopTracks = (...trackTypes: TrackType[]) => {\n    for (const item of this.transceiverCache.items()) {\n      const { publishOption, transceiver } = item;\n      if (!trackTypes.includes(publishOption.trackType)) continue;\n      this.stopTrack(transceiver.sender.track);\n    }\n  };\n\n  /**\n   * Stops all the cloned tracks that are being published to the SFU.\n   */\n  stopAllTracks = () => {\n    for (const { transceiver } of this.transceiverCache.items()) {\n      this.stopTrack(transceiver.sender.track);\n    }\n    for (const track of this.clonedTracks) {\n      this.stopTrack(track);\n    }\n  };\n\n  private changePublishQuality = async (videoSender: VideoSender) => {\n    const { trackType, layers, publishOptionId } = videoSender;\n    const enabledLayers = layers.filter((l) => l.active);\n\n    const tag = 'Update publish quality:';\n    this.logger('info', `${tag} requested layers by SFU:`, enabledLayers);\n\n    const transceiverId = this.transceiverCache.find(\n      (t) =>\n        t.publishOption.id === publishOptionId &&\n        t.publishOption.trackType === trackType,\n    );\n    const sender = transceiverId?.transceiver.sender;\n    if (!sender) {\n      return this.logger('warn', `${tag} no video sender found.`);\n    }\n\n    const params = sender.getParameters();\n    if (params.encodings.length === 0) {\n      return this.logger('warn', `${tag} there are no encodings set.`);\n    }\n\n    const codecInUse = transceiverId?.publishOption.codec?.name;\n    const usesSvcCodec = codecInUse && isSvcCodec(codecInUse);\n\n    let changed = false;\n    for (const encoder of params.encodings) {\n      const layer = usesSvcCodec\n        ? // for SVC, we only have one layer (q) and often rid is omitted\n          enabledLayers[0]\n        : // for non-SVC, we need to find the layer by rid (simulcast)\n          (enabledLayers.find((l) => l.name === encoder.rid) ??\n          (params.encodings.length === 1 ? enabledLayers[0] : undefined));\n\n      // flip 'active' flag only when necessary\n      const shouldActivate = !!layer?.active;\n      if (shouldActivate !== encoder.active) {\n        encoder.active = shouldActivate;\n        changed = true;\n      }\n\n      // skip the rest of the settings if the layer is disabled or not found\n      if (!layer) continue;\n\n      const {\n        maxFramerate,\n        scaleResolutionDownBy,\n        maxBitrate,\n        scalabilityMode,\n      } = layer;\n      if (\n        scaleResolutionDownBy >= 1 &&\n        scaleResolutionDownBy !== encoder.scaleResolutionDownBy\n      ) {\n        encoder.scaleResolutionDownBy = scaleResolutionDownBy;\n        changed = true;\n      }\n      if (maxBitrate > 0 && maxBitrate !== encoder.maxBitrate) {\n        encoder.maxBitrate = maxBitrate;\n        changed = true;\n      }\n      if (maxFramerate > 0 && maxFramerate !== encoder.maxFramerate) {\n        encoder.maxFramerate = maxFramerate;\n        changed = true;\n      }\n      // @ts-expect-error scalabilityMode is not in the typedefs yet\n      if (scalabilityMode && scalabilityMode !== encoder.scalabilityMode) {\n        // @ts-expect-error scalabilityMode is not in the typedefs yet\n        encoder.scalabilityMode = scalabilityMode;\n        changed = true;\n      }\n    }\n\n    const activeEncoders = params.encodings.filter((e) => e.active);\n    if (!changed) {\n      return this.logger('info', `${tag} no change:`, activeEncoders);\n    }\n\n    await sender.setParameters(params);\n    this.logger('info', `${tag} enabled rids:`, activeEncoders);\n  };\n\n  /**\n   * Restarts the ICE connection and renegotiates with the SFU.\n   */\n  restartIce = async (): Promise<void> => {\n    this.logger('debug', 'Restarting ICE connection');\n    const signalingState = this.pc.signalingState;\n    if (this.isIceRestarting || signalingState === 'have-local-offer') {\n      this.logger('debug', 'ICE restart is already in progress');\n      return;\n    }\n    await this.negotiate({ iceRestart: true });\n  };\n\n  /**\n   * Initiates a new offer/answer exchange with the currently connected SFU.\n   *\n   * @param options the optional offer options to use.\n   */\n  private negotiate = async (options?: RTCOfferOptions): Promise<void> => {\n    return withoutConcurrency('publisher.negotiate', async () => {\n      const offer = await this.pc.createOffer(options);\n      const tracks = this.getAnnouncedTracks(offer.sdp);\n      if (!tracks.length) throw new Error(`Can't negotiate without any tracks`);\n\n      try {\n        this.isIceRestarting = options?.iceRestart ?? false;\n        await this.pc.setLocalDescription(offer);\n\n        const { sdp = '' } = offer;\n        const { response } = await this.sfuClient.setPublisher({ sdp, tracks });\n        if (response.error) throw new Error(response.error.message);\n\n        const { sdp: answerSdp } = response;\n        await this.pc.setRemoteDescription({ type: 'answer', sdp: answerSdp });\n      } finally {\n        this.isIceRestarting = false;\n      }\n\n      this.addTrickledIceCandidates();\n    });\n  };\n\n  /**\n   * Returns a list of tracks that are currently being published.\n   */\n  getPublishedTracks = (): MediaStreamTrack[] => {\n    const tracks: MediaStreamTrack[] = [];\n    for (const { transceiver } of this.transceiverCache.items()) {\n      const track = transceiver.sender.track;\n      if (track && track.readyState === 'live') tracks.push(track);\n    }\n    return tracks;\n  };\n\n  /**\n   * Returns a list of tracks that are currently being published.\n   * @param sdp an optional SDP to extract the `mid` from.\n   */\n  getAnnouncedTracks = (sdp: string | undefined): TrackInfo[] => {\n    const trackInfos: TrackInfo[] = [];\n    for (const bundle of this.transceiverCache.items()) {\n      const { transceiver, publishOption } = bundle;\n      const track = transceiver.sender.track;\n      if (!track) continue;\n\n      trackInfos.push(this.toTrackInfo(transceiver, publishOption, sdp));\n    }\n    return trackInfos;\n  };\n\n  /**\n   * Returns a list of tracks that are currently being published.\n   * This method shall be used for the reconnection flow.\n   * There we shouldn't announce the tracks that have been stopped due to a codec switch.\n   */\n  getAnnouncedTracksForReconnect = (): TrackInfo[] => {\n    const sdp = this.pc.localDescription?.sdp;\n    const trackInfos: TrackInfo[] = [];\n    for (const publishOption of this.publishOptions) {\n      const transceiver = this.transceiverCache.get(publishOption);\n      if (!transceiver || !transceiver.sender.track) continue;\n\n      trackInfos.push(this.toTrackInfo(transceiver, publishOption, sdp));\n    }\n    return trackInfos;\n  };\n\n  /**\n   * Converts the given transceiver to a `TrackInfo` object.\n   */\n  private toTrackInfo = (\n    transceiver: RTCRtpTransceiver,\n    publishOption: PublishOption,\n    sdp: string | undefined,\n  ): TrackInfo => {\n    const track = transceiver.sender.track!;\n    const isTrackLive = track.readyState === 'live';\n    const layers = isTrackLive\n      ? computeVideoLayers(track, publishOption)\n      : this.transceiverCache.getLayers(publishOption);\n    this.transceiverCache.setLayers(publishOption, layers);\n\n    const isAudioTrack = isAudioTrackType(publishOption.trackType);\n    const isStereo = isAudioTrack && track.getSettings().channelCount === 2;\n    const transceiverIndex = this.transceiverCache.indexOf(transceiver);\n    const audioSettings = this.state.settings?.audio;\n\n    return {\n      trackId: track.id,\n      layers: toVideoLayers(layers),\n      trackType: publishOption.trackType,\n      mid: extractMid(transceiver, transceiverIndex, sdp),\n      stereo: isStereo,\n      dtx: isAudioTrack && !!audioSettings?.opus_dtx_enabled,\n      red: isAudioTrack && !!audioSettings?.redundant_coding_enabled,\n      muted: !isTrackLive,\n      codec: publishOption.codec,\n      publishOptionId: publishOption.id,\n    };\n  };\n\n  private cloneTrack = (track: MediaStreamTrack): MediaStreamTrack => {\n    const clone = track.clone();\n    this.clonedTracks.add(clone);\n    return clone;\n  };\n\n  private stopTrack = (track: MediaStreamTrack | null | undefined) => {\n    if (!track) return;\n    track.stop();\n    this.clonedTracks.delete(track);\n  };\n}\n","import {\n  BasePeerConnection,\n  BasePeerConnectionOpts,\n} from './BasePeerConnection';\nimport { PeerType } from '../gen/video/sfu/models/models';\nimport { SubscriberOffer } from '../gen/video/sfu/event/events';\nimport { toTrackType, trackTypeToParticipantStreamKey } from './helpers/tracks';\n\n/**\n * A wrapper around the `RTCPeerConnection` that handles the incoming\n * media streams from the SFU.\n *\n * @internal\n */\nexport class Subscriber extends BasePeerConnection {\n  /**\n   * Constructs a new `Subscriber` instance.\n   */\n  constructor(opts: BasePeerConnectionOpts) {\n    super(PeerType.SUBSCRIBER, opts);\n    this.pc.addEventListener('track', this.handleOnTrack);\n\n    this.on('subscriberOffer', async (subscriberOffer) => {\n      return this.negotiate(subscriberOffer).catch((err) => {\n        this.logger('error', `Negotiation failed.`, err);\n      });\n    });\n  }\n\n  /**\n   * Detaches the event handlers from the `RTCPeerConnection`.\n   * This is useful when we want to replace the `RTCPeerConnection`\n   * instance with a new one (in case of migration).\n   */\n  detachEventHandlers() {\n    super.detachEventHandlers();\n    this.pc.removeEventListener('track', this.handleOnTrack);\n  }\n\n  /**\n   * Restarts the ICE connection and renegotiates with the SFU.\n   */\n  restartIce = async () => {\n    this.logger('debug', 'Restarting ICE connection');\n    if (this.pc.signalingState === 'have-remote-offer') {\n      this.logger('debug', 'ICE restart is already in progress');\n      return;\n    }\n    if (this.pc.connectionState === 'new') {\n      this.logger(\n        'debug',\n        `ICE connection is not yet established, skipping restart.`,\n      );\n      return;\n    }\n    const previousIsIceRestarting = this.isIceRestarting;\n    try {\n      this.isIceRestarting = true;\n      await this.sfuClient.iceRestart({\n        peerType: PeerType.SUBSCRIBER,\n      });\n    } catch (e) {\n      // restore the previous state, as our intent for restarting ICE failed\n      this.isIceRestarting = previousIsIceRestarting;\n      throw e;\n    }\n  };\n\n  private handleOnTrack = (e: RTCTrackEvent) => {\n    const [primaryStream] = e.streams;\n    // example: `e3f6aaf8-b03d-4911-be36-83f47d37a76a:TRACK_TYPE_VIDEO`\n    const [trackId, rawTrackType] = primaryStream.id.split(':');\n    const participantToUpdate = this.state.participants.find(\n      (p) => p.trackLookupPrefix === trackId,\n    );\n    this.logger(\n      'debug',\n      `[onTrack]: Got remote ${rawTrackType} track for userId: ${participantToUpdate?.userId}`,\n      e.track.id,\n      e.track,\n    );\n\n    const trackDebugInfo = `${participantToUpdate?.userId} ${rawTrackType}:${trackId}`;\n    e.track.addEventListener('mute', () => {\n      this.logger('info', `[onTrack]: Track muted: ${trackDebugInfo}`);\n    });\n\n    e.track.addEventListener('unmute', () => {\n      this.logger('info', `[onTrack]: Track unmuted: ${trackDebugInfo}`);\n    });\n\n    e.track.addEventListener('ended', () => {\n      this.logger('info', `[onTrack]: Track ended: ${trackDebugInfo}`);\n      this.state.removeOrphanedTrack(primaryStream.id);\n    });\n\n    const trackType = toTrackType(rawTrackType);\n    if (!trackType) {\n      return this.logger('error', `Unknown track type: ${rawTrackType}`);\n    }\n\n    if (!participantToUpdate) {\n      this.logger(\n        'warn',\n        `[onTrack]: Received track for unknown participant: ${trackId}`,\n        e,\n      );\n      this.state.registerOrphanedTrack({\n        id: primaryStream.id,\n        trackLookupPrefix: trackId,\n        track: primaryStream,\n        trackType,\n      });\n      return;\n    }\n\n    const streamKindProp = trackTypeToParticipantStreamKey(trackType);\n    if (!streamKindProp) {\n      this.logger('error', `Unknown track type: ${rawTrackType}`);\n      return;\n    }\n\n    // get the previous stream to dispose it later\n    // usually this happens during migration, when the stream is replaced\n    // with a new one but the old one is still in the state\n    const previousStream = participantToUpdate[streamKindProp];\n\n    // replace the previous stream with the new one, prevents flickering\n    this.state.updateParticipant(participantToUpdate.sessionId, {\n      [streamKindProp]: primaryStream,\n    });\n\n    // now, dispose the previous stream if it exists\n    if (previousStream) {\n      this.logger(\n        'info',\n        `[onTrack]: Cleaning up previous remote ${e.track.kind} tracks for userId: ${participantToUpdate.userId}`,\n      );\n      previousStream.getTracks().forEach((t) => {\n        t.stop();\n        previousStream.removeTrack(t);\n      });\n    }\n  };\n\n  private negotiate = async (subscriberOffer: SubscriberOffer) => {\n    await this.pc.setRemoteDescription({\n      type: 'offer',\n      sdp: subscriberOffer.sdp,\n    });\n\n    this.addTrickledIceCandidates();\n\n    const answer = await this.pc.createAnswer();\n    await this.pc.setLocalDescription(answer);\n\n    await this.sfuClient.sendAnswer({\n      peerType: PeerType.SUBSCRIBER,\n      sdp: answer.sdp || '',\n    });\n\n    this.isIceRestarting = false;\n  };\n}\n","import { SfuEvent } from '../gen/video/sfu/event/events';\nimport { getLogger } from '../logger';\nimport { DispatchableMessage, SfuEventKinds } from './Dispatcher';\n\nexport const createWebSocketSignalChannel = (opts: {\n  endpoint: string;\n  onMessage: <K extends SfuEventKinds>(message: DispatchableMessage<K>) => void;\n  logTag: string;\n}) => {\n  const { endpoint, onMessage, logTag } = opts;\n  const logger = getLogger(['SfuClientWS', logTag]);\n  logger('debug', 'Creating signaling WS channel:', endpoint);\n  const ws = new WebSocket(endpoint);\n  ws.binaryType = 'arraybuffer'; // do we need this?\n\n  ws.addEventListener('error', (e) => {\n    logger('error', 'Signaling WS channel error', e);\n  });\n\n  ws.addEventListener('close', (e) => {\n    logger('info', 'Signaling WS channel is closed', e);\n  });\n\n  ws.addEventListener('open', (e) => {\n    logger('info', 'Signaling WS channel is open', e);\n  });\n\n  ws.addEventListener('message', (e) => {\n    try {\n      const message =\n        e.data instanceof ArrayBuffer\n          ? SfuEvent.fromBinary(new Uint8Array(e.data))\n          : SfuEvent.fromJsonString(e.data.toString());\n\n      onMessage(message as DispatchableMessage<SfuEventKinds>);\n    } catch (err) {\n      logger(\n        'error',\n        'Failed to decode a message. Check whether the Proto models match.',\n        { event: e, error: err },\n      );\n    }\n  });\n  return ws;\n};\n","import { ICEServer } from '../../gen/coordinator';\n\nexport const toRtcConfiguration = (config: ICEServer[]): RTCConfiguration => {\n  return {\n    bundlePolicy: 'max-bundle',\n    iceServers: config.map((ice) => ({\n      urls: ice.urls,\n      username: ice.username,\n      credential: ice.password,\n    })),\n  };\n};\n","export interface SafePromise<T> {\n  (): Promise<T>;\n  checkPending(): boolean;\n}\n\ntype Fulfillment<T> =\n  | {\n      status: 'resolved';\n      result: T;\n    }\n  | {\n      status: 'rejected';\n      error: unknown;\n    };\n\n/**\n * Saving a long-lived reference to a promise that can reject can be unsafe,\n * since rejecting the promise causes an unhandled rejection error (even if the\n * rejection is handled everywhere promise result is expected).\n *\n * To avoid that, we add both resolution and rejection handlers to the promise.\n * That way, the saved promise never rejects. A callback is provided as return\n * value to build a *new* promise, that resolves and rejects along with\n * the original promise.\n * @param promise Promise to wrap, which possibly rejects\n * @returns Callback to build a new promise, which resolves and rejects along\n * with the original promise\n */\nexport function makeSafePromise<T>(promise: Promise<T>): SafePromise<T> {\n  let isPending = true;\n\n  const safePromise: Promise<Fulfillment<T>> = promise\n    .then(\n      (result) => ({ status: 'resolved' as const, result }),\n      (error) => ({ status: 'rejected' as const, error }),\n    )\n    .finally(() => (isPending = false));\n\n  const unwrapPromise = () =>\n    safePromise.then((fulfillment) => {\n      if (fulfillment.status === 'rejected') throw fulfillment.error;\n      return fulfillment.result;\n    });\n\n  unwrapPromise.checkPending = () => isPending;\n  return unwrapPromise;\n}\n\nexport type PromiseWithResolvers<T> = {\n  promise: Promise<T>;\n  resolve: (value: T | PromiseLike<T>) => void;\n  reject: (reason: any) => void;\n  isResolved: () => boolean;\n  isRejected: () => boolean;\n};\n\n/**\n * Creates a new promise with resolvers.\n *\n * Based on:\n * - https://github.com/tc39/proposal-promise-with-resolvers/blob/main/polyfills.js\n */\nexport const promiseWithResolvers = <T = void>(): PromiseWithResolvers<T> => {\n  let resolve: (value: T | PromiseLike<T>) => void;\n  let reject: (reason: any) => void;\n  const promise = new Promise<T>((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n\n  let isResolved = false;\n  let isRejected = false;\n\n  const resolver = (value: T | PromiseLike<T>) => {\n    isResolved = true;\n    resolve(value);\n  };\n\n  const rejecter = (reason: any) => {\n    isRejected = true;\n    reject(reason);\n  };\n\n  return {\n    promise,\n    resolve: resolver,\n    reject: rejecter,\n    isResolved: () => isResolved,\n    isRejected: () => isRejected,\n  };\n};\n","const uninitialized = Symbol('uninitialized');\n\n/**\n * Lazily creates a value using a provided factory\n */\nexport function lazy<T>(factory: () => T): () => T {\n  let value: T | typeof uninitialized = uninitialized;\n  return () => {\n    if (value === uninitialized) {\n      value = factory();\n    }\n\n    return value;\n  };\n}\n","// Do not modify this file manually. Instead, edit worker.ts\n// and the run ./generate-timer-worker.sh\nexport const timerWorker = {\n  src: `const timerIdMapping = new Map();\nself.addEventListener('message', (event) => {\n    const request = event.data;\n    switch (request.type) {\n        case 'setTimeout':\n        case 'setInterval':\n            timerIdMapping.set(request.id, (request.type === 'setTimeout' ? setTimeout : setInterval)(() => {\n                tick(request.id);\n                if (request.type === 'setTimeout') {\n                    timerIdMapping.delete(request.id);\n                }\n            }, request.timeout));\n            break;\n        case 'clearTimeout':\n        case 'clearInterval':\n            (request.type === 'clearTimeout' ? clearTimeout : clearInterval)(timerIdMapping.get(request.id));\n            timerIdMapping.delete(request.id);\n            break;\n    }\n});\nfunction tick(id) {\n    const message = { type: 'tick', id };\n    self.postMessage(message);\n}`,\n};\n","import { lazy } from '../helpers/lazy';\nimport { getLogger } from '../logger';\nimport { TimerWorkerEvent, TimerWorkerRequest } from './types';\nimport { timerWorker } from './worker.build';\n\nclass TimerWorker {\n  private currentTimerId = 1;\n  private callbacks = new Map<number, () => void>();\n  private worker: Worker | undefined;\n  private fallback = false;\n\n  setup({ useTimerWorker = true }: { useTimerWorker?: boolean } = {}): void {\n    if (!useTimerWorker) {\n      this.fallback = true;\n      return;\n    }\n\n    try {\n      const source = timerWorker.src;\n      const blob = new Blob([source], {\n        type: 'application/javascript; charset=utf-8',\n      });\n      const script = URL.createObjectURL(blob);\n      this.worker = new Worker(script, { name: 'str-timer-worker' });\n      this.worker.addEventListener('message', (event) => {\n        const { type, id } = event.data as TimerWorkerEvent;\n        if (type === 'tick') {\n          this.callbacks.get(id)?.();\n        }\n      });\n    } catch (err: any) {\n      getLogger(['timer-worker'])('error', err);\n      this.fallback = true;\n    }\n  }\n\n  destroy(): void {\n    this.callbacks.clear();\n    this.worker?.terminate();\n    this.worker = undefined;\n    this.fallback = false;\n  }\n\n  get ready() {\n    return this.fallback || Boolean(this.worker);\n  }\n\n  setInterval(callback: () => void, timeout: number): number {\n    return this.setTimer('setInterval', callback, timeout);\n  }\n\n  clearInterval(id?: number): void {\n    this.clearTimer('clearInterval', id);\n  }\n\n  setTimeout(callback: () => void, timeout: number): number {\n    return this.setTimer('setTimeout', callback, timeout);\n  }\n\n  clearTimeout(id?: number): void {\n    this.clearTimer('clearTimeout', id);\n  }\n\n  private setTimer(\n    type: 'setTimeout' | 'setInterval',\n    callback: () => void,\n    timeout: number,\n  ) {\n    if (!this.ready) {\n      this.setup();\n    }\n\n    if (this.fallback) {\n      return (type === 'setTimeout' ? setTimeout : setInterval)(\n        callback,\n        timeout,\n      ) as unknown as number;\n    }\n\n    const id = this.getTimerId();\n\n    this.callbacks.set(id, () => {\n      callback();\n\n      // Timeouts are one-off operations, so no need to keep callback reference\n      // after timer has fired\n      if (type === 'setTimeout') {\n        this.callbacks.delete(id);\n      }\n    });\n\n    this.sendMessage({ type, id, timeout });\n    return id;\n  }\n\n  private clearTimer(type: 'clearTimeout' | 'clearInterval', id?: number) {\n    if (!id) {\n      return;\n    }\n\n    if (!this.ready) {\n      this.setup();\n    }\n\n    if (this.fallback) {\n      (type === 'clearTimeout' ? clearTimeout : clearInterval)(id);\n      return;\n    }\n\n    this.callbacks.delete(id);\n    this.sendMessage({ type, id });\n  }\n\n  private getTimerId() {\n    return this.currentTimerId++;\n  }\n\n  private sendMessage(message: TimerWorkerRequest) {\n    if (!this.worker) {\n      throw new Error(\"Cannot use timer worker before it's set up\");\n    }\n\n    this.worker.postMessage(message);\n  }\n}\n\nlet timerWorkerEnabled = false;\n\nexport const enableTimerWorker = () => {\n  timerWorkerEnabled = true;\n};\n\nexport const getTimers = lazy(() => {\n  const instance = new TimerWorker();\n  instance.setup({ useTimerWorker: timerWorkerEnabled });\n  return instance;\n});\n","import { SignalServerClient } from './gen/video/sfu/signal_rpc/signal.client';\nimport {\n  createSignalClient,\n  retryable,\n  withHeaders,\n  withRequestLogger,\n  withRequestTracer,\n} from './rpc';\nimport {\n  createWebSocketSignalChannel,\n  Dispatcher,\n  IceTrickleBuffer,\n} from './rtc';\nimport {\n  JoinRequest,\n  JoinResponse,\n  SfuRequest,\n} from './gen/video/sfu/event/events';\nimport {\n  ICERestartRequest,\n  SendAnswerRequest,\n  SendStatsRequest,\n  SetPublisherRequest,\n  TrackMuteState,\n  TrackSubscriptionDetails,\n} from './gen/video/sfu/signal_rpc/signal';\nimport { ICETrickle } from './gen/video/sfu/models/models';\nimport { StreamClient } from './coordinator/connection/client';\nimport { generateUUIDv4 } from './coordinator/connection/utils';\nimport { Credentials } from './gen/coordinator';\nimport { Logger } from './coordinator/connection/types';\nimport { getLogger, getLogLevel } from './logger';\nimport {\n  makeSafePromise,\n  PromiseWithResolvers,\n  promiseWithResolvers,\n  SafePromise,\n} from './helpers/promise';\nimport { getTimers } from './timers';\nimport { Tracer, TraceSlice } from './stats';\n\nexport type StreamSfuClientConstructor = {\n  /**\n   * The event dispatcher instance to use.\n   */\n  dispatcher: Dispatcher;\n\n  /**\n   * The credentials to use for the connection.\n   */\n  credentials: Credentials;\n\n  /**\n   * `sessionId` to use for the connection.\n   */\n  sessionId?: string;\n\n  /**\n   * A log tag to use for logging. Useful for debugging multiple instances.\n   */\n  logTag: string;\n\n  /**\n   * The timeout in milliseconds for waiting for the `joinResponse`.\n   * Defaults to 5000ms.\n   */\n  joinResponseTimeout?: number;\n\n  /**\n   * Callback for when the WebSocket connection is closed.\n   */\n  onSignalClose?: (reason: string) => void;\n\n  /**\n   * The StreamClient instance to use for the connection.\n   */\n  streamClient: StreamClient;\n\n  /**\n   * Flag to enable tracing.\n   */\n  enableTracing: boolean;\n};\n\n/**\n * The client used for exchanging information with the SFU.\n */\nexport class StreamSfuClient {\n  /**\n   * A buffer for ICE Candidates that are received before\n   * the Publisher and Subscriber Peer Connections are ready to handle them.\n   */\n  readonly iceTrickleBuffer = new IceTrickleBuffer();\n\n  /**\n   * The `sessionId` of the currently connected participant.\n   */\n  readonly sessionId: string;\n\n  /**\n   * The `edgeName` representing the edge the client is connected to.\n   */\n  readonly edgeName: string;\n\n  /**\n   * Holds the current WebSocket connection to the SFU.\n   */\n  private signalWs!: WebSocket;\n\n  /**\n   * Promise that resolves when the WebSocket connection is ready (open).\n   */\n  private signalReady!: SafePromise<WebSocket>;\n\n  /**\n   * Flag to indicate if the client is in the process of leaving the call.\n   * This is set to `true` when the user initiates the leave process.\n   */\n  isLeaving = false;\n\n  /**\n   * Flag to indicate if the client is in the process of closing the connection.\n   */\n  isClosing = false;\n\n  private readonly rpc: SignalServerClient;\n  private keepAliveInterval?: number;\n  private connectionCheckTimeout?: NodeJS.Timeout;\n  private migrateAwayTimeout?: NodeJS.Timeout;\n  private pingIntervalInMs = 10 * 1000;\n  private unhealthyTimeoutInMs = this.pingIntervalInMs + 5 * 1000;\n  private lastMessageTimestamp?: Date;\n  private readonly tracer?: Tracer;\n  private readonly unsubscribeIceTrickle: () => void;\n  private readonly unsubscribeNetworkChanged: () => void;\n  private readonly onSignalClose: ((reason: string) => void) | undefined;\n  private readonly logger: Logger;\n  private readonly logTag: string;\n  private readonly credentials: Credentials;\n  private readonly dispatcher: Dispatcher;\n  private readonly joinResponseTimeout: number;\n  private networkAvailableTask: PromiseWithResolvers<void> | undefined;\n  /**\n   * Promise that resolves when the JoinResponse is received.\n   * Rejects after a certain threshold if the response is not received.\n   */\n  private joinResponseTask = promiseWithResolvers<JoinResponse>();\n\n  /**\n   * Promise that resolves when the migration is complete.\n   * Rejects after a certain threshold if the migration is not complete.\n   */\n  private migrationTask?: PromiseWithResolvers<void>;\n\n  /**\n   * A controller to abort the current requests.\n   */\n  private readonly abortController = new AbortController();\n\n  /**\n   * The normal closure code. Used for controlled shutdowns.\n   */\n  static NORMAL_CLOSURE = 1000;\n  /**\n   * The error code used when the SFU connection is unhealthy.\n   * Usually, this means that no message has been received from the SFU for\n   * a certain amount of time (`connectionCheckTimeout`).\n   */\n  static ERROR_CONNECTION_UNHEALTHY = 4001;\n  /**\n   * The error code used when the SFU connection is disposed because a new\n   * connection is established or is about to be established.\n   * Here, we don't use 1000 (normal closure) because we don't want the\n   * SFU to clean up the resources associated with the current participant.\n   */\n  static DISPOSE_OLD_SOCKET = 4002;\n\n  /**\n   * Constructs a new SFU client.\n   */\n  constructor({\n    dispatcher,\n    credentials,\n    sessionId,\n    logTag,\n    joinResponseTimeout = 5000,\n    onSignalClose,\n    streamClient,\n    enableTracing,\n  }: StreamSfuClientConstructor) {\n    this.dispatcher = dispatcher;\n    this.sessionId = sessionId || generateUUIDv4();\n    this.onSignalClose = onSignalClose;\n    this.credentials = credentials;\n    const { server, token } = credentials;\n    this.edgeName = server.edge_name;\n    this.joinResponseTimeout = joinResponseTimeout;\n    this.logTag = logTag;\n    this.logger = getLogger(['SfuClient', logTag]);\n    this.tracer = enableTracing ? new Tracer(logTag) : undefined;\n    this.rpc = createSignalClient({\n      baseUrl: server.url,\n      interceptors: [\n        withHeaders({ Authorization: `Bearer ${token}` }),\n        this.tracer && withRequestTracer(this.tracer.trace),\n        getLogLevel() === 'trace' && withRequestLogger(this.logger, 'trace'),\n      ].filter((v) => !!v),\n    });\n\n    // Special handling for the ICETrickle kind of events.\n    // The SFU might trigger these events before the initial RTC\n    // connection is established or \"JoinResponse\" received.\n    // In that case, those events (ICE candidates) need to be buffered\n    // and later added to the appropriate PeerConnection\n    // once the remoteDescription is known and set.\n    this.unsubscribeIceTrickle = dispatcher.on('iceTrickle', (iceTrickle) => {\n      this.iceTrickleBuffer.push(iceTrickle);\n    });\n\n    // listen to network changes to handle offline state\n    // we shouldn't attempt to recover websocket connection when offline\n    this.unsubscribeNetworkChanged = streamClient.on('network.changed', (e) => {\n      if (!e.online) {\n        this.networkAvailableTask = promiseWithResolvers();\n      } else {\n        this.networkAvailableTask?.resolve();\n      }\n    });\n\n    this.createWebSocket();\n  }\n\n  private createWebSocket = () => {\n    this.signalWs = createWebSocketSignalChannel({\n      logTag: this.logTag,\n      endpoint: `${this.credentials.server.ws_endpoint}?tag=${this.logTag}`,\n      onMessage: (message) => {\n        this.lastMessageTimestamp = new Date();\n        this.scheduleConnectionCheck();\n        this.dispatcher.dispatch(message, this.logTag);\n      },\n    });\n\n    this.signalReady = makeSafePromise(\n      Promise.race<WebSocket>([\n        new Promise((resolve, reject) => {\n          const onOpen = () => {\n            this.signalWs.removeEventListener('open', onOpen);\n            resolve(this.signalWs);\n          };\n\n          this.signalWs.addEventListener('open', onOpen);\n\n          this.signalWs.addEventListener('close', (e) => {\n            this.handleWebSocketClose(e);\n            // Normally, this shouldn't have any effect, because WS should never emit 'close'\n            // before emitting 'open'. However, strager things have happened, and we don't\n            // want to leave signalReady in pending state.\n            reject(new Error('SFU WS closed unexpectedly'));\n          });\n        }),\n\n        new Promise((resolve, reject) => {\n          setTimeout(\n            () => reject(new Error('SFU WS connection timed out')),\n            this.joinResponseTimeout,\n          );\n        }),\n      ]),\n    );\n  };\n\n  private cleanUpWebSocket = () => {\n    this.signalWs.removeEventListener('close', this.handleWebSocketClose);\n  };\n\n  get isHealthy() {\n    return (\n      this.signalWs.readyState === WebSocket.OPEN &&\n      this.joinResponseTask.isResolved()\n    );\n  }\n\n  get joinTask() {\n    return this.joinResponseTask.promise;\n  }\n\n  private handleWebSocketClose = (e: CloseEvent) => {\n    this.signalWs.removeEventListener('close', this.handleWebSocketClose);\n    getTimers().clearInterval(this.keepAliveInterval);\n    clearTimeout(this.connectionCheckTimeout);\n    this.onSignalClose?.(`${e.code} ${e.reason}`);\n  };\n\n  close = (code: number = StreamSfuClient.NORMAL_CLOSURE, reason?: string) => {\n    this.isClosing = true;\n    if (this.signalWs.readyState === WebSocket.OPEN) {\n      this.logger('debug', `Closing SFU WS connection: ${code} - ${reason}`);\n      this.signalWs.close(code, `js-client: ${reason}`);\n      this.cleanUpWebSocket();\n    }\n    this.dispose();\n  };\n\n  private dispose = () => {\n    this.logger('debug', 'Disposing SFU client');\n    this.unsubscribeIceTrickle();\n    this.unsubscribeNetworkChanged();\n    clearInterval(this.keepAliveInterval);\n    clearTimeout(this.connectionCheckTimeout);\n    clearTimeout(this.migrateAwayTimeout);\n    this.abortController.abort();\n    this.migrationTask?.resolve();\n    this.iceTrickleBuffer.dispose();\n  };\n\n  getTrace = (): TraceSlice | undefined => {\n    return this.tracer?.take();\n  };\n\n  leaveAndClose = async (reason: string) => {\n    await this.joinTask;\n    try {\n      this.isLeaving = true;\n      await this.notifyLeave(reason);\n    } catch (err) {\n      this.logger('debug', 'Error notifying SFU about leaving call', err);\n    }\n\n    this.close(StreamSfuClient.NORMAL_CLOSURE, reason.substring(0, 115));\n  };\n\n  updateSubscriptions = async (tracks: TrackSubscriptionDetails[]) => {\n    await this.joinTask;\n    return retryable(\n      () => this.rpc.updateSubscriptions({ sessionId: this.sessionId, tracks }),\n      this.abortController.signal,\n    );\n  };\n\n  setPublisher = async (data: Omit<SetPublisherRequest, 'sessionId'>) => {\n    await this.joinTask;\n    return retryable(\n      () => this.rpc.setPublisher({ ...data, sessionId: this.sessionId }),\n      this.abortController.signal,\n    );\n  };\n\n  sendAnswer = async (data: Omit<SendAnswerRequest, 'sessionId'>) => {\n    await this.joinTask;\n    return retryable(\n      () => this.rpc.sendAnswer({ ...data, sessionId: this.sessionId }),\n      this.abortController.signal,\n    );\n  };\n\n  iceTrickle = async (data: Omit<ICETrickle, 'sessionId'>) => {\n    await this.joinTask;\n    return retryable(\n      () => this.rpc.iceTrickle({ ...data, sessionId: this.sessionId }),\n      this.abortController.signal,\n    );\n  };\n\n  iceRestart = async (data: Omit<ICERestartRequest, 'sessionId'>) => {\n    await this.joinTask;\n    return retryable(\n      () => this.rpc.iceRestart({ ...data, sessionId: this.sessionId }),\n      this.abortController.signal,\n    );\n  };\n\n  updateMuteStates = async (muteStates: TrackMuteState[]) => {\n    await this.joinTask;\n    return retryable(\n      () =>\n        this.rpc.updateMuteStates({ muteStates, sessionId: this.sessionId }),\n      this.abortController.signal,\n    );\n  };\n\n  sendStats = async (stats: Omit<SendStatsRequest, 'sessionId'>) => {\n    await this.joinTask;\n    return retryable(\n      () => this.rpc.sendStats({ ...stats, sessionId: this.sessionId }),\n      this.abortController.signal,\n    );\n  };\n\n  startNoiseCancellation = async () => {\n    await this.joinTask;\n    return retryable(\n      () => this.rpc.startNoiseCancellation({ sessionId: this.sessionId }),\n      this.abortController.signal,\n    );\n  };\n\n  stopNoiseCancellation = async () => {\n    await this.joinTask;\n    return retryable(\n      () => this.rpc.stopNoiseCancellation({ sessionId: this.sessionId }),\n      this.abortController.signal,\n    );\n  };\n\n  enterMigration = async (opts: { timeout?: number } = {}) => {\n    this.isLeaving = true;\n    const { timeout = 7 * 1000 } = opts;\n\n    this.migrationTask?.reject(new Error('Cancelled previous migration'));\n    const task = (this.migrationTask = promiseWithResolvers());\n    const unsubscribe = this.dispatcher.on(\n      'participantMigrationComplete',\n      () => {\n        unsubscribe();\n        clearTimeout(this.migrateAwayTimeout);\n        task.resolve();\n      },\n    );\n    this.migrateAwayTimeout = setTimeout(() => {\n      unsubscribe();\n      task.reject(\n        new Error(\n          `Migration (${this.logTag}) failed to complete in ${timeout}ms`,\n        ),\n      );\n    }, timeout);\n\n    return task.promise;\n  };\n\n  join = async (\n    data: Omit<JoinRequest, 'sessionId' | 'token'>,\n  ): Promise<JoinResponse> => {\n    // wait for the signal web socket to be ready before sending \"joinRequest\"\n    await this.signalReady();\n    if (\n      this.joinResponseTask.isResolved() ||\n      this.joinResponseTask.isRejected()\n    ) {\n      // we need to lock the RPC requests until we receive a JoinResponse.\n      // that's why we have this primitive lock mechanism.\n      // the client starts with already initialized joinResponseTask,\n      // and this code creates a new one for the next join request.\n      this.joinResponseTask = promiseWithResolvers<JoinResponse>();\n    }\n\n    // capture a reference to the current joinResponseTask as it might\n    // be replaced with a new one in case a second join request is made\n    const current = this.joinResponseTask;\n\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n    const unsubscribe = this.dispatcher.on('joinResponse', (joinResponse) => {\n      this.logger('debug', 'Received joinResponse', joinResponse);\n      clearTimeout(timeoutId);\n      unsubscribe();\n      this.keepAlive();\n      current.resolve(joinResponse);\n    });\n\n    timeoutId = setTimeout(() => {\n      unsubscribe();\n      current.reject(new Error('Waiting for \"joinResponse\" has timed out'));\n    }, this.joinResponseTimeout);\n\n    await this.send(\n      SfuRequest.create({\n        requestPayload: {\n          oneofKind: 'joinRequest',\n          joinRequest: JoinRequest.create({\n            ...data,\n            sessionId: this.sessionId,\n            token: this.credentials.token,\n          }),\n        },\n      }),\n    );\n\n    return current.promise;\n  };\n\n  ping = async () => {\n    return this.send(\n      SfuRequest.create({\n        requestPayload: {\n          oneofKind: 'healthCheckRequest',\n          healthCheckRequest: {},\n        },\n      }),\n    );\n  };\n\n  private notifyLeave = async (reason: string) => {\n    return this.send(\n      SfuRequest.create({\n        requestPayload: {\n          oneofKind: 'leaveCallRequest',\n          leaveCallRequest: {\n            sessionId: this.sessionId,\n            reason,\n          },\n        },\n      }),\n    );\n  };\n\n  private send = async (message: SfuRequest) => {\n    await this.signalReady(); // wait for the signal ws to be open\n    const msgJson = SfuRequest.toJson(message);\n    if (this.signalWs.readyState !== WebSocket.OPEN) {\n      this.logger('debug', 'Signal WS is not open. Skipping message', msgJson);\n      return;\n    }\n    this.logger('debug', `Sending message to: ${this.edgeName}`, msgJson);\n    this.signalWs.send(SfuRequest.toBinary(message));\n  };\n\n  private keepAlive = () => {\n    const timers = getTimers();\n    timers.clearInterval(this.keepAliveInterval);\n    this.keepAliveInterval = timers.setInterval(() => {\n      this.ping().catch((e) => {\n        this.logger('error', 'Error sending healthCheckRequest to SFU', e);\n      });\n    }, this.pingIntervalInMs);\n  };\n\n  private scheduleConnectionCheck = () => {\n    clearTimeout(this.connectionCheckTimeout);\n    this.connectionCheckTimeout = setTimeout(() => {\n      if (this.lastMessageTimestamp) {\n        const timeSinceLastMessage =\n          new Date().getTime() - this.lastMessageTimestamp.getTime();\n\n        if (timeSinceLastMessage > this.unhealthyTimeoutInMs) {\n          this.close(\n            StreamSfuClient.ERROR_CONNECTION_UNHEALTHY,\n            `SFU connection unhealthy. Didn't receive any message for ${this.unhealthyTimeoutInMs}ms`,\n          );\n        }\n      }\n    }, this.unhealthyTimeoutInMs);\n  };\n}\n","import { CallingState } from '../store';\nimport { Call } from '../Call';\nimport type { CallAcceptedEvent, CallRejectedEvent } from '../gen/coordinator';\nimport { CallEnded } from '../gen/video/sfu/event/events';\nimport { CallEndedReason } from '../gen/video/sfu/models/models';\n\n/**\n * Event handler that watched the delivery of `call.accepted`.\n * Once the event is received, the call is joined.\n */\nexport const watchCallAccepted = (call: Call) => {\n  return async function onCallAccepted(event: CallAcceptedEvent) {\n    // We want to discard the event if it's from the current user\n    if (event.user.id === call.currentUserId) return;\n    const { state } = call;\n    if (\n      event.call.created_by.id === call.currentUserId &&\n      state.callingState === CallingState.RINGING\n    ) {\n      await call.join();\n    }\n  };\n};\n\n/**\n * Event handler that watches delivery of `call.rejected` Websocket event.\n * Once the event is received, the call is left.\n */\nexport const watchCallRejected = (call: Call) => {\n  return async function onCallRejected(event: CallRejectedEvent) {\n    // We want to discard the event if it's from the current user\n    if (event.user.id === call.currentUserId) return;\n    const { call: eventCall } = event;\n    const { session: callSession } = eventCall;\n\n    if (!callSession) {\n      call.logger(\n        'warn',\n        'No call session provided. Ignoring call.rejected event.',\n        event,\n      );\n      return;\n    }\n\n    const rejectedBy = callSession.rejected_by;\n    const { members, callingState } = call.state;\n    if (callingState !== CallingState.RINGING) {\n      call.logger(\n        'info',\n        'Call is not in ringing mode (it is either accepted or rejected already). Ignoring call.rejected event.',\n        event,\n      );\n      return;\n    }\n    if (call.isCreatedByMe) {\n      const everyoneElseRejected = members\n        .filter((m) => m.user_id !== call.currentUserId)\n        .every((m) => rejectedBy[m.user_id]);\n      if (everyoneElseRejected) {\n        call.logger('info', 'everyone rejected, leaving the call');\n        await call.leave({ reason: 'ring: everyone rejected' });\n      }\n    } else {\n      if (rejectedBy[eventCall.created_by.id]) {\n        call.logger('info', 'call creator rejected, leaving call');\n        await call.leave({ reason: 'ring: creator rejected' });\n      }\n    }\n  };\n};\n\n/**\n * Event handler that watches the delivery of `call.ended` Websocket event.\n */\nexport const watchCallEnded = (call: Call) => {\n  return function onCallEnded() {\n    const { callingState } = call.state;\n    if (\n      callingState !== CallingState.IDLE &&\n      callingState !== CallingState.LEFT\n    ) {\n      call\n        .leave({ reason: 'call.ended event received', reject: false })\n        .catch((err) => {\n          call.logger('error', 'Failed to leave call after call.ended ', err);\n        });\n    }\n  };\n};\n\n/**\n * Watches for `callEnded` events.\n */\nexport const watchSfuCallEnded = (call: Call) => {\n  return call.on('callEnded', async (e: CallEnded) => {\n    if (call.state.callingState === CallingState.LEFT) return;\n    try {\n      // `call.ended` event arrived after the call is already left\n      // and all event handlers are detached. We need to manually\n      // update the call state to reflect the call has ended.\n      call.state.setEndedAt(new Date());\n      const reason = CallEndedReason[e.reason];\n      await call.leave({ reason: `callEnded received: ${reason}` });\n    } catch (err) {\n      call.logger(\n        'error',\n        'Failed to leave call after being ended by the SFU',\n        err,\n      );\n    }\n  });\n};\n","import { CallState } from '../store';\nimport type { CallGrantsUpdated } from '../gen/video/sfu/event/events';\nimport { OwnCapability } from '../gen/coordinator';\n\n/**\n * Event handler that watches for `callGrantsUpdated` events.\n *\n * @param state the call state to update.\n */\nexport const watchCallGrantsUpdated = (state: CallState) => {\n  return function onCallGrantsUpdated(event: CallGrantsUpdated) {\n    const { currentGrants } = event;\n    if (currentGrants) {\n      const { canPublishAudio, canPublishVideo, canScreenshare } =\n        currentGrants;\n\n      const update: Partial<Record<OwnCapability, boolean>> = {\n        [OwnCapability.SEND_AUDIO]: canPublishAudio,\n        [OwnCapability.SEND_VIDEO]: canPublishVideo,\n        [OwnCapability.SCREENSHARE]: canScreenshare,\n      };\n\n      const nextCapabilities = state.ownCapabilities.filter(\n        (capability) => update[capability] !== false,\n      );\n      Object.entries(update).forEach(([capability, value]) => {\n        if (value && !nextCapabilities.includes(capability as OwnCapability)) {\n          nextCapabilities.push(capability as OwnCapability);\n        }\n      });\n\n      state.setOwnCapabilities(nextCapabilities);\n    }\n  };\n};\n","import { Dispatcher } from '../rtc';\nimport { Call } from '../Call';\nimport { CallState } from '../store';\nimport { StreamVideoParticipantPatches } from '../types';\nimport { getLogger } from '../logger';\nimport type { PinsChanged } from '../gen/video/sfu/event/events';\nimport {\n  ErrorCode,\n  WebsocketReconnectStrategy,\n} from '../gen/video/sfu/models/models';\nimport { OwnCapability } from '../gen/coordinator';\n\nexport const watchConnectionQualityChanged = (\n  dispatcher: Dispatcher,\n  state: CallState,\n) => {\n  return dispatcher.on('connectionQualityChanged', (e) => {\n    const { connectionQualityUpdates } = e;\n    if (!connectionQualityUpdates) return;\n    state.updateParticipants(\n      connectionQualityUpdates.reduce<StreamVideoParticipantPatches>(\n        (patches, update) => {\n          const { sessionId, connectionQuality } = update;\n          patches[sessionId] = {\n            connectionQuality,\n          };\n          return patches;\n        },\n        {},\n      ),\n    );\n  });\n};\n\n/**\n * Updates the approximate number of participants in the call by peeking at the\n * health check events that our SFU sends.\n */\nexport const watchParticipantCountChanged = (\n  dispatcher: Dispatcher,\n  state: CallState,\n) => {\n  return dispatcher.on('healthCheckResponse', (e) => {\n    const { participantCount } = e;\n    if (participantCount) {\n      state.setParticipantCount(participantCount.total);\n      state.setAnonymousParticipantCount(participantCount.anonymous);\n    }\n  });\n};\n\nexport const watchLiveEnded = (dispatcher: Dispatcher, call: Call) => {\n  return dispatcher.on('error', (e) => {\n    if (e.error && e.error.code !== ErrorCode.LIVE_ENDED) return;\n\n    call.state.setBackstage(true);\n    if (!call.permissionsContext.hasPermission(OwnCapability.JOIN_BACKSTAGE)) {\n      call.leave({ reason: 'live ended' }).catch((err) => {\n        call.logger('error', 'Failed to leave call after live ended', err);\n      });\n    }\n  });\n};\n\n/**\n * Watches and logs the errors reported by the currently connected SFU.\n */\nexport const watchSfuErrorReports = (dispatcher: Dispatcher) => {\n  return dispatcher.on('error', (e) => {\n    if (!e.error) return;\n    const logger = getLogger(['SfuClient']);\n    const { error, reconnectStrategy } = e;\n    logger('error', 'SFU reported error', {\n      code: ErrorCode[error.code],\n      reconnectStrategy: WebsocketReconnectStrategy[reconnectStrategy],\n      message: error.message,\n      shouldRetry: error.shouldRetry,\n    });\n  });\n};\n\n/**\n * Watches for `pinsUpdated` events and updates the pinned state of participants\n * in the call.\n */\nexport const watchPinsUpdated = (state: CallState) => {\n  return function onPinsUpdated(e: PinsChanged) {\n    const { pins } = e;\n    state.setServerSidePins(pins);\n  };\n};\n","import { Call } from '../Call';\nimport {\n  TrackType,\n  TrackUnpublishReason,\n} from '../gen/video/sfu/models/models';\n\n/**\n * An event handler that handles soft mutes.\n *\n * @param call the call.\n */\nexport const handleRemoteSoftMute = (call: Call) => {\n  return call.on('trackUnpublished', async (event) => {\n    const { cause, type, sessionId } = event;\n    const { localParticipant } = call.state;\n    if (\n      cause === TrackUnpublishReason.MODERATION &&\n      sessionId === localParticipant?.sessionId\n    ) {\n      const logger = call.logger;\n      logger(\n        'info',\n        `Local participant's ${TrackType[type]} track is muted remotely`,\n      );\n      try {\n        if (type === TrackType.VIDEO) {\n          await call.camera.disable();\n        } else if (type === TrackType.AUDIO) {\n          await call.microphone.disable();\n        } else if (\n          type === TrackType.SCREEN_SHARE ||\n          type === TrackType.SCREEN_SHARE_AUDIO\n        ) {\n          await call.screenShare.disable();\n        } else {\n          logger(\n            'warn',\n            'Unsupported track type to soft mute',\n            TrackType[type],\n          );\n        }\n      } catch (error) {\n        logger('error', 'Failed to stop publishing', error);\n      }\n    }\n  });\n};\n","/**\n * Adds unique values to an array.\n *\n * @param arr the array to add to.\n * @param values the values to add.\n */\nexport const pushToIfMissing = <T>(arr: T[], ...values: T[]): T[] => {\n  for (const v of values) {\n    if (!arr.includes(v)) {\n      arr.push(v);\n    }\n  }\n  return arr;\n};\n","import type {\n  ParticipantJoined,\n  ParticipantLeft,\n  ParticipantUpdated,\n  TrackPublished,\n  TrackUnpublished,\n} from '../gen/video/sfu/event/events';\nimport type { Participant } from '../gen/video/sfu/models/models';\nimport {\n  StreamVideoParticipant,\n  StreamVideoParticipantPatch,\n  VisibilityState,\n} from '../types';\nimport { CallState } from '../store';\nimport { trackTypeToParticipantStreamKey } from '../rtc';\nimport { pushToIfMissing } from '../helpers/array';\n\n/**\n * An event responder which handles the `participantJoined` event.\n */\nexport const watchParticipantJoined = (state: CallState) => {\n  return function onParticipantJoined(e: ParticipantJoined) {\n    const { participant } = e;\n    if (!participant) return;\n    // `state.updateOrAddParticipant` acts as a safeguard against\n    // potential duplicate events from the SFU.\n    //\n    // Although the SFU should not send duplicate events, we have seen\n    // some race conditions in the past during the `join-flow`.\n    // The SFU would send participant info as part of the `join`\n    // response and then follow up with a `participantJoined` event for\n    // already announced participants.\n    const orphanedTracks = reconcileOrphanedTracks(state, participant);\n    state.updateOrAddParticipant(\n      participant.sessionId,\n      Object.assign<\n        StreamVideoParticipant,\n        StreamVideoParticipantPatch | undefined,\n        Partial<StreamVideoParticipant>\n      >(participant, orphanedTracks, {\n        viewportVisibilityState: {\n          videoTrack: VisibilityState.UNKNOWN,\n          screenShareTrack: VisibilityState.UNKNOWN,\n        },\n      }),\n    );\n  };\n};\n\n/**\n * An event responder which handles the `participantLeft` event.\n */\nexport const watchParticipantLeft = (state: CallState) => {\n  return function onParticipantLeft(e: ParticipantLeft) {\n    const { participant } = e;\n    if (!participant) return;\n\n    state.setParticipants((participants) =>\n      participants.filter((p) => p.sessionId !== participant.sessionId),\n    );\n  };\n};\n\n/**\n * An event responder which handles the `participantUpdated` event.\n */\nexport const watchParticipantUpdated = (state: CallState) => {\n  return function onParticipantUpdated(e: ParticipantUpdated) {\n    const { participant } = e;\n    if (!participant) return;\n    state.updateParticipant(participant.sessionId, participant);\n  };\n};\n\n/**\n * An event responder which handles the `trackPublished` event.\n * The SFU will send this event when a participant publishes a track.\n */\nexport const watchTrackPublished = (state: CallState) => {\n  return function onTrackPublished(e: TrackPublished) {\n    const { type, sessionId } = e;\n    // An optimization for large calls.\n    // After a certain threshold, the SFU would stop emitting `participantJoined`\n    // events, and instead, it would only provide the participant's information\n    // once they start publishing a track.\n    if (e.participant) {\n      const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n      const participant = Object.assign(e.participant, orphanedTracks);\n      state.updateOrAddParticipant(sessionId, participant);\n    } else {\n      state.updateParticipant(sessionId, (p) => ({\n        publishedTracks: pushToIfMissing([...p.publishedTracks], type),\n      }));\n    }\n  };\n};\n\n/**\n * An event responder which handles the `trackUnpublished` event.\n * The SFU will send this event when a participant unpublishes a track.\n */\nexport const watchTrackUnpublished = (state: CallState) => {\n  return function onTrackUnpublished(e: TrackUnpublished) {\n    const { type, sessionId } = e;\n    // An optimization for large calls. See `watchTrackPublished`.\n    if (e.participant) {\n      const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n      const participant = Object.assign(e.participant, orphanedTracks);\n      state.updateOrAddParticipant(sessionId, participant);\n    } else {\n      state.updateParticipant(sessionId, (p) => ({\n        publishedTracks: p.publishedTracks.filter((t) => t !== type),\n      }));\n    }\n  };\n};\n\n/**\n * Reconciles orphaned tracks (if any) for the given participant.\n *\n * @param state the call state.\n * @param participant the participant.\n */\nconst reconcileOrphanedTracks = (\n  state: CallState,\n  participant: Participant,\n): StreamVideoParticipantPatch | undefined => {\n  const orphanTracks = state.takeOrphanedTracks(participant.trackLookupPrefix);\n  if (!orphanTracks.length) return;\n  const reconciledTracks: StreamVideoParticipantPatch = {};\n  for (const orphan of orphanTracks) {\n    const key = trackTypeToParticipantStreamKey(orphan.trackType);\n    if (!key) continue;\n    reconciledTracks[key] = orphan.track;\n  }\n  return reconciledTracks;\n};\n","import { Dispatcher } from '../rtc';\nimport { CallState } from '../store';\nimport { StreamVideoParticipantPatches } from '../types';\n\n/**\n * Watches for `dominantSpeakerChanged` events.\n */\nexport const watchDominantSpeakerChanged = (\n  dispatcher: Dispatcher,\n  state: CallState,\n) => {\n  return dispatcher.on('dominantSpeakerChanged', (e) => {\n    const { sessionId } = e;\n    if (sessionId === state.dominantSpeaker?.sessionId) return;\n    state.setParticipants((participants) =>\n      participants.map((participant) => {\n        // mark the new dominant speaker\n        if (participant.sessionId === sessionId) {\n          return {\n            ...participant,\n            isDominantSpeaker: true,\n          };\n        }\n        // unmark the old dominant speaker\n        if (participant.isDominantSpeaker) {\n          return {\n            ...participant,\n            isDominantSpeaker: false,\n          };\n        }\n        return participant; // no change\n      }),\n    );\n  });\n};\n\n/**\n * Watches for `audioLevelChanged` events.\n */\nexport const watchAudioLevelChanged = (\n  dispatcher: Dispatcher,\n  state: CallState,\n) => {\n  return dispatcher.on('audioLevelChanged', (e) => {\n    const { audioLevels } = e;\n    state.updateParticipants(\n      audioLevels.reduce<StreamVideoParticipantPatches>((patches, current) => {\n        patches[current.sessionId] = {\n          audioLevel: current.level,\n          isSpeaking: current.isSpeaking,\n        };\n        return patches;\n      }, {}),\n    );\n  });\n};\n","import { Call } from '../Call';\nimport { Dispatcher } from '../rtc';\nimport {\n  handleRemoteSoftMute,\n  watchAudioLevelChanged,\n  watchCallAccepted,\n  watchCallEnded,\n  watchCallGrantsUpdated,\n  watchCallRejected,\n  watchConnectionQualityChanged,\n  watchDominantSpeakerChanged,\n  watchLiveEnded,\n  watchParticipantCountChanged,\n  watchParticipantJoined,\n  watchParticipantLeft,\n  watchParticipantUpdated,\n  watchPinsUpdated,\n  watchSfuCallEnded,\n  watchSfuErrorReports,\n  watchTrackPublished,\n  watchTrackUnpublished,\n} from '../events';\nimport {\n  AllCallEvents,\n  AllClientCallEvents,\n  CallEventListener,\n} from '../coordinator/connection/types';\n\ntype RingCallEvents = Extract<\n  AllClientCallEvents,\n  'call.accepted' | 'call.rejected' | 'call.missed'\n>;\n\n/**\n * Registers the default event handlers for a call during its lifecycle.\n *\n * @param call the call to register event handlers for.\n * @param dispatcher the dispatcher.\n */\nexport const registerEventHandlers = (call: Call, dispatcher: Dispatcher) => {\n  const state = call.state;\n  const eventHandlers = [\n    call.on('call.ended', watchCallEnded(call)),\n    watchSfuCallEnded(call),\n\n    watchLiveEnded(dispatcher, call),\n    watchSfuErrorReports(dispatcher),\n    watchConnectionQualityChanged(dispatcher, state),\n    watchParticipantCountChanged(dispatcher, state),\n\n    call.on('participantJoined', watchParticipantJoined(state)),\n    call.on('participantLeft', watchParticipantLeft(state)),\n    call.on('participantUpdated', watchParticipantUpdated(state)),\n\n    call.on('trackPublished', watchTrackPublished(state)),\n    call.on('trackUnpublished', watchTrackUnpublished(state)),\n\n    watchAudioLevelChanged(dispatcher, state),\n    watchDominantSpeakerChanged(dispatcher, state),\n\n    call.on('callGrantsUpdated', watchCallGrantsUpdated(state)),\n    call.on('pinsUpdated', watchPinsUpdated(state)),\n\n    handleRemoteSoftMute(call),\n  ];\n\n  if (call.ringing) {\n    // these events are only relevant when the call is ringing\n    eventHandlers.push(registerRingingCallEventHandlers(call));\n  }\n\n  return () => {\n    eventHandlers.forEach((unsubscribe) => unsubscribe());\n  };\n};\n\n/**\n * Registers event handlers for a call that is of ringing type.\n *\n * @param call the call to register event handlers for.\n */\nexport const registerRingingCallEventHandlers = (call: Call) => {\n  const coordinatorRingEvents: {\n    [key in RingCallEvents]: (\n      call: Call,\n    ) => CallEventListener<AllCallEvents[key]>;\n  } = {\n    'call.accepted': watchCallAccepted(call),\n    'call.rejected': watchCallRejected(call),\n  };\n\n  const eventHandlers = Object.keys(coordinatorRingEvents).map((event) => {\n    const eventName = event as RingCallEvents;\n    return call.on(eventName, coordinatorRingEvents[eventName]);\n  });\n\n  return () => {\n    eventHandlers.forEach((unsubscribe) => unsubscribe());\n  };\n};\n","const DEFAULT_THRESHOLD = 0.35;\n\nexport type EntryHandler = (entry: IntersectionObserverEntry) => void;\n\nexport type Unobserve = () => void;\n\nexport type Observe = (\n  element: HTMLElement,\n  entryHandler: EntryHandler,\n) => Unobserve;\n\nexport class ViewportTracker {\n  /**\n   * @private\n   */\n  private elementHandlerMap: Map<\n    HTMLElement,\n    (entry: IntersectionObserverEntry) => void\n  > = new Map();\n  /**\n   * @private\n   */\n  private observer: IntersectionObserver | null = null;\n  // in React children render before viewport is set, add\n  // them to the queue and observe them once the observer is ready\n  /**\n   * @private\n   */\n  private queueSet: Set<readonly [HTMLElement, EntryHandler]> = new Set();\n\n  /**\n   * Method to set scrollable viewport as root for the IntersectionObserver, returns\n   * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n   *\n   * @param viewportElement\n   * @param options\n   * @returns Unobserve\n   */\n  public setViewport = (\n    viewportElement: HTMLElement,\n    options?: Pick<IntersectionObserverInit, 'threshold' | 'rootMargin'>,\n  ) => {\n    const cleanup = () => {\n      this.observer?.disconnect();\n      this.observer = null;\n      this.elementHandlerMap.clear();\n    };\n\n    this.observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          const handler = this.elementHandlerMap.get(\n            entry.target as HTMLElement,\n          );\n          handler?.(entry);\n        });\n      },\n      {\n        root: viewportElement,\n        ...options,\n        threshold: options?.threshold ?? DEFAULT_THRESHOLD,\n      },\n    );\n\n    if (this.queueSet.size) {\n      this.queueSet.forEach(([queueElement, queueHandler]) => {\n        // check if element which requested observation is\n        // a child of a viewport element, skip if isn't\n        if (!viewportElement.contains(queueElement)) return;\n\n        this.observer!.observe(queueElement);\n        this.elementHandlerMap.set(queueElement, queueHandler);\n      });\n      this.queueSet.clear();\n    }\n\n    return cleanup;\n  };\n\n  /**\n   * Method to set element to observe and handler to be triggered whenever IntersectionObserver\n   * detects a possible change in element's visibility within specified viewport, returns\n   * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n   *\n   * @param element\n   * @param handler\n   * @returns Unobserve\n   */\n  public observe: Observe = (element, handler) => {\n    const queueItem = [element, handler] as const;\n\n    const cleanup = () => {\n      this.elementHandlerMap.delete(element);\n      this.observer?.unobserve(element);\n      this.queueSet.delete(queueItem);\n    };\n\n    if (this.elementHandlerMap.has(element)) return cleanup;\n\n    if (!this.observer) {\n      this.queueSet.add(queueItem);\n      return cleanup;\n    }\n\n    if (this.observer.root!.contains(element)) {\n      this.elementHandlerMap.set(element, handler);\n      this.observer.observe(element);\n    }\n\n    return cleanup;\n  };\n}\n","import {\n  AudioTrackType,\n  DebounceType,\n  StreamVideoParticipant,\n  VideoTrackType,\n  VisibilityState,\n} from '../types';\nimport { TrackType, VideoDimension } from '../gen/video/sfu/models/models';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  shareReplay,\n  takeWhile,\n} from 'rxjs';\nimport { ViewportTracker } from './ViewportTracker';\nimport { getLogger } from '../logger';\nimport { isFirefox, isSafari } from './browsers';\nimport {\n  hasScreenShare,\n  hasScreenShareAudio,\n  hasVideo,\n} from './participantUtils';\nimport type { TrackSubscriptionDetails } from '../gen/video/sfu/signal_rpc/signal';\nimport type { CallState } from '../store';\nimport type { StreamSfuClient } from '../StreamSfuClient';\nimport { SpeakerManager } from '../devices';\nimport { getCurrentValue, setCurrentValue } from '../store/rxUtils';\nimport { tracer as mediaStatsTracer } from '../stats/rtc/mediaDevices';\n\nconst DEFAULT_VIEWPORT_VISIBILITY_STATE: Record<\n  VideoTrackType,\n  VisibilityState\n> = {\n  videoTrack: VisibilityState.UNKNOWN,\n  screenShareTrack: VisibilityState.UNKNOWN,\n} as const;\n\ntype VideoTrackSubscriptionOverride =\n  | {\n      enabled: true;\n      dimension: VideoDimension;\n    }\n  | { enabled: false };\n\nconst globalOverrideKey = Symbol('globalOverrideKey');\n\ninterface VideoTrackSubscriptionOverrides {\n  [sessionId: string]: VideoTrackSubscriptionOverride | undefined;\n  [globalOverrideKey]?: VideoTrackSubscriptionOverride;\n}\n\n/**\n * A manager class that handles dynascale related tasks like:\n *\n * - binding video elements to session ids\n * - binding audio elements to session ids\n * - tracking element visibility\n * - updating subscriptions based on viewport visibility\n * - updating subscriptions based on video element dimensions\n * - updating subscriptions based on published tracks\n */\nexport class DynascaleManager {\n  /**\n   * The viewport tracker instance.\n   */\n  readonly viewportTracker = new ViewportTracker();\n\n  private logger = getLogger(['DynascaleManager']);\n  private callState: CallState;\n  private speaker: SpeakerManager;\n  private sfuClient: StreamSfuClient | undefined;\n  private pendingSubscriptionsUpdate: NodeJS.Timeout | null = null;\n\n  private videoTrackSubscriptionOverridesSubject =\n    new BehaviorSubject<VideoTrackSubscriptionOverrides>({});\n\n  videoTrackSubscriptionOverrides$ =\n    this.videoTrackSubscriptionOverridesSubject.asObservable();\n\n  incomingVideoSettings$ = this.videoTrackSubscriptionOverrides$.pipe(\n    map((overrides) => {\n      const { [globalOverrideKey]: globalSettings, ...participants } =\n        overrides;\n      return {\n        enabled: globalSettings?.enabled !== false,\n        preferredResolution: globalSettings?.enabled\n          ? globalSettings.dimension\n          : undefined,\n        participants: Object.fromEntries(\n          Object.entries(participants).map(\n            ([sessionId, participantOverride]) => [\n              sessionId,\n              {\n                enabled: participantOverride?.enabled !== false,\n                preferredResolution: participantOverride?.enabled\n                  ? participantOverride.dimension\n                  : undefined,\n              },\n            ],\n          ),\n        ),\n        isParticipantVideoEnabled: (sessionId: string) =>\n          overrides[sessionId]?.enabled ??\n          overrides[globalOverrideKey]?.enabled ??\n          true,\n      };\n    }),\n    shareReplay(1),\n  );\n\n  /**\n   * Creates a new DynascaleManager instance.\n   */\n  constructor(callState: CallState, speaker: SpeakerManager) {\n    this.callState = callState;\n    this.speaker = speaker;\n  }\n\n  setSfuClient(sfuClient: StreamSfuClient | undefined) {\n    this.sfuClient = sfuClient;\n  }\n\n  get trackSubscriptions() {\n    const subscriptions: TrackSubscriptionDetails[] = [];\n    for (const p of this.callState.remoteParticipants) {\n      // NOTE: audio tracks don't have to be requested explicitly\n      // as the SFU will implicitly subscribe us to all of them,\n      // once they become available.\n      if (p.videoDimension && hasVideo(p)) {\n        const override =\n          this.videoTrackSubscriptionOverrides[p.sessionId] ??\n          this.videoTrackSubscriptionOverrides[globalOverrideKey];\n\n        if (override?.enabled !== false) {\n          subscriptions.push({\n            userId: p.userId,\n            sessionId: p.sessionId,\n            trackType: TrackType.VIDEO,\n            dimension: override?.dimension ?? p.videoDimension,\n          });\n        }\n      }\n      if (p.screenShareDimension && hasScreenShare(p)) {\n        subscriptions.push({\n          userId: p.userId,\n          sessionId: p.sessionId,\n          trackType: TrackType.SCREEN_SHARE,\n          dimension: p.screenShareDimension,\n        });\n      }\n      if (hasScreenShareAudio(p)) {\n        subscriptions.push({\n          userId: p.userId,\n          sessionId: p.sessionId,\n          trackType: TrackType.SCREEN_SHARE_AUDIO,\n        });\n      }\n    }\n    return subscriptions;\n  }\n\n  get videoTrackSubscriptionOverrides() {\n    return getCurrentValue(this.videoTrackSubscriptionOverrides$);\n  }\n\n  setVideoTrackSubscriptionOverrides = (\n    override: VideoTrackSubscriptionOverride | undefined,\n    sessionIds?: string[],\n  ) => {\n    if (!sessionIds) {\n      return setCurrentValue(\n        this.videoTrackSubscriptionOverridesSubject,\n        override ? { [globalOverrideKey]: override } : {},\n      );\n    }\n\n    return setCurrentValue(\n      this.videoTrackSubscriptionOverridesSubject,\n      (overrides) => ({\n        ...overrides,\n        ...Object.fromEntries(sessionIds.map((id) => [id, override])),\n      }),\n    );\n  };\n\n  applyTrackSubscriptions = (\n    debounceType: DebounceType = DebounceType.SLOW,\n  ) => {\n    if (this.pendingSubscriptionsUpdate) {\n      clearTimeout(this.pendingSubscriptionsUpdate);\n    }\n\n    const updateSubscriptions = () => {\n      this.pendingSubscriptionsUpdate = null;\n      this.sfuClient\n        ?.updateSubscriptions(this.trackSubscriptions)\n        .catch((err: unknown) => {\n          this.logger('debug', `Failed to update track subscriptions`, err);\n        });\n    };\n\n    if (debounceType) {\n      this.pendingSubscriptionsUpdate = setTimeout(\n        updateSubscriptions,\n        debounceType,\n      );\n    } else {\n      updateSubscriptions();\n    }\n  };\n\n  /**\n   * Will begin tracking the given element for visibility changes within the\n   * configured viewport element (`call.setViewport`).\n   *\n   * @param element the element to track.\n   * @param sessionId the session id.\n   * @param trackType the kind of video.\n   * @returns Untrack.\n   */\n  trackElementVisibility = <T extends HTMLElement>(\n    element: T,\n    sessionId: string,\n    trackType: VideoTrackType,\n  ) => {\n    const cleanup = this.viewportTracker.observe(element, (entry) => {\n      this.callState.updateParticipant(sessionId, (participant) => {\n        const previousVisibilityState =\n          participant.viewportVisibilityState ??\n          DEFAULT_VIEWPORT_VISIBILITY_STATE;\n\n        // observer triggers when the element is \"moved\" to be a fullscreen element\n        // keep it VISIBLE if that happens to prevent fullscreen with placeholder\n        const isVisible =\n          entry.isIntersecting || document.fullscreenElement === element\n            ? VisibilityState.VISIBLE\n            : VisibilityState.INVISIBLE;\n        return {\n          ...participant,\n          viewportVisibilityState: {\n            ...previousVisibilityState,\n            [trackType]: isVisible,\n          },\n        };\n      });\n    });\n\n    return () => {\n      cleanup();\n      // reset visibility state to UNKNOWN upon cleanup\n      // so that the layouts that are not actively observed\n      // can still function normally (runtime layout switching)\n      this.callState.updateParticipant(sessionId, (participant) => {\n        const previousVisibilityState =\n          participant.viewportVisibilityState ??\n          DEFAULT_VIEWPORT_VISIBILITY_STATE;\n        return {\n          ...participant,\n          viewportVisibilityState: {\n            ...previousVisibilityState,\n            [trackType]: VisibilityState.UNKNOWN,\n          },\n        };\n      });\n    };\n  };\n\n  /**\n   * Sets the viewport element to track bound video elements for visibility.\n   *\n   * @param element the viewport element.\n   */\n  setViewport = <T extends HTMLElement>(element: T) => {\n    return this.viewportTracker.setViewport(element);\n  };\n\n  /**\n   * Binds a DOM <video> element to the given session id.\n   * This method will make sure that the video element will play\n   * the correct video stream for the given session id.\n   *\n   * Under the hood, it would also keep track of the video element dimensions\n   * and update the subscription accordingly in order to optimize the bandwidth.\n   *\n   * If a \"viewport\" is configured, the video element will be automatically\n   * tracked for visibility and the subscription will be updated accordingly.\n   *\n   * @param videoElement the video element to bind to.\n   * @param sessionId the session id.\n   * @param trackType the kind of video.\n   */\n  bindVideoElement = (\n    videoElement: HTMLVideoElement,\n    sessionId: string,\n    trackType: VideoTrackType,\n  ) => {\n    const boundParticipant =\n      this.callState.findParticipantBySessionId(sessionId);\n    if (!boundParticipant) return;\n\n    const requestTrackWithDimensions = (\n      debounceType: DebounceType,\n      dimension: VideoDimension | undefined,\n    ) => {\n      if (dimension && (dimension.width === 0 || dimension.height === 0)) {\n        // ignore 0x0 dimensions. this can happen when the video element\n        // is not visible (e.g., has display: none).\n        // we treat this as \"unsubscription\" as we don't want to keep\n        // consuming bandwidth for a video that is not visible on the screen.\n        this.logger('debug', `Ignoring 0x0 dimension`, boundParticipant);\n        dimension = undefined;\n      }\n      this.callState.updateParticipantTracks(trackType, {\n        [sessionId]: { dimension },\n      });\n      this.applyTrackSubscriptions(debounceType);\n    };\n\n    const participant$ = this.callState.participants$.pipe(\n      map(\n        (participants) =>\n          participants.find(\n            (participant) => participant.sessionId === sessionId,\n          ) as StreamVideoParticipant,\n      ),\n      takeWhile((participant) => !!participant),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    /**\n     * Since the video elements are now being removed from the DOM (React SDK) upon\n     * visibility change, this subscription is not in use an stays here only for the\n     * plain JS integrations where integrators might choose not to remove the video\n     * elements from the DOM.\n     */\n    // keep copy for resize observer handler\n    let viewportVisibilityState: VisibilityState | undefined;\n    const viewportVisibilityStateSubscription =\n      boundParticipant.isLocalParticipant\n        ? null\n        : participant$\n            .pipe(\n              map((p) => p.viewportVisibilityState?.[trackType]),\n              distinctUntilChanged(),\n            )\n            .subscribe((nextViewportVisibilityState) => {\n              // skip initial trigger\n              if (!viewportVisibilityState) {\n                viewportVisibilityState =\n                  nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                return;\n              }\n              viewportVisibilityState =\n                nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n\n              if (nextViewportVisibilityState === VisibilityState.INVISIBLE) {\n                return requestTrackWithDimensions(\n                  DebounceType.MEDIUM,\n                  undefined,\n                );\n              }\n\n              requestTrackWithDimensions(DebounceType.MEDIUM, {\n                width: videoElement.clientWidth,\n                height: videoElement.clientHeight,\n              });\n            });\n\n    let lastDimensions: VideoDimension | undefined;\n    const resizeObserver = boundParticipant.isLocalParticipant\n      ? null\n      : new ResizeObserver(() => {\n          const currentDimensions = {\n            width: videoElement.clientWidth,\n            height: videoElement.clientHeight,\n          };\n\n          // skip initial trigger\n          if (!lastDimensions) {\n            lastDimensions = currentDimensions;\n            return;\n          }\n\n          if (\n            (lastDimensions.width === currentDimensions.width &&\n              lastDimensions.height === currentDimensions.height) ||\n            viewportVisibilityState === VisibilityState.INVISIBLE\n          ) {\n            return;\n          }\n\n          const relativeDelta = Math.max(\n            currentDimensions.width / lastDimensions.width,\n            currentDimensions.height / lastDimensions.height,\n          );\n          // Low quality video in an upscaled video element is very noticable.\n          // We try to upscale faster, and downscale slower. We also update debounce\n          // more if the size change is not significant, gurading against fast-firing\n          // resize events.\n          const debounceType =\n            relativeDelta > 1.2 ? DebounceType.IMMEDIATE : DebounceType.MEDIUM;\n          requestTrackWithDimensions(debounceType, {\n            width: videoElement.clientWidth,\n            height: videoElement.clientHeight,\n          });\n          lastDimensions = currentDimensions;\n        });\n    resizeObserver?.observe(videoElement);\n\n    // element renders and gets bound - track subscription gets\n    // triggered first other ones get skipped on initial subscriptions\n    const publishedTracksSubscription = boundParticipant.isLocalParticipant\n      ? null\n      : participant$\n          .pipe(\n            distinctUntilKeyChanged('publishedTracks'),\n            map((p) =>\n              trackType === 'videoTrack' ? hasVideo(p) : hasScreenShare(p),\n            ),\n            distinctUntilChanged(),\n          )\n          .subscribe((isPublishing) => {\n            if (isPublishing) {\n              // the participant just started to publish a track\n              requestTrackWithDimensions(DebounceType.IMMEDIATE, {\n                width: videoElement.clientWidth,\n                height: videoElement.clientHeight,\n              });\n            } else {\n              // the participant just stopped publishing a track\n              requestTrackWithDimensions(DebounceType.FAST, undefined);\n            }\n          });\n\n    videoElement.autoplay = true;\n    videoElement.playsInline = true;\n\n    // explicitly marking the element as muted will allow autoplay to work\n    // without prior user interaction:\n    // https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide\n    videoElement.muted = true;\n\n    const streamSubscription = participant$\n      .pipe(\n        distinctUntilKeyChanged(\n          trackType === 'videoTrack' ? 'videoStream' : 'screenShareStream',\n        ),\n      )\n      .subscribe((p) => {\n        const source =\n          trackType === 'videoTrack' ? p.videoStream : p.screenShareStream;\n        if (videoElement.srcObject === source) return;\n        videoElement.srcObject = source ?? null;\n        if (isSafari() || isFirefox()) {\n          setTimeout(() => {\n            videoElement.srcObject = source ?? null;\n            videoElement.play().catch((e) => {\n              this.logger('warn', `Failed to play stream`, e);\n            });\n            // we add extra delay until we attempt to force-play\n            // the participant's media stream in Firefox and Safari,\n            // as they seem to have some timing issues\n          }, 25);\n        }\n      });\n\n    return () => {\n      requestTrackWithDimensions(DebounceType.FAST, undefined);\n      viewportVisibilityStateSubscription?.unsubscribe();\n      publishedTracksSubscription?.unsubscribe();\n      streamSubscription.unsubscribe();\n      resizeObserver?.disconnect();\n    };\n  };\n\n  /**\n   * Binds a DOM <audio> element to the given session id.\n   *\n   * This method will make sure that the audio element will\n   * play the correct audio stream for the given session id.\n   *\n   * @param audioElement the audio element to bind to.\n   * @param sessionId the session id.\n   * @param trackType the kind of audio.\n   * @returns a cleanup function that will unbind the audio element.\n   */\n  bindAudioElement = (\n    audioElement: HTMLAudioElement,\n    sessionId: string,\n    trackType: AudioTrackType,\n  ) => {\n    const participant = this.callState.findParticipantBySessionId(sessionId);\n    if (!participant || participant.isLocalParticipant) return;\n\n    const participant$ = this.callState.participants$.pipe(\n      map(\n        (participants) =>\n          participants.find(\n            (p) => p.sessionId === sessionId,\n          ) as StreamVideoParticipant,\n      ),\n      takeWhile((p) => !!p),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    const updateMediaStreamSubscription = participant$\n      .pipe(\n        distinctUntilKeyChanged(\n          trackType === 'screenShareAudioTrack'\n            ? 'screenShareAudioStream'\n            : 'audioStream',\n        ),\n      )\n      .subscribe((p) => {\n        const source =\n          trackType === 'screenShareAudioTrack'\n            ? p.screenShareAudioStream\n            : p.audioStream;\n        if (audioElement.srcObject === source) return;\n\n        setTimeout(() => {\n          audioElement.srcObject = source ?? null;\n          if (audioElement.srcObject) {\n            audioElement.play().catch((e) => {\n              this.logger('warn', `Failed to play stream`, e);\n            });\n\n            // audio output device shall be set after the audio element is played\n            // otherwise, the browser will not pick it up, and will always\n            // play audio through the system's default device\n            const { selectedDevice } = this.speaker.state;\n            if (selectedDevice && 'setSinkId' in audioElement) {\n              audioElement.setSinkId(selectedDevice);\n              mediaStatsTracer.trace(\n                'navigator.mediaDevices.setSinkId',\n                selectedDevice,\n              );\n            }\n          }\n        });\n      });\n\n    const sinkIdSubscription = !('setSinkId' in audioElement)\n      ? null\n      : this.speaker.state.selectedDevice$.subscribe((deviceId) => {\n          if (deviceId) {\n            audioElement.setSinkId(deviceId);\n            mediaStatsTracer.trace(\n              'navigator.mediaDevices.setSinkId',\n              deviceId,\n            );\n          }\n        });\n\n    const volumeSubscription = combineLatest([\n      this.speaker.state.volume$,\n      participant$.pipe(distinctUntilKeyChanged('audioVolume')),\n    ]).subscribe(([volume, p]) => {\n      audioElement.volume = p.audioVolume ?? volume;\n    });\n\n    audioElement.autoplay = true;\n\n    return () => {\n      sinkIdSubscription?.unsubscribe();\n      volumeSubscription.unsubscribe();\n      updateMediaStreamSubscription.unsubscribe();\n    };\n  };\n}\n","import { CallSettingsResponse, OwnCapability } from '../gen/coordinator';\nimport { TrackType } from '../gen/video/sfu/models/models';\nimport { ensureExhausted } from '../helpers/ensureExhausted';\n\n/**\n * Stores the permissions for the current user and exposes\n * a few helper methods which make it easier to work with permissions.\n *\n * This is an internal class meant to be used in combination with\n * a {@link Call} instance.\n *\n * @internal\n */\nexport class PermissionsContext {\n  private permissions: OwnCapability[] = [];\n  private settings?: CallSettingsResponse;\n\n  /**\n   * Sets the permissions for the current user.\n   *\n   * @param permissions the permissions to set.\n   */\n  setPermissions = (permissions: OwnCapability[]) => {\n    this.permissions = permissions || [];\n  };\n\n  /**\n   * Sets the settings for the bound call.\n   * @param settings\n   */\n  setCallSettings = (settings: CallSettingsResponse) => {\n    this.settings = settings;\n  };\n\n  /**\n   * Checks if the current user has a specific permission.\n   *\n   * @param permission the permission to check for.\n   */\n  hasPermission = (permission: OwnCapability) => {\n    return this.permissions.includes(permission);\n  };\n\n  /**\n   * Helper method that checks whether the current user has the permission\n   * to publish the given track type.\n   */\n  canPublish = (trackType: TrackType) => {\n    switch (trackType) {\n      case TrackType.AUDIO:\n        return this.hasPermission(OwnCapability.SEND_AUDIO);\n      case TrackType.VIDEO:\n        return this.hasPermission(OwnCapability.SEND_VIDEO);\n      case TrackType.SCREEN_SHARE:\n      case TrackType.SCREEN_SHARE_AUDIO:\n        return this.hasPermission(OwnCapability.SCREENSHARE);\n      case TrackType.UNSPECIFIED:\n        return false;\n      default:\n        ensureExhausted(trackType, 'Unknown track type');\n    }\n  };\n\n  /**\n   * Checks if the current user can request a specific permission\n   * within the call.\n   *\n   * @param permission the permission to check for.\n   * @param settings the call settings to check against (optional).\n   */\n  canRequest = (\n    permission: OwnCapability,\n    settings: CallSettingsResponse | undefined = this.settings,\n  ) => {\n    if (!settings) return false;\n\n    const { audio, video, screensharing } = settings;\n    switch (permission) {\n      case OwnCapability.SEND_AUDIO:\n        return audio.access_request_enabled;\n      case OwnCapability.SEND_VIDEO:\n        return video.access_request_enabled;\n      case OwnCapability.SCREENSHARE:\n        return screensharing.access_request_enabled;\n      default:\n        return false;\n    }\n  };\n}\n","import { StreamVideoParticipant } from './types';\nimport {\n  Comparator,\n  defaultSortPreset,\n  livestreamOrAudioRoomSortPreset,\n} from './sorting';\n\n/**\n * The options for a {@link CallType}.\n */\nexport type CallTypeOptions = {\n  /**\n   * The {@link Comparator} to use to sorting the participants in the call.\n   */\n  sortParticipantsBy?: Comparator<StreamVideoParticipant>;\n};\n\n/**\n * Represents a call type.\n */\nexport class CallType {\n  /**\n   * The name of the call type.\n   */\n  name: string;\n\n  /**\n   * The options for the call type.\n   */\n  options: CallTypeOptions;\n\n  /**\n   * Constructs a new CallType.\n   *\n   * @param name the name of the call type.\n   * @param options the options for the call type.\n   */\n  constructor(\n    name: string,\n    options: CallTypeOptions = {\n      sortParticipantsBy: defaultSortPreset,\n    },\n  ) {\n    this.name = name;\n    this.options = options;\n  }\n}\n\n/**\n * A registry of {@link CallType}s.\n * You can register and unregister call types.\n */\nclass CallTypesRegistry {\n  /**\n   * The call types registered in this registry.\n   * @private\n   */\n  private readonly callTypes: { [key: string]: CallType };\n\n  /**\n   * Constructs a new CallTypesRegistry.\n   *\n   * @param callTypes the initial call types to register.\n   */\n  constructor(callTypes: CallType[]) {\n    this.callTypes = callTypes.reduce<{ [key: string]: CallType }>(\n      (acc, callType) => {\n        acc[callType.name] = callType;\n        return acc;\n      },\n      {},\n    );\n  }\n\n  /**\n   * Registers a new call type.\n   *\n   * @param callType the call type to register.\n   */\n  register = (callType: CallType) => {\n    this.callTypes[callType.name] = callType;\n  };\n\n  /**\n   * Unregisters a call type.\n   *\n   * @param name the name of the call type to unregister.\n   */\n  unregister = (name: string) => {\n    delete this.callTypes[name];\n  };\n\n  /**\n   * Gets a call type by name.\n   *\n   * @param name the name of the call type to get.\n   */\n  get = (name: string): CallType => {\n    if (!this.callTypes[name]) {\n      this.register(new CallType(name));\n    }\n    return this.callTypes[name];\n  };\n}\n\n/**\n * The default call types registry.\n * You can use this instance to dynamically register and unregister call types.\n */\nexport const CallTypes = new CallTypesRegistry([\n  new CallType('default', {\n    sortParticipantsBy: defaultSortPreset,\n  }),\n  new CallType('development', {\n    sortParticipantsBy: defaultSortPreset,\n  }),\n  new CallType('livestream', {\n    sortParticipantsBy: livestreamOrAudioRoomSortPreset,\n  }),\n  new CallType('audio_room', {\n    sortParticipantsBy: livestreamOrAudioRoomSortPreset,\n  }),\n]);\n","import { fromEventPattern, map } from 'rxjs';\nimport { isReactNative } from '../helpers/platforms';\nimport { getLogger } from '../logger';\nimport { disposeOfMediaStream } from './devices';\nimport { withoutConcurrency } from '../helpers/concurrency';\n\ninterface BrowserPermissionConfig {\n  constraints: DisplayMediaStreamOptions;\n  queryName: PermissionName;\n}\n\nexport type BrowserPermissionState = PermissionState | 'prompting';\n\nexport class BrowserPermission {\n  private ready: Promise<void>;\n  private disposeController = new AbortController();\n  private state: BrowserPermissionState | undefined;\n  private wasPrompted: boolean = false;\n  private listeners = new Set<(state: BrowserPermissionState) => void>();\n  private logger = getLogger(['permissions']);\n\n  constructor(private readonly permission: BrowserPermissionConfig) {\n    const signal = this.disposeController.signal;\n\n    this.ready = (async () => {\n      const assumeGranted = () => {\n        this.setState('prompt');\n      };\n\n      if (!canQueryPermissions()) {\n        return assumeGranted();\n      }\n\n      try {\n        const status = await navigator.permissions.query({\n          name: permission.queryName,\n        });\n\n        if (!signal.aborted) {\n          this.setState(status.state);\n          status.addEventListener('change', () => this.setState(status.state), {\n            signal,\n          });\n        }\n      } catch (err) {\n        this.logger('debug', 'Failed to query permission status', err);\n        assumeGranted();\n      }\n    })();\n  }\n\n  dispose() {\n    this.state = undefined;\n    this.disposeController.abort();\n  }\n\n  async getState() {\n    await this.ready;\n    if (!this.state) {\n      throw new Error('BrowserPermission instance possibly disposed');\n    }\n    return this.state;\n  }\n\n  async prompt({\n    forcePrompt = false,\n    throwOnNotAllowed = false,\n  }: { forcePrompt?: boolean; throwOnNotAllowed?: boolean } = {}) {\n    return await withoutConcurrency(\n      `permission-prompt-${this.permission.queryName}`,\n      async () => {\n        if (\n          (await this.getState()) !== 'prompt' ||\n          (this.wasPrompted && !forcePrompt)\n        ) {\n          const isGranted = this.state === 'granted';\n\n          if (!isGranted && throwOnNotAllowed) {\n            throw new Error(\n              'Permission was not granted previously, and prompting again is not allowed',\n            );\n          }\n\n          return isGranted;\n        }\n\n        try {\n          this.wasPrompted = true;\n          this.setState('prompting');\n          const stream = await navigator.mediaDevices.getUserMedia(\n            this.permission.constraints,\n          );\n          disposeOfMediaStream(stream);\n          this.setState('granted');\n          return true;\n        } catch (e) {\n          if (\n            e &&\n            typeof e === 'object' &&\n            'name' in e &&\n            (e.name === 'NotAllowedError' || e.name === 'SecurityError')\n          ) {\n            this.logger('info', 'Browser permission was not granted', {\n              permission: this.permission,\n            });\n            this.setState('denied');\n\n            if (throwOnNotAllowed) {\n              throw e;\n            }\n\n            return false;\n          }\n\n          this.logger('error', `Failed to getUserMedia`, {\n            error: e,\n            permission: this.permission,\n          });\n          this.setState('prompt');\n          throw e;\n        }\n      },\n    );\n  }\n\n  listen(cb: (state: BrowserPermissionState) => void) {\n    this.listeners.add(cb);\n    if (this.state) cb(this.state);\n    return () => this.listeners.delete(cb);\n  }\n\n  asObservable() {\n    return this.getStateObservable().pipe(\n      // In some browsers, the 'change' event doesn't reliably emit and hence,\n      // permissionState stays in 'prompt' state forever.\n      // Typically, this happens when a user grants one-time permission.\n      // Instead of checking if a permission is granted, we check if it isn't denied\n      map((state) => state !== 'denied'),\n    );\n  }\n\n  getIsPromptingObservable() {\n    return this.getStateObservable().pipe(\n      map((state) => state === 'prompting'),\n    );\n  }\n\n  private getStateObservable() {\n    return fromEventPattern<BrowserPermissionState>(\n      (handler) => this.listen(handler),\n      (handler, unlisten) => unlisten(),\n    );\n  }\n\n  private setState(state: BrowserPermissionState) {\n    if (this.state !== state) {\n      this.state = state;\n      this.listeners.forEach((listener) => listener(state));\n    }\n  }\n}\n\nfunction canQueryPermissions() {\n  return (\n    !isReactNative() &&\n    typeof navigator !== 'undefined' &&\n    !!navigator.permissions?.query\n  );\n}\n","import {\n  concatMap,\n  debounceTime,\n  from,\n  fromEvent,\n  map,\n  merge,\n  shareReplay,\n  startWith,\n} from 'rxjs';\nimport { getLogger } from '../logger';\nimport { BrowserPermission } from './BrowserPermission';\nimport { lazy } from '../helpers/lazy';\nimport { isFirefox } from '../helpers/browsers';\n\n/**\n * Returns an Observable that emits the list of available devices\n * that meet the given constraints.\n *\n * @param permission a BrowserPermission instance.\n * @param kind the kind of devices to enumerate.\n */\nconst getDevices = (permission: BrowserPermission, kind: MediaDeviceKind) => {\n  return from(\n    (async () => {\n      let devices = await navigator.mediaDevices.enumerateDevices();\n      // for privacy reasons, most browsers don't give you device labels\n      // unless you have a corresponding camera or microphone permission\n      const shouldPromptForBrowserPermission = devices.some(\n        (device) => device.kind === kind && device.label === '',\n      );\n      if (shouldPromptForBrowserPermission && (await permission.prompt())) {\n        devices = await navigator.mediaDevices.enumerateDevices();\n      }\n      return devices.filter(\n        (device) =>\n          device.kind === kind &&\n          device.label !== '' &&\n          device.deviceId !== 'default',\n      );\n    })(),\n  );\n};\n\n/**\n * Tells if the browser supports audio output change on 'audio' elements,\n * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId.\n */\nexport const checkIfAudioOutputChangeSupported = () => {\n  if (typeof document === 'undefined') return false;\n  const element = document.createElement('audio');\n  return 'setSinkId' in element;\n};\n\n/**\n * The default constraints used to request audio devices.\n */\nconst audioDeviceConstraints = {\n  audio: {\n    autoGainControl: true,\n    noiseSuppression: true,\n    echoCancellation: true,\n  },\n} satisfies MediaStreamConstraints;\n\n/**\n * The default constraints used to request video devices.\n */\nconst videoDeviceConstraints = {\n  video: {\n    width: 1280,\n    height: 720,\n  },\n} satisfies MediaStreamConstraints;\n\n/**\n * Keeps track of the browser permission to use microphone. This permission also\n * affects an ability to enumerate audio devices.\n */\nexport const getAudioBrowserPermission = lazy(\n  () =>\n    new BrowserPermission({\n      constraints: audioDeviceConstraints,\n      queryName: 'microphone' as PermissionName,\n    }),\n);\n\n/**\n * Keeps track of the browser permission to use camera. This permission also\n * affects an ability to enumerate video devices.\n */\nexport const getVideoBrowserPermission = lazy(\n  () =>\n    new BrowserPermission({\n      constraints: videoDeviceConstraints,\n      queryName: 'camera' as PermissionName,\n    }),\n);\n\nconst getDeviceChangeObserver = lazy(() => {\n  // 'addEventListener' is not available in React Native, returning\n  // an observable that will never fire\n  if (!navigator.mediaDevices.addEventListener) return from([]);\n  return fromEvent(navigator.mediaDevices, 'devicechange').pipe(\n    map(() => undefined),\n    debounceTime(500),\n  );\n});\n\n/**\n * Prompts the user for a permission to use audio devices (if not already granted\n * and was not prompted before) and lists the available 'audioinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */\nexport const getAudioDevices = lazy(() => {\n  return merge(\n    getDeviceChangeObserver(),\n    getAudioBrowserPermission().asObservable(),\n  ).pipe(\n    startWith(undefined),\n    concatMap(() => getDevices(getAudioBrowserPermission(), 'audioinput')),\n    shareReplay(1),\n  );\n});\n\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'videoinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */\nexport const getVideoDevices = lazy(() => {\n  return merge(\n    getDeviceChangeObserver(),\n    getVideoBrowserPermission().asObservable(),\n  ).pipe(\n    startWith(undefined),\n    concatMap(() => getDevices(getVideoBrowserPermission(), 'videoinput')),\n    shareReplay(1),\n  );\n});\n\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'audiooutput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */\nexport const getAudioOutputDevices = lazy(() => {\n  return merge(\n    getDeviceChangeObserver(),\n    getAudioBrowserPermission().asObservable(),\n  ).pipe(\n    startWith(undefined),\n    concatMap(() => getDevices(getAudioBrowserPermission(), 'audiooutput')),\n    shareReplay(1),\n  );\n});\n\nconst getStream = async (constraints: MediaStreamConstraints) => {\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  if (isFirefox()) {\n    // When enumerating devices, Firefox will hide device labels unless there's been\n    // an active user media stream on the page. So we force device list updates after\n    // every successful getUserMedia call.\n    navigator.mediaDevices.dispatchEvent(new Event('devicechange'));\n  }\n  return stream;\n};\n\nfunction isNotFoundOrOverconstrainedError(error: unknown) {\n  if (!error || typeof error !== 'object') {\n    return false;\n  }\n\n  if ('name' in error && typeof error.name === 'string') {\n    const name = error.name;\n    if (['OverconstrainedError', 'NotFoundError'].includes(name)) {\n      return true;\n    }\n  }\n\n  if ('message' in error && typeof error.message === 'string') {\n    const message = error.message;\n    if (message.startsWith('OverconstrainedError')) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an audio media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns the new `MediaStream` fulfilling the given constraints.\n */\nexport const getAudioStream = async (\n  trackConstraints?: MediaTrackConstraints,\n): Promise<MediaStream> => {\n  const constraints: MediaStreamConstraints = {\n    audio: {\n      ...audioDeviceConstraints.audio,\n      ...trackConstraints,\n    },\n  };\n\n  try {\n    await getAudioBrowserPermission().prompt({\n      throwOnNotAllowed: true,\n      forcePrompt: true,\n    });\n    return await getStream(constraints);\n  } catch (error) {\n    if (isNotFoundOrOverconstrainedError(error) && trackConstraints?.deviceId) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { deviceId, ...relaxedConstraints } = trackConstraints;\n      getLogger(['devices'])(\n        'warn',\n        'Failed to get audio stream, will try again with relaxed constraints',\n        { error, constraints, relaxedConstraints },\n      );\n      return getAudioStream(relaxedConstraints);\n    }\n\n    getLogger(['devices'])('error', 'Failed to get audio stream', {\n      error,\n      constraints,\n    });\n    throw error;\n  }\n};\n\n/**\n * Returns a video media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */\nexport const getVideoStream = async (\n  trackConstraints?: MediaTrackConstraints,\n): Promise<MediaStream> => {\n  const constraints: MediaStreamConstraints = {\n    video: {\n      ...videoDeviceConstraints.video,\n      ...trackConstraints,\n    },\n  };\n  try {\n    await getVideoBrowserPermission().prompt({\n      throwOnNotAllowed: true,\n      forcePrompt: true,\n    });\n    return await getStream(constraints);\n  } catch (error) {\n    if (isNotFoundOrOverconstrainedError(error) && trackConstraints?.deviceId) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { deviceId, ...relaxedConstraints } = trackConstraints;\n      getLogger(['devices'])(\n        'warn',\n        'Failed to get video stream, will try again with relaxed constraints',\n        { error, constraints, relaxedConstraints },\n      );\n      return getVideoStream(relaxedConstraints);\n    }\n\n    getLogger(['devices'])('error', 'Failed to get video stream', {\n      error,\n      constraints,\n    });\n    throw error;\n  }\n};\n\n/**\n * Prompts the user for a permission to share a screen.\n * If the user grants the permission, a screen sharing stream is returned. Throws otherwise.\n *\n * The callers of this API are responsible to handle the possible errors.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n *\n * @param options any additional options to pass to the [`getDisplayMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia) API.\n */\nexport const getScreenShareStream = async (\n  options?: DisplayMediaStreamOptions,\n) => {\n  try {\n    return await navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: {\n        channelCount: {\n          ideal: 2,\n        },\n        echoCancellation: false,\n        autoGainControl: false,\n        noiseSuppression: false,\n      },\n      // @ts-expect-error - not present in types yet\n      systemAudio: 'include',\n      ...options,\n    });\n  } catch (e) {\n    getLogger(['devices'])('error', 'Failed to get screen share stream', e);\n    throw e;\n  }\n};\n\nexport const deviceIds$ =\n  typeof navigator !== 'undefined' &&\n  typeof navigator.mediaDevices !== 'undefined'\n    ? getDeviceChangeObserver().pipe(\n        startWith(undefined),\n        concatMap(() => navigator.mediaDevices.enumerateDevices()),\n        shareReplay(1),\n      )\n    : undefined;\n\n/**\n * Deactivates MediaStream (stops and removes tracks) to be later garbage collected\n *\n * @param stream MediaStream\n * @returns void\n */\nexport const disposeOfMediaStream = (stream: MediaStream) => {\n  if (!stream.active) return;\n  stream.getTracks().forEach((track) => {\n    track.stop();\n  });\n  // @ts-expect-error release() is present in react-native-webrtc and must be called to dispose the stream\n  if (typeof stream.release === 'function') {\n    // @ts-expect-error - release() is present in react-native-webrtc\n    stream.release();\n  }\n};\n","/**\n * Checks if the current platform is a mobile device.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n */\nexport const isMobile = () => /Mobi/i.test(navigator.userAgent);\n","import { combineLatest, Observable, pairwise } from 'rxjs';\nimport { Call } from '../Call';\nimport { CallingState } from '../store';\nimport { createSubscription } from '../store/rxUtils';\nimport { InputMediaDeviceManagerState } from './InputMediaDeviceManagerState';\nimport { isMobile } from '../helpers/compatibility';\nimport { isReactNative } from '../helpers/platforms';\nimport { Logger } from '../coordinator/connection/types';\nimport { getLogger } from '../logger';\nimport { TrackType } from '../gen/video/sfu/models/models';\nimport { deviceIds$ } from './devices';\nimport {\n  settled,\n  withCancellation,\n  withoutConcurrency,\n} from '../helpers/concurrency';\nimport {\n  MediaStreamFilter,\n  MediaStreamFilterEntry,\n  MediaStreamFilterRegistrationResult,\n} from './filters';\n\nexport abstract class InputMediaDeviceManager<\n  T extends InputMediaDeviceManagerState<C>,\n  C = MediaTrackConstraints,\n> {\n  /**\n   * if true, stops the media stream when call is left\n   */\n  stopOnLeave = true;\n  logger: Logger;\n\n  protected subscriptions: Function[] = [];\n  private isTrackStoppedDueToTrackEnd = false;\n  private filters: MediaStreamFilterEntry[] = [];\n  private statusChangeConcurrencyTag = Symbol('statusChangeConcurrencyTag');\n  private filterRegistrationConcurrencyTag = Symbol(\n    'filterRegistrationConcurrencyTag',\n  );\n\n  protected constructor(\n    protected readonly call: Call,\n    public readonly state: T,\n    protected readonly trackType: TrackType,\n  ) {\n    this.logger = getLogger([`${TrackType[trackType].toLowerCase()} manager`]);\n    if (\n      deviceIds$ &&\n      !isReactNative() &&\n      (this.trackType === TrackType.AUDIO || this.trackType === TrackType.VIDEO)\n    ) {\n      this.handleDisconnectedOrReplacedDevices();\n    }\n  }\n\n  /**\n   * Lists the available audio/video devices\n   *\n   * Note: It prompts the user for a permission to use devices (if not already granted)\n   *\n   * @returns an Observable that will be updated if a device is connected or disconnected\n   */\n  listDevices() {\n    return this.getDevices();\n  }\n\n  /**\n   * Returns `true` when this device is in enabled state.\n   */\n  get enabled() {\n    return this.state.status === 'enabled';\n  }\n\n  /**\n   * Starts stream.\n   */\n  async enable() {\n    this.state.prevStatus = this.state.optimisticStatus;\n    if (this.state.optimisticStatus === 'enabled') {\n      return;\n    }\n    this.state.setPendingStatus('enabled');\n\n    await withCancellation(this.statusChangeConcurrencyTag, async (signal) => {\n      try {\n        await this.unmuteStream();\n        this.state.setStatus('enabled');\n      } finally {\n        if (!signal.aborted) {\n          this.state.setPendingStatus(this.state.status);\n        }\n      }\n    });\n  }\n\n  /**\n   * Stops or pauses the stream based on state.disableMode\n   * @param {boolean} [forceStop=false] when true, stops the tracks regardless of the state.disableMode\n   */\n  async disable(forceStop: boolean = false) {\n    this.state.prevStatus = this.state.optimisticStatus;\n    if (!forceStop && this.state.optimisticStatus === 'disabled') {\n      return;\n    }\n\n    this.state.setPendingStatus('disabled');\n\n    await withCancellation(this.statusChangeConcurrencyTag, async (signal) => {\n      try {\n        const stopTracks =\n          forceStop || this.state.disableMode === 'stop-tracks';\n        await this.muteStream(stopTracks);\n        this.state.setStatus('disabled');\n      } finally {\n        if (!signal.aborted) {\n          this.state.setPendingStatus(this.state.status);\n        }\n      }\n    });\n  }\n\n  /**\n   * Returns a promise that resolves when all pe\n   */\n  async statusChangeSettled() {\n    await settled(this.statusChangeConcurrencyTag);\n  }\n\n  /**\n   * If status was previously enabled, it will re-enable the device.\n   */\n  async resume() {\n    if (\n      this.state.prevStatus === 'enabled' &&\n      this.state.status !== 'enabled'\n    ) {\n      await this.enable();\n    }\n  }\n\n  /**\n   * If the current device status is disabled, it will enable the device,\n   * else it will disable it.\n   */\n  async toggle() {\n    if (this.state.optimisticStatus === 'enabled') {\n      return await this.disable();\n    } else {\n      return await this.enable();\n    }\n  }\n\n  /**\n   * Registers a filter that will be applied to the stream.\n   *\n   * The registered filter will get the existing stream, and it should return\n   * a new stream with the applied filter.\n   *\n   * @param filter the filter to register.\n   * @returns MediaStreamFilterRegistrationResult\n   */\n  registerFilter(\n    filter: MediaStreamFilter,\n  ): MediaStreamFilterRegistrationResult {\n    const entry: MediaStreamFilterEntry = {\n      start: filter,\n      stop: undefined,\n    };\n\n    const registered = withoutConcurrency(\n      this.filterRegistrationConcurrencyTag,\n      async () => {\n        this.filters.push(entry);\n        await this.applySettingsToStream();\n      },\n    );\n\n    return {\n      registered,\n      unregister: () =>\n        withoutConcurrency(this.filterRegistrationConcurrencyTag, async () => {\n          entry.stop?.();\n          this.filters = this.filters.filter((f) => f !== entry);\n          await this.applySettingsToStream();\n        }),\n    };\n  }\n\n  /**\n   * Will set the default constraints for the device.\n   *\n   * @param constraints the constraints to set.\n   */\n  setDefaultConstraints(constraints: C) {\n    this.state.setDefaultConstraints(constraints);\n  }\n\n  /**\n   * Selects a device.\n   *\n   * Note: This method is not supported in React Native\n   * @param deviceId the device id to select.\n   */\n  async select(deviceId: string | undefined) {\n    if (isReactNative()) {\n      throw new Error(\n        'This method is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for reference.',\n      );\n    }\n    const prevDeviceId = this.state.selectedDevice;\n    if (deviceId === prevDeviceId) {\n      return;\n    }\n    try {\n      this.state.setDevice(deviceId);\n      await this.applySettingsToStream();\n    } catch (error) {\n      this.state.setDevice(prevDeviceId);\n      throw error;\n    }\n  }\n\n  /**\n   * Disposes the manager.\n   *\n   * @internal\n   */\n  dispose = () => {\n    this.subscriptions.forEach((s) => s());\n  };\n\n  protected async applySettingsToStream() {\n    await withCancellation(this.statusChangeConcurrencyTag, async () => {\n      if (this.enabled) {\n        await this.muteStream();\n        await this.unmuteStream();\n      }\n    });\n  }\n\n  protected abstract getDevices(): Observable<MediaDeviceInfo[]>;\n\n  protected abstract getStream(constraints: C): Promise<MediaStream>;\n\n  protected publishStream(stream: MediaStream): Promise<void> {\n    return this.call.publish(stream, this.trackType);\n  }\n\n  protected stopPublishStream(): Promise<void> {\n    return this.call.stopPublish(this.trackType);\n  }\n\n  protected getTracks(): MediaStreamTrack[] {\n    return this.state.mediaStream?.getTracks() ?? [];\n  }\n\n  protected async muteStream(stopTracks: boolean = true) {\n    const mediaStream = this.state.mediaStream;\n    if (!mediaStream) return;\n    this.logger('debug', `${stopTracks ? 'Stopping' : 'Disabling'} stream`);\n    if (this.call.state.callingState === CallingState.JOINED) {\n      await this.stopPublishStream();\n    }\n    this.muteLocalStream(stopTracks);\n    const allEnded = this.getTracks().every((t) => t.readyState === 'ended');\n    if (allEnded) {\n      // @ts-expect-error release() is present in react-native-webrtc\n      if (typeof mediaStream.release === 'function') {\n        // @ts-expect-error called to dispose the stream in RN\n        mediaStream.release();\n      }\n      this.state.setMediaStream(undefined, undefined);\n      this.filters.forEach((entry) => entry.stop?.());\n    }\n  }\n\n  private disableTracks() {\n    this.getTracks().forEach((track) => {\n      if (track.enabled) track.enabled = false;\n    });\n  }\n\n  private enableTracks() {\n    this.getTracks().forEach((track) => {\n      if (!track.enabled) track.enabled = true;\n    });\n  }\n\n  private stopTracks() {\n    this.getTracks().forEach((track) => {\n      if (track.readyState === 'live') track.stop();\n    });\n  }\n\n  private muteLocalStream(stopTracks: boolean) {\n    if (!this.state.mediaStream) {\n      return;\n    }\n    if (stopTracks) {\n      this.stopTracks();\n    } else {\n      this.disableTracks();\n    }\n  }\n\n  protected async unmuteStream() {\n    this.logger('debug', 'Starting stream');\n    let stream: MediaStream;\n    let rootStream: Promise<MediaStream> | undefined;\n    if (\n      this.state.mediaStream &&\n      this.getTracks().every((t) => t.readyState === 'live')\n    ) {\n      stream = this.state.mediaStream;\n      this.enableTracks();\n    } else {\n      const defaultConstraints = this.state.defaultConstraints;\n      const constraints: MediaTrackConstraints = {\n        ...defaultConstraints,\n        deviceId: this.state.selectedDevice\n          ? { exact: this.state.selectedDevice }\n          : undefined,\n      };\n\n      /**\n       * Chains two media streams together.\n       *\n       * In our case, filters MediaStreams are derived from their parent MediaStream.\n       * However, once a child filter's track is stopped,\n       * the tracks of the parent MediaStream aren't automatically stopped.\n       * This leads to a situation where the camera indicator light is still on\n       * even though the user stopped publishing video.\n       *\n       * This function works around this issue by stopping the parent MediaStream's tracks\n       * as well once the child filter's tracks are stopped.\n       *\n       * It works by patching the stop() method of the child filter's tracks to also stop\n       * the parent MediaStream's tracks of the same type. Here we assume that\n       * the parent MediaStream has only one track of each type.\n       *\n       * @param parentStream the parent MediaStream. Omit for the root stream.\n       */\n      const chainWith =\n        (parentStream?: Promise<MediaStream>) =>\n        async (filterStream: MediaStream): Promise<MediaStream> => {\n          if (!parentStream) return filterStream;\n          // TODO OL: take care of track.enabled property as well\n          const parent = await parentStream;\n          filterStream.getTracks().forEach((track) => {\n            const originalStop = track.stop;\n            track.stop = function stop() {\n              originalStop.call(track);\n              parent.getTracks().forEach((parentTrack) => {\n                if (parentTrack.kind === track.kind) {\n                  parentTrack.stop();\n                }\n              });\n            };\n          });\n\n          parent.getTracks().forEach((parentTrack) => {\n            // When the parent stream abruptly ends, we propagate the event\n            // to the filter stream.\n            // This usually happens when the camera/microphone permissions\n            // are revoked or when the device is disconnected.\n            const handleParentTrackEnded = () => {\n              filterStream.getTracks().forEach((track) => {\n                if (parentTrack.kind !== track.kind) return;\n                track.stop();\n                track.dispatchEvent(new Event('ended')); // propagate the event\n              });\n            };\n            parentTrack.addEventListener('ended', handleParentTrackEnded);\n            this.subscriptions.push(() => {\n              parentTrack.removeEventListener('ended', handleParentTrackEnded);\n            });\n          });\n\n          return filterStream;\n        };\n\n      // the rootStream represents the stream coming from the actual device\n      // e.g. camera or microphone stream\n      rootStream = this.getStream(constraints as C);\n      // we publish the last MediaStream of the chain\n      stream = await this.filters.reduce(\n        (parent, entry) =>\n          parent\n            .then((inputStream) => {\n              const { stop, output } = entry.start(inputStream);\n              entry.stop = stop;\n              return output;\n            })\n            .then(chainWith(parent), (error) => {\n              this.logger(\n                'warn',\n                'Filter failed to start and will be ignored',\n                error,\n              );\n              return parent;\n            }),\n        rootStream,\n      );\n    }\n    if (this.call.state.callingState === CallingState.JOINED) {\n      await this.publishStream(stream);\n    }\n    if (this.state.mediaStream !== stream) {\n      this.state.setMediaStream(stream, await rootStream);\n      const handleTrackEnded = async () => {\n        await this.statusChangeSettled();\n        if (this.enabled) {\n          this.isTrackStoppedDueToTrackEnd = true;\n          setTimeout(() => {\n            this.isTrackStoppedDueToTrackEnd = false;\n          }, 2000);\n          await this.disable();\n        }\n      };\n      const createTrackMuteHandler = (muted: boolean) => () => {\n        if (!isMobile() || this.trackType !== TrackType.VIDEO) return;\n        this.call.notifyTrackMuteState(muted, this.trackType).catch((err) => {\n          this.logger('warn', 'Error while notifying track mute state', err);\n        });\n      };\n      stream.getTracks().forEach((track) => {\n        const muteHandler = createTrackMuteHandler(true);\n        const unmuteHandler = createTrackMuteHandler(false);\n        track.addEventListener('mute', muteHandler);\n        track.addEventListener('unmute', unmuteHandler);\n        track.addEventListener('ended', handleTrackEnded);\n        this.subscriptions.push(() => {\n          track.removeEventListener('mute', muteHandler);\n          track.removeEventListener('unmute', unmuteHandler);\n          track.removeEventListener('ended', handleTrackEnded);\n        });\n      });\n    }\n  }\n\n  private get mediaDeviceKind() {\n    if (this.trackType === TrackType.AUDIO) {\n      return 'audioinput';\n    }\n    if (this.trackType === TrackType.VIDEO) {\n      return 'videoinput';\n    }\n    return '';\n  }\n\n  private handleDisconnectedOrReplacedDevices() {\n    this.subscriptions.push(\n      createSubscription(\n        combineLatest([\n          deviceIds$!.pipe(pairwise()),\n          this.state.selectedDevice$,\n        ]),\n        async ([[prevDevices, currentDevices], deviceId]) => {\n          try {\n            if (!deviceId) return;\n            await this.statusChangeSettled();\n\n            let isDeviceDisconnected = false;\n            let isDeviceReplaced = false;\n            const currentDevice = this.findDevice(currentDevices, deviceId);\n            const prevDevice = this.findDevice(prevDevices, deviceId);\n            if (!currentDevice && prevDevice) {\n              isDeviceDisconnected = true;\n            } else if (\n              currentDevice &&\n              prevDevice &&\n              currentDevice.deviceId === prevDevice.deviceId &&\n              currentDevice.groupId !== prevDevice.groupId\n            ) {\n              isDeviceReplaced = true;\n            }\n\n            if (isDeviceDisconnected) {\n              await this.disable();\n              await this.select(undefined);\n            }\n            if (isDeviceReplaced) {\n              if (\n                this.isTrackStoppedDueToTrackEnd &&\n                this.state.status === 'disabled'\n              ) {\n                await this.enable();\n                this.isTrackStoppedDueToTrackEnd = false;\n              } else {\n                await this.applySettingsToStream();\n              }\n            }\n          } catch (err) {\n            this.logger(\n              'warn',\n              'Unexpected error while handling disconnected or replaced device',\n              err,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  private findDevice(devices: MediaDeviceInfo[], deviceId: string) {\n    const kind = this.mediaDeviceKind;\n    return devices.find((d) => d.deviceId === deviceId && d.kind === kind);\n  }\n}\n","import {\n  BehaviorSubject,\n  distinctUntilChanged,\n  Observable,\n  of,\n  shareReplay,\n} from 'rxjs';\nimport { RxUtils } from '../store';\nimport { BrowserPermission } from './BrowserPermission';\n\nexport type InputDeviceStatus = 'enabled' | 'disabled' | undefined;\nexport type TrackDisableMode = 'stop-tracks' | 'disable-tracks';\n\nexport abstract class InputMediaDeviceManagerState<C = MediaTrackConstraints> {\n  protected statusSubject = new BehaviorSubject<InputDeviceStatus>(undefined);\n  protected optimisticStatusSubject = new BehaviorSubject<InputDeviceStatus>(\n    undefined,\n  );\n  protected mediaStreamSubject = new BehaviorSubject<MediaStream | undefined>(\n    undefined,\n  );\n  protected selectedDeviceSubject = new BehaviorSubject<string | undefined>(\n    undefined,\n  );\n  protected defaultConstraintsSubject = new BehaviorSubject<C | undefined>(\n    undefined,\n  );\n\n  /**\n   * @internal\n   */\n  prevStatus: InputDeviceStatus;\n\n  /**\n   * An Observable that emits the current media stream, or `undefined` if the device is currently disabled.\n   *\n   */\n  mediaStream$ = this.mediaStreamSubject.asObservable();\n\n  /**\n   * An Observable that emits the currently selected device\n   */\n  selectedDevice$ = this.selectedDeviceSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  /**\n   * An Observable that emits the device status\n   */\n  status$ = this.statusSubject.asObservable().pipe(distinctUntilChanged());\n\n  /**\n   * An Observable the reflects the requested device status. Useful for optimistic UIs\n   */\n  optimisticStatus$ = this.optimisticStatusSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  /**\n   * The default constraints for the device.\n   */\n  defaultConstraints$ = this.defaultConstraintsSubject.asObservable();\n\n  /**\n   * An observable that will emit `true` if browser/system permission\n   * is granted, `false` otherwise.\n   */\n  hasBrowserPermission$: Observable<boolean>;\n\n  /**\n   * An observable that emits `true` when SDK is prompting for browser permission\n   * (i.e. browser's UI for allowing or disallowing device access is visible)\n   */\n  isPromptingPermission$: Observable<boolean>;\n\n  /**\n   * Constructs new InputMediaDeviceManagerState instance.\n   *\n   * @param disableMode the disable mode to use.\n   * @param permission the BrowserPermission to use for querying.\n   * `undefined` means no permission is required.\n   */\n  constructor(\n    public readonly disableMode: TrackDisableMode = 'stop-tracks',\n    permission?: BrowserPermission,\n  ) {\n    this.hasBrowserPermission$ = permission\n      ? permission.asObservable().pipe(shareReplay(1))\n      : of(true);\n\n    this.isPromptingPermission$ = permission\n      ? permission.getIsPromptingObservable().pipe(shareReplay(1))\n      : of(false);\n  }\n\n  /**\n   * The device status\n   */\n  get status() {\n    return this.getCurrentValue(this.status$);\n  }\n\n  /**\n   * The requested device status. Useful for optimistic UIs\n   */\n  get optimisticStatus() {\n    return this.getCurrentValue(this.optimisticStatus$);\n  }\n\n  /**\n   * The currently selected device\n   */\n  get selectedDevice() {\n    return this.getCurrentValue(this.selectedDevice$);\n  }\n\n  /**\n   * The current media stream, or `undefined` if the device is currently disabled.\n   */\n  get mediaStream() {\n    return this.getCurrentValue(this.mediaStream$);\n  }\n\n  /**\n   * Gets the current value of an observable, or undefined if the observable has\n   * not emitted a value yet.\n   *\n   * @param observable$ the observable to get the value from.\n   */\n  getCurrentValue = RxUtils.getCurrentValue;\n\n  /**\n   * @internal\n   * @param status\n   */\n  setStatus(status: InputDeviceStatus) {\n    this.setCurrentValue(this.statusSubject, status);\n  }\n\n  /**\n   * @internal\n   * @param pendingStatus\n   */\n  setPendingStatus(pendingStatus: InputDeviceStatus) {\n    this.setCurrentValue(this.optimisticStatusSubject, pendingStatus);\n  }\n\n  /**\n   * Updates the `mediaStream` state variable.\n   *\n   * @internal\n   * @param stream the stream to set.\n   * @param rootStream the root stream, applicable when filters are used\n   * as this is the stream that holds the actual deviceId information.\n   */\n  setMediaStream(\n    stream: MediaStream | undefined,\n    rootStream: MediaStream | undefined,\n  ) {\n    this.setCurrentValue(this.mediaStreamSubject, stream);\n    if (rootStream) {\n      this.setDevice(this.getDeviceIdFromStream(rootStream));\n    }\n  }\n\n  /**\n   * @internal\n   * @param deviceId the device id to set.\n   */\n  setDevice(deviceId: string | undefined) {\n    this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n  }\n\n  /**\n   * Gets the default constraints for the device.\n   */\n  get defaultConstraints() {\n    return this.getCurrentValue(this.defaultConstraints$);\n  }\n\n  /**\n   * Sets the default constraints for the device.\n   *\n   * @internal\n   * @param constraints the constraints to set.\n   */\n  setDefaultConstraints(constraints: C | undefined) {\n    this.setCurrentValue(this.defaultConstraintsSubject, constraints);\n  }\n\n  /**\n   * Updates the value of the provided Subject.\n   * An `update` can either be a new value or a function which takes\n   * the current value and returns a new value.\n   *\n   * @internal\n   *\n   * @param subject the subject to update.\n   * @param update the update to apply to the subject.\n   * @return the updated value.\n   */\n  protected setCurrentValue = RxUtils.setCurrentValue;\n\n  protected abstract getDeviceIdFromStream(\n    stream: MediaStream,\n  ): string | undefined;\n}\n","import { BehaviorSubject, distinctUntilChanged, Observable } from 'rxjs';\nimport { InputMediaDeviceManagerState } from './InputMediaDeviceManagerState';\nimport { isReactNative } from '../helpers/platforms';\nimport { getVideoBrowserPermission } from './devices';\n\nexport type CameraDirection = 'front' | 'back' | undefined;\n\nexport class CameraManagerState extends InputMediaDeviceManagerState {\n  private directionSubject = new BehaviorSubject<CameraDirection>(undefined);\n\n  /**\n   * Observable that emits the preferred camera direction\n   * front - means the camera facing the user\n   * back - means the camera facing the environment\n   */\n  direction$: Observable<CameraDirection>;\n\n  constructor() {\n    super('stop-tracks', getVideoBrowserPermission());\n    this.direction$ = this.directionSubject\n      .asObservable()\n      .pipe(distinctUntilChanged());\n  }\n\n  /**\n   * The preferred camera direction\n   * front - means the camera facing the user\n   * back - means the camera facing the environment\n   */\n  get direction() {\n    return this.getCurrentValue(this.direction$);\n  }\n\n  /**\n   * @internal\n   */\n  setDirection(direction: CameraDirection) {\n    this.setCurrentValue(this.directionSubject, direction);\n  }\n\n  /**\n   * @internal\n   */\n  setMediaStream(\n    stream: MediaStream | undefined,\n    rootStream: MediaStream | undefined,\n  ): void {\n    super.setMediaStream(stream, rootStream);\n    if (stream) {\n      // RN getSettings() doesn't return facingMode, so we don't verify camera direction\n      const direction = isReactNative()\n        ? this.direction\n        : stream.getVideoTracks()[0]?.getSettings().facingMode === 'environment'\n          ? 'back'\n          : 'front';\n      this.setDirection(direction);\n    }\n  }\n\n  protected getDeviceIdFromStream(stream: MediaStream): string | undefined {\n    const [track] = stream.getVideoTracks();\n    return track?.getSettings().deviceId;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Call } from '../Call';\nimport { CameraDirection, CameraManagerState } from './CameraManagerState';\nimport { InputMediaDeviceManager } from './InputMediaDeviceManager';\nimport { getVideoDevices, getVideoStream } from './devices';\nimport { OwnCapability, VideoSettingsResponse } from '../gen/coordinator';\nimport { TrackType } from '../gen/video/sfu/models/models';\nimport { isMobile } from '../helpers/compatibility';\nimport { isReactNative } from '../helpers/platforms';\n\nexport class CameraManager extends InputMediaDeviceManager<CameraManagerState> {\n  private targetResolution = {\n    width: 1280,\n    height: 720,\n  };\n\n  /**\n   * Constructs a new CameraManager.\n   *\n   * @param call the call instance.\n   */\n  constructor(call: Call) {\n    super(call, new CameraManagerState(), TrackType.VIDEO);\n  }\n\n  private isDirectionSupportedByDevice() {\n    return isReactNative() || isMobile();\n  }\n\n  /**\n   * Select the camera direction.\n   *\n   * @param direction the direction of the camera to select.\n   */\n  async selectDirection(direction: Exclude<CameraDirection, undefined>) {\n    if (this.isDirectionSupportedByDevice()) {\n      if (isReactNative()) {\n        const videoTrack = this.getTracks()[0];\n        if (!videoTrack) {\n          this.logger('warn', 'No video track found to do direction selection');\n          return;\n        }\n        await videoTrack.applyConstraints({\n          facingMode: direction === 'front' ? 'user' : 'environment',\n        });\n        this.state.setDirection(direction);\n        this.state.setDevice(undefined);\n      } else {\n        // web mobile\n        this.state.setDirection(direction);\n        // Providing both device id and direction doesn't work, so we deselect the device\n        this.state.setDevice(undefined);\n        this.getTracks().forEach((track) => {\n          track.stop();\n        });\n        await this.unmuteStream();\n      }\n    } else {\n      this.logger('warn', 'Camera direction ignored for desktop devices');\n    }\n  }\n\n  /**\n   * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.\n   *\n   * Note: if there is no available camera with the desired direction, this method will do nothing.\n   * @returns\n   */\n  async flip() {\n    const newDirection = this.state.direction === 'front' ? 'back' : 'front';\n    await this.selectDirection(newDirection);\n  }\n\n  /**\n   * @internal\n   */\n  async selectTargetResolution(resolution: { width: number; height: number }) {\n    this.targetResolution.height = resolution.height;\n    this.targetResolution.width = resolution.width;\n    if (this.state.optimisticStatus === 'enabled') {\n      try {\n        await this.statusChangeSettled();\n      } catch (error) {\n        // couldn't enable device, target resolution will be applied the next time user attempts to start the device\n        this.logger('warn', 'could not apply target resolution', error);\n      }\n    }\n    if (this.enabled && this.state.mediaStream) {\n      const [videoTrack] = this.state.mediaStream.getVideoTracks();\n      if (!videoTrack) return;\n      const { width, height } = videoTrack.getSettings();\n      if (\n        width !== this.targetResolution.width ||\n        height !== this.targetResolution.height\n      ) {\n        await this.applySettingsToStream();\n        this.logger(\n          'debug',\n          `${width}x${height} target resolution applied to media stream`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Applies the video settings to the camera.\n   *\n   * @param settings the video settings to apply.\n   * @param publish whether to publish the stream after applying the settings.\n   */\n  async apply(settings: VideoSettingsResponse, publish: boolean) {\n    const hasPublishedVideo = !!this.call.state.localParticipant?.videoStream;\n    const hasPermission = this.call.permissionsContext.hasPermission(\n      OwnCapability.SEND_AUDIO,\n    );\n    if (hasPublishedVideo || !hasPermission) return;\n\n    // Wait for any in progress camera operation\n    await this.statusChangeSettled();\n\n    const { target_resolution, camera_facing, camera_default_on } = settings;\n    await this.selectTargetResolution(target_resolution);\n\n    // Set camera direction if it's not yet set\n    if (!this.state.direction && !this.state.selectedDevice) {\n      this.state.setDirection(camera_facing === 'front' ? 'front' : 'back');\n    }\n\n    if (!publish) return;\n\n    const { mediaStream } = this.state;\n    if (this.enabled && mediaStream) {\n      // The camera is already enabled (e.g. lobby screen). Publish the stream\n      await this.publishStream(mediaStream);\n    } else if (this.state.status === undefined && camera_default_on) {\n      // Start camera if backend config specifies, and there is no local setting\n      await this.enable();\n    }\n  }\n\n  protected getDevices(): Observable<MediaDeviceInfo[]> {\n    return getVideoDevices();\n  }\n\n  protected getStream(\n    constraints: MediaTrackConstraints,\n  ): Promise<MediaStream> {\n    constraints.width = this.targetResolution.width;\n    constraints.height = this.targetResolution.height;\n    // We can't set both device id and facing mode\n    // Device id has higher priority\n\n    if (\n      !constraints.deviceId &&\n      this.state.direction &&\n      this.isDirectionSupportedByDevice()\n    ) {\n      constraints.facingMode =\n        this.state.direction === 'front' ? 'user' : 'environment';\n    }\n    return getVideoStream(constraints);\n  }\n}\n","import { BehaviorSubject, distinctUntilChanged, Observable } from 'rxjs';\nimport {\n  InputMediaDeviceManagerState,\n  TrackDisableMode,\n} from './InputMediaDeviceManagerState';\nimport { getAudioBrowserPermission } from './devices';\n\nexport class MicrophoneManagerState extends InputMediaDeviceManagerState {\n  private speakingWhileMutedSubject = new BehaviorSubject<boolean>(false);\n\n  /**\n   * An Observable that emits `true` if the user's microphone is muted but they'are speaking.\n   *\n   * This feature is not available in the React Native SDK.\n   */\n  speakingWhileMuted$: Observable<boolean>;\n\n  constructor(disableMode: TrackDisableMode) {\n    super(disableMode, getAudioBrowserPermission());\n\n    this.speakingWhileMuted$ = this.speakingWhileMutedSubject\n      .asObservable()\n      .pipe(distinctUntilChanged());\n  }\n\n  /**\n   * `true` if the user's microphone is muted but they'are speaking.\n   *\n   * This feature is not available in the React Native SDK.\n   */\n  get speakingWhileMuted() {\n    return this.getCurrentValue(this.speakingWhileMuted$);\n  }\n\n  /**\n   * @internal\n   */\n  setSpeakingWhileMuted(isSpeaking: boolean) {\n    this.setCurrentValue(this.speakingWhileMutedSubject, isSpeaking);\n  }\n\n  protected getDeviceIdFromStream(stream: MediaStream): string | undefined {\n    const [track] = stream.getAudioTracks();\n    return track?.getSettings().deviceId;\n  }\n}\n","export type SoundDetectorOptions = {\n  /**\n   * Defines how often the detector should check whether a sound is present.\n   * Defaults to 500ms.\n   */\n  detectionFrequencyInMs?: number;\n\n  /**\n   * Defines the audio level threshold before a \"change\" is emitted.\n   * Defaults to 150. This value should be in the range of 0-255.\n   */\n  audioLevelThreshold?: number;\n\n  /**\n   * See https://developer.mozilla.org/en-US/docs/web/api/analysernode/fftsize\n   *\n   * Defaults to 128.\n   */\n  fftSize?: number;\n\n  /**\n   * Defines whether the provided audio stream should be stopped (destroyed)\n   * when the sound detector is stopped.\n   *\n   * Defaults to `true`.\n   */\n  destroyStreamOnStop?: boolean;\n};\n\nexport type SoundDetectorState = {\n  isSoundDetected: boolean;\n  /**\n   * Represented as percentage (0-100) where 100% is defined by `audioLevelThreshold` property.\n   * Decrease time between samples (to 50-100ms) with `detectionFrequencyInMs` property.\n   */\n  audioLevel: number;\n};\n\nexport type SoundStateChangeHandler = (state: SoundDetectorState) => void;\n\nconst DETECTION_FREQUENCY_IN_MS = 500;\nconst AUDIO_LEVEL_THRESHOLD = 150;\nconst FFT_SIZE = 128;\n\n/**\n * Creates a new sound detector.\n *\n * @param audioStream the audio stream to observe. Depending on the provided configuration, this stream might be destroyed when the sound detector is stopped.\n * @param onSoundDetectedStateChanged a callback which is called when the sound state changes.\n * @param options custom options for the sound detector.\n * @returns a clean-up function which once invoked stops the sound detector.\n */\nexport const createSoundDetector = (\n  audioStream: MediaStream,\n  onSoundDetectedStateChanged: SoundStateChangeHandler,\n  options: SoundDetectorOptions = {},\n) => {\n  const {\n    detectionFrequencyInMs = DETECTION_FREQUENCY_IN_MS,\n    audioLevelThreshold = AUDIO_LEVEL_THRESHOLD,\n    fftSize = FFT_SIZE,\n    destroyStreamOnStop = true,\n  } = options;\n\n  const audioContext = new AudioContext();\n  const analyser = audioContext.createAnalyser();\n  analyser.fftSize = fftSize;\n\n  const microphone = audioContext.createMediaStreamSource(audioStream);\n  microphone.connect(analyser);\n\n  const intervalId = setInterval(() => {\n    const data = new Uint8Array(analyser.frequencyBinCount);\n    analyser.getByteFrequencyData(data);\n\n    const isSoundDetected = data.some((value) => value >= audioLevelThreshold);\n\n    const averagedDataValue = data.reduce((pv, cv) => pv + cv, 0) / data.length;\n\n    const percentage =\n      averagedDataValue > audioLevelThreshold\n        ? 100\n        : Math.round((averagedDataValue / audioLevelThreshold) * 100);\n\n    // When the track is disabled, it takes time for the buffer to empty\n    // This check will ensure that we don't send anything if the track is disabled\n    if (audioStream.getAudioTracks()[0]?.enabled) {\n      onSoundDetectedStateChanged({ isSoundDetected, audioLevel: percentage });\n    } else {\n      onSoundDetectedStateChanged({ isSoundDetected: false, audioLevel: 0 });\n    }\n  }, detectionFrequencyInMs);\n\n  return async function stop() {\n    clearInterval(intervalId);\n\n    // clean-up the AudioContext elements\n    microphone.disconnect();\n    analyser.disconnect();\n    if (audioContext.state !== 'closed') {\n      await audioContext.close();\n    }\n\n    // stop the stream\n    if (destroyStreamOnStop) {\n      audioStream.getTracks().forEach((track) => {\n        track.stop();\n        audioStream.removeTrack(track);\n      });\n    }\n  };\n};\n","import { BaseStats } from '../stats';\nimport { SoundStateChangeHandler } from './sound-detector';\nimport { flatten } from '../stats/utils';\nimport { getLogger } from '../logger';\n\nexport class RNSpeechDetector {\n  private pc1 = new RTCPeerConnection({});\n  private pc2 = new RTCPeerConnection({});\n  private audioStream: MediaStream | undefined;\n\n  /**\n   * Starts the speech detection.\n   */\n  public async start(onSoundDetectedStateChanged: SoundStateChangeHandler) {\n    try {\n      this.cleanupAudioStream();\n      const audioStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n      this.audioStream = audioStream;\n\n      this.pc1.addEventListener('icecandidate', async (e) => {\n        await this.pc2.addIceCandidate(\n          e.candidate as RTCIceCandidateInit | undefined,\n        );\n      });\n      this.pc2.addEventListener('icecandidate', async (e) => {\n        await this.pc1.addIceCandidate(\n          e.candidate as RTCIceCandidateInit | undefined,\n        );\n      });\n      this.pc2.addEventListener('track', (e) => {\n        e.streams[0].getTracks().forEach((track) => {\n          // In RN, the remote track is automatically added to the audio output device\n          // so we need to mute it to avoid hearing the audio back\n          // @ts-expect-error _setVolume is a private method in react-native-webrtc\n          track._setVolume(0);\n        });\n      });\n\n      audioStream\n        .getTracks()\n        .forEach((track) => this.pc1.addTrack(track, audioStream));\n      const offer = await this.pc1.createOffer({});\n      await this.pc2.setRemoteDescription(offer);\n      await this.pc1.setLocalDescription(offer);\n      const answer = await this.pc2.createAnswer();\n      await this.pc1.setRemoteDescription(answer);\n      await this.pc2.setLocalDescription(answer);\n      const unsub = this.onSpeakingDetectedStateChange(\n        onSoundDetectedStateChanged,\n      );\n      return () => {\n        unsub();\n        this.stop();\n      };\n    } catch (error) {\n      const logger = getLogger(['RNSpeechDetector']);\n      logger('error', 'error handling permissions: ', error);\n      return () => {};\n    }\n  }\n\n  /**\n   * Stops the speech detection and releases all allocated resources.\n   */\n  private stop() {\n    this.pc1.close();\n    this.pc2.close();\n    this.cleanupAudioStream();\n  }\n\n  /**\n   * Public method that detects the audio levels and returns the status.\n   */\n  private onSpeakingDetectedStateChange(\n    onSoundDetectedStateChanged: SoundStateChangeHandler,\n  ) {\n    const initialBaselineNoiseLevel = 0.13;\n    let baselineNoiseLevel = initialBaselineNoiseLevel;\n    let speechDetected = false;\n    let speechTimer: NodeJS.Timeout | undefined;\n    let silenceTimer: NodeJS.Timeout | undefined;\n    const audioLevelHistory: number[] = []; // Store recent audio levels for smoother detection\n    const historyLength = 10;\n    const silenceThreshold = 1.1;\n    const resetThreshold = 0.9;\n    const speechTimeout = 500; // Speech is set to true after 500ms of audio detection\n    const silenceTimeout = 5000; // Reset baseline after 5 seconds of silence\n\n    const checkAudioLevel = async () => {\n      try {\n        const stats = (await this.pc1.getStats()) as RTCStatsReport;\n        const report = flatten(stats);\n        // Audio levels are present inside stats of type `media-source` and of kind `audio`\n        const audioMediaSourceStats = report.find(\n          (stat) =>\n            stat.type === 'media-source' &&\n            (stat as RTCRtpStreamStats).kind === 'audio',\n        ) as BaseStats;\n        if (audioMediaSourceStats) {\n          const { audioLevel } = audioMediaSourceStats;\n          if (audioLevel) {\n            // Update audio level history (with max historyLength sized array)\n            audioLevelHistory.push(audioLevel);\n            if (audioLevelHistory.length > historyLength) {\n              audioLevelHistory.shift();\n            }\n\n            // Calculate average audio level\n            const avgAudioLevel =\n              audioLevelHistory.reduce((a, b) => a + b, 0) /\n              audioLevelHistory.length;\n\n            // Update baseline (if necessary) based on silence detection\n            if (avgAudioLevel < baselineNoiseLevel * silenceThreshold) {\n              if (!silenceTimer) {\n                silenceTimer = setTimeout(() => {\n                  baselineNoiseLevel = Math.min(\n                    avgAudioLevel * resetThreshold,\n                    initialBaselineNoiseLevel,\n                  );\n                }, silenceTimeout);\n              }\n            } else {\n              clearTimeout(silenceTimer);\n              silenceTimer = undefined;\n            }\n\n            // Speech detection with hysteresis\n            if (avgAudioLevel > baselineNoiseLevel * 1.5) {\n              if (!speechDetected) {\n                speechDetected = true;\n                onSoundDetectedStateChanged({\n                  isSoundDetected: true,\n                  audioLevel,\n                });\n              }\n\n              clearTimeout(speechTimer);\n\n              speechTimer = setTimeout(() => {\n                speechDetected = false;\n                onSoundDetectedStateChanged({\n                  isSoundDetected: false,\n                  audioLevel: 0,\n                });\n              }, speechTimeout);\n            }\n          }\n        }\n      } catch (error) {\n        const logger = getLogger(['RNSpeechDetector']);\n        logger('error', 'error checking audio level from stats', error);\n      }\n    };\n\n    // Call checkAudioLevel periodically (every 100ms)\n    const intervalId = setInterval(checkAudioLevel, 100);\n\n    return () => {\n      clearInterval(intervalId);\n      clearTimeout(speechTimer);\n      clearTimeout(silenceTimer);\n    };\n  }\n\n  private cleanupAudioStream() {\n    if (!this.audioStream) {\n      return;\n    }\n    this.audioStream.getTracks().forEach((track) => track.stop());\n    if (\n      // @ts-expect-error release() is present in react-native-webrtc\n      typeof this.audioStream.release === 'function'\n    ) {\n      // @ts-expect-error called to dispose the stream in RN\n      this.audioStream.release();\n    }\n  }\n}\n","import { combineLatest, Observable } from 'rxjs';\nimport type { INoiseCancellation } from '@stream-io/audio-filters-web';\nimport { Call } from '../Call';\nimport { InputMediaDeviceManager } from './InputMediaDeviceManager';\nimport { MicrophoneManagerState } from './MicrophoneManagerState';\nimport { TrackDisableMode } from './InputMediaDeviceManagerState';\nimport { getAudioDevices, getAudioStream } from './devices';\nimport { TrackType } from '../gen/video/sfu/models/models';\nimport { createSoundDetector } from '../helpers/sound-detector';\nimport { isReactNative } from '../helpers/platforms';\nimport {\n  AudioSettingsResponse,\n  NoiseCancellationSettingsModeEnum,\n  OwnCapability,\n} from '../gen/coordinator';\nimport { CallingState } from '../store';\nimport {\n  createSafeAsyncSubscription,\n  createSubscription,\n} from '../store/rxUtils';\nimport { RNSpeechDetector } from '../helpers/RNSpeechDetector';\nimport { withoutConcurrency } from '../helpers/concurrency';\n\nexport class MicrophoneManager extends InputMediaDeviceManager<MicrophoneManagerState> {\n  private speakingWhileMutedNotificationEnabled = true;\n  private soundDetectorConcurrencyTag = Symbol('soundDetectorConcurrencyTag');\n  private soundDetectorCleanup?: Function;\n  private rnSpeechDetector: RNSpeechDetector | undefined;\n  private noiseCancellation: INoiseCancellation | undefined;\n  private noiseCancellationChangeUnsubscribe: (() => void) | undefined;\n  private noiseCancellationRegistration?: Promise<void>;\n  private unregisterNoiseCancellation?: () => Promise<void>;\n\n  constructor(call: Call, disableMode: TrackDisableMode = 'stop-tracks') {\n    super(call, new MicrophoneManagerState(disableMode), TrackType.AUDIO);\n\n    this.subscriptions.push(\n      createSafeAsyncSubscription(\n        combineLatest([\n          this.call.state.callingState$,\n          this.call.state.ownCapabilities$,\n          this.state.selectedDevice$,\n          this.state.status$,\n        ]),\n        async ([callingState, ownCapabilities, deviceId, status]) => {\n          try {\n            if (callingState === CallingState.LEFT) {\n              await this.stopSpeakingWhileMutedDetection();\n            }\n            if (callingState !== CallingState.JOINED) return;\n            if (!this.speakingWhileMutedNotificationEnabled) return;\n\n            if (ownCapabilities.includes(OwnCapability.SEND_AUDIO)) {\n              if (status === 'disabled') {\n                await this.startSpeakingWhileMutedDetection(deviceId);\n              } else {\n                await this.stopSpeakingWhileMutedDetection();\n              }\n            } else {\n              await this.stopSpeakingWhileMutedDetection();\n            }\n          } catch (err) {\n            this.logger('warn', 'Could not enable speaking while muted', err);\n          }\n        },\n      ),\n    );\n\n    this.subscriptions.push(\n      createSubscription(this.call.state.callingState$, (callingState) => {\n        // do nothing when noise filtering isn't turned on\n        if (!this.noiseCancellationRegistration || !this.noiseCancellation)\n          return;\n\n        const autoOn =\n          this.call.state.settings?.audio.noise_cancellation?.mode ===\n          NoiseCancellationSettingsModeEnum.AUTO_ON;\n\n        if (autoOn && callingState === CallingState.JOINED) {\n          this.noiseCancellationRegistration\n            .then(() => this.noiseCancellation?.enable())\n            .catch((err) => {\n              this.logger('warn', `Failed to enable noise cancellation`, err);\n              return this.call.notifyNoiseCancellationStopped();\n            });\n        } else if (callingState === CallingState.LEFT) {\n          this.noiseCancellationRegistration\n            .then(() => this.noiseCancellation?.disable())\n            .catch((err) => {\n              this.logger('warn', `Failed to disable noise cancellation`, err);\n            });\n        }\n      }),\n    );\n  }\n\n  /**\n   * Enables noise cancellation for the microphone.\n   *\n   * Note: not supported in React Native.\n   * @param noiseCancellation - a noise cancellation instance to use.\n   */\n  async enableNoiseCancellation(noiseCancellation: INoiseCancellation) {\n    if (isReactNative()) {\n      throw new Error('Noise cancellation is not supported in React Native');\n    }\n\n    const { ownCapabilities, settings } = this.call.state;\n    const hasNoiseCancellationCapability = ownCapabilities.includes(\n      OwnCapability.ENABLE_NOISE_CANCELLATION,\n    );\n    if (!hasNoiseCancellationCapability) {\n      throw new Error('Noise cancellation is not available.');\n    }\n    const noiseCancellationSettings = settings?.audio.noise_cancellation;\n    if (\n      !noiseCancellationSettings ||\n      noiseCancellationSettings.mode ===\n        NoiseCancellationSettingsModeEnum.DISABLED\n    ) {\n      throw new Error('Noise cancellation is disabled for this call type.');\n    }\n    try {\n      this.noiseCancellation = noiseCancellation;\n\n      // listen for change events and notify the SFU\n      this.noiseCancellationChangeUnsubscribe = this.noiseCancellation.on(\n        'change',\n        (enabled: boolean) => {\n          if (enabled) {\n            this.call.notifyNoiseCancellationStarting().catch((err) => {\n              this.logger('warn', `notifyNoiseCancellationStart failed`, err);\n            });\n          } else {\n            this.call.notifyNoiseCancellationStopped().catch((err) => {\n              this.logger('warn', `notifyNoiseCancellationStop failed`, err);\n            });\n          }\n        },\n      );\n\n      const registrationResult = this.registerFilter(\n        noiseCancellation.toFilter(),\n      );\n      this.noiseCancellationRegistration = registrationResult.registered;\n      this.unregisterNoiseCancellation = registrationResult.unregister;\n      await this.noiseCancellationRegistration;\n\n      // handles an edge case where a noise cancellation is enabled after\n      // the participant as joined the call -> we immediately enable NC\n      if (\n        noiseCancellationSettings.mode ===\n          NoiseCancellationSettingsModeEnum.AUTO_ON &&\n        this.call.state.callingState === CallingState.JOINED\n      ) {\n        noiseCancellation.enable();\n      }\n    } catch (e) {\n      this.logger('warn', 'Failed to enable noise cancellation', e);\n      await this.disableNoiseCancellation().catch((err) => {\n        this.logger('warn', 'Failed to disable noise cancellation', err);\n      });\n    }\n  }\n\n  /**\n   * Disables noise cancellation for the microphone.\n   *\n   * Note: not supported in React Native.\n   */\n  async disableNoiseCancellation() {\n    if (isReactNative()) {\n      throw new Error('Noise cancellation is not supported in React Native');\n    }\n    await (this.unregisterNoiseCancellation?.() ?? Promise.resolve())\n      .then(() => this.noiseCancellation?.disable())\n      .then(() => this.noiseCancellationChangeUnsubscribe?.())\n      .catch((err) => {\n        this.logger('warn', 'Failed to unregister noise cancellation', err);\n      });\n\n    await this.call.notifyNoiseCancellationStopped();\n  }\n\n  /**\n   * Enables speaking while muted notification.\n   */\n  async enableSpeakingWhileMutedNotification() {\n    this.speakingWhileMutedNotificationEnabled = true;\n    if (this.state.status === 'disabled') {\n      await this.startSpeakingWhileMutedDetection(this.state.selectedDevice);\n    }\n  }\n\n  /**\n   * Disables speaking while muted notification.\n   */\n  async disableSpeakingWhileMutedNotification() {\n    this.speakingWhileMutedNotificationEnabled = false;\n    await this.stopSpeakingWhileMutedDetection();\n  }\n\n  /**\n   * Applies the audio settings to the microphone.\n   * @param settings the audio settings to apply.\n   * @param publish whether to publish the stream after applying the settings.\n   */\n  async apply(settings: AudioSettingsResponse, publish: boolean) {\n    if (!publish) return;\n\n    const hasPublishedAudio = !!this.call.state.localParticipant?.audioStream;\n    const hasPermission = this.call.permissionsContext.hasPermission(\n      OwnCapability.SEND_AUDIO,\n    );\n    if (hasPublishedAudio || !hasPermission) return;\n\n    // Wait for any in progress mic operation\n    await this.statusChangeSettled();\n\n    // Publish media stream that was set before we joined\n    const { mediaStream } = this.state;\n    if (this.enabled && mediaStream) {\n      // The mic is already enabled (e.g. lobby screen). Publish the stream\n      await this.publishStream(mediaStream);\n    } else if (this.state.status === undefined && settings.mic_default_on) {\n      // Start mic if backend config specifies, and there is no local setting\n      await this.enable();\n    }\n  }\n\n  protected getDevices(): Observable<MediaDeviceInfo[]> {\n    return getAudioDevices();\n  }\n\n  protected getStream(\n    constraints: MediaTrackConstraints,\n  ): Promise<MediaStream> {\n    return getAudioStream(constraints);\n  }\n\n  private async startSpeakingWhileMutedDetection(deviceId?: string) {\n    await withoutConcurrency(this.soundDetectorConcurrencyTag, async () => {\n      await this.stopSpeakingWhileMutedDetection();\n      if (isReactNative()) {\n        this.rnSpeechDetector = new RNSpeechDetector();\n        const unsubscribe = await this.rnSpeechDetector.start((event) => {\n          this.state.setSpeakingWhileMuted(event.isSoundDetected);\n        });\n        this.soundDetectorCleanup = () => {\n          unsubscribe();\n          this.rnSpeechDetector = undefined;\n        };\n      } else {\n        // Need to start a new stream that's not connected to publisher\n        const stream = await this.getStream({\n          deviceId: { exact: deviceId },\n        });\n        this.soundDetectorCleanup = createSoundDetector(stream, (event) => {\n          this.state.setSpeakingWhileMuted(event.isSoundDetected);\n        });\n      }\n    });\n  }\n\n  private async stopSpeakingWhileMutedDetection() {\n    await withoutConcurrency(this.soundDetectorConcurrencyTag, async () => {\n      if (!this.soundDetectorCleanup) return;\n      const soundDetectorCleanup = this.soundDetectorCleanup;\n      this.soundDetectorCleanup = undefined;\n      this.state.setSpeakingWhileMuted(false);\n      await soundDetectorCleanup();\n    });\n  }\n}\n","import { BehaviorSubject, distinctUntilChanged } from 'rxjs';\nimport { InputMediaDeviceManagerState } from './InputMediaDeviceManagerState';\nimport { ScreenShareSettings } from '../types';\n\nexport class ScreenShareState extends InputMediaDeviceManagerState<DisplayMediaStreamOptions> {\n  private audioEnabledSubject = new BehaviorSubject<boolean>(true);\n  private settingsSubject = new BehaviorSubject<\n    ScreenShareSettings | undefined\n  >(undefined);\n\n  /**\n   * An Observable that emits the current screen share audio status.\n   */\n  audioEnabled$ = this.audioEnabledSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  /**\n   * An Observable that emits the current screen share settings.\n   */\n  settings$ = this.settingsSubject.asObservable();\n\n  /**\n   * @internal\n   */\n  protected getDeviceIdFromStream = (\n    stream: MediaStream,\n  ): string | undefined => {\n    const [track] = stream.getTracks();\n    return track?.getSettings().deviceId;\n  };\n\n  /**\n   * The current screen share audio status.\n   */\n  get audioEnabled() {\n    return this.getCurrentValue(this.audioEnabled$);\n  }\n\n  /**\n   * Set the current screen share audio status.\n   */\n  setAudioEnabled(isEnabled: boolean) {\n    this.setCurrentValue(this.audioEnabledSubject, isEnabled);\n  }\n\n  /**\n   * The current screen share settings.\n   */\n  get settings() {\n    return this.getCurrentValue(this.settings$);\n  }\n\n  /**\n   * Set the current screen share settings.\n   *\n   * @param settings the screen share settings to set.\n   */\n  setSettings(settings: ScreenShareSettings | undefined) {\n    this.setCurrentValue(this.settingsSubject, settings);\n  }\n}\n","import { Observable, of } from 'rxjs';\nimport { InputMediaDeviceManager } from './InputMediaDeviceManager';\nimport { ScreenShareState } from './ScreenShareState';\nimport { Call } from '../Call';\nimport { TrackType } from '../gen/video/sfu/models/models';\nimport { getScreenShareStream } from './devices';\nimport { ScreenShareSettings } from '../types';\nimport { createSubscription } from '../store/rxUtils';\n\nexport class ScreenShareManager extends InputMediaDeviceManager<\n  ScreenShareState,\n  DisplayMediaStreamOptions\n> {\n  constructor(call: Call) {\n    super(call, new ScreenShareState(), TrackType.SCREEN_SHARE);\n\n    this.subscriptions.push(\n      createSubscription(call.state.settings$, (settings) => {\n        const maybeTargetResolution = settings?.screensharing.target_resolution;\n\n        if (maybeTargetResolution) {\n          this.setDefaultConstraints({\n            video: {\n              width: maybeTargetResolution.width,\n              height: maybeTargetResolution.height,\n            },\n          });\n        }\n      }),\n    );\n  }\n\n  /**\n   * Will enable screen share audio options on supported platforms.\n   *\n   * Note: for ongoing screen share, audio won't be enabled until you\n   * re-publish the screen share stream.\n   */\n  enableScreenShareAudio(): void {\n    this.state.setAudioEnabled(true);\n  }\n\n  /**\n   * Will disable screen share audio options on supported platforms.\n   */\n  async disableScreenShareAudio(): Promise<void> {\n    this.state.setAudioEnabled(false);\n    if (this.call.publisher?.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n      await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO);\n    }\n  }\n\n  /**\n   * Returns the current screen share settings.\n   */\n  getSettings(): ScreenShareSettings | undefined {\n    return this.state.settings;\n  }\n\n  /**\n   * Sets the current screen share settings.\n   *\n   * @param settings the settings to set.\n   */\n  setSettings(settings: ScreenShareSettings | undefined): void {\n    this.state.setSettings(settings);\n  }\n\n  protected getDevices(): Observable<MediaDeviceInfo[]> {\n    return of([]); // there are no devices to be listed for Screen Share\n  }\n\n  protected getStream(\n    constraints: DisplayMediaStreamOptions,\n  ): Promise<MediaStream> {\n    if (!this.state.audioEnabled) {\n      constraints.audio = false;\n    }\n    return getScreenShareStream(constraints);\n  }\n\n  protected async stopPublishStream(): Promise<void> {\n    return this.call.stopPublish(\n      TrackType.SCREEN_SHARE,\n      TrackType.SCREEN_SHARE_AUDIO,\n    );\n  }\n\n  /**\n   * Overrides the default `select` method to throw an error.\n   */\n  async select(): Promise<void> {\n    throw new Error('This method is not supported in for Screen Share');\n  }\n}\n","import { BehaviorSubject, Observable, distinctUntilChanged } from 'rxjs';\nimport { RxUtils } from '../store';\nimport { checkIfAudioOutputChangeSupported } from './devices';\n\nexport class SpeakerState {\n  protected selectedDeviceSubject = new BehaviorSubject<string>('');\n  protected volumeSubject = new BehaviorSubject<number>(1);\n  /**\n   * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n   */\n  readonly isDeviceSelectionSupported = checkIfAudioOutputChangeSupported();\n\n  /**\n   * An Observable that emits the currently selected device\n   *\n   * Note: this feature is not supported in React Native\n   */\n  selectedDevice$: Observable<string>;\n\n  /**\n   * An Observable that emits the currently selected volume\n   *\n   * Note: this feature is not supported in React Native\n   */\n  volume$: Observable<number>;\n\n  constructor() {\n    this.selectedDevice$ = this.selectedDeviceSubject\n      .asObservable()\n      .pipe(distinctUntilChanged());\n    this.volume$ = this.volumeSubject\n      .asObservable()\n      .pipe(distinctUntilChanged());\n  }\n\n  /**\n   * The currently selected device\n   *\n   * Note: this feature is not supported in React Native\n   */\n  get selectedDevice() {\n    return this.getCurrentValue(this.selectedDevice$);\n  }\n\n  /**\n   * The currently selected volume\n   *\n   * Note: this feature is not supported in React Native\n   */\n  get volume() {\n    return this.getCurrentValue(this.volume$);\n  }\n\n  /**\n   * Gets the current value of an observable, or undefined if the observable has\n   * not emitted a value yet.\n   *\n   * @param observable$ the observable to get the value from.\n   */\n  getCurrentValue = RxUtils.getCurrentValue;\n\n  /**\n   * @internal\n   * @param deviceId\n   */\n  setDevice(deviceId: string) {\n    this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n  }\n\n  /**\n   * @internal\n   * @param volume\n   */\n  setVolume(volume: number) {\n    this.setCurrentValue(this.volumeSubject, volume);\n  }\n\n  /**\n   * Updates the value of the provided Subject.\n   * An `update` can either be a new value or a function which takes\n   * the current value and returns a new value.\n   *\n   * @internal\n   *\n   * @param subject the subject to update.\n   * @param update the update to apply to the subject.\n   * @return the updated value.\n   */\n  protected setCurrentValue = RxUtils.setCurrentValue;\n}\n","import { combineLatest, Subscription } from 'rxjs';\nimport { Call } from '../Call';\nimport { isReactNative } from '../helpers/platforms';\nimport { SpeakerState } from './SpeakerState';\nimport { deviceIds$, getAudioOutputDevices } from './devices';\n\nexport class SpeakerManager {\n  public readonly state = new SpeakerState();\n  private subscriptions: Subscription[] = [];\n  private readonly call: Call;\n\n  constructor(call: Call) {\n    this.call = call;\n    if (deviceIds$ && !isReactNative()) {\n      this.subscriptions.push(\n        combineLatest([deviceIds$!, this.state.selectedDevice$]).subscribe(\n          ([devices, deviceId]) => {\n            if (!deviceId) {\n              return;\n            }\n            const device = devices.find(\n              (d) => d.deviceId === deviceId && d.kind === 'audiooutput',\n            );\n            if (!device) {\n              this.select('');\n            }\n          },\n        ),\n      );\n    }\n  }\n\n  /**\n   * Lists the available audio output devices\n   *\n   * Note: It prompts the user for a permission to use devices (if not already granted)\n   * Note: This method is not supported in React Native\n   *\n   * @returns an Observable that will be updated if a device is connected or disconnected\n   */\n  listDevices() {\n    if (isReactNative()) {\n      throw new Error(\n        'This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details',\n      );\n    }\n    return getAudioOutputDevices();\n  }\n\n  /**\n   * Select a device.\n   *\n   * Note: This method is not supported in React Native\n   *\n   * @param deviceId empty string means the system default\n   */\n  select(deviceId: string) {\n    if (isReactNative()) {\n      throw new Error(\n        'This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details',\n      );\n    }\n    this.state.setDevice(deviceId);\n  }\n\n  /**\n   * Disposes the manager.\n   *\n   * @internal\n   */\n  dispose = () => {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  };\n\n  /**\n   * Set the volume of the audio elements\n   * @param volume a number between 0 and 1.\n   *\n   * Note: This method is not supported in React Native\n   */\n  setVolume(volume: number) {\n    if (isReactNative()) {\n      throw new Error(\n        'This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details',\n      );\n    }\n    if (volume && (volume < 0 || volume > 1)) {\n      throw new Error('Volume must be between 0 and 1');\n    }\n    this.state.setVolume(volume);\n  }\n\n  /**\n   * Set the volume of a participant.\n   *\n   * Note: This method is not supported in React Native.\n   *\n   * @param sessionId the participant's session id.\n   * @param volume a number between 0 and 1. Set it to `undefined` to use the default volume.\n   */\n  setParticipantVolume(sessionId: string, volume: number | undefined) {\n    if (isReactNative()) {\n      throw new Error(\n        'This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details',\n      );\n    }\n    if (volume && (volume < 0 || volume > 1)) {\n      throw new Error('Volume must be between 0 and 1, or undefined');\n    }\n    this.call.state.updateParticipant(sessionId, { audioVolume: volume });\n  }\n}\n","import { StreamSfuClient } from './StreamSfuClient';\nimport {\n  Dispatcher,\n  getGenericSdp,\n  isAudioTrackType,\n  isSfuEvent,\n  muteTypeToTrackType,\n  Publisher,\n  Subscriber,\n  toRtcConfiguration,\n  trackTypeToParticipantStreamKey,\n} from './rtc';\nimport {\n  registerEventHandlers,\n  registerRingingCallEventHandlers,\n} from './events/callEventHandlers';\nimport {\n  CallingState,\n  CallState,\n  StreamVideoWriteableStateStore,\n} from './store';\nimport {\n  createSafeAsyncSubscription,\n  createSubscription,\n  getCurrentValue,\n} from './store/rxUtils';\nimport type {\n  AcceptCallResponse,\n  BlockUserRequest,\n  BlockUserResponse,\n  CallRingEvent,\n  CallSettingsResponse,\n  CollectUserFeedbackRequest,\n  CollectUserFeedbackResponse,\n  Credentials,\n  DeleteCallRequest,\n  DeleteCallResponse,\n  EndCallResponse,\n  GetCallReportResponse,\n  GetCallResponse,\n  GetOrCreateCallRequest,\n  GetOrCreateCallResponse,\n  GoLiveRequest,\n  GoLiveResponse,\n  JoinCallRequest,\n  JoinCallResponse,\n  ListRecordingsResponse,\n  ListTranscriptionsResponse,\n  MuteUsersRequest,\n  MuteUsersResponse,\n  PinRequest,\n  PinResponse,\n  QueryCallMembersRequest,\n  QueryCallMembersResponse,\n  RejectCallRequest,\n  RejectCallResponse,\n  RequestPermissionRequest,\n  RequestPermissionResponse,\n  SendCallEventRequest,\n  SendCallEventResponse,\n  SendReactionRequest,\n  SendReactionResponse,\n  StartClosedCaptionsRequest,\n  StartClosedCaptionsResponse,\n  StartFrameRecordingRequest,\n  StartFrameRecordingResponse,\n  StartHLSBroadcastingResponse,\n  StartRecordingRequest,\n  StartRecordingResponse,\n  StartRTMPBroadcastsRequest,\n  StartRTMPBroadcastsResponse,\n  StartTranscriptionRequest,\n  StartTranscriptionResponse,\n  StatsOptions,\n  StopAllRTMPBroadcastsResponse,\n  StopClosedCaptionsRequest,\n  StopClosedCaptionsResponse,\n  StopFrameRecordingResponse,\n  StopHLSBroadcastingResponse,\n  StopLiveRequest,\n  StopLiveResponse,\n  StopRecordingResponse,\n  StopRTMPBroadcastsResponse,\n  StopTranscriptionResponse,\n  UnblockUserRequest,\n  UnblockUserResponse,\n  UnpinRequest,\n  UnpinResponse,\n  UpdateCallMembersRequest,\n  UpdateCallMembersResponse,\n  UpdateCallRequest,\n  UpdateCallResponse,\n  UpdateUserPermissionsRequest,\n  UpdateUserPermissionsResponse,\n  VideoDimension,\n} from './gen/coordinator';\nimport { OwnCapability } from './gen/coordinator';\nimport {\n  AudioTrackType,\n  CallConstructor,\n  CallLeaveOptions,\n  ClientPublishOptions,\n  ClosedCaptionsSettings,\n  JoinCallData,\n  TrackMuteType,\n  VideoTrackType,\n} from './types';\nimport { BehaviorSubject, Subject, takeWhile } from 'rxjs';\nimport { ReconnectDetails } from './gen/video/sfu/event/events';\nimport {\n  ClientDetails,\n  Codec,\n  PublishOption,\n  SubscribeOption,\n  TrackType,\n  WebsocketReconnectStrategy,\n} from './gen/video/sfu/models/models';\nimport {\n  createStatsReporter,\n  getSdkSignature,\n  SfuStatsReporter,\n  StatsReporter,\n} from './stats';\nimport { tracer as mediaStatsTracer } from './stats/rtc/mediaDevices';\nimport { DynascaleManager } from './helpers/DynascaleManager';\nimport { PermissionsContext } from './permissions';\nimport { CallTypes } from './CallType';\nimport { StreamClient } from './coordinator/connection/client';\nimport { retryInterval, sleep } from './coordinator/connection/utils';\nimport {\n  AllCallEvents,\n  CallEventListener,\n  ErrorFromResponse,\n  Logger,\n  RejectReason,\n  StreamCallEvent,\n} from './coordinator/connection/types';\nimport { getClientDetails } from './helpers/client-details';\nimport { getLogger } from './logger';\nimport {\n  CameraManager,\n  MicrophoneManager,\n  ScreenShareManager,\n  SpeakerManager,\n} from './devices';\nimport { hasPending, withoutConcurrency } from './helpers/concurrency';\nimport { ensureExhausted } from './helpers/ensureExhausted';\nimport { pushToIfMissing } from './helpers/array';\nimport {\n  makeSafePromise,\n  PromiseWithResolvers,\n  promiseWithResolvers,\n} from './helpers/promise';\nimport { GetCallStatsResponse } from './gen/shims';\n\n/**\n * An object representation of a `Call`.\n */\nexport class Call {\n  /**\n   * The type of the call.\n   */\n  readonly type: string;\n\n  /**\n   * The ID of the call.\n   */\n  readonly id: string;\n\n  /**\n   * The call CID.\n   */\n  readonly cid: string;\n\n  /**\n   * The state of this call.\n   */\n  readonly state = new CallState();\n\n  /**\n   * Flag indicating whether this call is \"watched\" and receives\n   * updates from the backend.\n   */\n  watching: boolean;\n\n  /**\n   * Device manager for the camera\n   */\n  readonly camera: CameraManager;\n\n  /**\n   * Device manager for the microphone.\n   */\n  readonly microphone: MicrophoneManager;\n\n  /**\n   * Device manager for the speaker.\n   */\n  readonly speaker: SpeakerManager;\n\n  /**\n   * Device manager for the screen.\n   */\n  readonly screenShare: ScreenShareManager;\n\n  /**\n   * The DynascaleManager instance.\n   */\n  readonly dynascaleManager: DynascaleManager;\n\n  subscriber?: Subscriber;\n  publisher?: Publisher;\n\n  /**\n   * Flag telling whether this call is a \"ringing\" call.\n   */\n  private readonly ringingSubject: Subject<boolean>;\n\n  /**\n   * The permissions context of this call.\n   */\n  readonly permissionsContext = new PermissionsContext();\n  readonly logger: Logger;\n\n  /**\n   * The event dispatcher instance dedicated to this Call instance.\n   * @private\n   */\n  private readonly dispatcher = new Dispatcher();\n\n  private clientPublishOptions?: ClientPublishOptions;\n  private currentPublishOptions?: PublishOption[];\n  private statsReporter?: StatsReporter;\n  private sfuStatsReporter?: SfuStatsReporter;\n  private dropTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  private readonly clientStore: StreamVideoWriteableStateStore;\n  public readonly streamClient: StreamClient;\n  private sfuClient?: StreamSfuClient;\n  private sfuClientTag = 0;\n\n  private readonly reconnectConcurrencyTag = Symbol('reconnectConcurrencyTag');\n  private reconnectAttempts = 0;\n  private reconnectStrategy = WebsocketReconnectStrategy.UNSPECIFIED;\n  private reconnectReason = '';\n  private fastReconnectDeadlineSeconds: number = 0;\n  private disconnectionTimeoutSeconds: number = 0;\n  private lastOfflineTimestamp: number = 0;\n  private networkAvailableTask: PromiseWithResolvers<void> | undefined;\n  // maintain the order of publishing tracks to restore them after a reconnection\n  // it shouldn't contain duplicates\n  private trackPublishOrder: TrackType[] = [];\n  private joinCallData?: JoinCallData;\n  private hasJoinedOnce = false;\n  private deviceSettingsAppliedOnce = false;\n  private credentials?: Credentials;\n\n  private initialized = false;\n  private readonly joinLeaveConcurrencyTag = Symbol('joinLeaveConcurrencyTag');\n\n  /**\n   * A list hooks/functions to invoke when the call is left.\n   * A typical use case is to clean up some global event handlers.\n   * @private\n   */\n  private readonly leaveCallHooks: Set<Function> = new Set();\n\n  private readonly streamClientBasePath: string;\n  private streamClientEventHandlers = new Map<Function, () => void>();\n\n  /**\n   * Constructs a new `Call` instance.\n   *\n   * NOTE: Don't call the constructor directly, instead\n   * Use the [`StreamVideoClient.call`](./StreamVideoClient.md/#call)\n   * method to construct a `Call` instance.\n   */\n  constructor({\n    type,\n    id,\n    streamClient,\n    members,\n    ownCapabilities,\n    sortParticipantsBy,\n    clientStore,\n    ringing = false,\n    watching = false,\n  }: CallConstructor) {\n    this.type = type;\n    this.id = id;\n    this.cid = `${type}:${id}`;\n    this.ringingSubject = new BehaviorSubject(ringing);\n    this.watching = watching;\n    this.streamClient = streamClient;\n    this.clientStore = clientStore;\n    this.streamClientBasePath = `/call/${this.type}/${this.id}`;\n    this.logger = getLogger(['Call']);\n\n    const callTypeConfig = CallTypes.get(type);\n    const participantSorter =\n      sortParticipantsBy || callTypeConfig.options.sortParticipantsBy;\n    if (participantSorter) {\n      this.state.setSortParticipantsBy(participantSorter);\n    }\n\n    this.state.setMembers(members || []);\n    this.state.setOwnCapabilities(ownCapabilities || []);\n    this.state.setCallingState(\n      ringing ? CallingState.RINGING : CallingState.IDLE,\n    );\n\n    this.camera = new CameraManager(this);\n    this.microphone = new MicrophoneManager(this);\n    this.speaker = new SpeakerManager(this);\n    this.screenShare = new ScreenShareManager(this);\n    this.dynascaleManager = new DynascaleManager(this.state, this.speaker);\n  }\n\n  /**\n   * Sets up the call instance.\n   *\n   * @internal an internal method and should not be used outside the SDK.\n   */\n  setup = async () => {\n    await withoutConcurrency(this.joinLeaveConcurrencyTag, async () => {\n      if (this.initialized) return;\n\n      this.leaveCallHooks.add(\n        this.on('all', (event) => {\n          // update state with the latest event data\n          this.state.updateFromEvent(event);\n        }),\n      );\n\n      this.leaveCallHooks.add(\n        this.on('changePublishOptions', (event) => {\n          this.currentPublishOptions = event.publishOptions;\n        }),\n      );\n\n      this.leaveCallHooks.add(registerEventHandlers(this, this.dispatcher));\n      this.registerEffects();\n      this.registerReconnectHandlers();\n\n      if (this.state.callingState === CallingState.LEFT) {\n        this.state.setCallingState(CallingState.IDLE);\n      }\n\n      this.initialized = true;\n    });\n  };\n\n  private registerEffects = () => {\n    this.leaveCallHooks.add(\n      // handles updating the permissions context when the settings change.\n      createSubscription(this.state.settings$, (settings) => {\n        if (!settings) return;\n        this.permissionsContext.setCallSettings(settings);\n      }),\n    );\n\n    this.leaveCallHooks.add(\n      // handle the case when the user permissions are modified.\n      createSafeAsyncSubscription(\n        this.state.ownCapabilities$,\n        this.handleOwnCapabilitiesUpdated,\n      ),\n    );\n\n    this.leaveCallHooks.add(\n      // handles the case when the user is blocked by the call owner.\n      createSubscription(this.state.blockedUserIds$, async (blockedUserIds) => {\n        if (!blockedUserIds || blockedUserIds.length === 0) return;\n        const currentUserId = this.currentUserId;\n        if (currentUserId && blockedUserIds.includes(currentUserId)) {\n          this.logger('info', 'Leaving call because of being blocked');\n          await this.leave({ reason: 'user blocked' }).catch((err) => {\n            this.logger('error', 'Error leaving call after being blocked', err);\n          });\n        }\n      }),\n    );\n\n    this.leaveCallHooks.add(\n      // cancel auto-drop when call is accepted or rejected\n      createSubscription(this.state.session$, (session) => {\n        if (!this.ringing) return;\n\n        const receiverId = this.clientStore.connectedUser?.id;\n        if (!receiverId) return;\n\n        const isAcceptedByMe = Boolean(session?.accepted_by[receiverId]);\n        const isRejectedByMe = Boolean(session?.rejected_by[receiverId]);\n\n        if (isAcceptedByMe || isRejectedByMe) {\n          this.cancelAutoDrop();\n        }\n\n        const isAcceptedElsewhere =\n          isAcceptedByMe && this.state.callingState === CallingState.RINGING;\n\n        if (\n          (isAcceptedElsewhere || isRejectedByMe) &&\n          !hasPending(this.joinLeaveConcurrencyTag)\n        ) {\n          this.leave().catch(() => {\n            this.logger(\n              'error',\n              'Could not leave a call that was accepted or rejected elsewhere',\n            );\n          });\n        }\n      }),\n    );\n\n    this.leaveCallHooks.add(\n      // \"ringing\" mode effects and event handlers\n      createSubscription(this.ringingSubject, (isRinging) => {\n        if (!isRinging) return;\n        const callSession = this.state.session;\n        const receiver_id = this.clientStore.connectedUser?.id;\n        const ended_at = callSession?.ended_at;\n        const created_by_id = this.state.createdBy?.id;\n        const rejected_by = callSession?.rejected_by;\n        const accepted_by = callSession?.accepted_by;\n        let leaveCallIdle = false;\n        if (ended_at) {\n          // call was ended before it was accepted or rejected so we should leave it to idle\n          leaveCallIdle = true;\n        } else if (created_by_id && rejected_by) {\n          if (rejected_by[created_by_id]) {\n            // call was cancelled by the caller\n            leaveCallIdle = true;\n          }\n        } else if (receiver_id && rejected_by) {\n          if (rejected_by[receiver_id]) {\n            // call was rejected by the receiver in some other device\n            leaveCallIdle = true;\n          }\n        } else if (receiver_id && accepted_by) {\n          if (accepted_by[receiver_id]) {\n            // call was accepted by the receiver in some other device\n            leaveCallIdle = true;\n          }\n        }\n        if (leaveCallIdle) {\n          if (this.state.callingState !== CallingState.IDLE) {\n            this.state.setCallingState(CallingState.IDLE);\n          }\n        } else {\n          if (this.state.callingState === CallingState.IDLE) {\n            this.state.setCallingState(CallingState.RINGING);\n          }\n          this.scheduleAutoDrop();\n          this.leaveCallHooks.add(registerRingingCallEventHandlers(this));\n        }\n      }),\n    );\n  };\n\n  private handleOwnCapabilitiesUpdated = async (\n    ownCapabilities: OwnCapability[],\n  ) => {\n    // update the permission context.\n    this.permissionsContext.setPermissions(ownCapabilities);\n\n    if (!this.publisher) return;\n\n    // check if the user still has publishing permissions and stop publishing if not.\n    const permissionToTrackType = {\n      [OwnCapability.SEND_AUDIO]: TrackType.AUDIO,\n      [OwnCapability.SEND_VIDEO]: TrackType.VIDEO,\n      [OwnCapability.SCREENSHARE]: TrackType.SCREEN_SHARE,\n    };\n    for (const [permission, trackType] of Object.entries(\n      permissionToTrackType,\n    )) {\n      const hasPermission = this.permissionsContext.hasPermission(\n        permission as OwnCapability,\n      );\n      if (hasPermission) continue;\n      try {\n        switch (trackType) {\n          case TrackType.AUDIO:\n            if (this.microphone.enabled) await this.microphone.disable();\n            break;\n          case TrackType.VIDEO:\n            if (this.camera.enabled) await this.camera.disable();\n            break;\n          case TrackType.SCREEN_SHARE:\n            if (this.screenShare.enabled) await this.screenShare.disable();\n            break;\n        }\n      } catch (err) {\n        this.logger(\n          'error',\n          `Can't disable mic/camera/screenshare after revoked permissions`,\n          err,\n        );\n      }\n    }\n  };\n\n  /**\n   * You can subscribe to WebSocket events provided by the API. To remove a subscription, call the `off` method.\n   * Please note that subscribing to WebSocket events is an advanced use-case.\n   * For most use-cases, it should be enough to watch for state changes.\n   *\n   * @param eventName the event name.\n   * @param fn the event handler.\n   */\n  on = <E extends keyof AllCallEvents>(\n    eventName: E,\n    fn: CallEventListener<E>,\n  ) => {\n    if (isSfuEvent(eventName)) {\n      return this.dispatcher.on(eventName, fn);\n    }\n\n    const offHandler = this.streamClient.on(eventName, (e) => {\n      const event = e as StreamCallEvent;\n      if (event.call_cid && event.call_cid === this.cid) {\n        fn(event as AllCallEvents[E]);\n      }\n    });\n\n    // keep the 'off' reference returned by the stream client\n    this.streamClientEventHandlers.set(fn, offHandler);\n    return () => {\n      this.off(eventName, fn);\n    };\n  };\n\n  /**\n   * Remove subscription for WebSocket events that were created by the `on` method.\n   *\n   * @param eventName the event name.\n   * @param fn the event handler.\n   */\n  off = <E extends keyof AllCallEvents>(\n    eventName: E,\n    fn: CallEventListener<E>,\n  ) => {\n    if (isSfuEvent(eventName)) {\n      return this.dispatcher.off(eventName, fn);\n    }\n\n    // unsubscribe from the stream client event by using the 'off' reference\n    const registeredOffHandler = this.streamClientEventHandlers.get(fn);\n    if (registeredOffHandler) {\n      registeredOffHandler();\n    }\n  };\n\n  /**\n   * Leave the call and stop the media streams that were published by the call.\n   */\n  leave = async ({\n    reject,\n    reason = 'user is leaving the call',\n  }: CallLeaveOptions = {}) => {\n    await withoutConcurrency(this.joinLeaveConcurrencyTag, async () => {\n      const callingState = this.state.callingState;\n      if (callingState === CallingState.LEFT) {\n        throw new Error('Cannot leave call that has already been left.');\n      }\n\n      if (callingState === CallingState.JOINING) {\n        const waitUntilCallJoined = () => {\n          return new Promise<void>((resolve) => {\n            this.state.callingState$\n              .pipe(takeWhile((state) => state !== CallingState.JOINED, true))\n              .subscribe(() => resolve());\n          });\n        };\n        await waitUntilCallJoined();\n      }\n\n      if (callingState === CallingState.RINGING && reject !== false) {\n        if (reject) {\n          await this.reject('decline');\n        } else {\n          // if reject was undefined, we still have to cancel the call automatically\n          // when I am the creator and everyone else left the call\n          const hasOtherParticipants = this.state.remoteParticipants.length > 0;\n          if (this.isCreatedByMe && !hasOtherParticipants) {\n            await this.reject('cancel');\n          }\n        }\n      }\n\n      this.statsReporter?.stop();\n      this.statsReporter = undefined;\n\n      this.sfuStatsReporter?.stop();\n      this.sfuStatsReporter = undefined;\n\n      this.subscriber?.dispose();\n      this.subscriber = undefined;\n\n      this.publisher?.dispose();\n      this.publisher = undefined;\n\n      await this.sfuClient?.leaveAndClose(reason);\n      this.sfuClient = undefined;\n      this.dynascaleManager.setSfuClient(undefined);\n\n      this.state.setCallingState(CallingState.LEFT);\n      this.state.setParticipants([]);\n      this.state.dispose();\n\n      // Call all leave call hooks, e.g. to clean up global event handlers\n      this.leaveCallHooks.forEach((hook) => hook());\n      this.initialized = false;\n      this.hasJoinedOnce = false;\n      this.ringingSubject.next(false);\n      this.cancelAutoDrop();\n      this.clientStore.unregisterCall(this);\n\n      this.camera.dispose();\n      this.microphone.dispose();\n      this.screenShare.dispose();\n      this.speaker.dispose();\n\n      const stopOnLeavePromises: Promise<void>[] = [];\n      if (this.camera.stopOnLeave) {\n        stopOnLeavePromises.push(this.camera.disable(true));\n      }\n      if (this.microphone.stopOnLeave) {\n        stopOnLeavePromises.push(this.microphone.disable(true));\n      }\n      if (this.screenShare.stopOnLeave) {\n        stopOnLeavePromises.push(this.screenShare.disable(true));\n      }\n      await Promise.all(stopOnLeavePromises);\n    });\n  };\n\n  /**\n   * A flag indicating whether the call is \"ringing\" type of call.\n   */\n  get ringing() {\n    return getCurrentValue(this.ringingSubject);\n  }\n\n  /**\n   * Retrieves the current user ID.\n   */\n  get currentUserId() {\n    return this.clientStore.connectedUser?.id;\n  }\n\n  /**\n   * A flag indicating whether the call was created by the current user.\n   */\n  get isCreatedByMe() {\n    return this.state.createdBy?.id === this.currentUserId;\n  }\n\n  /**\n   * Update from the call response from the \"call.ring\" event\n   * @internal\n   */\n  updateFromRingingEvent = async (event: CallRingEvent) => {\n    await this.setup();\n    // call.ring event excludes the call creator in the members list\n    // as the creator does not get the ring event\n    // so update the member list accordingly\n    const { created_by, settings } = event.call;\n    const creator = this.state.members.find((m) => m.user.id === created_by.id);\n    if (!creator) {\n      this.state.setMembers(event.members);\n    } else {\n      this.state.setMembers([creator, ...event.members]);\n    }\n    // update the call state with the latest event data\n    this.state.updateFromCallResponse(event.call);\n    this.watching = true;\n    this.ringingSubject.next(true);\n    // we remove the instance from the calls list to enable the following filter in useCalls hook\n    // const calls = useCalls().filter((c) => c.ringing);\n    const calls = this.clientStore.calls.filter((c) => c.cid !== this.cid);\n    this.clientStore.setCalls([this, ...calls]);\n    await this.applyDeviceConfig(settings, false);\n  };\n\n  /**\n   * Loads the information about the call.\n   *\n   * @param params.ring if set to true, a `call.ring` event will be sent to the call members.\n   * @param params.notify if set to true, a `call.notification` event will be sent to the call members.\n   * @param params.members_limit the total number of members to return as part of the response.\n   */\n  get = async (params?: {\n    ring?: boolean;\n    notify?: boolean;\n    members_limit?: number;\n  }) => {\n    await this.setup();\n    const response = await this.streamClient.get<GetCallResponse>(\n      this.streamClientBasePath,\n      params,\n    );\n\n    this.state.updateFromCallResponse(response.call);\n    this.state.setMembers(response.members);\n    this.state.setOwnCapabilities(response.own_capabilities);\n\n    if (params?.ring) {\n      // the call response can indicate where the call is still ringing or not\n      this.ringingSubject.next(true);\n    }\n\n    if (this.streamClient._hasConnectionID()) {\n      this.watching = true;\n      this.clientStore.registerCall(this);\n    }\n\n    await this.applyDeviceConfig(response.call.settings, false);\n\n    return response;\n  };\n\n  /**\n   * Loads the information about the call and creates it if it doesn't exist.\n   *\n   * @param data the data to create the call with.\n   */\n  getOrCreate = async (data?: GetOrCreateCallRequest) => {\n    await this.setup();\n    const response = await this.streamClient.post<\n      GetOrCreateCallResponse,\n      GetOrCreateCallRequest\n    >(this.streamClientBasePath, data);\n\n    this.state.updateFromCallResponse(response.call);\n    this.state.setMembers(response.members);\n    this.state.setOwnCapabilities(response.own_capabilities);\n\n    if (data?.ring) {\n      // the call response can indicate where the call is still ringing or not\n      this.ringingSubject.next(true);\n    }\n\n    if (this.streamClient._hasConnectionID()) {\n      this.watching = true;\n      this.clientStore.registerCall(this);\n    }\n\n    await this.applyDeviceConfig(response.call.settings, false);\n\n    return response;\n  };\n\n  /**\n   * Creates a call\n   *\n   * @param data the data to create the call with.\n   */\n  create = async (data?: GetOrCreateCallRequest) => {\n    return this.getOrCreate(data);\n  };\n\n  /**\n   * Deletes the call.\n   */\n  delete = async (\n    data: DeleteCallRequest = {},\n  ): Promise<DeleteCallResponse> => {\n    return this.streamClient.post<DeleteCallResponse, DeleteCallRequest>(\n      `${this.streamClientBasePath}/delete`,\n      data,\n    );\n  };\n\n  /**\n   * A shortcut for {@link Call.get} with `ring` parameter set to `true`.\n   * Will send a `call.ring` event to the call members.\n   */\n  ring = async (): Promise<GetCallResponse> => {\n    return await this.get({ ring: true });\n  };\n\n  /**\n   * A shortcut for {@link Call.get} with `notify` parameter set to `true`.\n   * Will send a `call.notification` event to the call members.\n   */\n  notify = async (): Promise<GetCallResponse> => {\n    return await this.get({ notify: true });\n  };\n\n  /**\n   * Marks the incoming call as accepted.\n   *\n   * This method should be used only for \"ringing\" call flows.\n   * {@link Call.join} invokes this method automatically for you when joining a call.\n   * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n   */\n  accept = async () => {\n    return this.streamClient.post<AcceptCallResponse>(\n      `${this.streamClientBasePath}/accept`,\n    );\n  };\n\n  /**\n   * Marks the incoming call as rejected.\n   *\n   * This method should be used only for \"ringing\" call flows.\n   * {@link Call.leave} invokes this method automatically for you when you leave or reject this call.\n   * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n   *\n   * @param reason the reason for rejecting the call.\n   */\n  reject = async (\n    reason: RejectReason = 'decline',\n  ): Promise<RejectCallResponse> => {\n    return this.streamClient.post<RejectCallResponse, RejectCallRequest>(\n      `${this.streamClientBasePath}/reject`,\n      { reason: reason },\n    );\n  };\n\n  /**\n   * Will start to watch for call related WebSocket events and initiate a call session with the server.\n   *\n   * @returns a promise which resolves once the call join-flow has finished.\n   */\n  join = async ({\n    maxJoinRetries = 3,\n    ...data\n  }: JoinCallData & {\n    maxJoinRetries?: number;\n  } = {}): Promise<void> => {\n    await this.setup();\n    const callingState = this.state.callingState;\n\n    if ([CallingState.JOINED, CallingState.JOINING].includes(callingState)) {\n      throw new Error(`Illegal State: call.join() shall be called only once`);\n    }\n\n    this.state.setCallingState(CallingState.JOINING);\n\n    maxJoinRetries = Math.max(maxJoinRetries, 1);\n    for (let attempt = 0; attempt < maxJoinRetries; attempt++) {\n      try {\n        this.logger('trace', `Joining call (${attempt})`, this.cid);\n        return await this.doJoin(data);\n      } catch (err) {\n        this.logger('warn', `Failed to join call (${attempt})`, this.cid);\n        if (attempt === maxJoinRetries - 1) {\n          // restore the previous call state if the join-flow fails\n          this.state.setCallingState(callingState);\n          throw err;\n        }\n      }\n\n      await sleep(retryInterval(attempt));\n    }\n  };\n\n  /**\n   * Will make a single attempt to watch for call related WebSocket events\n   * and initiate a call session with the server.\n   *\n   * @returns a promise which resolves once the call join-flow has finished.\n   */\n  doJoin = async (data?: JoinCallData): Promise<void> => {\n    const connectStartTime = Date.now();\n    const callingState = this.state.callingState;\n\n    this.joinCallData = data;\n\n    this.logger('debug', 'Starting join flow');\n    this.state.setCallingState(CallingState.JOINING);\n\n    const performingMigration =\n      this.reconnectStrategy === WebsocketReconnectStrategy.MIGRATE;\n    const performingRejoin =\n      this.reconnectStrategy === WebsocketReconnectStrategy.REJOIN;\n    const performingFastReconnect =\n      this.reconnectStrategy === WebsocketReconnectStrategy.FAST;\n\n    let statsOptions = this.sfuStatsReporter?.options;\n    if (\n      !this.credentials ||\n      !statsOptions ||\n      performingRejoin ||\n      performingMigration\n    ) {\n      try {\n        const joinResponse = await this.doJoinRequest(data);\n        this.credentials = joinResponse.credentials;\n        statsOptions = joinResponse.stats_options;\n      } catch (error) {\n        // prevent triggering reconnect flow if the state is OFFLINE\n        const avoidRestoreState =\n          this.state.callingState === CallingState.OFFLINE;\n\n        if (!avoidRestoreState) {\n          // restore the previous call state if the join-flow fails\n          this.state.setCallingState(callingState);\n        }\n        throw error;\n      }\n    }\n\n    const previousSfuClient = this.sfuClient;\n    const previousSessionId = previousSfuClient?.sessionId;\n    const isWsHealthy = !!previousSfuClient?.isHealthy;\n    const sfuClient =\n      performingRejoin || performingMigration || !isWsHealthy\n        ? new StreamSfuClient({\n            logTag: String(++this.sfuClientTag),\n            dispatcher: this.dispatcher,\n            credentials: this.credentials,\n            streamClient: this.streamClient,\n            enableTracing: statsOptions.enable_rtc_stats,\n            // a new session_id is necessary for the REJOIN strategy.\n            // we use the previous session_id if available\n            sessionId: performingRejoin ? undefined : previousSessionId,\n            onSignalClose: (reason) =>\n              this.handleSfuSignalClose(sfuClient, reason),\n          })\n        : previousSfuClient;\n    this.sfuClient = sfuClient;\n    this.dynascaleManager.setSfuClient(sfuClient);\n\n    const clientDetails = await getClientDetails();\n    // we don't need to send JoinRequest if we are re-using an existing healthy SFU client\n    if (previousSfuClient !== sfuClient) {\n      // prepare a generic SDP and send it to the SFU.\n      // these are throw-away SDPs that the SFU will use to determine\n      // the capabilities of the client (codec support, etc.)\n      const [subscriberSdp, publisherSdp] = await Promise.all([\n        getGenericSdp('recvonly'),\n        getGenericSdp('sendonly'),\n      ]);\n      const isReconnecting =\n        this.reconnectStrategy !== WebsocketReconnectStrategy.UNSPECIFIED;\n      const reconnectDetails = isReconnecting\n        ? this.getReconnectDetails(data?.migrating_from, previousSessionId)\n        : undefined;\n      const preferredPublishOptions = !isReconnecting\n        ? this.getPreferredPublishOptions()\n        : this.currentPublishOptions || [];\n      const preferredSubscribeOptions = !isReconnecting\n        ? this.getPreferredSubscribeOptions()\n        : [];\n\n      try {\n        const { callState, fastReconnectDeadlineSeconds, publishOptions } =\n          await sfuClient.join({\n            subscriberSdp,\n            publisherSdp,\n            clientDetails,\n            fastReconnect: performingFastReconnect,\n            reconnectDetails,\n            preferredPublishOptions,\n            preferredSubscribeOptions,\n          });\n\n        this.currentPublishOptions = publishOptions;\n        this.fastReconnectDeadlineSeconds = fastReconnectDeadlineSeconds;\n        if (callState) {\n          this.state.updateFromSfuCallState(\n            callState,\n            sfuClient.sessionId,\n            reconnectDetails,\n          );\n        }\n      } catch (error) {\n        this.logger('warn', 'Join SFU request failed', error);\n        sfuClient.close(\n          StreamSfuClient.ERROR_CONNECTION_UNHEALTHY,\n          'Join request failed, connection considered unhealthy',\n        );\n        // restore the previous call state if the join-flow fails\n        this.state.setCallingState(callingState);\n        throw error;\n      }\n    }\n\n    if (!performingMigration) {\n      // in MIGRATION, `JOINED` state is set in `this.reconnectMigrate()`\n      this.state.setCallingState(CallingState.JOINED);\n    }\n    this.hasJoinedOnce = true;\n\n    // when performing fast reconnect, or when we reuse the same SFU client,\n    // (ws remained healthy), we just need to restore the ICE connection\n    if (performingFastReconnect) {\n      // the SFU automatically issues an ICE restart on the subscriber\n      // we don't have to do it ourselves\n      await this.restoreICE(sfuClient, { includeSubscriber: false });\n    } else {\n      const connectionConfig = toRtcConfiguration(this.credentials.ice_servers);\n      this.initPublisherAndSubscriber({\n        sfuClient,\n        connectionConfig,\n        clientDetails,\n        statsOptions,\n        publishOptions: this.currentPublishOptions || [],\n        closePreviousInstances: !performingMigration,\n      });\n    }\n\n    // make sure we only track connection timing if we are not calling this method as part of a reconnection flow\n    if (!performingRejoin && !performingFastReconnect && !performingMigration) {\n      this.sfuStatsReporter?.sendConnectionTime(\n        (Date.now() - connectStartTime) / 1000,\n      );\n    }\n\n    if (performingRejoin) {\n      const strategy = WebsocketReconnectStrategy[this.reconnectStrategy];\n      await previousSfuClient?.leaveAndClose(\n        `Closing previous WS after reconnect with strategy: ${strategy}`,\n      );\n    } else if (!isWsHealthy) {\n      previousSfuClient?.close(\n        StreamSfuClient.DISPOSE_OLD_SOCKET,\n        'Closing unhealthy WS after reconnect',\n      );\n    }\n\n    // device settings should be applied only once, we don't have to\n    // re-apply them on later reconnections or server-side data fetches\n    if (!this.deviceSettingsAppliedOnce && this.state.settings) {\n      await this.applyDeviceConfig(this.state.settings, true);\n      this.deviceSettingsAppliedOnce = true;\n    }\n\n    // We shouldn't persist the `ring` and `notify` state after joining the call\n    // as it's a one-time event and clashes with the potential reconnection attempts.\n    // When reconnecting, if provided with `ring: true` or `notify: true`,\n    // we will spam the other participants with push notifications and `call.ring` events.\n    delete this.joinCallData?.ring;\n    delete this.joinCallData?.notify;\n    // reset the reconnect strategy to unspecified after a successful reconnection\n    this.reconnectStrategy = WebsocketReconnectStrategy.UNSPECIFIED;\n    this.reconnectReason = '';\n\n    this.logger('info', `Joined call ${this.cid}`);\n  };\n\n  /**\n   * Prepares Reconnect Details object.\n   * @internal\n   */\n  private getReconnectDetails = (\n    migratingFromSfuId: string | undefined,\n    previousSessionId: string | undefined,\n  ): ReconnectDetails => {\n    const strategy = this.reconnectStrategy;\n    const performingRejoin = strategy === WebsocketReconnectStrategy.REJOIN;\n    const announcedTracks =\n      this.publisher?.getAnnouncedTracksForReconnect() || [];\n    return {\n      strategy,\n      announcedTracks,\n      subscriptions: this.dynascaleManager.trackSubscriptions,\n      reconnectAttempt: this.reconnectAttempts,\n      fromSfuId: migratingFromSfuId || '',\n      previousSessionId: performingRejoin ? previousSessionId || '' : '',\n      reason: this.reconnectReason,\n    };\n  };\n\n  /**\n   * Prepares the preferred codec for the call.\n   * This is an experimental client feature and subject to change.\n   * @internal\n   */\n  private getPreferredPublishOptions = (): PublishOption[] => {\n    const { preferredCodec, fmtpLine, preferredBitrate, maxSimulcastLayers } =\n      this.clientPublishOptions || {};\n    if (!preferredCodec && !preferredBitrate && !maxSimulcastLayers) return [];\n\n    const codec = preferredCodec\n      ? Codec.create({ name: preferredCodec.split('/').pop(), fmtp: fmtpLine })\n      : undefined;\n\n    const preferredPublishOptions = [\n      PublishOption.create({\n        trackType: TrackType.VIDEO,\n        codec,\n        bitrate: preferredBitrate,\n        maxSpatialLayers: maxSimulcastLayers,\n      }),\n    ];\n\n    const screenShareSettings = this.screenShare.getSettings();\n    if (screenShareSettings) {\n      preferredPublishOptions.push(\n        PublishOption.create({\n          trackType: TrackType.SCREEN_SHARE,\n          fps: screenShareSettings.maxFramerate,\n          bitrate: screenShareSettings.maxBitrate,\n        }),\n      );\n    }\n\n    return preferredPublishOptions;\n  };\n\n  /**\n   * Prepares the preferred options for subscribing to tracks.\n   * This is an experimental client feature and subject to change.\n   * @internal\n   */\n  private getPreferredSubscribeOptions = (): SubscribeOption[] => {\n    const { subscriberCodec, subscriberFmtpLine } =\n      this.clientPublishOptions || {};\n    if (!subscriberCodec || !subscriberFmtpLine) return [];\n    return [\n      SubscribeOption.create({\n        trackType: TrackType.VIDEO,\n        codecs: [\n          { name: subscriberCodec.split('/').pop(), fmtp: subscriberFmtpLine },\n        ],\n      }),\n    ];\n  };\n\n  /**\n   * Performs an ICE restart on both the Publisher and Subscriber Peer Connections.\n   * Uses the provided SFU client to restore the ICE connection.\n   *\n   * This method can throw an error if the ICE restart fails.\n   * This error should be handled by the reconnect loop,\n   * and a new reconnection shall be attempted.\n   *\n   * @internal\n   */\n  private restoreICE = async (\n    nextSfuClient: StreamSfuClient,\n    opts: { includeSubscriber?: boolean; includePublisher?: boolean } = {},\n  ) => {\n    const { includeSubscriber = true, includePublisher = true } = opts;\n    if (this.subscriber) {\n      this.subscriber.setSfuClient(nextSfuClient);\n      if (includeSubscriber) {\n        await this.subscriber.restartIce();\n      }\n    }\n    if (this.publisher) {\n      this.publisher.setSfuClient(nextSfuClient);\n      if (includePublisher) {\n        await this.publisher.restartIce();\n      }\n    }\n  };\n\n  /**\n   * Initializes the Publisher and Subscriber Peer Connections.\n   * @internal\n   */\n  private initPublisherAndSubscriber = (opts: {\n    sfuClient: StreamSfuClient;\n    connectionConfig: RTCConfiguration;\n    statsOptions: StatsOptions;\n    clientDetails: ClientDetails;\n    publishOptions: PublishOption[];\n    closePreviousInstances: boolean;\n  }) => {\n    const {\n      sfuClient,\n      connectionConfig,\n      clientDetails,\n      statsOptions,\n      publishOptions,\n      closePreviousInstances,\n    } = opts;\n    const { enable_rtc_stats: enableTracing } = statsOptions;\n    if (closePreviousInstances && this.subscriber) {\n      this.subscriber.dispose();\n    }\n    this.subscriber = new Subscriber({\n      sfuClient,\n      dispatcher: this.dispatcher,\n      state: this.state,\n      connectionConfig,\n      logTag: String(this.sfuClientTag),\n      clientDetails,\n      enableTracing,\n      onUnrecoverableError: (reason) => {\n        this.reconnect(WebsocketReconnectStrategy.REJOIN, reason).catch(\n          (err) => {\n            this.logger(\n              'warn',\n              `[Reconnect] Error reconnecting after a subscriber error: ${reason}`,\n              err,\n            );\n          },\n        );\n      },\n    });\n\n    // anonymous users can't publish anything hence, there is no need\n    // to create Publisher Peer Connection for them\n    const isAnonymous = this.streamClient.user?.type === 'anonymous';\n    if (!isAnonymous) {\n      if (closePreviousInstances && this.publisher) {\n        this.publisher.dispose();\n      }\n      this.publisher = new Publisher({\n        sfuClient,\n        dispatcher: this.dispatcher,\n        state: this.state,\n        connectionConfig,\n        publishOptions,\n        logTag: String(this.sfuClientTag),\n        clientDetails,\n        enableTracing,\n        onUnrecoverableError: (reason) => {\n          this.reconnect(WebsocketReconnectStrategy.REJOIN, reason).catch(\n            (err) => {\n              this.logger(\n                'warn',\n                `[Reconnect] Error reconnecting after a publisher error: ${reason}`,\n                err,\n              );\n            },\n          );\n        },\n      });\n    }\n\n    mediaStatsTracer.setEnabled(enableTracing);\n    this.statsReporter?.stop();\n    this.statsReporter = createStatsReporter({\n      subscriber: this.subscriber,\n      publisher: this.publisher,\n      state: this.state,\n      datacenter: sfuClient.edgeName,\n    });\n\n    this.sfuStatsReporter?.stop();\n    if (statsOptions?.reporting_interval_ms > 0) {\n      this.sfuStatsReporter = new SfuStatsReporter(sfuClient, {\n        clientDetails,\n        options: statsOptions,\n        subscriber: this.subscriber,\n        publisher: this.publisher,\n        microphone: this.microphone,\n        camera: this.camera,\n        state: this.state,\n      });\n      this.sfuStatsReporter.start();\n    }\n  };\n\n  /**\n   * Retrieves credentials for joining the call.\n   *\n   * @internal\n   *\n   * @param data the join call data.\n   */\n  doJoinRequest = async (data?: JoinCallData): Promise<JoinCallResponse> => {\n    const location = await this.streamClient.getLocationHint();\n    const request: JoinCallRequest = { ...data, location };\n    const joinResponse = await this.streamClient.post<\n      JoinCallResponse,\n      JoinCallRequest\n    >(`${this.streamClientBasePath}/join`, request);\n    this.state.updateFromCallResponse(joinResponse.call);\n    this.state.setMembers(joinResponse.members);\n    this.state.setOwnCapabilities(joinResponse.own_capabilities);\n\n    if (data?.ring) {\n      this.ringingSubject.next(true);\n    }\n\n    const isReconnecting =\n      this.reconnectStrategy !== WebsocketReconnectStrategy.UNSPECIFIED;\n\n    if (!isReconnecting && this.ringing && !this.isCreatedByMe) {\n      // signals other users that I have accepted the incoming call.\n      await this.accept();\n    }\n\n    if (this.streamClient._hasConnectionID()) {\n      this.watching = true;\n      this.clientStore.registerCall(this);\n    }\n\n    return joinResponse;\n  };\n\n  /**\n   * Handles the closing of the SFU signal connection.\n   *\n   * @internal\n   * @param sfuClient the SFU client instance that was closed.\n   * @param reason the reason for the closure.\n   */\n  private handleSfuSignalClose = (\n    sfuClient: StreamSfuClient,\n    reason: string,\n  ) => {\n    this.logger('debug', '[Reconnect] SFU signal connection closed');\n    const { callingState } = this.state;\n    if (\n      // SFU WS closed before we finished current join,\n      // no need to schedule reconnecting\n      callingState === CallingState.JOINING ||\n      // we are already in the process of reconnecting,\n      // no need to schedule another one\n      callingState === CallingState.RECONNECTING ||\n      // SFU WS closed as a result of unsuccessful join,\n      // and no further retries need to be made\n      callingState === CallingState.IDLE ||\n      callingState === CallingState.LEFT\n    )\n      return;\n    // normal close, no need to reconnect\n    if (sfuClient.isLeaving || sfuClient.isClosing) return;\n    this.reconnect(WebsocketReconnectStrategy.REJOIN, reason).catch((err) => {\n      this.logger('warn', '[Reconnect] Error reconnecting', err);\n    });\n  };\n\n  /**\n   * Handles the reconnection flow.\n   *\n   * @internal\n   *\n   * @param strategy the reconnection strategy to use.\n   * @param reason the reason for the reconnection.\n   */\n  private reconnect = async (\n    strategy: WebsocketReconnectStrategy,\n    reason: string,\n  ): Promise<void> => {\n    if (\n      this.state.callingState === CallingState.RECONNECTING ||\n      this.state.callingState === CallingState.RECONNECTING_FAILED\n    )\n      return;\n\n    return withoutConcurrency(this.reconnectConcurrencyTag, async () => {\n      this.logger(\n        'info',\n        `[Reconnect] Reconnecting with strategy ${WebsocketReconnectStrategy[strategy]}`,\n      );\n\n      const reconnectStartTime = Date.now();\n      this.reconnectStrategy = strategy;\n      this.reconnectReason = reason;\n\n      do {\n        if (\n          this.disconnectionTimeoutSeconds > 0 &&\n          (Date.now() - reconnectStartTime) / 1000 >\n            this.disconnectionTimeoutSeconds\n        ) {\n          this.logger(\n            'warn',\n            '[Reconnect] Stopping reconnection attempts after reaching disconnection timeout',\n          );\n          this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n          return;\n        }\n\n        // we don't increment reconnect attempts for the FAST strategy.\n        if (this.reconnectStrategy !== WebsocketReconnectStrategy.FAST) {\n          this.reconnectAttempts++;\n        }\n        const current = WebsocketReconnectStrategy[this.reconnectStrategy];\n        try {\n          // wait until the network is available\n          await this.networkAvailableTask?.promise;\n          switch (this.reconnectStrategy) {\n            case WebsocketReconnectStrategy.UNSPECIFIED:\n            case WebsocketReconnectStrategy.DISCONNECT:\n              this.logger('debug', `[Reconnect] No-op strategy ${current}`);\n              break;\n            case WebsocketReconnectStrategy.FAST:\n              await this.reconnectFast();\n              break;\n            case WebsocketReconnectStrategy.REJOIN:\n              await this.reconnectRejoin();\n              break;\n            case WebsocketReconnectStrategy.MIGRATE:\n              await this.reconnectMigrate();\n              break;\n            default:\n              ensureExhausted(\n                this.reconnectStrategy,\n                'Unknown reconnection strategy',\n              );\n              break;\n          }\n          break; // do-while loop, reconnection worked, exit the loop\n        } catch (error) {\n          if (this.state.callingState === CallingState.OFFLINE) {\n            this.logger(\n              'trace',\n              `[Reconnect] Can't reconnect while offline, stopping reconnection attempts`,\n            );\n            break;\n            // we don't need to handle the error if the call is offline\n            // network change event will trigger the reconnection\n          }\n          if (error instanceof ErrorFromResponse && error.unrecoverable) {\n            this.logger(\n              'warn',\n              `[Reconnect] Can't reconnect due to coordinator unrecoverable error`,\n              error,\n            );\n            this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n            return;\n          }\n          this.logger(\n            'warn',\n            `[Reconnect] ${current} (${this.reconnectAttempts}) failed. Attempting with REJOIN`,\n            error,\n          );\n          await sleep(500);\n          this.reconnectStrategy = WebsocketReconnectStrategy.REJOIN;\n        }\n      } while (\n        this.state.callingState !== CallingState.JOINED &&\n        this.state.callingState !== CallingState.RECONNECTING_FAILED &&\n        this.state.callingState !== CallingState.LEFT\n      );\n    });\n  };\n\n  /**\n   * Initiates the reconnection flow with the \"fast\" strategy.\n   * @internal\n   */\n  private reconnectFast = async () => {\n    const reconnectStartTime = Date.now();\n    this.reconnectStrategy = WebsocketReconnectStrategy.FAST;\n    this.state.setCallingState(CallingState.RECONNECTING);\n    await this.doJoin(this.joinCallData);\n    this.sfuStatsReporter?.sendReconnectionTime(\n      WebsocketReconnectStrategy.FAST,\n      (Date.now() - reconnectStartTime) / 1000,\n    );\n  };\n\n  /**\n   * Initiates the reconnection flow with the \"rejoin\" strategy.\n   * @internal\n   */\n  private reconnectRejoin = async () => {\n    const reconnectStartTime = Date.now();\n    this.reconnectStrategy = WebsocketReconnectStrategy.REJOIN;\n    this.state.setCallingState(CallingState.RECONNECTING);\n    await this.doJoin(this.joinCallData);\n    await this.restorePublishedTracks();\n    this.restoreSubscribedTracks();\n    this.sfuStatsReporter?.sendReconnectionTime(\n      WebsocketReconnectStrategy.REJOIN,\n      (Date.now() - reconnectStartTime) / 1000,\n    );\n  };\n\n  /**\n   * Initiates the reconnection flow with the \"migrate\" strategy.\n   * @internal\n   */\n  private reconnectMigrate = async () => {\n    const reconnectStartTime = Date.now();\n    const currentSfuClient = this.sfuClient;\n    if (!currentSfuClient) {\n      throw new Error('Cannot migrate without an active SFU client');\n    }\n\n    this.reconnectStrategy = WebsocketReconnectStrategy.MIGRATE;\n    this.state.setCallingState(CallingState.MIGRATING);\n    const currentSubscriber = this.subscriber;\n    const currentPublisher = this.publisher;\n\n    currentSubscriber?.detachEventHandlers();\n    currentPublisher?.detachEventHandlers();\n\n    const migrationTask = makeSafePromise(currentSfuClient.enterMigration());\n\n    try {\n      const currentSfu = currentSfuClient.edgeName;\n      await this.doJoin({ ...this.joinCallData, migrating_from: currentSfu });\n    } finally {\n      // cleanup the migration_from field after the migration is complete or failed\n      // as we don't want to keep dirty data in the join call data\n      delete this.joinCallData?.migrating_from;\n    }\n\n    await this.restorePublishedTracks();\n    this.restoreSubscribedTracks();\n\n    try {\n      // Wait for the migration to complete, then close the previous SFU client\n      // and the peer connection instances. In case of failure, the migration\n      // task would throw an error and REJOIN would be attempted.\n      await migrationTask();\n\n      // in MIGRATE, we can consider the call as joined only after\n      // `participantMigrationComplete` event is received, signaled by\n      // the `migrationTask`\n      this.state.setCallingState(CallingState.JOINED);\n    } finally {\n      currentSubscriber?.dispose();\n      currentPublisher?.dispose();\n\n      // and close the previous SFU client, without specifying close code\n      currentSfuClient.close(StreamSfuClient.NORMAL_CLOSURE, 'Migrating away');\n    }\n    this.sfuStatsReporter?.sendReconnectionTime(\n      WebsocketReconnectStrategy.MIGRATE,\n      (Date.now() - reconnectStartTime) / 1000,\n    );\n  };\n\n  /**\n   * Registers the various event handlers for reconnection.\n   *\n   * @internal\n   */\n  private registerReconnectHandlers = () => {\n    // handles the legacy \"goAway\" event\n    const unregisterGoAway = this.on('goAway', () => {\n      this.reconnect(WebsocketReconnectStrategy.MIGRATE, 'goAway').catch(\n        (err) => this.logger('warn', '[Reconnect] Error reconnecting', err),\n      );\n    });\n\n    // handles the \"error\" event, through which the SFU can request a reconnect\n    const unregisterOnError = this.on('error', (e) => {\n      const { reconnectStrategy: strategy, error } = e;\n      if (strategy === WebsocketReconnectStrategy.UNSPECIFIED) return;\n      if (strategy === WebsocketReconnectStrategy.DISCONNECT) {\n        this.leave({ reason: 'SFU instructed to disconnect' }).catch((err) => {\n          this.logger('warn', `Can't leave call after disconnect request`, err);\n        });\n      } else {\n        this.reconnect(strategy, error?.message || 'SFU Error').catch((err) => {\n          this.logger('warn', '[Reconnect] Error reconnecting', err);\n        });\n      }\n    });\n\n    const unregisterNetworkChanged = this.streamClient.on(\n      'network.changed',\n      (e) => {\n        if (!e.online) {\n          this.logger('debug', '[Reconnect] Going offline');\n          if (!this.hasJoinedOnce) return;\n          this.lastOfflineTimestamp = Date.now();\n          // create a new task that would resolve when the network is available\n          const networkAvailableTask = promiseWithResolvers();\n          networkAvailableTask.promise.then(() => {\n            let strategy = WebsocketReconnectStrategy.FAST;\n            if (this.lastOfflineTimestamp) {\n              const offline = (Date.now() - this.lastOfflineTimestamp) / 1000;\n              if (offline > this.fastReconnectDeadlineSeconds) {\n                // We shouldn't attempt FAST if we have exceeded the deadline.\n                // The SFU would have already wiped out the session.\n                strategy = WebsocketReconnectStrategy.REJOIN;\n              }\n            }\n\n            this.reconnect(strategy, 'Going online').catch((err) => {\n              this.logger(\n                'warn',\n                '[Reconnect] Error reconnecting after going online',\n                err,\n              );\n            });\n          });\n          this.networkAvailableTask = networkAvailableTask;\n          this.sfuStatsReporter?.stop();\n          this.state.setCallingState(CallingState.OFFLINE);\n        } else {\n          this.logger('debug', '[Reconnect] Going online');\n          this.sfuClient?.close(\n            StreamSfuClient.DISPOSE_OLD_SOCKET,\n            'Closing WS to reconnect after going online',\n          );\n          // we went online, release the previous waiters and reset the state\n          this.networkAvailableTask?.resolve();\n          this.networkAvailableTask = undefined;\n          this.sfuStatsReporter?.start();\n        }\n      },\n    );\n\n    this.leaveCallHooks\n      .add(unregisterGoAway)\n      .add(unregisterOnError)\n      .add(unregisterNetworkChanged);\n  };\n\n  /**\n   * Restores the published tracks after a reconnection.\n   * @internal\n   */\n  private restorePublishedTracks = async () => {\n    // the tracks need to be restored in their original order of publishing\n    // otherwise, we might get `m-lines order mismatch` errors\n    for (const trackType of this.trackPublishOrder) {\n      let mediaStream: MediaStream | undefined;\n      switch (trackType) {\n        case TrackType.AUDIO:\n          mediaStream = this.microphone.state.mediaStream;\n          break;\n        case TrackType.VIDEO:\n          mediaStream = this.camera.state.mediaStream;\n          break;\n        case TrackType.SCREEN_SHARE:\n          mediaStream = this.screenShare.state.mediaStream;\n          break;\n        // screen share audio can't exist without a screen share, so we handle it there\n        case TrackType.SCREEN_SHARE_AUDIO:\n        case TrackType.UNSPECIFIED:\n          break;\n        default:\n          ensureExhausted(trackType, 'Unknown track type');\n          break;\n      }\n\n      if (mediaStream) await this.publish(mediaStream, trackType);\n    }\n  };\n\n  /**\n   * Restores the subscribed tracks after a reconnection.\n   * @internal\n   */\n  private restoreSubscribedTracks = () => {\n    const { remoteParticipants } = this.state;\n    if (remoteParticipants.length <= 0) return;\n    this.dynascaleManager.applyTrackSubscriptions(undefined);\n  };\n\n  /**\n   * Starts publishing the given video stream to the call.\n   * @deprecated use `call.publish()`.\n   */\n  publishVideoStream = async (videoStream: MediaStream) => {\n    await this.publish(videoStream, TrackType.VIDEO);\n  };\n\n  /**\n   * Starts publishing the given audio stream to the call.\n   * @deprecated use `call.publish()`\n   */\n  publishAudioStream = async (audioStream: MediaStream) => {\n    await this.publish(audioStream, TrackType.AUDIO);\n  };\n\n  /**\n   * Starts publishing the given screen-share stream to the call.\n   * @deprecated use `call.publish()`\n   */\n  publishScreenShareStream = async (screenShareStream: MediaStream) => {\n    await this.publish(screenShareStream, TrackType.SCREEN_SHARE);\n  };\n\n  /**\n   * Publishes the given media stream.\n   *\n   * @param mediaStream the media stream to publish.\n   * @param trackType the type of the track to announce.\n   */\n  publish = async (mediaStream: MediaStream, trackType: TrackType) => {\n    if (!this.sfuClient) throw new Error(`Call not joined yet.`);\n    // joining is in progress, and we should wait until the client is ready\n    await this.sfuClient.joinTask;\n\n    if (!this.permissionsContext.canPublish(trackType)) {\n      throw new Error(`No permission to publish ${TrackType[trackType]}`);\n    }\n\n    if (!this.publisher) throw new Error('Publisher is not initialized');\n\n    const [track] = isAudioTrackType(trackType)\n      ? mediaStream.getAudioTracks()\n      : mediaStream.getVideoTracks();\n\n    if (!track) {\n      throw new Error(\n        `There is no ${TrackType[trackType]} track in the stream`,\n      );\n    }\n\n    if (track.readyState === 'ended') {\n      throw new Error(`Can't publish ended tracks.`);\n    }\n\n    pushToIfMissing(this.trackPublishOrder, trackType);\n    await this.publisher.publish(track, trackType);\n\n    const trackTypes = [trackType];\n    if (trackType === TrackType.SCREEN_SHARE) {\n      const [audioTrack] = mediaStream.getAudioTracks();\n      if (audioTrack) {\n        pushToIfMissing(this.trackPublishOrder, TrackType.SCREEN_SHARE_AUDIO);\n        await this.publisher.publish(audioTrack, TrackType.SCREEN_SHARE_AUDIO);\n        trackTypes.push(TrackType.SCREEN_SHARE_AUDIO);\n      }\n    }\n\n    await this.updateLocalStreamState(mediaStream, ...trackTypes);\n  };\n\n  /**\n   * Stops publishing the given track type to the call, if it is currently being published.\n   *\n   * @param trackTypes the track types to stop publishing.\n   */\n  stopPublish = async (...trackTypes: TrackType[]) => {\n    if (!this.sfuClient || !this.publisher) return;\n    this.publisher.stopTracks(...trackTypes);\n    await this.updateLocalStreamState(undefined, ...trackTypes);\n  };\n\n  /**\n   * Updates the call state with the new stream.\n   *\n   * @param mediaStream the new stream to update the call state with.\n   * If undefined, the stream will be removed from the call state.\n   * @param trackTypes the track types to update the call state with.\n   */\n  private updateLocalStreamState = async (\n    mediaStream: MediaStream | undefined,\n    ...trackTypes: TrackType[]\n  ) => {\n    if (!this.sfuClient || !this.sfuClient.sessionId) return;\n    await this.notifyTrackMuteState(!mediaStream, ...trackTypes);\n\n    const { sessionId } = this.sfuClient;\n    for (const trackType of trackTypes) {\n      const streamStateProp = trackTypeToParticipantStreamKey(trackType);\n      if (!streamStateProp) continue;\n\n      this.state.updateParticipant(sessionId, (p) => ({\n        publishedTracks: mediaStream\n          ? pushToIfMissing([...p.publishedTracks], trackType)\n          : p.publishedTracks.filter((t) => t !== trackType),\n        [streamStateProp]: mediaStream,\n      }));\n    }\n  };\n\n  /**\n   * Updates the preferred publishing options\n   *\n   * @internal\n   * @param options the options to use.\n   */\n  updatePublishOptions = (options: ClientPublishOptions) => {\n    this.logger(\n      'warn',\n      '[call.updatePublishOptions]: You are manually overriding the publish options for this call. ' +\n        'This is not recommended, and it can cause call stability/compatibility issues. Use with caution.',\n    );\n    if (this.state.callingState === CallingState.JOINED) {\n      this.logger(\n        'warn',\n        'Updating publish options after joining the call does not have an effect',\n      );\n    }\n    this.clientPublishOptions = { ...this.clientPublishOptions, ...options };\n  };\n\n  /**\n   * Notifies the SFU that a noise cancellation process has started.\n   *\n   * @internal\n   */\n  notifyNoiseCancellationStarting = async () => {\n    return this.sfuClient?.startNoiseCancellation().catch((err) => {\n      this.logger('warn', 'Failed to notify start of noise cancellation', err);\n    });\n  };\n\n  /**\n   * Notifies the SFU that a noise cancellation process has stopped.\n   *\n   * @internal\n   */\n  notifyNoiseCancellationStopped = async () => {\n    return this.sfuClient?.stopNoiseCancellation().catch((err) => {\n      this.logger('warn', 'Failed to notify stop of noise cancellation', err);\n    });\n  };\n\n  /**\n   * Notifies the SFU about the mute state of the given track types.\n   * @internal\n   */\n  notifyTrackMuteState = async (muted: boolean, ...trackTypes: TrackType[]) => {\n    if (!this.sfuClient) return;\n    await this.sfuClient.updateMuteStates(\n      trackTypes.map((trackType) => ({ trackType, muted })),\n    );\n  };\n\n  /**\n   * Will enhance the reported stats with additional participant-specific information (`callStatsReport$` state [store variable](./StreamVideoClient.md/#readonlystatestore)).\n   * This is usually helpful when detailed stats for a specific participant are needed.\n   *\n   * @param sessionId the sessionId to start reporting for.\n   */\n  startReportingStatsFor = (sessionId: string) => {\n    return this.statsReporter?.startReportingStatsFor(sessionId);\n  };\n\n  /**\n   * Opposite of `startReportingStatsFor`.\n   * Will turn off stats reporting for a specific participant.\n   *\n   * @param sessionId the sessionId to stop reporting for.\n   */\n  stopReportingStatsFor = (sessionId: string) => {\n    return this.statsReporter?.stopReportingStatsFor(sessionId);\n  };\n\n  /**\n   * Resets the last sent reaction for the user holding the given `sessionId`. This is a local action, it won't reset the reaction on the backend.\n   *\n   * @param sessionId the session id.\n   */\n  resetReaction = (sessionId: string) => {\n    this.state.updateParticipant(sessionId, {\n      reaction: undefined,\n    });\n  };\n\n  /**\n   * Sets the list of criteria to sort the participants by.\n   *\n   * @param criteria the list of criteria to sort the participants by.\n   */\n  setSortParticipantsBy: CallState['setSortParticipantsBy'] = (criteria) => {\n    return this.state.setSortParticipantsBy(criteria);\n  };\n\n  /**\n   * Sends a reaction to the other call participants.\n   *\n   * @param reaction the reaction to send.\n   */\n  sendReaction = async (\n    reaction: SendReactionRequest,\n  ): Promise<SendReactionResponse> => {\n    return this.streamClient.post<SendReactionResponse, SendReactionRequest>(\n      `${this.streamClientBasePath}/reaction`,\n      reaction,\n    );\n  };\n\n  /**\n   * Blocks the user with the given `userId`.\n   *\n   * @param userId the id of the user to block.\n   */\n  blockUser = async (userId: string) => {\n    return this.streamClient.post<BlockUserResponse, BlockUserRequest>(\n      `${this.streamClientBasePath}/block`,\n      {\n        user_id: userId,\n      },\n    );\n  };\n\n  /**\n   * Unblocks the user with the given `userId`.\n   *\n   * @param userId the id of the user to unblock.\n   */\n  unblockUser = async (userId: string) => {\n    return this.streamClient.post<UnblockUserResponse, UnblockUserRequest>(\n      `${this.streamClientBasePath}/unblock`,\n      {\n        user_id: userId,\n      },\n    );\n  };\n\n  /**\n   * Mutes the current user.\n   *\n   * @param type the type of the mute operation.\n   */\n  muteSelf = (type: TrackMuteType) => {\n    const myUserId = this.currentUserId;\n    if (myUserId) {\n      return this.muteUser(myUserId, type);\n    }\n  };\n\n  /**\n   * Mutes all the other participants.\n   *\n   * @param type the type of the mute operation.\n   */\n  muteOthers = (type: TrackMuteType) => {\n    const trackType = muteTypeToTrackType(type);\n    if (!trackType) return;\n    const userIdsToMute: string[] = [];\n    for (const participant of this.state.remoteParticipants) {\n      if (participant.publishedTracks.includes(trackType)) {\n        userIdsToMute.push(participant.userId);\n      }\n    }\n\n    if (userIdsToMute.length > 0) {\n      return this.muteUser(userIdsToMute, type);\n    }\n  };\n\n  /**\n   * Mutes the user with the given `userId`.\n   *\n   * @param userId the id of the user to mute.\n   * @param type the type of the mute operation.\n   */\n  muteUser = (userId: string | string[], type: TrackMuteType) => {\n    return this.streamClient.post<MuteUsersResponse, MuteUsersRequest>(\n      `${this.streamClientBasePath}/mute_users`,\n      {\n        user_ids: Array.isArray(userId) ? userId : [userId],\n        [type]: true,\n      },\n    );\n  };\n\n  /**\n   * Will mute all users in the call.\n   *\n   * @param type the type of the mute operation.\n   */\n  muteAllUsers = (type: TrackMuteType) => {\n    return this.streamClient.post<MuteUsersResponse, MuteUsersRequest>(\n      `${this.streamClientBasePath}/mute_users`,\n      {\n        mute_all_users: true,\n        [type]: true,\n      },\n    );\n  };\n\n  /**\n   * Starts recording the call\n   */\n  startRecording = async (request?: StartRecordingRequest) => {\n    return this.streamClient.post<\n      StartRecordingResponse,\n      StartRecordingRequest\n    >(`${this.streamClientBasePath}/start_recording`, request ? request : {});\n  };\n\n  /**\n   * Stops recording the call\n   */\n  stopRecording = async () => {\n    return this.streamClient.post<StopRecordingResponse>(\n      `${this.streamClientBasePath}/stop_recording`,\n      {},\n    );\n  };\n\n  /**\n   * Starts the transcription of the call.\n   *\n   * @param request the request data.\n   */\n  startTranscription = async (\n    request?: StartTranscriptionRequest,\n  ): Promise<StartTranscriptionResponse> => {\n    return this.streamClient.post<\n      StartTranscriptionResponse,\n      StartTranscriptionRequest\n    >(`${this.streamClientBasePath}/start_transcription`, request);\n  };\n\n  /**\n   * Stops the transcription of the call.\n   */\n  stopTranscription = async (): Promise<StopTranscriptionResponse> => {\n    return this.streamClient.post<StopTranscriptionResponse>(\n      `${this.streamClientBasePath}/stop_transcription`,\n    );\n  };\n\n  /**\n   * Starts the closed captions of the call.\n   */\n  startClosedCaptions = async (\n    options?: StartClosedCaptionsRequest,\n  ): Promise<StartClosedCaptionsResponse> => {\n    const trx = this.state.setCaptioning(true); // optimistic update\n    try {\n      return await this.streamClient.post<\n        StartClosedCaptionsResponse,\n        StartClosedCaptionsRequest\n      >(`${this.streamClientBasePath}/start_closed_captions`, options);\n    } catch (err) {\n      trx.rollback(); // revert the optimistic update\n      throw err;\n    }\n  };\n\n  /**\n   * Stops the closed captions of the call.\n   */\n  stopClosedCaptions = async (\n    options?: StopClosedCaptionsRequest,\n  ): Promise<StopClosedCaptionsResponse> => {\n    const trx = this.state.setCaptioning(false); // optimistic update\n    try {\n      return await this.streamClient.post<\n        StopClosedCaptionsResponse,\n        StopClosedCaptionsRequest\n      >(`${this.streamClientBasePath}/stop_closed_captions`, options);\n    } catch (err) {\n      trx.rollback(); // revert the optimistic update\n      throw err;\n    }\n  };\n\n  /**\n   * Updates the closed caption settings.\n   *\n   * @param config the closed caption settings to apply\n   */\n  updateClosedCaptionSettings = (config: Partial<ClosedCaptionsSettings>) => {\n    this.state.updateClosedCaptionSettings(config);\n  };\n\n  /**\n   * Sends a `call.permission_request` event to all users connected to the call.\n   * The call settings object contains information about which permissions can be requested during a call\n   * (for example, a user might be allowed to request permission to publish audio, but not video).\n   */\n  requestPermissions = async (\n    data: RequestPermissionRequest,\n  ): Promise<RequestPermissionResponse> => {\n    const { permissions } = data;\n    const canRequestPermissions = permissions.every((permission) =>\n      this.permissionsContext.canRequest(permission as OwnCapability),\n    );\n    if (!canRequestPermissions) {\n      throw new Error(\n        `You are not allowed to request permissions: ${permissions.join(', ')}`,\n      );\n    }\n    return this.streamClient.post<\n      RequestPermissionResponse,\n      RequestPermissionRequest\n    >(`${this.streamClientBasePath}/request_permission`, data);\n  };\n\n  /**\n   * Allows you to grant certain permissions to a user in a call.\n   * The permissions are specific to the call experience and do not survive the call itself.\n   *\n   * Supported permissions that can be granted are:\n   * - `send-audio`\n   * - `send-video`\n   * - `screenshare`\n   *\n   * @param userId the id of the user to grant permissions to.\n   * @param permissions the permissions to grant.\n   */\n  grantPermissions = async (userId: string, permissions: string[]) => {\n    return this.updateUserPermissions({\n      user_id: userId,\n      grant_permissions: permissions,\n    });\n  };\n\n  /**\n   * Allows you to revoke certain permissions from a user in a call.\n   * The permissions are specific to the call experience and do not survive the call itself.\n   *\n   * Supported permissions that can be revoked are:\n   * - `send-audio`\n   * - `send-video`\n   * - `screenshare`\n   *\n   * @param userId the id of the user to revoke permissions from.\n   * @param permissions the permissions to revoke.\n   */\n  revokePermissions = async (userId: string, permissions: string[]) => {\n    return this.updateUserPermissions({\n      user_id: userId,\n      revoke_permissions: permissions,\n    });\n  };\n\n  /**\n   * Allows you to grant or revoke a specific permission to a user in a call. The permissions are specific to the call experience and do not survive the call itself.\n   *\n   * When revoking a permission, this endpoint will also mute the relevant track from the user. This is similar to muting a user with the difference that the user will not be able to unmute afterwards.\n   *\n   * Supported permissions that can be granted or revoked: `send-audio`, `send-video` and `screenshare`.\n   *\n   * `call.permissions_updated` event is sent to all members of the call.\n   *\n   */\n  updateUserPermissions = async (data: UpdateUserPermissionsRequest) => {\n    return this.streamClient.post<\n      UpdateUserPermissionsResponse,\n      UpdateUserPermissionsRequest\n    >(`${this.streamClientBasePath}/user_permissions`, data);\n  };\n\n  /**\n   * Starts the livestreaming of the call.\n   *\n   * @param data the request data.\n   * @param params the request params.\n   */\n  goLive = async (data: GoLiveRequest = {}, params?: { notify?: boolean }) => {\n    return this.streamClient.post<GoLiveResponse, GoLiveRequest>(\n      `${this.streamClientBasePath}/go_live`,\n      data,\n      params,\n    );\n  };\n\n  /**\n   * Stops the livestreaming of the call.\n   */\n  stopLive = async (data: StopLiveRequest = {}) => {\n    return this.streamClient.post<StopLiveResponse>(\n      `${this.streamClientBasePath}/stop_live`,\n      data,\n    );\n  };\n\n  /**\n   * Starts the broadcasting of the call.\n   */\n  startHLS = async () => {\n    return this.streamClient.post<StartHLSBroadcastingResponse>(\n      `${this.streamClientBasePath}/start_broadcasting`,\n      {},\n    );\n  };\n\n  /**\n   * Stops the broadcasting of the call.\n   */\n  stopHLS = async () => {\n    return this.streamClient.post<StopHLSBroadcastingResponse>(\n      `${this.streamClientBasePath}/stop_broadcasting`,\n      {},\n    );\n  };\n\n  /**\n   * Starts the RTMP-out broadcasting of the call.\n   */\n  startRTMPBroadcasts = async (\n    data: StartRTMPBroadcastsRequest,\n  ): Promise<StartRTMPBroadcastsResponse> => {\n    return this.streamClient.post<\n      StartRTMPBroadcastsResponse,\n      StartRTMPBroadcastsRequest\n    >(`${this.streamClientBasePath}/rtmp_broadcasts`, data);\n  };\n\n  /**\n   * Stops all RTMP-out broadcasting of the call.\n   */\n  stopAllRTMPBroadcasts = async (): Promise<StopAllRTMPBroadcastsResponse> => {\n    return this.streamClient.post<StopAllRTMPBroadcastsResponse>(\n      `${this.streamClientBasePath}/rtmp_broadcasts/stop`,\n    );\n  };\n\n  /**\n   * Stops the RTMP-out broadcasting of the call specified by it's name.\n   */\n  stopRTMPBroadcast = async (\n    name: string,\n  ): Promise<StopRTMPBroadcastsResponse> => {\n    return this.streamClient.post<StopRTMPBroadcastsResponse>(\n      `${this.streamClientBasePath}/rtmp_broadcasts/${name}/stop`,\n    );\n  };\n\n  /**\n   * Starts frame by frame recording.\n   * Sends call.frame_recording_started events\n   */\n  startFrameRecording = async (\n    data: StartFrameRecordingRequest,\n  ): Promise<StartFrameRecordingResponse> => {\n    return this.streamClient.post<\n      StartFrameRecordingResponse,\n      StartFrameRecordingRequest\n    >(`${this.streamClientBasePath}/start_frame_recording`, data);\n  };\n\n  /**\n   * Stops frame recording.\n   */\n  stopFrameRecording = async (): Promise<StopFrameRecordingResponse> => {\n    return this.streamClient.post<StopFrameRecordingResponse>(\n      `${this.streamClientBasePath}/stop_frame_recording`,\n    );\n  };\n\n  /**\n   * Updates the call settings or custom data.\n   *\n   * @param updates the updates to apply to the call.\n   */\n  update = async (updates: UpdateCallRequest) => {\n    const response = await this.streamClient.patch<\n      UpdateCallResponse,\n      UpdateCallRequest\n    >(`${this.streamClientBasePath}`, updates);\n\n    const { call, members, own_capabilities } = response;\n    this.state.updateFromCallResponse(call);\n    this.state.setMembers(members);\n    this.state.setOwnCapabilities(own_capabilities);\n\n    return response;\n  };\n\n  /**\n   * Ends the call. Once the call is ended, it cannot be re-joined.\n   */\n  endCall = async () => {\n    return this.streamClient.post<EndCallResponse>(\n      `${this.streamClientBasePath}/mark_ended`,\n    );\n  };\n\n  /**\n   * Pins the given session to the top of the participants list.\n   *\n   * @param sessionId the sessionId to pin.\n   */\n  pin = (sessionId: string) => {\n    this.state.updateParticipant(sessionId, {\n      pin: {\n        isLocalPin: true,\n        pinnedAt: Date.now(),\n      },\n    });\n  };\n\n  /**\n   * Unpins the given session from the top of the participants list.\n   *\n   * @param sessionId the sessionId to unpin.\n   */\n  unpin = (sessionId: string) => {\n    this.state.updateParticipant(sessionId, {\n      pin: undefined,\n    });\n  };\n\n  /**\n   * Pins the given session to the top of the participants list for everyone\n   * in the call.\n   * You can execute this method only if you have the `pin-for-everyone` capability.\n   *\n   * @param request the request object.\n   */\n  pinForEveryone = async (request: PinRequest) => {\n    return this.streamClient.post<PinResponse, PinRequest>(\n      `${this.streamClientBasePath}/pin`,\n      request,\n    );\n  };\n\n  /**\n   * Unpins the given session from the top of the participants list for everyone\n   * in the call.\n   * You can execute this method only if you have the `pin-for-everyone` capability.\n   *\n   * @param request the request object.\n   */\n  unpinForEveryone = async (request: UnpinRequest) => {\n    return this.streamClient.post<UnpinResponse, UnpinRequest>(\n      `${this.streamClientBasePath}/unpin`,\n      request,\n    );\n  };\n\n  /**\n   * Query call members with filter query. The result won't be stored in call state.\n   * @param request\n   * @returns\n   */\n  queryMembers = (request?: Omit<QueryCallMembersRequest, 'type' | 'id'>) => {\n    return this.streamClient.post<\n      QueryCallMembersResponse,\n      QueryCallMembersRequest\n    >('/call/members', {\n      ...(request || {}),\n      id: this.id,\n      type: this.type,\n    });\n  };\n\n  /**\n   * Will update the call members.\n   *\n   * @param data the request data.\n   */\n  updateCallMembers = async (\n    data: UpdateCallMembersRequest,\n  ): Promise<UpdateCallMembersResponse> => {\n    return this.streamClient.post<\n      UpdateCallMembersResponse,\n      UpdateCallMembersRequest\n    >(`${this.streamClientBasePath}/members`, data);\n  };\n\n  /**\n   * Schedules an auto-drop timeout based on the call settings.\n   * Applicable only for ringing calls.\n   */\n  private scheduleAutoDrop = () => {\n    this.cancelAutoDrop();\n\n    const settings = this.state.settings;\n    if (!settings) return;\n    // ignore if the call is not ringing\n    if (this.state.callingState !== CallingState.RINGING) return;\n\n    const timeoutInMs = this.isCreatedByMe\n      ? settings.ring.auto_cancel_timeout_ms\n      : settings.ring.incoming_call_timeout_ms;\n\n    // 0 means no auto-drop\n    if (timeoutInMs <= 0) return;\n\n    this.dropTimeout = setTimeout(() => {\n      // the call might have stopped ringing by this point,\n      // e.g. it was already accepted and joined\n      if (this.state.callingState !== CallingState.RINGING) return;\n      this.leave({ reject: true, reason: 'timeout' }).catch((err) => {\n        this.logger('error', 'Failed to drop call', err);\n      });\n    }, timeoutInMs);\n  };\n\n  /**\n   * Cancels a scheduled auto-drop timeout.\n   */\n  private cancelAutoDrop = () => {\n    clearTimeout(this.dropTimeout);\n    this.dropTimeout = undefined;\n  };\n\n  /**\n   * Retrieves the list of recordings for the current call or call session.\n   *\n   * If `callSessionId` is provided, it will return the recordings for that call session.\n   * Otherwise, all recordings for the current call will be returned.\n   *\n   * @param callSessionId the call session id to retrieve recordings for.\n   */\n  queryRecordings = async (\n    callSessionId?: string,\n  ): Promise<ListRecordingsResponse> => {\n    let endpoint = this.streamClientBasePath;\n    if (callSessionId) {\n      endpoint = `${endpoint}/${callSessionId}`;\n    }\n    return this.streamClient.get<ListRecordingsResponse>(\n      `${endpoint}/recordings`,\n    );\n  };\n\n  /**\n   * Retrieves the list of transcriptions for the current call.\n   *\n   * @returns the list of transcriptions.\n   */\n  queryTranscriptions = async (): Promise<ListTranscriptionsResponse> => {\n    return this.streamClient.get<ListTranscriptionsResponse>(\n      `${this.streamClientBasePath}/transcriptions`,\n    );\n  };\n\n  /**\n   * Retrieve call statistics for a particular call session (historical).\n   * Here `callSessionID` is mandatory.\n   *\n   * @param callSessionID the call session ID to retrieve statistics for.\n   * @returns The call stats.\n   * @deprecated use `call.getCallReport` instead.\n   * @internal\n   */\n  getCallStats = async (callSessionID: string) => {\n    const endpoint = `${this.streamClientBasePath}/stats/${callSessionID}`;\n    return this.streamClient.get<GetCallStatsResponse>(endpoint);\n  };\n\n  /**\n   * Retrieve call report. If the `callSessionID` is not specified, then the\n   * report for the latest call session is retrieved. If it is specified, then\n   * the report for that particular session is retrieved if it exists.\n   *\n   * @param callSessionID the optional call session ID to retrieve statistics for\n   * @returns the call report\n   */\n  getCallReport = async (callSessionID: string = '') => {\n    const endpoint = `${this.streamClientBasePath}/report`;\n    const params = callSessionID !== '' ? { session_id: callSessionID } : {};\n    return this.streamClient.get<GetCallReportResponse>(endpoint, params);\n  };\n\n  /**\n   * Submit user feedback for the call\n   *\n   * @param rating Rating between 1 and 5 denoting the experience of the user in the call\n   * @param reason The reason/description for the rating\n   * @param custom Custom data\n   */\n  submitFeedback = async (\n    rating: number,\n    {\n      reason,\n      custom,\n    }: Pick<CollectUserFeedbackRequest, 'reason' | 'custom'> = {},\n  ): Promise<CollectUserFeedbackResponse> => {\n    const { sdkName, sdkVersion, ...platform } = getSdkSignature(\n      await getClientDetails(),\n    );\n    return this.streamClient.post<\n      CollectUserFeedbackResponse,\n      CollectUserFeedbackRequest\n    >(`${this.streamClientBasePath}/feedback`, {\n      rating,\n      reason,\n      user_session_id: this.sfuClient?.sessionId,\n      sdk: sdkName,\n      sdk_version: sdkVersion,\n      custom: {\n        ...custom,\n        'x-stream-platform-data': platform,\n      },\n    });\n  };\n\n  /**\n   * Sends a custom event to all call participants.\n   *\n   * @param payload the payload to send.\n   */\n  sendCustomEvent = async (payload: { [key: string]: any }) => {\n    return this.streamClient.post<SendCallEventResponse, SendCallEventRequest>(\n      `${this.streamClientBasePath}/event`,\n      { custom: payload },\n    );\n  };\n\n  /**\n   * Applies the device configuration from the backend.\n   *\n   * @internal\n   */\n  applyDeviceConfig = async (\n    settings: CallSettingsResponse,\n    publish: boolean,\n  ) => {\n    await this.camera.apply(settings.video, publish).catch((err) => {\n      this.logger('warn', 'Camera init failed', err);\n    });\n    await this.microphone.apply(settings.audio, publish).catch((err) => {\n      this.logger('warn', 'Mic init failed', err);\n    });\n  };\n\n  /**\n   * Will begin tracking the given element for visibility changes within the\n   * configured viewport element (`call.setViewport`).\n   *\n   * @param element the element to track.\n   * @param sessionId the session id.\n   * @param trackType the video mode.\n   */\n  trackElementVisibility = <T extends HTMLElement>(\n    element: T,\n    sessionId: string,\n    trackType: VideoTrackType,\n  ) => {\n    return this.dynascaleManager.trackElementVisibility(\n      element,\n      sessionId,\n      trackType,\n    );\n  };\n\n  /**\n   * Sets the viewport element to track bound video elements for visibility.\n   *\n   * @param element the viewport element.\n   */\n  setViewport = <T extends HTMLElement>(element: T) => {\n    return this.dynascaleManager.setViewport(element);\n  };\n\n  /**\n   * Binds a DOM <video> element to the given session id.\n   * This method will make sure that the video element will play\n   * the correct video stream for the given session id.\n   *\n   * Under the hood, it would also keep track of the video element dimensions\n   * and update the subscription accordingly in order to optimize the bandwidth.\n   *\n   * If a \"viewport\" is configured, the video element will be automatically\n   * tracked for visibility and the subscription will be updated accordingly.\n   *\n   * @param videoElement the video element to bind to.\n   * @param sessionId the session id.\n   * @param trackType the kind of video.\n   */\n  bindVideoElement = (\n    videoElement: HTMLVideoElement,\n    sessionId: string,\n    trackType: VideoTrackType,\n  ) => {\n    const unbind = this.dynascaleManager.bindVideoElement(\n      videoElement,\n      sessionId,\n      trackType,\n    );\n\n    if (!unbind) return;\n    this.leaveCallHooks.add(unbind);\n    return () => {\n      this.leaveCallHooks.delete(unbind);\n      unbind();\n    };\n  };\n\n  /**\n   * Binds a DOM <audio> element to the given session id.\n   *\n   * This method will make sure that the audio element will\n   * play the correct audio stream for the given session id.\n   *\n   * @param audioElement the audio element to bind to.\n   * @param sessionId the session id.\n   * @param trackType the kind of audio.\n   */\n  bindAudioElement = (\n    audioElement: HTMLAudioElement,\n    sessionId: string,\n    trackType: AudioTrackType = 'audioTrack',\n  ) => {\n    const unbind = this.dynascaleManager.bindAudioElement(\n      audioElement,\n      sessionId,\n      trackType,\n    );\n\n    if (!unbind) return;\n    this.leaveCallHooks.add(unbind);\n    return () => {\n      this.leaveCallHooks.delete(unbind);\n      unbind();\n    };\n  };\n\n  /**\n   * Binds a DOM <img> element to this call's thumbnail (if enabled in settings).\n   *\n   * @param imageElement the image element to bind to.\n   * @param opts options for the binding.\n   */\n  bindCallThumbnailElement = (\n    imageElement: HTMLImageElement,\n    opts: {\n      fallbackImageSource?: string;\n    } = {},\n  ) => {\n    const handleError = () => {\n      imageElement.src =\n        opts.fallbackImageSource ||\n        'https://getstream.io/random_svg/?name=x&id=x';\n    };\n\n    const unsubscribe = createSubscription(\n      this.state.thumbnails$,\n      (thumbnails) => {\n        if (!thumbnails) return;\n        imageElement.addEventListener('error', handleError);\n\n        const thumbnailUrl = new URL(thumbnails.image_url);\n        thumbnailUrl.searchParams.set('w', String(imageElement.clientWidth));\n        thumbnailUrl.searchParams.set('h', String(imageElement.clientHeight));\n\n        imageElement.src = thumbnailUrl.toString();\n      },\n    );\n\n    return () => {\n      unsubscribe();\n      imageElement.removeEventListener('error', handleError);\n    };\n  };\n\n  /**\n   * Specify preference for incoming video resolution. The preference will\n   * be matched as close as possible, but actual resolution will depend\n   * on the video source quality and client network conditions. Will enable\n   * incoming video, if previously disabled.\n   *\n   * @param resolution preferred resolution, or `undefined` to clear preference\n   * @param sessionIds optionally specify session ids of the participants this\n   * preference has effect on. Affects all participants by default.\n   */\n  setPreferredIncomingVideoResolution = (\n    resolution: VideoDimension | undefined,\n    sessionIds?: string[],\n  ) => {\n    this.dynascaleManager.setVideoTrackSubscriptionOverrides(\n      resolution\n        ? {\n            enabled: true,\n            dimension: resolution,\n          }\n        : undefined,\n      sessionIds,\n    );\n    this.dynascaleManager.applyTrackSubscriptions();\n  };\n\n  /**\n   * Enables or disables incoming video from all remote call participants,\n   * and removes any preference for preferred resolution.\n   */\n  setIncomingVideoEnabled = (enabled: boolean) => {\n    this.dynascaleManager.setVideoTrackSubscriptionOverrides(\n      enabled ? undefined : { enabled: false },\n    );\n    this.dynascaleManager.applyTrackSubscriptions();\n  };\n\n  /**\n   * Sets the maximum amount of time a user can remain waiting for a reconnect\n   * after a network disruption\n   * @param timeoutSeconds Timeout in seconds, or 0 to keep reconnecting indefinetely\n   */\n  setDisconnectionTimeout = (timeoutSeconds: number) => {\n    this.disconnectionTimeoutSeconds = timeoutSeconds;\n  };\n}\n","import { StreamClient } from './client';\nimport {\n  addConnectionEventListeners,\n  isCloseEvent,\n  KnownCodes,\n  removeConnectionEventListeners,\n  retryInterval,\n  sleep,\n} from './utils';\nimport type { LogLevel, StreamVideoEvent, UR } from './types';\nimport type {\n  ConnectedEvent,\n  ConnectionErrorEvent,\n  WSAuthMessage,\n} from '../../gen/coordinator';\nimport { makeSafePromise, type SafePromise } from '../../helpers/promise';\nimport { getTimers } from '../../timers';\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection {\n  // local vars\n  connectionID?: string;\n  private connectionOpenSafe?: SafePromise<ConnectedEvent>;\n  consecutiveFailures: number;\n  pingInterval: number;\n  healthCheckTimeoutRef?: number;\n  isConnecting: boolean;\n  isDisconnected: boolean;\n  isHealthy: boolean;\n  isConnectionOpenResolved?: boolean;\n  lastEvent: Date | null;\n  connectionCheckTimeout: number;\n  connectionCheckTimeoutRef?: NodeJS.Timeout;\n  rejectConnectionOpen?: (\n    reason?: Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    },\n  ) => void;\n  resolveConnectionOpen?: (value: ConnectedEvent) => void;\n  totalFailures: number;\n  ws?: WebSocket;\n  wsID: number;\n\n  client: StreamClient;\n\n  constructor(client: StreamClient) {\n    this.client = client;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** To avoid reconnect if client is disconnected */\n    this.isDisconnected = false;\n    /** Boolean that indicates if the connection promise is resolved */\n    this.isConnectionOpenResolved = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n\n    addConnectionEventListeners(this.onlineStatusChanged);\n  }\n\n  _log = (msg: string, extra: UR = {}, level: LogLevel = 'info') => {\n    this.client.logger(level, `connection:${msg}`, extra);\n  };\n\n  setClient = (client: StreamClient) => {\n    this.client = client;\n  };\n\n  /**\n   * connect - Connect to the WS URL\n   * the default 15s timeout allows between 2~3 tries\n   * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n   */\n  async connect(timeout = 15000) {\n    if (this.isConnecting) {\n      throw Error(\n        `You've called connect twice, can only attempt 1 connection at the time`,\n      );\n    }\n\n    this.isDisconnected = false;\n\n    try {\n      const healthCheck = await this._connect();\n      this.consecutiveFailures = 0;\n\n      this._log(\n        `connect() - Established ws connection with healthcheck: ${healthCheck}`,\n      );\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n\n      if (\n        // @ts-expect-error type issue\n        error.code === KnownCodes.TOKEN_EXPIRED &&\n        !this.client.tokenManager.isStatic()\n      ) {\n        this._log(\n          'connect() - WS failure due to expired token, so going to try to reload token and reconnect',\n        );\n        this._reconnect({ refreshToken: true });\n      } else {\n        // @ts-expect-error type issue\n        if (!error.isWSFailure) {\n          // API rejected the connection and we should not retry\n          throw new Error(\n            JSON.stringify({\n              // @ts-expect-error type issue\n              code: error.code,\n              // @ts-expect-error type issue\n              StatusCode: error.StatusCode,\n              // @ts-expect-error type issue\n              message: error.message,\n              // @ts-expect-error type issue\n              isWSFailure: error.isWSFailure,\n            }),\n          );\n        }\n      }\n    }\n\n    return await this._waitForHealthy(timeout);\n  }\n\n  /**\n   * _waitForHealthy polls the promise connection to see if its resolved until it times out\n   * the default 15s timeout allows between 2~3 tries\n   * @param timeout duration(ms)\n   */\n  async _waitForHealthy(timeout = 15000) {\n    return Promise.race([\n      (async () => {\n        const interval = 50; // ms\n        for (let i = 0; i <= timeout; i += interval) {\n          try {\n            return await this.connectionOpen;\n          } catch (error: any) {\n            if (i === timeout) {\n              throw new Error(\n                JSON.stringify({\n                  code: error.code,\n                  StatusCode: error.StatusCode,\n                  message: error.message,\n                  isWSFailure: error.isWSFailure,\n                }),\n              );\n            }\n            await sleep(interval);\n          }\n        }\n      })(),\n      (async () => {\n        await sleep(timeout);\n        this.isConnecting = false;\n        throw new Error(\n          JSON.stringify({\n            code: '',\n            StatusCode: '',\n            message: 'initial WS connection could not be established',\n            isWSFailure: true,\n          }),\n        );\n      })(),\n    ]);\n  }\n\n  /**\n   * Builds and returns the url for websocket.\n   * @private\n   * @returns url string\n   */\n  _buildUrl = () => {\n    const params = new URLSearchParams();\n    params.set('api_key', this.client.key);\n    params.set('stream-auth-type', this.client.getAuthType());\n    params.set('X-Stream-Client', this.client.getUserAgent());\n\n    return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n  };\n\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout?: number) {\n    this._log(\n      `disconnect() - Closing the websocket connection for wsID ${this.wsID}`,\n    );\n\n    this.wsID += 1;\n    this.isConnecting = false;\n    this.isDisconnected = true;\n\n    // start by removing all the listeners\n    if (this.healthCheckTimeoutRef) {\n      getTimers().clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n\n    removeConnectionEventListeners(this.onlineStatusChanged);\n\n    this.isHealthy = false;\n\n    let isClosedPromise: Promise<void>;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const { ws } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise((resolve) => {\n        const onclose = (event: CloseEvent) => {\n          this._log(\n            `disconnect() - resolving isClosedPromise ${\n              event ? 'with' : 'without'\n            } close frame`,\n            { event },\n          );\n          resolve();\n        };\n\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 second.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n\n      this._log(\n        `disconnect() - Manually closed connection by calling client.disconnect()`,\n      );\n\n      ws.close(\n        KnownCodes.WS_CLOSED_SUCCESS,\n        'Manually closed connection by calling client.disconnect()',\n      );\n    } else {\n      this._log(\n        `disconnect() - ws connection doesn't exist or it is already closed.`,\n      );\n      isClosedPromise = Promise.resolve();\n    }\n\n    delete this.ws;\n\n    return isClosedPromise;\n  }\n\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    if (this.isConnecting) return; // ignore _connect if it's currently trying to connect\n    this.isConnecting = true;\n    let isTokenReady = false;\n    try {\n      this._log(`_connect() - waiting for token`);\n      await this.client.tokenManager.tokenReady();\n      isTokenReady = true;\n    } catch {\n      // token provider has failed before, so try again\n    }\n\n    try {\n      if (!isTokenReady) {\n        this._log(\n          `_connect() - tokenProvider failed before, so going to retry`,\n        );\n        await this.client.tokenManager.loadToken();\n      }\n\n      if (!this.client.isConnectionIsPromisePending) {\n        this.client._setupConnectionIdPromise();\n      }\n      this._setupConnectionPromise();\n      const wsURL = this._buildUrl();\n      this._log(`_connect() - Connecting to ${wsURL}`);\n      const WS = this.client.options.WebSocketImpl ?? WebSocket;\n      this.ws = new WS(wsURL);\n      this.ws.onopen = this.onopen.bind(this, this.wsID);\n      this.ws.onclose = this.onclose.bind(this, this.wsID);\n      this.ws.onerror = this.onerror.bind(this, this.wsID);\n      this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n      const response = await this.connectionOpen;\n      this.isConnecting = false;\n\n      if (response) {\n        this.connectionID = response.connection_id;\n        this.client.resolveConnectionId?.(this.connectionID);\n        return response;\n      }\n    } catch (err) {\n      this.client._setupConnectionIdPromise();\n      this.isConnecting = false;\n      // @ts-expect-error type issue\n      this._log(`_connect() - Error - `, err);\n      this.client.rejectConnectionId?.(err);\n      throw err;\n    }\n  }\n\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(\n    options: { interval?: number; refreshToken?: boolean } = {},\n  ): Promise<void> {\n    this._log('_reconnect() - Initiating the reconnect');\n\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (1) since already connecting or healthy');\n      return;\n    }\n\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (2) since already connecting or healthy');\n      return;\n    }\n\n    if (this.isDisconnected) {\n      this._log('_reconnect() - Abort (3) since disconnect() is called');\n      return;\n    }\n\n    this._log('_reconnect() - Destroying current WS connection');\n\n    // cleanup the old connection\n    this._destroyCurrentWSConnection();\n\n    if (options.refreshToken) {\n      await this.client.tokenManager.loadToken();\n    }\n\n    try {\n      await this._connect();\n      this._log('_reconnect() - Waiting for recoverCallBack');\n      // await this.client.recoverState();\n      this._log('_reconnect() - Finished recoverCallBack');\n\n      this.consecutiveFailures = 0;\n    } catch (error: any) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (\n        error.code === KnownCodes.TOKEN_EXPIRED &&\n        !this.client.tokenManager.isStatic()\n      ) {\n        this._log(\n          '_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect',\n        );\n\n        return this._reconnect({ refreshToken: true });\n      }\n\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this._log('_reconnect() - WS failure, so going to try to reconnect');\n\n        this._reconnect();\n      }\n    }\n    this._log('_reconnect() - == END ==');\n  }\n\n  /**\n   * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n   *\n   * @param {Event} event Event with type online or offline\n   *\n   */\n  onlineStatusChanged = (event: Event) => {\n    if (event.type === 'offline') {\n      // mark the connection as down\n      this._log('onlineStatusChanged() - Status changing to offline');\n      // we know that the app is offline so dispatch the unhealthy connection event immediately\n      this._setHealth(false, true);\n    } else if (event.type === 'online') {\n      // retry right now...\n      // We check this.isHealthy, not sure if it's always\n      // smart to create a new WS connection if the old one is still up and running.\n      // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n      this._log(\n        `onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`,\n      );\n      if (!this.isHealthy) {\n        this._reconnect({ interval: 10 });\n      }\n    }\n  };\n\n  onopen = (wsID: number) => {\n    if (this.wsID !== wsID) return;\n\n    const user = this.client.user;\n    if (!user) {\n      this.client.logger('error', `User not set, can't connect to WS`);\n      return;\n    }\n\n    const token = this.client._getToken();\n    if (!token) {\n      this.client.logger('error', `Token not set, can't connect authenticate`);\n      return;\n    }\n\n    const authMessage = JSON.stringify({\n      token,\n      user_details: {\n        id: user.id,\n        name: user.name,\n        image: user.image,\n        custom: user.custom,\n      },\n    } as WSAuthMessage);\n\n    this._log(`onopen() - Sending auth message ${authMessage}`, {}, 'trace');\n\n    this.ws?.send(authMessage);\n    this._log('onopen() - onopen callback', { wsID });\n  };\n\n  onmessage = (wsID: number, event: MessageEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onmessage() - onmessage callback', { event, wsID });\n    const data =\n      typeof event.data === 'string'\n        ? (JSON.parse(event.data) as StreamVideoEvent)\n        : null;\n\n    // we wait till the first message before we consider the connection open.\n    // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n    // after that a ws.onclose.\n    if (\n      !this.isConnectionOpenResolved &&\n      data &&\n      data.type === 'connection.error'\n    ) {\n      this.isConnectionOpenResolved = true;\n      if (data.error) {\n        this.rejectConnectionOpen?.(this._errorFromWSEvent(data, false));\n        return;\n      }\n    }\n\n    // trigger the event..\n    this.lastEvent = new Date();\n\n    if (\n      data &&\n      (data.type === 'health.check' || data.type === 'connection.ok')\n    ) {\n      // the initial health-check should come from the client\n      this.scheduleNextPing();\n    }\n\n    if (data && data.type === 'connection.ok') {\n      this.resolveConnectionOpen?.(data);\n      this._setHealth(true);\n    }\n\n    if (data && data.type === 'connection.error' && data.error) {\n      const { code } = data.error;\n      this.isHealthy = false;\n      this.isConnecting = false;\n      this.consecutiveFailures += 1;\n      if (\n        code === KnownCodes.TOKEN_EXPIRED &&\n        !this.client.tokenManager.isStatic()\n      ) {\n        clearTimeout(this.connectionCheckTimeoutRef);\n        this._log(\n          'connect() - WS failure due to expired token, so going to try to reload token and reconnect',\n        );\n        this._reconnect({ refreshToken: true });\n      }\n    }\n\n    if (data) {\n      data.received_at = new Date();\n      this.client.dispatchEvent(data);\n    }\n    this.scheduleConnectionCheck();\n  };\n\n  onclose = (wsID: number, event: CloseEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onclose() - onclose callback - ' + event.code, { event, wsID });\n\n    if (event.code === KnownCodes.WS_CLOSED_SUCCESS) {\n      // this is a permanent error raised by stream..\n      // usually caused by invalid auth details\n      const error = new Error(\n        `WS connection reject with error ${event.reason}`,\n      );\n\n      // @ts-expect-error type issue\n      error.reason = event.reason;\n      // @ts-expect-error type issue\n      error.code = event.code;\n      // @ts-expect-error type issue\n      error.wasClean = event.wasClean;\n      // @ts-expect-error type issue\n      error.target = event.target;\n\n      this.rejectConnectionOpen?.(error);\n      this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n        event,\n      });\n    } else {\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n      this.isConnecting = false;\n\n      this.rejectConnectionOpen?.(this._errorFromWSEvent(event));\n\n      this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n        event,\n      });\n\n      // reconnect if its an abnormal failure\n      this._reconnect();\n    }\n  };\n\n  onerror = (wsID: number, event: Event) => {\n    if (this.wsID !== wsID) return;\n\n    this.consecutiveFailures += 1;\n    this.totalFailures += 1;\n    this._setHealth(false);\n    this.isConnecting = false;\n    this.rejectConnectionOpen?.(new Error(`WebSocket error: ${event}`));\n    this._log(`onerror() - WS connection resulted into error`, { event });\n\n    this._reconnect();\n  };\n\n  /**\n   * _setHealth - Sets the connection to healthy or unhealthy.\n   * Broadcasts an event in case the connection status changed.\n   *\n   * @param {boolean} healthy boolean indicating if the connection is healthy or not\n   * @param {boolean} dispatchImmediately boolean indicating to dispatch event immediately even if the connection is unhealthy\n   */\n  _setHealth = (healthy: boolean, dispatchImmediately = false) => {\n    if (healthy === this.isHealthy) return;\n\n    this.isHealthy = healthy;\n\n    if (this.isHealthy || dispatchImmediately) {\n      this.client.dispatchEvent({\n        type: 'connection.changed',\n        online: this.isHealthy,\n      });\n      return;\n    }\n\n    // we're offline, wait few seconds and fire and event if still offline\n    setTimeout(() => {\n      if (this.isHealthy) return;\n      this.client.dispatchEvent({\n        type: 'connection.changed',\n        online: this.isHealthy,\n      });\n    }, 5000);\n  };\n\n  /**\n   * _errorFromWSEvent - Creates an error object for the WS event\n   */\n  private _errorFromWSEvent = (\n    event: CloseEvent | ConnectionErrorEvent,\n    isWSFailure = true,\n  ) => {\n    let code: number;\n    let statusCode: number;\n    let message: string;\n    if (isCloseEvent(event)) {\n      code = event.code;\n      message = event.reason;\n      statusCode = 0;\n    } else {\n      const { error } = event;\n      code = error.code;\n      message = error.message;\n      statusCode = error.StatusCode;\n    }\n\n    const msg = `WS failed with code: ${code} and reason: ${message}`;\n    this._log(msg, { event }, 'warn');\n    const error = new Error(msg) as Error & {\n      code?: number;\n      isWSFailure?: boolean;\n      StatusCode?: number;\n    };\n    error.code = code;\n    /**\n     * StatusCode does not exist on any event types but has been left\n     * as is to preserve JS functionality during the TS implementation\n     */\n    error.StatusCode = statusCode;\n    error.isWSFailure = isWSFailure;\n    return error;\n  };\n\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n\n    try {\n      this?.ws?.close();\n    } catch {\n      // we don't care\n    }\n  }\n\n  /**\n   * _setupPromise - sets up the this.connectOpen promise\n   */\n  _setupConnectionPromise = () => {\n    this.isConnectionOpenResolved = false;\n    /** a promise that is resolved once ws.open is called */\n    this.connectionOpenSafe = makeSafePromise(\n      new Promise<ConnectedEvent>((resolve, reject) => {\n        this.resolveConnectionOpen = resolve;\n        this.rejectConnectionOpen = reject;\n      }),\n    );\n  };\n\n  get connectionOpen() {\n    return this.connectionOpenSafe?.();\n  }\n\n  /**\n   * Schedules a next health check ping for websocket.\n   */\n  scheduleNextPing = () => {\n    const timers = getTimers();\n    if (this.healthCheckTimeoutRef) {\n      timers.clearTimeout(this.healthCheckTimeoutRef);\n    }\n\n    // 30 seconds is the recommended interval (messenger uses this)\n    this.healthCheckTimeoutRef = timers.setTimeout(() => {\n      // send the healthcheck..., server replies with a health check event\n      const data = [{ type: 'health.check', client_id: this.client.clientID }];\n      // try to send on the connection\n      try {\n        this.ws?.send(JSON.stringify(data));\n      } catch {\n        // error will already be detected elsewhere\n      }\n    }, this.pingInterval);\n  };\n\n  /**\n   * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n   * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n   * to be reconnected.\n   */\n  scheduleConnectionCheck = () => {\n    clearTimeout(this.connectionCheckTimeoutRef);\n    this.connectionCheckTimeoutRef = setTimeout(() => {\n      const now = new Date();\n      if (\n        this.lastEvent &&\n        now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout\n      ) {\n        this._log('scheduleConnectionCheck - going to reconnect');\n        this._setHealth(false);\n        this._reconnect();\n      }\n    }, this.connectionCheckTimeout);\n  };\n}\n","export function getUserFromToken(token: string) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id as string | undefined;\n}\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nconst decodeBase64 = (s: string): string => {\n  const e = {} as { [key: string]: number },\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      if ((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) r += w(a);\n    }\n  }\n  return r;\n};\n","import { getUserFromToken } from './signing';\nimport { isFunction } from './utils';\nimport type { TokenOrProvider, UserWithId } from './types';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager {\n  private loadTokenPromise: Promise<string> | null = null;\n  private type: 'static' | 'provider' = 'static';\n  private readonly secret?: string;\n  private token?: string;\n  private tokenProvider?: TokenOrProvider;\n  private user?: UserWithId;\n  private isAnonymous?: boolean;\n\n  constructor(secret?: string) {\n    this.secret = secret;\n  }\n\n  /**\n   * Set the static string token or token provider.\n   * Token provider should return a token string or a promise which resolves to string token.\n   *\n   * @param {TokenOrProvider} tokenOrProvider - the token or token provider.\n   * @param {UserResponse} user - the user object.\n   * @param {boolean} isAnonymous - whether the user is anonymous or not.\n   */\n  setTokenOrProvider = async (\n    tokenOrProvider: TokenOrProvider,\n    user: UserWithId,\n    isAnonymous: boolean,\n  ) => {\n    this.user = user;\n    this.isAnonymous = isAnonymous;\n    this.validateToken(tokenOrProvider);\n\n    if (isFunction(tokenOrProvider)) {\n      this.tokenProvider = tokenOrProvider;\n      this.type = 'provider';\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      this.token = tokenOrProvider;\n      this.type = 'static';\n    }\n\n    await this.loadToken();\n  };\n\n  /**\n   * Resets the token manager.\n   * Useful for client disconnection or switching user.\n   */\n  reset = () => {\n    this.token = undefined;\n    this.tokenProvider = undefined;\n    this.type = 'static';\n    this.user = undefined;\n    this.loadTokenPromise = null;\n  };\n\n  // Validates the user token.\n  validateToken = (tokenOrProvider: TokenOrProvider) => {\n    // allow empty token for anon user\n    if (this.user && this.isAnonymous && !tokenOrProvider) return;\n\n    // Don't allow empty token for non-server side client.\n    if (!this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n\n    if (typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {\n      throw new Error('User token should either be a string or a function');\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (this.isAnonymous && tokenOrProvider === '') return;\n\n      const tokenUserId = getUserFromToken(tokenOrProvider);\n      if (\n        tokenOrProvider != null &&\n        (tokenUserId == null ||\n          tokenUserId === '' ||\n          (!this.isAnonymous && tokenUserId !== this.user!.id))\n      ) {\n        throw new Error(\n          'userToken does not have a user_id or is not matching with user.id',\n        );\n      }\n    }\n  };\n\n  // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n  // case a function should wait.\n  tokenReady = () => this.loadTokenPromise;\n\n  // Fetches a token from tokenProvider function and sets in tokenManager.\n  // In case of static token, it will simply resolve to static token.\n  loadToken = () => {\n    this.loadTokenPromise = new Promise(async (resolve, reject) => {\n      if (this.type === 'static') {\n        return resolve(this.token as string);\n      }\n\n      if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n        try {\n          const token = await this.tokenProvider();\n          this.validateToken(token);\n          this.token = token;\n        } catch (e) {\n          return reject(\n            new Error(`Call to tokenProvider failed with message: ${e}`),\n          );\n        }\n        resolve(this.token);\n      }\n    });\n\n    return this.loadTokenPromise;\n  };\n\n  // Returns a current token\n  getToken = () => {\n    if (this.token) {\n      return this.token;\n    }\n\n    if (this.user && !this.token) {\n      return this.token;\n    }\n\n    throw new Error(\n      `User token is not set. Either client.connectUser wasn't called or client.disconnect was called`,\n    );\n  };\n\n  isStatic = () => this.type === 'static';\n}\n","import { getLogger } from '../../logger';\n\nexport const getLocationHint = async (\n  hintUrl = `https://hint.stream-io-video.com/`,\n  timeout = 2000,\n  maxAttempts = 3,\n): Promise<string> => {\n  const logger = getLogger(['location-hint']);\n\n  let attempt = 0;\n  let locationHint = 'ERR';\n  do {\n    const abortController = new AbortController();\n    const timeoutId = setTimeout(() => abortController.abort(), timeout);\n    try {\n      const response = await fetch(hintUrl, {\n        method: 'HEAD',\n        signal: abortController.signal,\n      });\n      const awsPop = response.headers.get('x-amz-cf-pop') || 'ERR';\n      logger('debug', `Location header: ${awsPop}`);\n      locationHint = awsPop.substring(0, 3); // AMS1-P2 -> AMS\n    } catch (e) {\n      logger('warn', `Failed to get location hint from ${hintUrl}`, e);\n      locationHint = 'ERR';\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  } while (locationHint === 'ERR' && ++attempt < maxAttempts);\n\n  return locationHint;\n};\n","import axios, {\n  AxiosError,\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n} from 'axios';\nimport https from 'https';\nimport { StableWSConnection } from './connection';\nimport { TokenManager } from './token_manager';\nimport {\n  addConnectionEventListeners,\n  generateUUIDv4,\n  isErrorResponse,\n  isFunction,\n  KnownCodes,\n  removeConnectionEventListeners,\n  retryInterval,\n  sleep,\n} from './utils';\nimport {\n  AllClientEvents,\n  AllClientEventTypes,\n  APIErrorResponse,\n  ClientEventListener,\n  ConnectAPIResponse,\n  ErrorFromResponse,\n  Logger,\n  StreamClientOptions,\n  StreamVideoEvent,\n  TokenOrProvider,\n  User,\n  UserWithId,\n} from './types';\nimport { getLocationHint } from './location';\nimport {\n  ConnectedEvent,\n  CreateGuestRequest,\n  CreateGuestResponse,\n} from '../../gen/coordinator';\nimport { makeSafePromise, type SafePromise } from '../../helpers/promise';\nimport { getLogLevel } from '../../logger';\n\nexport class StreamClient {\n  _user?: UserWithId;\n  anonymous: boolean;\n  persistUserOnConnectionFailure?: boolean;\n  axiosInstance: AxiosInstance;\n  baseURL?: string;\n  browser: boolean;\n  clientID?: string;\n  key: string;\n  listeners: Partial<\n    Record<AllClientEventTypes, ClientEventListener<any>[] | undefined>\n  > = {};\n  logger: Logger;\n\n  private locationHint: Promise<string> | undefined;\n\n  node: boolean;\n  options: StreamClientOptions;\n  secret?: string;\n  connectUserTask: ConnectAPIResponse | null;\n  tokenManager: TokenManager;\n  user?: UserWithId;\n  private cachedUserAgent?: string;\n  userID?: string;\n  wsBaseURL?: string;\n  wsConnection: StableWSConnection | null;\n  private wsPromiseSafe: SafePromise<ConnectedEvent | undefined> | null;\n  consecutiveFailures: number;\n  defaultWSTimeout: number;\n  resolveConnectionId?: Function;\n  rejectConnectionId?: Function;\n  private connectionIdPromiseSafe?: SafePromise<string | undefined>;\n  guestUserCreatePromise?: Promise<CreateGuestResponse>;\n\n  /**\n   * Initialize a client.\n   *\n   * @param {string} key - the api key\n   * @param {StreamClientOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {string} [options.secret] - the api secret\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   */\n  constructor(key: string, options?: StreamClientOptions) {\n    // set the key\n    this.key = key;\n\n    // set the secret\n    this.secret = options?.secret;\n\n    // set the options... and figure out defaults...\n    const inputOptions = options\n      ? options\n      : ({\n          browser: typeof window !== 'undefined',\n        } as Partial<StreamClientOptions>);\n\n    this.browser = inputOptions.browser || typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    if (this.browser) {\n      this.locationHint = getLocationHint(\n        options?.locationHintUrl,\n        options?.locationHintTimeout,\n        options?.locationHintMaxAttempts,\n      );\n    }\n\n    this.options = {\n      timeout: 5000,\n      withCredentials: false, // making sure cookies are not sent\n      ...inputOptions,\n    };\n\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000,\n      });\n    }\n\n    this.setBaseURL(\n      this.options.baseURL || 'https://video.stream-io-api.com/video',\n    );\n\n    this.axiosInstance = axios.create({\n      ...this.options,\n      baseURL: this.baseURL,\n    });\n\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromiseSafe = null;\n    this.connectUserTask = null;\n\n    // mapping between channel groups and configs\n    this.anonymous = false;\n    this.persistUserOnConnectionFailure =\n      this.options?.persistUserOnConnectionFailure;\n\n    // If it is a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n\n    this.defaultWSTimeout = this.options.defaultWsTimeout ?? 15000;\n\n    this.logger = isFunction(inputOptions.logger)\n      ? inputOptions.logger\n      : () => null;\n  }\n\n  getAuthType = () => {\n    return this.anonymous ? 'anonymous' : 'jwt';\n  };\n\n  setBaseURL = (baseURL: string) => {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL\n      .replace('http', 'ws')\n      .replace(':3030', ':8800');\n  };\n\n  getLocationHint = async (\n    hintUrl?: string,\n    timeout?: number,\n  ): Promise<string> => {\n    const hint = await this.locationHint;\n    if (!hint || hint === 'ERR') {\n      this.locationHint = getLocationHint(\n        hintUrl ?? this.options.locationHintUrl,\n        timeout ?? this.options.locationHintTimeout,\n      );\n      return this.locationHint;\n    }\n    return hint;\n  };\n\n  _getConnectionID = () => this.wsConnection?.connectionID;\n\n  _hasConnectionID = () => Boolean(this._getConnectionID());\n\n  /**\n   * connectUser - Set the current user and open a WebSocket connection\n   *\n   * @param user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} tokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n   */\n  connectUser = async (\n    user: UserWithId,\n    tokenOrProvider: TokenOrProvider,\n  ): ConnectAPIResponse => {\n    if (!user.id) {\n      throw new Error('The \"id\" field on the user is missing');\n    }\n\n    /**\n     * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n     * If the user id remains the same we don't throw error\n     */\n    if (this.userID === user.id && this.connectUserTask) {\n      this.logger(\n        'warn',\n        'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.',\n      );\n      return this.connectUserTask;\n    }\n\n    if (this.userID) {\n      throw new Error(\n        'Use client.disconnect() before trying to connect as a different user. connectUser was called twice.',\n      );\n    }\n\n    if ((this.secret || this.node) && !this.options.allowServerSideConnect) {\n      this.logger(\n        'warn',\n        'Please do not use connectUser server side. Use our @stream-io/node-sdk instead: https://getstream.io/video/docs/api/',\n      );\n    }\n\n    // we generate the client id client side\n    this.userID = user.id;\n    this.anonymous = false;\n    await this.tokenManager.setTokenOrProvider(tokenOrProvider, user, false);\n    this._setUser(user);\n\n    this.connectUserTask = this.openConnection();\n\n    try {\n      addConnectionEventListeners(this.updateNetworkConnectionStatus);\n      return await this.connectUserTask;\n    } catch (err) {\n      if (this.persistUserOnConnectionFailure) {\n        // cleanup client to allow the user to retry connectUser again\n        await this.closeConnection();\n      } else {\n        await this.disconnectUser();\n      }\n      throw err;\n    }\n  };\n\n  _setUser = (user: UserWithId) => {\n    /**\n     * This one is used by the frontend. This is a copy of the current user object stored on backend.\n     * It contains reserved properties and own user properties which are not present in `this._user`.\n     */\n    this.user = user;\n    this.userID = user.id;\n    // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n    this._user = { ...user };\n  };\n\n  /**\n   * Disconnects the websocket connection, without removing the user set on client.\n   * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n   * to call client.openConnection to reconnect to websocket.\n   *\n   * This is mainly useful on mobile side. You can only receive push notifications\n   * if you don't have active websocket connection.\n   * So when your app goes to background, you can call `client.closeConnection`.\n   * And when app comes back to foreground, call `client.openConnection`.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  closeConnection = async (timeout?: number) => {\n    await this.wsConnection?.disconnect(timeout);\n  };\n\n  /**\n   * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n   */\n  openConnection = async () => {\n    if (!this.userID) {\n      throw Error(\n        'UserWithId is not set on client, use client.connectUser or client.connectAnonymousUser instead',\n      );\n    }\n\n    const wsPromise = this.wsPromiseSafe?.();\n    if (this.wsConnection?.isConnecting && wsPromise) {\n      this.logger(\n        'info',\n        'client:openConnection() - connection already in progress',\n      );\n      return await wsPromise;\n    }\n\n    if (this.wsConnection?.isHealthy && this._hasConnectionID()) {\n      this.logger(\n        'info',\n        'client:openConnection() - openConnection called twice, healthy connection already exists',\n      );\n\n      return;\n    }\n\n    this._setupConnectionIdPromise();\n\n    this.clientID = `${this.userID}--${generateUUIDv4()}`;\n    const newWsPromise = this.connect();\n    this.wsPromiseSafe = makeSafePromise(newWsPromise);\n    return await newWsPromise;\n  };\n\n  /**\n   * Disconnects the websocket and removes the user from client.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = async (timeout?: number) => {\n    this.logger('info', 'client:disconnect() - Disconnecting the client');\n\n    // remove the user specific fields\n    delete this.user;\n    delete this._user;\n    delete this.userID;\n\n    this.anonymous = false;\n\n    await this.closeConnection(timeout);\n    removeConnectionEventListeners(this.updateNetworkConnectionStatus);\n\n    this.tokenManager.reset();\n\n    this.connectionIdPromiseSafe = undefined;\n    this.rejectConnectionId = undefined;\n    this.resolveConnectionId = undefined;\n  };\n\n  connectGuestUser = async (user: User & { type: 'guest' }) => {\n    this.guestUserCreatePromise = this.doAxiosRequest<\n      CreateGuestResponse,\n      CreateGuestRequest\n    >('post', '/guest', { user }, { publicEndpoint: true });\n\n    const response = await this.guestUserCreatePromise;\n    this.guestUserCreatePromise.finally(\n      () => (this.guestUserCreatePromise = undefined),\n    );\n\n    return this.connectUser(response.user, response.access_token);\n  };\n\n  /**\n   * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n   */\n  connectAnonymousUser = async (\n    user: UserWithId,\n    tokenOrProvider: TokenOrProvider,\n  ) => {\n    addConnectionEventListeners(this.updateNetworkConnectionStatus);\n    this._setupConnectionIdPromise();\n\n    this.anonymous = true;\n    await this.tokenManager.setTokenOrProvider(tokenOrProvider, user, true);\n\n    this._setUser(user);\n    // some endpoints require a connection_id to be resolved.\n    // as anonymous users aren't allowed to open WS connections, we just\n    // resolve the connection_id here.\n    this.resolveConnectionId?.();\n  };\n\n  /**\n   * on - Listen to events on all channels and users your watching\n   *\n   * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   *\n   * @param eventName The event type to listen for (optional)\n   * @param callback The callback to call\n   *\n   * @return  Returns a function which, when called, unsubscribes the event handler.\n   */\n  on = <E extends keyof AllClientEvents>(\n    eventName: E,\n    callback: ClientEventListener<E>,\n  ) => {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n\n    this.logger('debug', `Adding listener for ${eventName} event`);\n    this.listeners[eventName]?.push(callback as ClientEventListener<any>);\n    return () => {\n      this.off(eventName, callback);\n    };\n  };\n\n  /**\n   * off - Remove the event handler\n   */\n  off = <E extends keyof AllClientEvents>(\n    eventName: E,\n    callback: ClientEventListener<E>,\n  ) => {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n\n    this.logger('debug', `Removing listener for ${eventName} event`);\n    this.listeners[eventName] = this.listeners[eventName]?.filter(\n      (value) => value !== callback,\n    );\n  };\n\n  /**\n   * sets up the this.connectionIdPromise\n   */\n  _setupConnectionIdPromise = () => {\n    /** a promise that is resolved once connection id is set */\n    this.connectionIdPromiseSafe = makeSafePromise(\n      new Promise<string | undefined>((resolve, reject) => {\n        this.resolveConnectionId = resolve;\n        this.rejectConnectionId = reject;\n      }),\n    );\n  };\n\n  get connectionIdPromise() {\n    return this.connectionIdPromiseSafe?.();\n  }\n\n  get isConnectionIsPromisePending() {\n    return this.connectionIdPromiseSafe?.checkPending() ?? false;\n  }\n\n  get wsPromise() {\n    return this.wsPromiseSafe?.();\n  }\n\n  _logApiRequest = (\n    type: string,\n    url: string,\n    data: unknown,\n    config: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    },\n  ) => {\n    if (getLogLevel() !== 'trace') return;\n    this.logger('trace', `client: ${type} - Request - ${url}`, {\n      payload: data,\n      config,\n    });\n  };\n\n  _logApiResponse = <T>(\n    type: string,\n    url: string,\n    response: AxiosResponse<T>,\n  ) => {\n    if (getLogLevel() !== 'trace') return;\n    this.logger(\n      'trace',\n      `client:${type} - Response - url: ${url} > status ${response.status}`,\n      {\n        response,\n      },\n    );\n  };\n\n  _logApiError = (type: string, url: string, error: unknown) => {\n    this.logger('error', `client:${type} - Error - url: ${url}`, {\n      url,\n      error,\n    });\n  };\n\n  doAxiosRequest = async <T, D = unknown>(\n    type: string,\n    url: string,\n    data?: D,\n    options: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    } & { publicEndpoint?: boolean } = {},\n  ): Promise<T> => {\n    if (!options.publicEndpoint) {\n      await Promise.all([\n        this.tokenManager.tokenReady(),\n        this.guestUserCreatePromise,\n      ]);\n      // we need to wait for presence of connection id before making requests\n      try {\n        await this.connectionIdPromise;\n      } catch {\n        // in case connection id was rejected\n        // reconnection maybe in progress\n        // we can wait for healthy connection to resolve, which rejects when 15s timeout is reached\n        await this.wsConnection?._waitForHealthy();\n        await this.connectionIdPromise;\n      }\n    }\n    const requestConfig = this._enrichAxiosOptions(options);\n    try {\n      let response: AxiosResponse<T>;\n      this._logApiRequest(type, url, data, requestConfig);\n      switch (type) {\n        case 'get':\n          response = await this.axiosInstance.get(url, requestConfig);\n          break;\n        case 'delete':\n          response = await this.axiosInstance.delete(url, requestConfig);\n          break;\n        case 'post':\n          response = await this.axiosInstance.post(url, data, requestConfig);\n          break;\n        case 'put':\n          response = await this.axiosInstance.put(url, data, requestConfig);\n          break;\n        case 'patch':\n          response = await this.axiosInstance.patch(url, data, requestConfig);\n          break;\n        case 'options':\n          response = await this.axiosInstance.options(url, requestConfig);\n          break;\n        default:\n          throw new Error('Invalid request type');\n      }\n      this._logApiResponse<T>(type, url, response);\n      this.consecutiveFailures = 0;\n      return this.handleResponse(response);\n    } catch (e: any /**TODO: generalize error types  */) {\n      e.client_request_id = requestConfig.headers?.['x-client-request-id'];\n      this.consecutiveFailures += 1;\n      if (e.response) {\n        this._logApiError(type, url, e.response);\n        /** connection_fallback depends on this token expiration logic */\n        if (\n          e.response.data.code === KnownCodes.TOKEN_EXPIRED &&\n          !this.tokenManager.isStatic()\n        ) {\n          if (this.consecutiveFailures > 1) {\n            await sleep(retryInterval(this.consecutiveFailures));\n          }\n          await this.tokenManager.loadToken();\n          return await this.doAxiosRequest<T, D>(type, url, data, options);\n        }\n        return this.handleResponse(e.response);\n      } else {\n        this._logApiError(type, url, e);\n\n        throw e as AxiosError<APIErrorResponse>;\n      }\n    }\n  };\n\n  get = <T>(url: string, params?: AxiosRequestConfig['params']) => {\n    return this.doAxiosRequest<T, unknown>('get', url, null, {\n      params,\n    });\n  };\n\n  put = <T, D = unknown>(\n    url: string,\n    data?: D,\n    params?: AxiosRequestConfig['params'],\n  ) => {\n    return this.doAxiosRequest<T, D>('put', url, data, { params });\n  };\n\n  post = <T, D = unknown>(\n    url: string,\n    data?: D,\n    params?: AxiosRequestConfig['params'],\n  ) => {\n    return this.doAxiosRequest<T, D>('post', url, data, { params });\n  };\n\n  patch = <T, D = unknown>(\n    url: string,\n    data?: D,\n    params?: AxiosRequestConfig['params'],\n  ) => {\n    return this.doAxiosRequest<T, D>('patch', url, data, { params });\n  };\n\n  delete = <T>(url: string, params?: AxiosRequestConfig['params']) => {\n    return this.doAxiosRequest<T, unknown>('delete', url, null, {\n      params,\n    });\n  };\n\n  errorFromResponse = (\n    response: AxiosResponse<APIErrorResponse>,\n  ): ErrorFromResponse<APIErrorResponse> => {\n    const { data, status } = response;\n    const err = new ErrorFromResponse<APIErrorResponse>();\n    err.message = `Stream error code ${data.code}: ${data.message}`;\n    err.code = data.code;\n    err.unrecoverable = data.unrecoverable;\n    err.response = response;\n    err.status = status;\n    return err;\n  };\n\n  handleResponse = <T>(response: AxiosResponse<T>) => {\n    const data = response.data;\n    if (isErrorResponse(response)) {\n      throw this.errorFromResponse(response);\n    }\n    return data;\n  };\n\n  dispatchEvent = (event: StreamVideoEvent) => {\n    this.logger('debug', `Dispatching event: ${event.type}`, event);\n    if (!this.listeners) return;\n\n    // call generic listeners\n    for (const listener of this.listeners.all || []) {\n      listener(event);\n    }\n\n    // call type specific listeners\n    for (const listener of this.listeners[event.type] || []) {\n      listener(event);\n    }\n  };\n\n  /**\n   * @private\n   */\n  connect = async () => {\n    if (!this.userID || !this._user) {\n      throw Error(\n        'Call connectUser or connectAnonymousUser before starting the connection',\n      );\n    }\n    if (!this.wsBaseURL) throw Error('Websocket base url not set');\n    if (!this.clientID) throw Error('clientID is not set');\n\n    // The StableWSConnection handles all the reconnection logic.\n    this.wsConnection = new StableWSConnection(this);\n\n    this.logger('info', 'StreamClient.connect: this.wsConnection.connect()');\n    return await this.wsConnection.connect(this.defaultWSTimeout);\n  };\n\n  getUserAgent = (): string => {\n    if (!this.cachedUserAgent) {\n      const { clientAppIdentifier = {} } = this.options;\n      const {\n        sdkName = 'js',\n        sdkVersion = process.env.PKG_VERSION || '0.0.0',\n        ...extras\n      } = clientAppIdentifier;\n\n      this.cachedUserAgent = [\n        `stream-video-${sdkName}-v${sdkVersion}`,\n        ...Object.entries(extras).map(([key, value]) => `${key}=${value}`),\n        `client_bundle=${process.env.CLIENT_BUNDLE || (this.node ? 'node' : 'browser')}`,\n      ].join('|');\n    }\n\n    return this.cachedUserAgent;\n  };\n\n  _enrichAxiosOptions = (\n    options: AxiosRequestConfig & { config?: AxiosRequestConfig } & {\n      publicEndpoint?: boolean;\n    } = {\n      params: {},\n      headers: {},\n      config: {},\n    },\n  ): AxiosRequestConfig => {\n    const token =\n      options.publicEndpoint && !this.user ? undefined : this._getToken();\n    const authorization = token ? { Authorization: token } : undefined;\n\n    if (!options.headers?.['x-client-request-id']) {\n      options.headers = {\n        ...options.headers,\n        'x-client-request-id': generateUUIDv4(),\n      };\n    }\n\n    return {\n      params: {\n        user_id: this.userID,\n        connection_id: this._getConnectionID(),\n        api_key: this.key,\n        ...options.params,\n      },\n      headers: {\n        ...authorization,\n        'stream-auth-type':\n          options.publicEndpoint && !this.user\n            ? 'anonymous'\n            : this.getAuthType(),\n        'X-Stream-Client': this.getUserAgent(),\n        ...options.headers,\n      },\n      ...options.config,\n      ...this.options.axiosRequestConfig,\n    };\n  };\n\n  _getToken = () => {\n    if (!this.tokenManager) return null;\n\n    return this.tokenManager.getToken();\n  };\n\n  updateNetworkConnectionStatus = (\n    event: { type: 'online' | 'offline' } | Event,\n  ) => {\n    if (event.type === 'offline') {\n      this.logger('debug', 'device went offline');\n      this.dispatchEvent({ type: 'network.changed', online: false });\n    } else if (event.type === 'online') {\n      this.logger('debug', 'device went online');\n      this.dispatchEvent({ type: 'network.changed', online: true });\n    }\n  };\n}\n","import type {\n  ClientAppIdentifier,\n  StreamClientOptions,\n  TokenOrProvider,\n  User,\n} from '../coordinator/connection/types';\nimport { getLogger } from '../logger';\nimport { StreamClient } from '../coordinator/connection/client';\nimport { getSdkInfo } from './client-details';\nimport { SdkType } from '../gen/video/sfu/models/models';\nimport type { StreamVideoClientOptions } from '../StreamVideoClient';\n\n/**\n * Utility function to get the instance key.\n */\nexport const getInstanceKey = (apiKey: string, user: User) => {\n  return `${apiKey}/${user.id}`;\n};\n\n/**\n * Utility function to get the client app identifier.\n */\nconst getClientAppIdentifier = (\n  options?: StreamClientOptions,\n): ClientAppIdentifier => {\n  const appId = options?.clientAppIdentifier || {};\n  const sdkInfo = getSdkInfo();\n  if (sdkInfo) {\n    // ensure the sdk name and version are set correctly,\n    // overriding any user-provided values\n    appId.sdkName = SdkType[sdkInfo.type].toLowerCase();\n    appId.sdkVersion = `${sdkInfo.major}.${sdkInfo.minor}.${sdkInfo.patch}`;\n  }\n  return appId;\n};\n\n/**\n * Creates a coordinator client.\n */\nexport const createCoordinatorClient = (\n  apiKey: string,\n  options: StreamClientOptions | undefined,\n) => {\n  const clientAppIdentifier = getClientAppIdentifier(options);\n  const coordinatorLogger = getLogger(['coordinator']);\n  return new StreamClient(apiKey, {\n    persistUserOnConnectionFailure: true,\n    ...options,\n    clientAppIdentifier,\n    logger: coordinatorLogger,\n  });\n};\n\n/**\n * Creates a token provider and allows integrators to provide\n * a static token and a token provider at the same time.\n *\n * When both of them are provided, this function will create an internal\n * token provider that will use the static token on the first invocation\n * and the token provider on the later invocations.\n */\nexport const createTokenOrProvider = (\n  options: StreamVideoClientOptions,\n): TokenOrProvider => {\n  const { token, tokenProvider } = options;\n  if (token && tokenProvider) {\n    let initialTokenUsed = false;\n    return async function wrappedTokenProvider(): Promise<string> {\n      if (!initialTokenUsed) {\n        initialTokenUsed = true;\n        return token;\n      }\n      return tokenProvider();\n    };\n  }\n  return token || tokenProvider;\n};\n","import { Call } from './Call';\nimport { StreamClient } from './coordinator/connection/client';\nimport {\n  StreamVideoReadOnlyStateStore,\n  StreamVideoWriteableStateStore,\n} from './store';\nimport type {\n  ConnectedEvent,\n  CreateDeviceRequest,\n  CreateGuestRequest,\n  CreateGuestResponse,\n  GetEdgesResponse,\n  ListDevicesResponse,\n  QueryAggregateCallStatsRequest,\n  QueryAggregateCallStatsResponse,\n  QueryCallsRequest,\n  QueryCallsResponse,\n  QueryCallStatsRequest,\n  QueryCallStatsResponse,\n} from './gen/coordinator';\nimport {\n  AllClientEvents,\n  ClientEventListener,\n  Logger,\n  StreamClientOptions,\n  TokenOrProvider,\n  TokenProvider,\n  User,\n  UserWithId,\n} from './coordinator/connection/types';\nimport { retryInterval, sleep } from './coordinator/connection/utils';\nimport {\n  createCoordinatorClient,\n  createTokenOrProvider,\n  getInstanceKey,\n} from './helpers/clientUtils';\nimport { getLogger, logToConsole, setLogger } from './logger';\nimport { withoutConcurrency } from './helpers/concurrency';\nimport { enableTimerWorker } from './timers';\n\nexport type StreamVideoClientOptions = {\n  apiKey: string;\n  options?: StreamClientOptions;\n  user?: User;\n  token?: string;\n  tokenProvider?: TokenProvider;\n};\n\n/**\n * A `StreamVideoClient` instance lets you communicate with our API, and authenticate users.\n */\nexport class StreamVideoClient {\n  /**\n   * A reactive store that exposes all the state variables reactively.\n   * You can subscribe to changes of the different state variables.\n   * Our library is built in a way that all state changes are exposed in this store,\n   * o all UI changes in your application should be handled by subscribing to these variables.\n   *\n   * @deprecated use the `client.state` getter.\n   */\n  readonly readOnlyStateStore: StreamVideoReadOnlyStateStore;\n  readonly logger: Logger;\n\n  protected readonly writeableStateStore: StreamVideoWriteableStateStore;\n  streamClient: StreamClient;\n\n  private effectsRegistered = false;\n  private eventHandlersToUnregister: Array<() => void> = [];\n  private readonly connectionConcurrencyTag = Symbol(\n    'connectionConcurrencyTag',\n  );\n\n  private static _instances = new Map<string, StreamVideoClient>();\n\n  /**\n   * You should create only one instance of `StreamVideoClient`.\n   */\n  constructor(apiKey: string, opts?: StreamClientOptions);\n  constructor(args: StreamVideoClientOptions);\n  constructor(\n    apiKeyOrArgs: string | StreamVideoClientOptions,\n    opts?: StreamClientOptions,\n  ) {\n    const apiKey =\n      typeof apiKeyOrArgs === 'string' ? apiKeyOrArgs : apiKeyOrArgs.apiKey;\n    const clientOptions =\n      typeof apiKeyOrArgs === 'string' ? opts : apiKeyOrArgs.options;\n\n    if (clientOptions?.enableTimerWorker) enableTimerWorker();\n\n    const rootLogger = clientOptions?.logger || logToConsole;\n    setLogger(rootLogger, clientOptions?.logLevel || 'warn');\n\n    this.logger = getLogger(['client']);\n\n    this.streamClient = createCoordinatorClient(apiKey, clientOptions);\n\n    this.writeableStateStore = new StreamVideoWriteableStateStore();\n    this.readOnlyStateStore = new StreamVideoReadOnlyStateStore(\n      this.writeableStateStore,\n    );\n\n    if (typeof apiKeyOrArgs !== 'string' && apiKeyOrArgs.user) {\n      const user = apiKeyOrArgs.user;\n      if (user.type === 'anonymous') user.id = '!anon';\n      if (user.id) this.registerClientInstance(apiKey, user);\n\n      const tokenOrProvider = createTokenOrProvider(apiKeyOrArgs);\n      this.connectUser(user, tokenOrProvider).catch((err) => {\n        this.logger('error', 'Failed to connect', err);\n      });\n    }\n  }\n\n  /**\n   * Gets or creates a StreamVideoClient instance based on the given options.\n   */\n  static getOrCreateInstance(\n    args: StreamVideoClientOptions & { user: User },\n  ): StreamVideoClient {\n    const { apiKey, user, token, tokenProvider } = args;\n    if (!user.id && user.type !== 'anonymous') {\n      throw new Error('user.id is required for a non-anonymous user');\n    }\n\n    if (\n      !token &&\n      !tokenProvider &&\n      user.type !== 'anonymous' &&\n      user.type !== 'guest'\n    ) {\n      throw new Error(\n        'tokenProvider or token is required for a authenticated users',\n      );\n    }\n\n    return (\n      StreamVideoClient._instances.get(getInstanceKey(apiKey, user)) ||\n      new StreamVideoClient(args)\n    );\n  }\n\n  private registerClientInstance = (apiKey: string, user: User) => {\n    const instanceKey = getInstanceKey(apiKey, user);\n    if (StreamVideoClient._instances.has(instanceKey)) {\n      this.logger(\n        'warn',\n        `A StreamVideoClient already exists for ${user.id}; Prefer using getOrCreateInstance method`,\n      );\n    }\n    StreamVideoClient._instances.set(instanceKey, this);\n  };\n\n  /**\n   * Return the reactive state store, use this if you want to be notified about changes to the client state\n   */\n  get state() {\n    return this.readOnlyStateStore;\n  }\n\n  private registerEffects = () => {\n    if (this.effectsRegistered) return;\n\n    this.eventHandlersToUnregister.push(\n      this.on('connection.changed', (event) => {\n        if (!event.online) return;\n\n        const callsToReWatch = this.writeableStateStore.calls\n          .filter((call) => call.watching)\n          .map((call) => call.cid);\n        if (callsToReWatch.length <= 0) return;\n\n        this.logger('info', `Rewatching calls ${callsToReWatch.join(', ')}`);\n        this.queryCalls({\n          watch: true,\n          filter_conditions: { cid: { $in: callsToReWatch } },\n          sort: [{ field: 'cid', direction: 1 }],\n        }).catch((err) => {\n          this.logger('error', 'Failed to re-watch calls', err);\n        });\n      }),\n    );\n\n    this.eventHandlersToUnregister.push(\n      this.on('call.created', (event) => {\n        const { call, members } = event;\n        if (this.state.connectedUser?.id === call.created_by.id) {\n          this.logger(\n            'warn',\n            'Received `call.created` sent by the current user',\n          );\n          return;\n        }\n        this.logger('info', `New call created and registered: ${call.cid}`);\n        const newCall = new Call({\n          streamClient: this.streamClient,\n          type: call.type,\n          id: call.id,\n          members,\n          clientStore: this.writeableStateStore,\n        });\n        newCall.state.updateFromCallResponse(call);\n        this.writeableStateStore.registerCall(newCall);\n      }),\n    );\n\n    this.eventHandlersToUnregister.push(\n      this.on('call.ring', async (event) => {\n        const { call, members } = event;\n        if (this.state.connectedUser?.id === call.created_by.id) {\n          this.logger(\n            'debug',\n            'Received `call.ring` sent by the current user so ignoring the event',\n          );\n          return;\n        }\n        // if `call.created` was received before `call.ring`.\n        // the client already has the call instance and we just need to update the state\n        const theCall = this.writeableStateStore.findCall(call.type, call.id);\n        if (theCall) {\n          await theCall.updateFromRingingEvent(event);\n        } else {\n          // if client doesn't have the call instance, create the instance and fetch the latest state\n          // Note: related - we also have onRingingCall method to handle this case from push notifications\n          const newCallInstance = new Call({\n            streamClient: this.streamClient,\n            type: call.type,\n            id: call.id,\n            members,\n            clientStore: this.writeableStateStore,\n            ringing: true,\n          });\n          await newCallInstance.get();\n        }\n      }),\n    );\n\n    this.effectsRegistered = true;\n  };\n\n  /**\n   * Connects the given user to the client.\n   * Only one user can connect at a time, if you want to change users, call `disconnectUser` before connecting a new user.\n   * If the connection is successful, the connected user [state variable](#readonlystatestore) will be updated accordingly.\n   *\n   * @param user the user to connect.\n   * @param tokenOrProvider a token or a function that returns a token.\n   */\n  connectUser = async (\n    user: User,\n    tokenOrProvider?: TokenOrProvider,\n  ): Promise<void | ConnectedEvent> => {\n    if (user.type === 'anonymous') {\n      user.id = '!anon';\n      return this.connectAnonymousUser(user as UserWithId, tokenOrProvider);\n    }\n\n    const connectUserResponse = await withoutConcurrency(\n      this.connectionConcurrencyTag,\n      async () => {\n        const client = this.streamClient;\n        const { onConnectUserError, persistUserOnConnectionFailure } =\n          client.options;\n        let { maxConnectUserRetries = 5 } = client.options;\n        maxConnectUserRetries = Math.max(maxConnectUserRetries, 1);\n\n        const errorQueue: Error[] = [];\n        for (let attempt = 0; attempt < maxConnectUserRetries; attempt++) {\n          try {\n            this.logger('trace', `Connecting user (${attempt})`, user);\n            return user.type === 'guest'\n              ? await client.connectGuestUser(user)\n              : await client.connectUser(user, tokenOrProvider);\n          } catch (err) {\n            this.logger('warn', `Failed to connect a user (${attempt})`, err);\n            errorQueue.push(err as Error);\n            if (attempt === maxConnectUserRetries - 1) {\n              onConnectUserError?.(err as Error, errorQueue);\n              throw err;\n            }\n\n            // we need to force to disconnect the user if the client is\n            // configured to persist the user on connection failure\n            if (persistUserOnConnectionFailure) {\n              await client.disconnectUser();\n            }\n\n            await sleep(retryInterval(attempt));\n          }\n        }\n      },\n    );\n\n    // connectUserResponse will be void if connectUser called twice for the same user\n    if (connectUserResponse?.me) {\n      this.writeableStateStore.setConnectedUser(connectUserResponse.me);\n    }\n\n    this.registerEffects();\n\n    return connectUserResponse;\n  };\n\n  /**\n   * Disconnects the currently connected user from the client.\n   *\n   * If the connection is successfully disconnected, the connected user [state variable](#readonlystatestore) will be updated accordingly\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = async (timeout?: number) => {\n    await withoutConcurrency(this.connectionConcurrencyTag, async () => {\n      const { user, key } = this.streamClient;\n      if (!user) return;\n\n      await this.streamClient.disconnectUser(timeout);\n\n      if (user.id) {\n        StreamVideoClient._instances.delete(getInstanceKey(key, user));\n      }\n      this.eventHandlersToUnregister.forEach((unregister) => unregister());\n      this.eventHandlersToUnregister = [];\n      this.effectsRegistered = false;\n      this.writeableStateStore.setConnectedUser(undefined);\n    });\n  };\n\n  /**\n   * You can subscribe to WebSocket events provided by the API.\n   * To remove a subscription, call the `off` method or, execute the returned unsubscribe function.\n   * Please note that subscribing to WebSocket events is an advanced use-case, for most use-cases it should be enough to watch for changes in the reactive [state store](#readonlystatestore).\n   *\n   * @param eventName the event name or 'all'.\n   * @param callback the callback which will be called when the event is emitted.\n   * @returns an unsubscribe function.\n   */\n  on = <E extends keyof AllClientEvents>(\n    eventName: E,\n    callback: ClientEventListener<E>,\n  ) => {\n    return this.streamClient.on(eventName, callback);\n  };\n\n  /**\n   * Remove subscription for WebSocket events that were created by the `on` method.\n   *\n   * @param eventName the event name.\n   * @param callback the callback which was passed to the `on` method.\n   */\n  off = <E extends keyof AllClientEvents>(\n    eventName: E,\n    callback: ClientEventListener<E>,\n  ) => {\n    return this.streamClient.off(eventName, callback);\n  };\n\n  /**\n   * Creates a new call.\n   *\n   * @param type the type of the call.\n   * @param id the id of the call.\n   */\n  call = (type: string, id: string) => {\n    return new Call({\n      streamClient: this.streamClient,\n      id: id,\n      type: type,\n      clientStore: this.writeableStateStore,\n    });\n  };\n\n  /**\n   * Creates a new guest user with the given data.\n   *\n   * @param data the data for the guest user.\n   */\n  createGuestUser = async (data: CreateGuestRequest) => {\n    return this.streamClient.doAxiosRequest<\n      CreateGuestResponse,\n      CreateGuestRequest\n    >('post', '/guest', data, { publicEndpoint: true });\n  };\n\n  /**\n   * Will query the API for calls matching the given filters.\n   *\n   * @param data the query data.\n   */\n  queryCalls = async (data: QueryCallsRequest = {}) => {\n    const response = await this.streamClient.post<\n      QueryCallsResponse,\n      QueryCallsRequest\n    >('/calls', data);\n    const calls = [];\n    for (const c of response.calls) {\n      const call = new Call({\n        streamClient: this.streamClient,\n        id: c.call.id,\n        type: c.call.type,\n        members: c.members,\n        ownCapabilities: c.own_capabilities,\n        watching: data.watch,\n        clientStore: this.writeableStateStore,\n      });\n      call.state.updateFromCallResponse(c.call);\n      await call.applyDeviceConfig(c.call.settings, false);\n      if (data.watch) {\n        await call.setup();\n        this.writeableStateStore.registerCall(call);\n      }\n      calls.push(call);\n    }\n    return {\n      ...response,\n      calls: calls,\n    };\n  };\n\n  /**\n   * Retrieve the list of available call statistics reports matching a particular condition.\n   *\n   * @param data Filter and sort conditions for retrieving available call report summaries.\n   * @returns List with summary of available call reports matching the condition.\n   */\n  queryCallStats = async (data: QueryCallStatsRequest = {}) => {\n    return this.streamClient.post<\n      QueryCallStatsResponse,\n      QueryCallStatsRequest\n    >(`/call/stats`, data);\n  };\n\n  /**\n   * Retrieve the list of available reports aggregated from the call stats.\n   *\n   * @param data Specify filter conditions like from and to (within last 30 days) and the report types\n   * @returns Requested reports with (mostly) raw daily data for each report type requested\n   */\n  queryAggregateCallStats = async (\n    data: QueryAggregateCallStatsRequest = {},\n  ) => {\n    return this.streamClient.post<\n      QueryAggregateCallStatsResponse,\n      QueryAggregateCallStatsRequest\n    >(`/stats`, data);\n  };\n\n  /**\n   * Returns a list of available data centers available for hosting calls.\n   */\n  edges = async () => {\n    return this.streamClient.get<GetEdgesResponse>(`/edges`);\n  };\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {string} push_provider the push provider name (eg. apn, firebase)\n   * @param {string} push_provider_name user provided push provider name\n   * @param {string} [userID] the user id (defaults to current user)\n   * @param {boolean} [voip_token] enables use of VoIP token for push notifications on iOS platform\n   */\n  addDevice = async (\n    id: string,\n    push_provider: string,\n    push_provider_name?: string,\n    userID?: string,\n    voip_token?: boolean,\n  ) => {\n    return await this.streamClient.post<CreateDeviceRequest>('/devices', {\n      id,\n      push_provider,\n      voip_token,\n      ...(userID != null ? { user_id: userID } : {}),\n      ...(push_provider_name != null ? { push_provider_name } : {}),\n    });\n  };\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {string} push_provider the push provider name (eg. apn, firebase)\n   * @param {string} push_provider_name user provided push provider name\n   * @param {string} [userID] the user id (defaults to current user)\n   */\n  addVoipDevice = async (\n    id: string,\n    push_provider: string,\n    push_provider_name: string,\n    userID?: string,\n  ) => {\n    return await this.addDevice(\n      id,\n      push_provider,\n      push_provider_name,\n      userID,\n      true,\n    );\n  };\n\n  /**\n   * getDevices - Returns the devices associated with a current user\n   * @param {string} [userID] User ID. Only works on serverside\n   */\n  getDevices = async (userID?: string) => {\n    return await this.streamClient.get<ListDevicesResponse>(\n      '/devices',\n      userID ? { user_id: userID } : {},\n    );\n  };\n\n  /**\n   * removeDevice - Removes the device with the given id.\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   */\n  removeDevice = async (id: string, userID?: string) => {\n    return await this.streamClient.delete('/devices', {\n      id,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  };\n\n  /**\n   * A callback that can be used to create ringing calls from push notifications. If the call already exists, it will do nothing.\n   * @param call_cid\n   * @returns\n   */\n  onRingingCall = async (call_cid: string) => {\n    // if we find the call and is already ringing, we don't need to create a new call\n    // as client would have received the call.ring state because the app had WS alive when receiving push notifications\n    let call = this.state.calls.find((c) => c.cid === call_cid && c.ringing);\n    if (!call) {\n      // if not it means that WS is not alive when receiving the push notifications and we need to fetch the call\n      const [callType, callId] = call_cid.split(':');\n      call = new Call({\n        streamClient: this.streamClient,\n        type: callType,\n        id: callId,\n        clientStore: this.writeableStateStore,\n        ringing: true,\n      });\n      await call.get();\n    }\n\n    return call;\n  };\n\n  /**\n   * Connects the given anonymous user to the client.\n   *\n   * @param user the user to connect.\n   * @param tokenOrProvider a token or a function that returns a token.\n   */\n  private connectAnonymousUser = async (\n    user: UserWithId,\n    tokenOrProvider: TokenOrProvider,\n  ) => {\n    return withoutConcurrency(this.connectionConcurrencyTag, () =>\n      this.streamClient.connectAnonymousUser(user, tokenOrProvider),\n    );\n  };\n}\n"],"names":["MessageType","isJsonObject","typeofJsonValue","PbLong","CallState","ICETrickle","ICETrickle$Type","Error","Error$Type","Call","ServiceType","ICETrickle$","Error$","VisibilityState","DebounceType","stackIntercept","TwirpFetchTransport","RpcError","TwirpErrorCode","ReplaySubject","combineLatest","CallingState","BehaviorSubject","RxUtils.setCurrentValue","RxUtils.getCurrentValue","RxUtils.updateValue","map","shareReplay","distinctUntilChanged","UAParser","mediaStatsTracer","parse","takeWhile","distinctUntilKeyChanged","fromEventPattern","from","fromEvent","debounceTime","merge","startWith","concatMap","pairwise","of"],"mappings":"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"}